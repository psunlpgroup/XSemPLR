[
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener un dictionario `result` con las llaves `keys` y los valores `val` de un diccionario `dic`?"
    },
    "mr": {
      "python": "result = defaultdict(list)\nfor d in dic.values():\n    for k,v in d.items():\n        result[k].append(v)"
    },
    "question_id": 54979
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo agrupar los elementos de una tabla en una base de datos `data` por usuario y con el total de veces que el usuario ha hecho un registro?"
    },
    "mr": {
      "python": "def indexOn( data):\n    inx= defaultdict(list)\n    for t in data:\n            inx[t[0]].append(t)\n    return inx\n\nsortData = indexOn(data)\n\nfor key in sortData: \n    series.append({\n        'name': key,\n        'data': sortData[key].__len__()\n    })\n"
    },
    "question_id": 7699
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar el m\u00e1ximo de una funci\u00f3n `y` que depende de `x`?"
    },
    "mr": {
      "python": "x = symbols('x')\ny = -(x-0.4)**2+10\ndy = diff(y)\nprint(dy)\nsol = solve(dy)\nprint(sol)"
    },
    "question_id": 39675
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un diccionario con funciones `fun1`, `fun2`, `fun3`?"
    },
    "mr": {
      "python": "operaciones = { \n'1': fun1, \n'2': fun2, \n'3': fun3,\n}"
    },
    "question_id": 64006
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo agregar la suma de todos los elementos de un modelo `transacciones` en el admin de Django?"
    },
    "mr": {
      "python": "class TransaccionesAdmin(admin.ModelAdmin):\n\n    def changelist_view(self, request, extra_context=None):\n        total = Transacciones.objects.aggregate(total=Sum('monto'))['total']\n        context = {\n            'total': total,\n        }\n        return super(TransaccionesAdmin, self).changelist_view(request, extra_context=context)\n\nadmin.site.register(Transacciones, TransaccionesAdmin)"
    },
    "question_id": 3285
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una vista `editarempleado` que edite los datos de una instancia del modelo `Empleado`?"
    },
    "mr": {
      "python": "def editarempleado (request, id_empleado):\n  p = Empleados.objects.get(pk=id_empleado)\n  if request.method == \"POST\":\n     form = EmpleadoForm(request.POST,instance=p)\n     if form.is_valid():\n        p.nombre_empleado = request.POST['nuevo_nombre']\n        p.apellido_empleado = request.POST['nuevo_apellid'] \n        p.save()\n        return redirect ('empleados')\n     else : \n        form = EmpleadoForm(instance=p)\n        ctx = {'formulario' : form}\n        return render_to_response('empleados/editar.html', ctx, context_instance=RequestContext(request)) #esto lo pongo porque si el formulario no es valido tiene que devolver el error (estoy repitiendo mucho codigo arreglalo)\n else:\n    form = EmpleadoForm(instance=p) \n\n ctx = {'formulario' : form}\n\n return render_to_response('empleados/editar.html', ctx, context_instance=RequestContext(request))"
    },
    "question_id": 23831
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo subir archivos a una carpeta local ubicada en `ruta` despu\u00e9s de abrirlo?"
    },
    "mr": {
      "python": "\"def abrir(self):\n    with open(file, 'rb') as fsrc:\n        a = fsrc.read()\n    shutil.copyfile(file, ruta)"
    },
    "question_id": 19921
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo concatenar dos variables `a` y `b` en un template de Django?"
    },
    "mr": {
      "python": "{{ a|add:b }}"
    },
    "question_id": 2657
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo capturar el par\u00e1metro `par` enviado por el m\u00e9todo GET?"
    },
    "mr": {
      "python": "request.GET.get(par)"
    },
    "question_id": 10366
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo duplicar los elementos de una lista `list` excluyendo los extremos?"
    },
    "mr": {
      "python": "list(sum(zip(list, list[1:]), ()))"
    },
    "question_id": 25024
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo listar todos los archivos y carpetas de una carpeta a partir de una ruta `ruta`?"
    },
    "mr": {
      "python": "def ls(ruta):\n    listaarchivos = []\n    for (_, _, archivos) in walk(ruta):\n        listaarchivos.extend(archivos)\nreturn listaarchivos"
    },
    "question_id": 37821
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo contar las llamadas totales al m\u00e9todo de una clase `C`?"
    },
    "mr": {
      "python": "Class C:\n    def _incrementa_contador_renombres(cls):\n        cls.total_renombres += 1"
    },
    "question_id": 774
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo contar las llamadas totales al m\u00e9todo de una clase `C`?"
    },
    "mr": {
      "python": "class NaveEspacial:\n    llamadas_totales = 0"
    },
    "question_id": 774
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo rotar una imagen `img` en un \u00e1ngulo de `x` grados en Tkinter?"
    },
    "mr": {
      "python": "im = Image.open(img)\nim.rotate(x).show()"
    },
    "question_id": 38658
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener el timeline de un usuario `user` en twitter con tweepy?"
    },
    "mr": {
      "python": "CONSUMER_SECRET = environ['CONSUMER_SECRET']\nACCESS_TOKEN = environ['ACCESS_TOKEN']\nACCESS_TOKEN_SECRET = environ['ACCESS_TOKEN_SECRET']\n\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\n\napi = tweepy.API(auth)\n\n\ndef get_stuff(nombre=user):\n    stuff = tweepy.Cursor(api.user_timeline, screen_name = user, include_rts = True)\n    return stuff\n\ndef get_tweets(stuff, n):\n    for status in stuff.items(n):\n        print(status.created_at, status.author.screen_name, status.text)\n\nn = int(input('Cuantos tweets desea obtener: '))\n        stuff = get_stuff()\n        get_tweets(stuff, n)"
    },
    "question_id": 38545
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo transformar una fecha `date` en palabras a fecha en n\u00fameros?"
    },
    "mr": {
      "python": "def mesANumero(date):\n    m = {\n        'enero': \u201801\u2019,\n        'febrero': \u201802\u2019,\n        'marzo': \u201803\u2019,\n        'abril': \u201804\u2019,\n        'mayo': \u201805\u2019,\n        'junio': \u201806\u2019,\n        'julio': \u201807\u2019,\n        'agosto': \u201808\u2019,\n        'septiembre': \u201809\u2019,\n        'octubre': \u201810\u2019,\n        'noviembre': \u201811\u2019,\n        'diciembre': \u201812\u2019\n        }\n\n    fecha = date.split(\u2018-\u2018)\n    dia =  fecha[0]\n    mes =  fecha[1]\n    anio = fecha[2]\n\n    try:\n        out = str(m[mes.lower()])\n        print dia + \u2018-\u2018 +  out + \u2018-\u2018 + anio\n    except:\n        raise ValueError('No es un mes')\n"
    },
    "question_id": 49642
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo abrir y cerrar un plot dentro de un while?"
    },
    "mr": {
      "python": "while (True):\n    plt.figure()\n    plt.plot()\n    plt.show(block=False)\n    plt.close()\n    time.sleep(0.1) "
    },
    "question_id": 8295
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo abrir y cerrar un plot dentro de un while?"
    },
    "mr": {
      "python": "while True: \n    plt.figure()\n    plt.plot()\n    plt.show(block = False) \n    sleep().\n    plt.close()  \n    sleep() "
    },
    "question_id": 8295
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crar un subproceso `proc`?"
    },
    "mr": {
      "python": "subprocess.Popenproc')"
    },
    "question_id": 2611
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo descargar un archivo `file` subido mediante un formulario?"
    },
    "mr": {
      "python": "#models.py\nclass MyModel(models.Model):\n    file = models.FileField(upload_to='subcarpeta/')\n#settings.py\nMEDIA_ROOT = '<your_path>/media/'\nMEDIA_URL = '/media/'\n#urls.py\nif settings.DEBUG is True:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n#template\n<a href=\"{{ my_model.file.url }}>download</a>"
    },
    "question_id": 9580
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una matriz `array` de `n`x`m` matrices?"
    },
    "mr": {
      "python": "array =[]\nfor count in range(n):\n   row=[]\n   for count in range(m):\n     m = matriz()     \n     row.append(m)\n   array.append(row)"
    },
    "question_id": 71600
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un conjunto `dic` que relacione los elementos de dos conjuntos `a` y `b` en el orden en que se agregaron?"
    },
    "mr": {
      "python": "a = [input(\"Ingrese un numero: \") for _ in range(2)]\n\nb = [input(\"Ingrese un numero: \") for _ in range(2)]\n\nprint(list(zip(a, b)))"
    },
    "question_id": 36557
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo cambiar el color de un label `label` en kivy?"
    },
    "mr": {
      "python": "label:\n            id: label1\n            color: 1,0,1,1"
    },
    "question_id": 63508
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo generar permutaciones de una lista `list` permitiendo repetir elementos y sin repetirlos?"
    },
    "mr": {
      "python": "sin_repeticion = [x for x in combinations(list, 2)]\ncon_repeticion = [x for x in combinations_with_replacement(list, 2)]"
    },
    "question_id": 37964
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo generar permutaciones de una lista `list` permitiendo repetir elementos y sin repetirlos?"
    },
    "mr": {
      "python": "#Con repetici\u00f3n\nprint [ (x,y) for x in mi_lista for y in mi_lista ]\n#Sin repetici\u00f3n\nprint [ (x,y) for x in mi_lista for y in mi_lista if x!=y]"
    },
    "question_id": 37964
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una lista `list` de tuplas con los valores `Lon` y `Lat` de un diccionario `dic`?"
    },
    "mr": {
      "python": "list = [] \nfor id,mensaje in dic.items():\n    list.append([mensaje['Lon'],mensaje['Lat']])"
    },
    "question_id": 54164
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una lista `list` de tuplas con los valores `Lon` y `Lat` de un diccionario `dic`?"
    },
    "mr": {
      "python": "list = [[v['Lon'],v['Lat']] for k, v in dic.items()]"
    },
    "question_id": 54164
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una imagen `img` que se pueda mover con el puntero del rat\u00f3n en Tkinter?"
    },
    "mr": {
      "python": "posicion = {\"x\": 0, \"y\": 0, \"img\": None}\n\ndef imgPress(event):\n    posicion[\"item\"] = canvas.find_closest(event.x, event.y)[0]\n    posicion[\"x\"] = event.x\n    posicion[\"y\"] = event.y\n\ndef imgRelease(event):\n    posicion[\"item\"] = None\n    posicion[\"x\"] = 0\n    posicion[\"y\"] = 0\n\ndef imgMotion(event):\n    incremento_x = event.x - posicion[\"x\"]\n    incremento_y = event.y - posicion[\"y\"]\n    canvas.move(posicion[\"item\"], incremento_x, incremento_y)\n    posicion[\"x\"] = event.x\n    posicion[\"y\"] = event.y\n\nroot = tk.Tk()\ncanvas = tk.Canvas(width=400, height=400)\ncanvas.pack(fill=\"both\", expand=True)\n\ncanvas.tag_bind(\"img\", \"<ButtonPress-1>\", imgPress)\ncanvas.tag_bind(\"img\", \"<ButtonRelease-1>\", imgRelease)\ncanvas.tag_bind(\"img\", \"<B1-Motion>\", imgMotion)\n\npic = tkFileDialog.askopenfilename()\nimg = ImageTk.PhotoImage(file=pic)\ncanvas.create_image(200, 200, anchor=tk.CENTER, image=img, tags=\"img\")\n\nroot.mainloop()\n"
    },
    "question_id": 37285
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una funci\u00f3n `indextoentry` que devuelva una lista al pasarle una lista `lista` y un \u00ecndice `index`?"
    },
    "mr": {
      "python": "def indextoentry(lista,index):\n    return [lista[index]]"
    },
    "question_id": 36164
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una funci\u00f3n `indextoentry` que devuelva una lista al pasarle una lista `lista` y un \u00ecndice `index`?"
    },
    "mr": {
      "python": "def indextoentry(lista,index):\n    listresult = []\n    listresult.append(lista[index])\n    return(listresult)"
    },
    "question_id": 36164
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear carpetas en la direcci\u00f3n `dir` para separar archivos cuyos nombres `nombre` son fechas en d\u00edas julianos?"
    },
    "mr": {
      "python": "def esFecha( nombre ):\n  if ( len(nombre)<7 ):\n    return False\n  if ( not nombre[0:7].isdigit() ):\n    return False\n  dia = int( nombre[4:7] )\n  return dia>=1 and dia<=366\n\ndef moverFichero( nombre, dirBase ):\n  directorio = nombre[0:7]\n  destino = join( dirBase, directorio)\n  if ( not exists(destino) ):\n    makedirs(destino)\n  origen = join( dirBase, nombre )\n  move ( origen, destino )\n\ndirBase = dir\nficheros = [ f for f in listdir(dirBase) if isfile(join(dirBase,f)) ]\nfor fich in ficheros:\n  if ( esFecha( fich ) ):\n    moverFichero( fich, dirBase )"
    },
    "question_id": 1736
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo leer una cadena de varias l\u00edneas ingresada por consola y almacenar cada l\u00ednea como un elemento de una lista `lista`?"
    },
    "mr": {
      "python": "lista = []\nwhile True:\n    inputs = input()\n    if inputs:\n        lista.append(inputs)\n    else:\n        break\nprint(lista)"
    },
    "question_id": 59300
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo borrar todos los archivos .txt dentro de las subcarpetas ubicadas en la ruta `rut`?"
    },
    "mr": {
      "python": "directory = rut\nos.chdir(directory)\nfor filename in glob.glob('**/*.txt', recursive=True):\n    os.unlink(filename)"
    },
    "question_id": 2056
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar el campo `precio` de todos los elementos del modelo `Precompra` en Django?"
    },
    "mr": {
      "python": "totaldos =  Precompra.objects.aggregate(Sum(precio)).values()[0]"
    },
    "question_id": 62733
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo usar una direcci\u00f3n proxy `proxy` con una url `url`?"
    },
    "mr": {
      "python": "proxy = request.ProxyHandler(proxies)\nopener = request.build_opener(proxy)\nrequest.install_opener(opener)\nresponse=request.urlopen(url)"
    },
    "question_id": 59326
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo convertir en may\u00fasculas el texto `text` ingresado en un Charfield en Django?"
    },
    "mr": {
      "python": "class UpperField(forms.CharField):\n\n    def to_python(self, value):\n        return value.upper()\n\n\nclass TuModeloForm(forms.ModelForm):\n    text = UpperField()"
    },
    "question_id": 24649
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo convertir en may\u00fasculas el texto `text` ingresado en un Charfield en Django?"
    },
    "mr": {
      "python": "class TuModelo(models.Model):\n    text = models.CharField(max_length=9, null=True)\n    \n    def save(self, *args, **kwargs):\n        self.text = (self.text).uppercase()\n        return super(TuModelo, self).save(*args, **kwargs)"
    },
    "question_id": 24649
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo implementar un fichero conf?"
    },
    "mr": {
      "python": "config = ConfigParser.ConfigParser()\nconfig.read(conf)"
    },
    "question_id": 3995
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener la profundidad de color en bits de una imagen `filename`?"
    },
    "mr": {
      "python": "def get_tiff_depth(filename):\n    bits_per_sample=1\n    samples_per_pixel=1\n    photometric_interpretation = None\n    with open(filename, 'rb') as f:\n        byte_order = f.read(2)\n        if byte_order == 'II':\n            prefix = '<'\n        elif byte_order == 'MM':\n            prefix = '>'\n        else:\n            raise ValueError('El fichero no parece ser un TIFF')\n        (magic_number, offset) = struct.unpack(prefix + 'hI', f.read(6))\n        if magic_number != 42:\n            raise ValueError('El fichero no parece ser un TIFF')\n        f.seek(offset)\n        num_entries, = struct.unpack(prefix+'h', f.read(2))\n        for i in range(num_entries):\n            tag = f.read(12)\n            (id_tag, type_tag, num_values, value) = struct.unpack(prefix+'hhii', tag)\n            if id_tag == 258:\n                bits_per_sample = value\n            if id_tag == 262:\n                photometric_interpretation = value\n            elif id_tag == 277:\n                samples_per_pixel = value\n    if photometric_interpretation == 2: # rgb:\n        return 24\n    else:\n        return bits_per_sample * samples_per_pix\n"
    },
    "question_id": 515
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener la profundidad de color en bits de una imagen `filename`?"
    },
    "mr": {
      "python": "image = PythonMagick.Image(filename)\nprint image.depth()"
    },
    "question_id": 515
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo anidar objetos tablas relacionadas con profundidad `n` en el serializer `BrandSerializer` en Django API REST Framework?"
    },
    "mr": {
      "python": "class BrandSerializer(serializers.ModelSerializer):\n    class Meta:\n        depth = n"
    },
    "question_id": 11073
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular la diferencia entre una hora `ingreso` en UTC y este momento?"
    },
    "mr": {
      "python": "now = datetime.utcnow() \ndiferencia = now - ingreso"
    },
    "question_id": 19685
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular la diferencia entre una hora `ingreso` en UTC y este momento?"
    },
    "mr": {
      "python": "now = datetime.utcnow()\ndiferencia = now.replace(tzinfo=None) - ingreso.replace(tzinfo=None)"
    },
    "question_id": 19685
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar las palabras de longitud menor o mayor que la media aritmetica de una cadena `S`?"
    },
    "mr": {
      "python": "media = stats.mean([len(palabra) for palabra in S.split()])\nmayores = [palabra for palabra in S.split() if len(palabra) >= media]\nmenores = [palabra for palabra in S.split() if len(palabra) < media]\nprint('las palabras menores a la media: ', menores)\nprint('las palabras mayores o iguales a la media: ', mayores)"
    },
    "question_id": 2256
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar las palabras de longitud menor o mayor que la media aritmetica de una cadena `S`?"
    },
    "mr": {
      "python": "ls, ts = zip(*sorted([(len(x), x) for x in S.split()]))\n\navlen = sum(ls) / len(ls)  \n\nbpoint = bisect.bisect_right(ls, avlen)  \nprint('mayores:', *ts[bpoint:])\nprint('menores:', *ts[:bpoint])"
    },
    "question_id": 2256
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular la distancia entre un punto `P` y el segmento acotado por los puntos `A` y `B`?"
    },
    "mr": {
      "python": "def distancia(A, B, P):\n    if all(A==P) or all(B==P):\n        return 0\n\n    elif np.arccos(np.dot((P-A)/norm(P-A), (B-A)/norm(B-A))) > np.pi/2:\n        return norm(P-A)\n\n    elif np.arccos(np.dot((P-B)/norm(P-B), (A-B)/norm(A-B))) > np.pi/2:\n        return norm(P-B)\n\n    return norm(np.cross(B-A, A-P))/norm(B-A)"
    },
    "question_id": 62209
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar las celdas adyacentes a la celda en la fila `f` y la columna `c` en una matriz `life` llena de #?"
    },
    "mr": {
      "python": "def cant_adyacentes(life, f, c):\n    fs = life[f-1]\n    fi = life[(f+1)%len(life)]\n    i=(c+1)%len(life[0])\n    return (fs[c-1], fs[c], fs[i], life[f][c-1], life[f][i], fi[c-1], fi[c], fi[i]).count('#')\n\ndef pruebas_cant_adyacentes():\n    assert cant_adyacentes((['.']), 0, 0) == 0\n    assert cant_adyacentes((['..', '..']), 0, 0) == 0\n    assert cant_adyacentes((['..', '..']), 0, 1) == 0\n    assert cant_adyacentes((['##', '..']), 0, 0) == 2\n    assert cant_adyacentes((['##', '..']), 0, 1) == 2\n    assert cant_adyacentes((['#.', '.#']), 0, 0) == 4\n    assert cant_adyacentes((['##', '##']), 0, 0) == 8\n    assert cant_adyacentes((['.#.', '#.#', '.#.']), 1, 1) == 4\n    assert cant_adyacentes((['.#.', '..#', '.#.']), 1, 1) == 3\n\npruebas_cant_adyacentes()"
    },
    "question_id": 62798
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo puedo conectarme a un PLC v\u00eda Modbus con la ip `ip`?"
    },
    "mr": {
      "python": "client = ModbusTcpClient(ip)\nclient.write_coil(1, True)\nresult = client.read_coils(1,1)\nprint result.bits[0]\nclient.close()"
    },
    "question_id": 35679
  },
  {
    "question": {
      "es": "\u00bfComo conectarme con SQLALCHEMY a una basededatos `dbname` con usuario `user`, contrase\u00f1a `password`, host `host` y ?"
    },
    "mr": {
      "python": "engine = create_engine('mysql://'+user+':'+password+'@+str(host)+'/'++dbname+'?charset=utf8&use_unicode=0', pool_recycle=port)\n\nconnection = engine.connect()"
    },
    "question_id": 34346
  },
  {
    "question": {
      "es": "\u00bfComo conectarme con SQLALCHEMY a una basededatos `dbname` con usuario `user`, contrase\u00f1a `password`, host `host` y ?"
    },
    "mr": {
      "python": "conn = pymysql.connect(host=host, user=user, passwd=password, db=dbname, charset = 'utf8mb4')"
    },
    "question_id": 34346
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular el m\u00e1ximo com\u00fan divisor entre dos n\u00fameros `a` y `b`?"
    },
    "mr": {
      "python": "if a>b:\n    for i in range(1,a+1):\n        if a % i == 0.:   \n            if b !=0:     \n                if b % i == 0.:  \n                    print 'Maximo comun divisor para ', a, ' y ', b, ' es:'\n                    print i\nif b == 0:  \n    print 'Maximo comun divisor para ', a, ' y ', b, ' es: ', a\n\nif b>a:\n    for i in range(1,b+1):\n        if b % i == 0.:\n            if a !=0:\n                if a % i == 0.:\n                    print 'Maximo comun divisor para ', b, ' y ', a, ' son:'\n                    print i\nif a == 0:\n    print 'Maximo comun divisor para ', b, ' y ', a, ' es: ', b"
    },
    "question_id": 26959
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular el m\u00e1ximo com\u00fan divisor entre dos n\u00fameros `a` y `b`?"
    },
    "mr": {
      "python": "max_divisor = 1\n\nif a>b:\n    for i in range(1,a+1):\n        if a % i == 0.:   \n            if b !=0:     \n                if b % i == 0.:  \n                    if i > max_divisor:\n                        max_divisor = i\n\nif b == 0:  \n    print 'Maximo comun divisor para ', a, ' y ', b, ' es: ', a\n\nif b>a:\n    for i in range(1,b+1):\n        if b % i == 0.:\n            if a !=0:\n                if a % i == 0.:\n                    if i > max_divisor:\n                        max_divisor = i\n\nif a == 0:\n    print 'Maximo comun divisor para ', b, ' y ', a, ' es: ', b\n\nprint 'Maximo comun divisor para ', a, ' y ', b, ' es:'\nprint max_divisor"
    },
    "question_id": 26959
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular el m\u00e1ximo com\u00fan divisor entre dos n\u00fameros `a` y `b`?"
    },
    "mr": {
      "python": "def mcd(a,b):\n    return next((i for i in range(min(a,b),0,-1) if a%i==0 and b%i==0), 0)"
    },
    "question_id": 26959
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo capturar la salida del terminal despu\u00e9s de ejecutar un comando `command`?"
    },
    "mr": {
      "python": "process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=None, shell=True)\n\noutput = process.communicate()\n\nprint(output[0])"
    },
    "question_id": 44385
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo cambiar el \u00edndice en medio de un ciclo sobre la lista `lista`?"
    },
    "mr": {
      "python": "def getIndx(lista):\n    try:\n        index = int(input(\u2018Introduce el nuevo indice, entre 0 y {0} o otra si desea continuar el ciclo: \u2018.format(len(lista)-1)))\n        if index in range(0, len(lista)):\n            return index\n    except:\n        return -1\n\nk = 0\nwhile k < len(lista):\n    v = lista[k]\n    print('Indice:', k, 'Valor:', lista[k])\n    k+=1\n\n    index = getIndx(lista)\n\n    if index >= 0:\n        k = index"
    },
    "question_id": 53595
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una variable global `puntos` dentro de una funci\u00f3n `func`?"
    },
    "mr": {
      "python": "def func():\n    global puntos"
    },
    "question_id": 30088
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo convertir un string `S` a un entero?"
    },
    "mr": {
      "python": "int(S)"
    },
    "question_id": 28562
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo convertir un string `S` a un entero?"
    },
    "mr": {
      "python": "int(S)"
    },
    "question_id": 28562
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo renombrar un archivo con nombre `old` a `new`?"
    },
    "mr": {
      "python": "os.rename(old, new)"
    },
    "question_id": 17560
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo buscar todos los archivos con extensi\u00f3n `.ext` en la ruta `ruta` y buscar las coincidencias entre ellos?"
    },
    "mr": {
      "python": "path = ruta\nextension = *.ext\n\ndef comparar_linea(file1, file2):\n    data1 = [line.strip() for line in file1.readlines()]\n    data2 = [line.strip() for line in file2.readlines()]\n    same = set(data1).intersection(data2)\n    return same\n\ndef buscarCoincidencias(path, extension):\n    with open('some_output_file.txt', 'w') as file_out:\n        os.chdir(path)\n        files = glob.glob(extension)\n        for i in range(len(files)):\n            for j in range(i+1, len(files)):\n                with open(files[i]) as file1:\n                    with open(files[j], 'r') as file2:\n                        same = comparar_linea(file1, file2)\n                        file_out.write(files[i] + \"-\"+ files[j] + \": \"+str(same)+\"\\n\")\n\n\nbuscarCoincidencias(path, extension)"
    },
    "question_id": 41536
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo buscar todos los archivos con extensi\u00f3n `.ext` en la ruta `ruta` y buscar las coincidencias entre ellos?"
    },
    "mr": {
      "python": "os.chdir(ruta)\n\nopen_files = (open(file, 'r') for file in glob.glob(*.ext))\n\nsame = set.intersection(*map(set, open_files))\nsame.discard('\\n')\n\nfor f in open_files:\n    f.close()\n\nwith open('some_output_file.txt', 'w') as file_out:\nfor line in same:\n    file_out.write(line)"
    },
    "question_id": 41536
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo buscar todos los archivos con extensi\u00f3n `.ext` en la ruta `ruta` y buscar las coincidencias entre ellos?"
    },
    "mr": {
      "python": "def filtrarCoincidencias(ruta,extension):\n    files=[ x for x in os.listdir(ruta) if x.endswith(extension)]\n    coincidencias=[]\n\n    for i,f1 in enumerate(files):\n        for j,f2 in enumerate(files):\n            if(j>i):\n                if(filecmp.cmp(ruta+f1,ruta+f2)):\n                    coincidencias.append((f1,f2))\n    return coincidencias\n\n\nfor tupla in filtrarCoincidencias(ruta,.ext):\n    print(tupla)"
    },
    "question_id": 41536
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ordenar alfab\u00e9ticamente por el campo `nombre` las instancias de una clase `Clase` en el admin de Django?"
    },
    "mr": {
      "python": "class Clase(models.Model):\n    nombre = models.CharField()\n\n    def __unicode__(self): \n        return self.nombre\n\n    class Meta:\n        ordering = ['nombre']"
    },
    "question_id": 340
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo personalizar la respuesta de una petici\u00f3n POST a la vista `ClassView` a Django Rest Framework?"
    },
    "mr": {
      "python": "class ClassView(generics.CreateAPIView):\n\n    queryset = class.objects.all()\n    serializer_class = classSerializer\n\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n\n        self.perform_create(serializer)\n        response = {}\n        response['success'] = True\n        response['message'] = \"Registro guardado exitosamente\"\n        response['status'] = status.HTTP_201_CREATED\n        request.data.get('name')}, status=status.HTTP_201_CREATED)\n        return Response(response)"
    },
    "question_id": 56670
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo personalizar la respuesta de una petici\u00f3n POST a la vista `ClassView` a Django Rest Framework?"
    },
    "mr": {
      "python": "@api_view(['GET', 'POST'])\ndef ClassView(request):\n    if request.method == 'POST' and request.status == status.HTTP_201_CREATED:\n        return Response({\"mensaje\": \"Empleado creado con \u00e9xito\", \"data\": request.data})\n    return Response({\"message\": \"Alg\u00fan mensaje en GET\"})"
    },
    "question_id": 56670
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo personalizar la respuesta de una petici\u00f3n POST a la vista `ClassView` a Django Rest Framework?"
    },
    "mr": {
      "python": "class ClassView(ListBulkCreateAPIView):\n    queryset = class.objects.all()\n    serializer_class = classSerializer\n\n    def create(self, request):\n        result = super(createEmployee, self).create(request)\n        return Result({'success': True, 'message': 'Creado correctamente'})"
    },
    "question_id": 56670
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sustituir los valores de una columna `x` en una matriz `tabla`?"
    },
    "mr": {
      "python": "a=tabla.tolist()\nfor x in a[:]:\n        x[0]=nombres[a.index(x)]"
    },
    "question_id": 62022
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener la palabra despu\u00e9s de `word` en una cadena `S` usando expresiones regulares?"
    },
    "mr": {
      "python": "match = re.search(r'.*?word-(\\w+).*', S)\n\nif match:\n    print match.group(1)"
    },
    "question_id": 16458
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar los valores del vector `x` a todas las columnas de la matriz `M`?"
    },
    "mr": {
      "python": "def suma_a_cada_columna(M, x):\n    return (M.transpose() + x).transpose()"
    },
    "question_id": 40594
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo capturar el elemento con la etiqueta `CURRENT` en Tkinter?"
    },
    "mr": {
      "python": "def popup(event):\n    global current_item\n    try:\n        current_item = canvas.find_withtag(CURRENT)[0]\n        menu.post(event.x_root, event.y_root)\n    except IndexError:\n        current_item = None"
    },
    "question_id": 40452
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo elevar un n\u00famero x a la potencia y usando multiplicaci\u00f3n?"
    },
    "mr": {
      "python": "def potenciaRecursiva(x, y):\n    if y == 0:\n        return 1\n\n    elif y >= 1:\n        return x * potenciaRecursiva(x, y - 1)"
    },
    "question_id": 53694
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo elevar un n\u00famero x a la potencia y usando multiplicaci\u00f3n?"
    },
    "mr": {
      "python": "def potencia(x, y):\n    result = 1\n    while y > 0:\n        if y % 2 == 1:\n            result = (result * x) % MOD\n        y = y / 2\n        x = (x * x) % MOD\n    return result"
    },
    "question_id": 53694
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo filtrar un Queryset `listuser` por el campo `day` en un rango de fechas `fecha_inicial` y `fecha_final`?"
    },
    "mr": {
      "python": "listuser.filter(\n    day__range=(fecha_inicial, fecha_final))"
    },
    "question_id": 11038
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo imprimir los elementos de una cadena `S` con un tiempo de espera `t` entre ellos?"
    },
    "mr": {
      "python": "def mecanografiar(S):\n\n lista = S.split()\n\n for palabra in lista:\n    sys.stdout.write(palabra + \" \")\n    sys.stdout.flush()\n    time.sleep(t)"
    },
    "question_id": 48514
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo imprimir los elementos de una cadena `S` con un tiempo de espera `t` entre ellos?"
    },
    "mr": {
      "python": "def mecanografiar(S):\n    for palabras in S.split():\n        sleep(t)\n        print(palabras, end=' ', flush=True)"
    },
    "question_id": 48514
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular cu\u00e1ntas veces un texto `S` tiene una palabra espec\u00edfica `word`?"
    },
    "mr": {
      "python": "def awesome_count (S):\n    wordcount = dict((x,0) for x in S)\n    for w in re.findall(r\"\\w+\", s):\n        if word in wordcount:\n            wordcount[word] += 1\n    return wordcount[word]"
    },
    "question_id": 67987
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo multiplicar la matriz `A` y la matriz `B`?"
    },
    "mr": {
      "python": "def multiplicarMatriz(A, B):\n    return [[sum(x * B[i][col] for i,x in enumerate(fila)) for col in range(len(B[0]))] for fila in A]"
    },
    "question_id": 61810
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo acceder a una sesi\u00f3n de mi cuenta de google?"
    },
    "mr": {
      "python": "class SesionGoogle():\n    def __init__(self, email, contrase\u00f1a):\n        self.sesion = requests.session()\n\n        url_login = \"https://accounts.google.com/ServiceLogin\"\n        url_aut = \"https://accounts.google.com/ServiceLoginAuth\"\n\n        login_html = self.sesion.get(url_login)\n        soup_login = BeautifulSoup(login_html.content, 'html.parser').find('form').find_all('input')\n        datos = {u['name']:u['value'] for u in soup_login if u.has_attr('value')}\n        datos['Email'] = email\n        datos['Passwd'] = contrase\u00f1a\n        self.sesion.post(url_aut, data = datos)\n\n    def get(self, URL):\n        return self.sesion.get(URL).text"
    },
    "question_id": 37098
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo graficar un tri\u00e1ngulo de Sierpinski de `n` etapas?"
    },
    "mr": {
      "python": "def get_triangle(P):\n    m = P * 0.5\n    n = P * 0.5 + np.array([0.5, 0])\n    k = P * 0.5 + np.array([0.25, np.sqrt(3)/4])\n    return np.array([m,n,k])\n\n# triangulo unitario inicial\ntriangle = np.array([[0, 0],\n              [1, 0],\n              [0.5, np.sqrt(3)/2]])\n\netapa = 5\nfor e in range(etapa):\n    triangle = get_triangle(triangle)\n\nfig1 = plt.figure()\nax1 = fig1.add_subplot(111, aspect='equal')\nfor t in triangle.reshape(3**etapa,3,2):\n    ax1.add_patch(mpatches.Polygon(t, fc=\"y\"))\n\nplt.show()"
    },
    "question_id": 4649
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una matriz `matriz` en la que el usuario defina el n\u00famero de filas `fil`, columnas `colum` y sus valores desde terminal?"
    },
    "mr": {
      "python": "colum=int(input('Cantidad de columnas: '))\nfil=int(input('Cantidad de filas: '))\nmatriz=[[str(input('[{},{}]-esimo termino: '.format(i, j))) for i in range(colum)] for j in range(fil)]"
    },
    "question_id": 59136
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo copiar la informaci\u00f3n de una hoja `hoja1` de un archivo `wP` a una hoja `hoja2` en un archvo `wB` y guardarlo en un archivo `file`?"
    },
    "mr": {
      "python": "wPs = wP.get_sheet_by_name(hoja1)\nwBs = wB.get_sheet_by_name(hoja2)\n\nfor rrow in wPs.iter_rows():\n    for cell in rrow:\n        wBs[cell.coordinate] = cell.value\n\nwB.save(file)"
    },
    "question_id": 51974
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo especificar el separador `,` como de un fichero csv `file` al abrirlo?"
    },
    "mr": {
      "python": "csv.reader(file, delimiter=',')"
    },
    "question_id": 9776
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo eliminar corchetes de un archivo `file` de tipo numpy.ndarray y guardar el resultado en un nuevo archvi `file2`?"
    },
    "mr": {
      "python": "inn = ''\nwith open(file, 'r') as file:\n    inn = file.read()\n\nwith open(file2, 'w') as file:\n    file.write(re.sub(r'[\\[\\]]', '', inn))"
    },
    "question_id": 13251
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo remover una fila de un arreglo numpy `data_base`?"
    },
    "mr": {
      "python": "average_db = data_base.mean()\nstd_db = data_base.std()\nupper = average_db + std_db*.5\nlower = average_db - std_db*.5\nfor i in range(len(data_base)):\n    if data_base[i,1]>=upper or data_base[i,1]<=lower:\n        data_base = np.delete(data_base, i)"
    },
    "question_id": 23323
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo darle persistencia a los datos importados de una base de datos en un DataFrame `df` para no tener que leerlos nuevamente desde la base de datos?"
    },
    "mr": {
      "python": "with pd.HDFStore('store.h5') as store:\n    store['df'] = df"
    },
    "question_id": 44905
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo exportar un pdf con cabecera y cuerpo como respuesta de una vista `PdfView`?"
    },
    "mr": {
      "python": "class PdfView(View):\n\n    def cabecera(self, pdf):\n\t# Definir cabecera\n\n    def cuerpo(self, pdf, y):\n        # Definir cuerpo\n\n    def get(self, request, *args, **kwargs):\n    \n        response=HttpResponse(content_type='application/pdf')\n  buffer=BytesIO()\n    \n  pdf=canvas.Canvas(buffer)\n  self.cabecera(pdf)\n  y=600\n  self.cuerpo(pdf, y)\n  pdf.showPage()\n  pdf.save()\n  pdf=buffer.getvalue()\n  buffer.close()\n  response.write(pdf)\n        return response\n"
    },
    "question_id": 67477
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo hacer que una funci\u00f3n `func` se ejecute desde la hora de inicio `hora_inicio` la hora `hora_finalizaci\u00f3n`?"
    },
    "mr": {
      "python": "while True:\n    actual = datetime.now()\n    actual = time(actual.hour, actual.minute,actual.second)  # este objeto se puede comparar sin tener en cuenta la fecha\n    if actual > hora_inicio and actual < hora_finalizacion:\n        func()\n    else:\n        break"
    },
    "question_id": 41041
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo hacer que una funci\u00f3n `func` se ejecute desde la hora de inicio `hora_inicio` la hora `hora_finalizaci\u00f3n`?"
    },
    "mr": {
      "python": "while datetime.time.now() > hora_inicio and datetime.time.now() < hora_finalizacion:\n    func()"
    },
    "question_id": 41041
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo convertir un tipo `String` a `Float` o `Int`?"
    },
    "mr": {
      "python": "float(String) int(String)"
    },
    "question_id": 49194
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener la posici\u00f3n de un dato `x` en una lista `list`?"
    },
    "mr": {
      "python": "list.index(x)"
    },
    "question_id": 63234
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo concatenar un `INT` y un `STR`?"
    },
    "mr": {
      "python": "INT+repr(STR)"
    },
    "question_id": 57263
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo concatenar un `INT` y un `STR`?"
    },
    "mr": {
      "python": "STR + str(INT)"
    },
    "question_id": 57263
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo concatenar un `INT` y un `STR`?"
    },
    "mr": {
      "python": "print ('{} {}'.format(STR,str(INT)))"
    },
    "question_id": 57263
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo listar todos los archivos en una carpeta ubicada en el directorio `ruta`?"
    },
    "mr": {
      "python": "def ls(ruta = Path.cwd()):\n    return [arch.name for arch in Path(ruta).iterdir() if arch.is_file()]"
    },
    "question_id": 24278
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo listar todos los archivos en una carpeta ubicada en el directorio `ruta`?"
    },
    "mr": {
      "python": "import os\ndef encontrar_arq(arq_buscado, ruta):\n    encontrado = False\n    for i in ruta:\n        if ruta == arq_buscando:\n            econtrado = True\n    return encontrado"
    },
    "question_id": 24278
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo eliminar duplicados en una lista `L`?"
    },
    "mr": {
      "python": "list(set(L))"
    },
    "question_id": 87813
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo eliminar duplicados en una lista `L`?"
    },
    "mr": {
      "python": "sorted(set(L))"
    },
    "question_id": 87813
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo eliminar duplicados en una lista `L`?"
    },
    "mr": {
      "python": "(k for (k,_) in groupby(L))"
    },
    "question_id": 87813
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener el tipo de una variable `x`?"
    },
    "mr": {
      "python": "type(x)"
    },
    "question_id": 15622
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener el tipo de una variable `x`?"
    },
    "mr": {
      "python": "isinstance(x, tipo_de_variable)"
    },
    "question_id": 15622
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo puedo recorrer una `lista` en orden inverso?"
    },
    "mr": {
      "python": "for item in reversed(lista):"
    },
    "question_id": 146070
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo puedo recorrer una `lista` en orden inverso?"
    },
    "mr": {
      "python": "for item in lista[::-1]:"
    },
    "question_id": 146070
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo puedo recorrer una `lista` en orden inverso?"
    },
    "mr": {
      "python": "for item in xrange(len(lista)):\n    print lista[-item-1]"
    },
    "question_id": 146070
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar todos los elementos de una `lista`?"
    },
    "mr": {
      "python": "sum(lista)"
    },
    "question_id": 201210
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar todos los elementos de una `lista`?"
    },
    "mr": {
      "python": "sum(lista)"
    },
    "question_id": 201210
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar todos los elementos de una `lista`?"
    },
    "mr": {
      "python": "nume = 0\nfor m in lista:\n       nume += m"
    },
    "question_id": 201210
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una lista `L` con `n` n\u00fameros aleatorios?"
    },
    "mr": {
      "python": "def listaAleatorios(n):\n      L = [0]  * n\n      for i in range(n):\n          L[i] = random.randint(0, 1000)\n      return L"
    },
    "question_id": 124063
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una lista `L` con `n` n\u00fameros aleatorios?"
    },
    "mr": {
      "python": "def listaAleatorios(n):\n    L = []\n    for i in range(n):\n        L.insert(i, random.randrange(0, 1000, 2))\n    return L"
    },
    "question_id": 124063
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una lista `L` con `n` n\u00fameros aleatorios?"
    },
    "mr": {
      "python": " = [] \ncontador_rondas = 0 .\n\nnumero_random = randint(1,30) \n\nwhile contador_rondas < n:\n    numero_random = randint(1,30) \n    if numero_random in L: \n        pass\n    else:\n        L.append(numero_random) \n        contador_rondas = contador_rondas + 1"
    },
    "question_id": 124063
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo me conecto a una Base de Datos MySQL?"
    },
    "mr": {
      "python": "db = MySQLdb.connect(host=,    \n                     user=,         \n                     passwd=,  \n                     db=)"
    },
    "question_id": 568
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo me conecto a una Base de Datos MySQL?"
    },
    "mr": {
      "python": "db = MySQLdb.connect(passwd=,db=)"
    },
    "question_id": 568
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo verificar que un archivo `f` exista?"
    },
    "mr": {
      "python": "os.path.isfile(f)"
    },
    "question_id": 512
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo verificar que un archivo `f` exista?"
    },
    "mr": {
      "python": "if (os.path.exists(f)):"
    },
    "question_id": 512
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo verificar que un archivo `f` exista?"
    },
    "mr": {
      "python": "f = Path(f)\nf.exists()"
    },
    "question_id": 512
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo redondear decimales hacia arriba de un n\u00famero `num`?"
    },
    "mr": {
      "python": "math.ceil(num)"
    },
    "question_id": 8510
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo redondear decimales hacia arriba de un n\u00famero `num`?"
    },
    "mr": {
      "python": "round(num)"
    },
    "question_id": 8510
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo reemplazar el valor de la columna `col` en un data frame `df` con una tupla de datos `clave`:`valor`?"
    },
    "mr": {
      "python": "df.col = df.col.replace({clave: valor})"
    },
    "question_id": 231231
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo reemplazar el valor de la columna `col` en un data frame `df` con una tupla de datos `clave`:`valor`?"
    },
    "mr": {
      "python": "df.loc[df[col] == clave, col] = valor"
    },
    "question_id": 231231
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo importar un archivo `archivo` de una carpeta superior?"
    },
    "mr": {
      "python": "from carpeta import archivo"
    },
    "question_id": 1087
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo importar un archivo `archivo` de una carpeta superior?"
    },
    "mr": {
      "python": "import ..archivo"
    },
    "question_id": 1087
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo contar las vocales en una cadena `s`?"
    },
    "mr": {
      "python": "def contar_vocales(s):\n    voc = 0\n    for c in s:\n        if c in 'aeiouAEIOU':\n            voc = voc + 1\n    return voc"
    },
    "question_id": 114782
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo contar las vocales en una cadena `s`?"
    },
    "mr": {
      "python": "def contar_vocales(s):\n    return sum(map(s.lower().count, 'aeiou\u00e1\u00e9\u00ed\u00f3\u00fa\u00fc'))"
    },
    "question_id": 114782
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo contar las vocales en una cadena `s`?"
    },
    "mr": {
      "python": "def contar_vocales(s):\n    voc=0\n    for i in range(0,len(s)):\n        if s[i]=='a' or s[i]=='e'or s[i]=='i' or s[i]=='o' or \\\n        s[i]=='u' or s[i]=='A'or s[i]=='E' or s[i]=='I' or \\\n        s[i]=='O'or s[i]=='U':\n            voc=voc+1\n    return voc"
    },
    "question_id": 114782
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo emular un ciclo do-while?"
    },
    "mr": {
      "python": "i = 1\nwhile True:\n    i = i + 1\n    if(condicion):\n        break"
    },
    "question_id": 139701
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo emular un ciclo do-while?"
    },
    "mr": {
      "python": "i = 1\nrepetir_bucle = True\nwhile repetir_bucle:\n    i = i + 1\n    if condicion:\n       repetir_bucle = False"
    },
    "question_id": 139701
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo limitar un n\u00famero peri\u00f3dico `p` a `n` d\u00edgitos?"
    },
    "mr": {
      "python": "'{:.nf}'.format(p)"
    },
    "question_id": 236945
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo limitar un n\u00famero peri\u00f3dico `p` a `n` d\u00edgitos?"
    },
    "mr": {
      "python": "'{0:.nf}'.format(p)"
    },
    "question_id": 236945
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo limitar un n\u00famero peri\u00f3dico `p` a `n` d\u00edgitos?"
    },
    "mr": {
      "python": "'{0:.nf}'.format(p)"
    },
    "question_id": 236945
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un contador `numero` dentro de una funci\u00f3n?"
    },
    "mr": {
      "python": "def contador():\n  numero = 0\n  while True:\n    numero += 1\n    yield numero"
    },
    "question_id": 171626
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un contador `numero` dentro de una funci\u00f3n?"
    },
    "mr": {
      "python": "numero = 0\n\ndef contador():\n    global numero\n    numero=numero+1"
    },
    "question_id": 171626
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener el n\u00famero mayor en una lista `L` de `Strings`?"
    },
    "mr": {
      "python": "max(L, key=int)"
    },
    "question_id": 201835
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener el n\u00famero mayor en una lista `L` de `Strings`?"
    },
    "mr": {
      "python": "listadosNumero = [int(num) for num in L]\nprint (max(listadosNumero))"
    },
    "question_id": 201835
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar todas las posiciones de una letra en un `String`?"
    },
    "mr": {
      "python": "for i, l in enumerate(String):\n    if l.lower() == letra.lower():\n       print(l)"
    },
    "question_id": 272517
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar todas las posiciones de una letra en un `String`?"
    },
    "mr": {
      "python": "[idx for idx, letra in enumerate(String) if x==letra]"
    },
    "question_id": 272517
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una matriz `matriz` con `n` filas y `m` columnas?"
    },
    "mr": {
      "python": "matriz = []\n\nfor i in range(n):\n    matriz.append([])\n    for j in range(m):\n        matriz[i].append(random.randint(0, 100))"
    },
    "question_id": 159996
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una matriz `matriz` con `n` filas y `m` columnas?"
    },
    "mr": {
      "python": "matriz = np.random.randint(0, 100, size=(n, m))"
    },
    "question_id": 159996
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una matriz `matriz` con `n` filas y `m` columnas?"
    },
    "mr": {
      "python": "a=[]\nfor i in range(n):\n    a.append([])\n    for j in range(m):\n        a[i].append(random.randrange(100))\n"
    },
    "question_id": 159996
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo recorrer una lista desde la posici\u00f3n `p` hasta la posici\u00f3n `n` usando un for loop?"
    },
    "mr": {
      "python": "for i in lista[p:n]:"
    },
    "question_id": 119507
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo recorrer una lista desde la posici\u00f3n `p` hasta la posici\u00f3n `n` usando un for loop?"
    },
    "mr": {
      "python": "for i in lista[p:n]:"
    },
    "question_id": 119507
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo insertar un delay de `n` segundos?"
    },
    "mr": {
      "python": "time.sleep(n)"
    },
    "question_id": 109040
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo imprimir contenido de dos listas `lista1` y `lista2` uno debajo del otro?"
    },
    "mr": {
      "python": "for i in range(len(lista1)):\n    print(lista1[i], lista2[i])"
    },
    "question_id": 96884
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo agregar un nuevo elemento de una lista `L` a un diccionario en un ciclo for?"
    },
    "mr": {
      "python": "for j in range(len(L)): \n         diccionario[j] = L[j]"
    },
    "question_id": 86605
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo seleccionar un elemento aleatorio de una lista `l`?"
    },
    "mr": {
      "python": "shuffle(l)\nsel = l[0]"
    },
    "question_id": 14454
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo seleccionar un elemento aleatorio de una lista `l`?"
    },
    "mr": {
      "python": "sel = random.sample(l, 1)"
    },
    "question_id": 14454
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo seleccionar un elemento aleatorio de una lista `l`?"
    },
    "mr": {
      "python": "random.sample(l, k = 1)"
    },
    "question_id": 14454
  },
  {
    "question": {
      "es": "\u00bfc\u00f3mo calcular el m\u00ednimo com\u00fan m\u00faltipo de dos n\u00fameros `num1` y `num2`?"
    },
    "mr": {
      "python": "num1 =int(input())\nnum2 =int(input())\n\nA = max(num1, num2)\nB = min(num1, num2)\n\nwhile B:\n    mcd = B\n    B = A % B\n    A = mcd\nmcm =  (num1 * num2) // mcd"
    },
    "question_id": 38558
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo verificar si un caracter `c` es igual al siguiente en una cadena `S`?"
    },
    "mr": {
      "python": "for i, c in enumerate(S):\n  if i == 0:\n    pass\n  else:\n    if S[i-1] == S[i]:\n      print \"Caracter '%s' repetido en posiciones (%i,%i)\" % (c, i-1, i)"
    },
    "question_id": 138207
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo verificar si un caracter `c` es igual al siguiente en una cadena `S`?"
    },
    "mr": {
      "python": "def letra_duplicada(S):\n    for c1, c2 in zip(S, S[1:]):\n        if c1 == c2:\n          return True\n    return False"
    },
    "question_id": 138207
  },
  {
    "question": {
      "es": "\u00bfComo agrupar datos de un DataFrame por las columnas `columna1`, `columna2` y `columna3` a la vez?"
    },
    "mr": {
      "python": "df.groupby((columna1, columna2,columna3))"
    },
    "question_id": 111977
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo llamar a un m\u00e9todo `Ejemplo()` de una clase desde otra clase en Python?"
    },
    "mr": {
      "python": "instancia = Ejemplo()\ninstancia.metodo()"
    },
    "question_id": 258690
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo llamar a un m\u00e9todo `Ejemplo()` de una clase desde otra clase en Python?"
    },
    "mr": {
      "python": "newClass = Ejemplo()\nval = Ejemplo.getVal()"
    },
    "question_id": 258690
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo llamar a un m\u00e9todo `Ejemplo()` de una clase desde otra clase en Python?"
    },
    "mr": {
      "python": "class Ejemplo:\n    def ejemplo1():\n        print ('ejem1')\n\nclass Ejemplo2:\n\n    def ejemplo21():\n        return Ejemplo.ejem2()\n\n\nprint(Ejemplo2.ejemplow1())"
    },
    "question_id": 258690
  },
  {
    "question": {
      "es": "\"\u00bfC\u00f3mo declarar una funci\u00f3n `bar` dentro de otra funci\u00f3n `foo`?\""
    },
    "mr": {
      "python": "def foo():\n    def bar():\n        print('Hola soy bar.')"
    },
    "question_id": 79755
  },
  {
    "question": {
      "es": "\u00bfComo agregar una imagen `imagen.png` a un Notebook en Jupyter?"
    },
    "mr": {
      "python": "<img src='imagen.png'>"
    },
    "question_id": 77634
  },
  {
    "question": {
      "es": "\u00bfComo agregar una imagen `imagen.png` a un Notebook en Jupyter?"
    },
    "mr": {
      "python": "![Modelo_Proceso.png](attachment:imagen.png)"
    },
    "question_id": 77634
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar el mayor elemento en la posici\u00f3n `n` una lista de listas `l`?"
    },
    "mr": {
      "python": "max(l, key=itemgetter(n))[n]"
    },
    "question_id": 46558
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar el mayor elemento en la posici\u00f3n `n` una lista de listas `l`?"
    },
    "mr": {
      "python": "matriz = np.array(l)\nprint matriz[n::].max()"
    },
    "question_id": 46558
  },
  {
    "question": {
      "es": "\"C\u00f3mo convertir una lista `list` de tipo `str` a una de tipo `int`\""
    },
    "mr": {
      "python": "for i in range(len(list)):\n    list[i] = int(list[i])"
    },
    "question_id": 213125
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo hallar el numero mas repetido de una `lista`?"
    },
    "mr": {
      "python": "Counter(lista).most_common()[0][0])"
    },
    "question_id": 151572
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo hallar el numero mas repetido de una `lista`?"
    },
    "mr": {
      "python": "c = Counter(lista)\nprint(max(c, key=c.get))"
    },
    "question_id": 151572
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo hallar el numero mas repetido de una `lista`?"
    },
    "mr": {
      "python": "moda, count = stats.mode(np.array(a))"
    },
    "question_id": 151572
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener toda una columna `c` de una matriz `m`?"
    },
    "mr": {
      "python": "inputs = np.array(m)\nprint(inputs[:,c])"
    },
    "question_id": 115010
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener toda una columna `c` de una matriz `m`?"
    },
    "mr": {
      "python": "inputs_inv = list(zip(*m))\nprint(inputs_inv[c])"
    },
    "question_id": 115010
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo llamar una aplicaci\u00f3n externa de windows a trav\u00e9s de un comando?"
    },
    "mr": {
      "python": "call([aplicaci\u00f3n])"
    },
    "question_id": 2434
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo llamar una aplicaci\u00f3n externa de windows a trav\u00e9s de un comando?"
    },
    "mr": {
      "python": "os.system('aplicaci\u00f3n')"
    },
    "question_id": 2434
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo aumentar el tama\u00f1o de la gr\u00e1fica de salida de matplotlib?"
    },
    "mr": {
      "python": "plt.figure(figsize=(10,6))"
    },
    "question_id": 240398
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo guardar una gr\u00e1fica completa usando matplotlib?"
    },
    "mr": {
      "python": "matplotlib.rcParams.update({'font.size': 21})\nax = plt.gca()\n\nax2 = ax.twinx()\nfor i in range(10):\n    ax.bar(i, np.random.randint(1000))\n\nplt.ylabel('Datos')\nplt.savefig(\"Ejemplo1.jpg\")"
    },
    "question_id": 151744
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una funci\u00f3n para eliminar un elemento `n` de una lista `L`?"
    },
    "mr": {
      "python": "def eliminarEnLista(L):\n    n=int(raw_input(\"Ingrese el numero que desea eliminar de la lista: \"))\n    try:\n        L.remove(n)\n        print(L)\n    except ValueError:\n        print('{} no se encuentra en la lista'.format(n))"
    },
    "question_id": 206450
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una funci\u00f3n para eliminar un elemento `n` de una lista `L`?"
    },
    "mr": {
      "python": "def eliminarEnLista(L):\n    posicion = input(\"\u00bfQu\u00e9 posici\u00f3n que desea eliminar de la lista: \" + \",\".join(una_lista) + \" ? \")\n    if(str(n).isdigit() and int(n) <= len(L)):\n        L.pop(int(n))\n        return \",\".join(L)\n    else:\n        return \"Algo anda mal\"\n"
    },
    "question_id": 206450
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar elementos de dos listas `lista1` y `lista2` con longitudes diferentes?"
    },
    "mr": {
      "python": "mayor, menor = (lista1, lista2) if len(lista1) > len(lista2) else (lista2, lista1)\nlista3 = []\nfor i, _ in enumerate(mayor):\n    if i + 1 > len(menor):\n      lista3.append(mayor[i])\n    else:\n      lista3.append(mayor[i] + menor[i])"
    },
    "question_id": 102988
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar elementos de dos listas `lista1` y `lista2` con longitudes diferentes?"
    },
    "mr": {
      "python": "lista3 = []\n\n    for i in range(len(lista1)):\n      lista3.append(lista1[i])\n\n    for i in range(len(lista2)):\n      lista3[i] = lista3[i] + lista2[i]"
    },
    "question_id": 102988
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo imprimir en una sola l\u00ednea los elementos de una lista que est\u00e1 dentro de una tupla `tupla`?"
    },
    "mr": {
      "python": "c='' \nfor x in tupla[1] : \n  c = c+''.join(x) \nprint c"
    },
    "question_id": 21230
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo imprimir en una sola l\u00ednea los elementos de una lista que est\u00e1 dentro de una tupla `tupla`?"
    },
    "mr": {
      "python": "salida = ''\nfor sub1 in tupla[1]:\n      for sub2 in sub1:\n            salida += sub2\nprint salida"
    },
    "question_id": 21230
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo imprimir en una sola l\u00ednea los elementos de una lista que est\u00e1 dentro de una tupla `tupla`?"
    },
    "mr": {
      "python": "salida = ''.join(''.join(letra) for letra in tupla[1])"
    },
    "question_id": 21230
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo realizar una sumatoria de una lista `L` sin utilizar ciclos?"
    },
    "mr": {
      "python": "resultado = sum(L)"
    },
    "question_id": 148791
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo generar una matr\u00edz de `M`x`N` con una lista `L`?"
    },
    "mr": {
      "python": "np.array(L).reshape(M,N)"
    },
    "question_id": 8239
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo generar una matr\u00edz de `M`x`N` con una lista `L`?"
    },
    "mr": {
      "python": "args = [iter(L)]*M\nmatriz = list(zip_longest(*args))"
    },
    "question_id": 8239
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo mostrar la posici\u00f3n de los elementos repetidos en una lista `L`?"
    },
    "mr": {
      "python": "ux = defaultdict(list)\nfor index, item in enumerate(L):\n    aux[item].append(index)\nresult = {item: indexs for item, indexs in aux.items() if len(indexs) > 1}\nprint(result"
    },
    "question_id": 83439
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo mostrar la posici\u00f3n de los elementos repetidos en una lista `L`?"
    },
    "mr": {
      "python": "counts_por_elem = Counter(L)\n\nindices_por_elem = defaultdict(list)\nindices = []   \n\nfor indice, elem in enumerate(L):\n  if counts_por_elem[elem] > 1:\n    indices.append(indice)  \n    indices_por_elem[elem].append(indice)\n"
    },
    "question_id": 83439
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo contar cu\u00e1ntas veces se repite un car\u00e1cter en una cadena `S`?"
    },
    "mr": {
      "python": "Counter(S)"
    },
    "question_id": 188925
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una cadena con la primera letra de cada palabra en una cadena `S`?"
    },
    "mr": {
      "python": "words = S.split(' ') \ncharacter = ''\n\nfor word in words:\n   character += word[0]"
    },
    "question_id": 160722
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una cadena con la primera letra de cada palabra en una cadena `S`?"
    },
    "mr": {
      "python": "palabras = S.split()\nnueva_cadena = \"\"\nfor p in palabras:\n    nueva_cadena += p[0]"
    },
    "question_id": 160722
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo cambiar mi directorio de ejecuci\u00f3n actual a un directorio nuevo ubicado en la ruta `ruta_absoluta`?"
    },
    "mr": {
      "python": "os.chdir('ruta_absoluta')"
    },
    "question_id": 133561
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo dividir una lista `L` en una lista de listas cada `n` datos?"
    },
    "mr": {
      "python": "lista_nueva = []\nfor i in range(0, len(L), n):\n    lista_nueva.append(L[i:i+n])\nprint(lista_nueva)"
    },
    "question_id": 134908
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo dividir una lista `L` en una lista de listas cada `n` datos?"
    },
    "mr": {
      "python": "nueva_lista = [L[i:i+n] for i in range(0, len(L), n)]"
    },
    "question_id": 134908
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo comparar si el usuario ingresa como input un `int` o un `str`?"
    },
    "mr": {
      "python": "n=raw_input('ingrese numero jugadores: ') if str==str(int): \nprint('escribe un numero, no una letra')"
    },
    "question_id": 63139
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo comparar si el usuario ingresa como input un `int` o un `str`?"
    },
    "mr": {
      "python": "while True:\nn=raw_input('ingrese numero jugadores: ') \n   try: \n     n=int(n)\n     return n\n\n   except ValueError:\n\n      print 'Escribe un numero, no una letra.'"
    },
    "question_id": 63139
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo comparar si el usuario ingresa como input un `int` o un `str`?"
    },
    "mr": {
      "python": "while True:\nn=raw_input(\u2018ingrese numero jugadores: \u2018) \nif type(n) !=int:\n    raise TypeError, \u2018Escriba un numero\u2019"
    },
    "question_id": 63139
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo saber cu\u00e1ntas may\u00fasculas `M`, cu\u00e1ntas min\u00fasculas `m` y cu\u00e1ntos n\u00fameros `n` tiene un string `S`?"
    },
    "mr": {
      "python": "M = len([c for c in S if c.isupper()])\nm = len([c for c in S if c.islower()])\nn = len([c for c in S if c.isdigit()])"
    },
    "question_id": 52839
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo saber cu\u00e1ntas may\u00fasculas `M`, cu\u00e1ntas min\u00fasculas `m` y cu\u00e1ntos n\u00fameros `n` tiene un string `S`?"
    },
    "mr": {
      "python": "textoSoloMayusculas = re.sub('[^A-Z]', '', S)\n\ntextoSoloMinusculas = re.sub('[^a-z]', '', S)\n\ntextoSoloNumeros = re.sub('[^\\d]', '', S)\n\nM = len(textoSoloMayusculas)\n\nm = len(textoSoloMinusculas)\n\nn = len(textoSoloNumeros)"
    },
    "question_id": 52839
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo convertir un n\u00famero binario `n` a entero?"
    },
    "mr": {
      "python": "print(int(n))"
    },
    "question_id": 50423
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo pasar los datos `key`, `val` de un diccionario `key` a una hoja de c\u00e1lculo en el archivo `file`?"
    },
    "mr": {
      "python": "wb = Workbook()\nruta = file\n\nhoja = wb.active\nhoja.title = 'Fecha-Valor'\n\nfila = 1 #Fila donde empezamos\ncol_fecha = 1 #Columna donde guardamos las fechas\ncol_dato = 2 #Columna donde guardamos el dato asociados a cada fecha\n\nfor key, val in dic.items():\n    hoja.cell(column=col_fecha, row=fila, value=key)\n    hoja.cell(column=col_dato, row=fila, value=val)\nfila+=1\n\nwb.save(filename = ruta)"
    },
    "question_id": 36060
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo escoger cuatro valores aleatorios `L1`, `L2`, `L3`, `L4` de una cadena `S` sin repetir?"
    },
    "mr": {
      "python": "L1, L2, L3, L4 = random.sample(S, 4)"
    },
    "question_id": 39861
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un diccionario con `num_nodo` n\u00famero de valores dentro de otro diccionario `grafo`?"
    },
    "mr": {
      "python": "def generarGrafo(num_nodos):   \n    grafo = {}\n\n    for i in range(num_nodos):\n        nodo = raw_input(' ID Nodo %d:' %(i+1))       \n        num_nodos_asociados = input('  Numero de nodos asociados a nodo  '%s':' %(nodo))\n        grafo[nodo] = {}\n\n        for j in range(int(num_nodos_asociados)):\n            nodo_asociado = raw_input('   ID nodo %d asociado:' %(j+1)) \n            peso_asociado = input(' Peso asociado (Arista(%s,%s) ): ' %(nodo, nodo_asociado) )\n            grafo[nodo][nodo_asociado] = peso_asociado\n    return grafo"
    },
    "question_id": 26549
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ejecutar una parte de un c\u00f3digo hasta que una condici\u00f3n `cond` se cumpla?"
    },
    "mr": {
      "python": "while True:\n    if cond:\n        break"
    },
    "question_id": 67977
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo pasar dos formularios `form1` y `form2` a una vista `View` en Django?"
    },
    "mr": {
      "python": "class View(MultiFormsView):\n    form_class = {\n        'dragon': UserProfileForm,\n        'unicornio': UserForm\n    }"
    },
    "question_id": 22420
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ejecutar un fragmento de c\u00f3digo `funcion` cada d\u00eda a una hora `hora` con un delay `delay` determinada en un script en ejecuci\u00f3n?"
    },
    "mr": {
      "python": "class Temporizador(Thread):\n    def __init__(self, hora, funcion):\n        super(Temporizador, self).__init__()\n        self._estado = True\n        self.hora = hora\n        self.delay = delay\n        self.funcion = funcion\n\n    def stop(self):\n        self._estado = False\n\n    def run(self):\n        aux = datetime.strptime(self.hora, '%H:%M:%S')\n        hora = datetime.now()\n        hora = hora.replace(hour = aux.hour, minute=aux.minute, second=aux.second, microsecond = 0)\n        if hora <= datetime.now():\n            hora += timedelta(days=1)\n\n        while self._estado:\n            if hora <= datetime.now():\n                self.funcion()\n                hora += timedelta(days=1)\n            sleep(self.delay)"
    },
    "question_id": 38195
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo limpiar la consola tras cada ejecuci\u00f3n de un ciclo while?"
    },
    "mr": {
      "python": "While True:\n\tos.system('cls')"
    },
    "question_id": 71551
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo leer un archivo de texto `file` y generar una lista `arr` con cada una de sus l\u00edneas?"
    },
    "mr": {
      "python": "with open(file, 'r') as ins:\n    cont = ins.read()  \n    arr = eval(cont)"
    },
    "question_id": 17679
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo extraer datos `commentinfo` de una url `url` que est\u00e1n en formato XML?"
    },
    "mr": {
      "python": "url = url\nuh = urllib.urlopen(url)\ndata = uh.read()\ncommentinfo = ET.fromstring(data)"
    },
    "question_id": 3122
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo extraer datos `commentinfo` de una url `url` que est\u00e1n en formato XML?"
    },
    "mr": {
      "python": "url = url\nparsed_data = untangle.parse(url)\ncommentinfo = parsed_data.commentinfo.comments.comment"
    },
    "question_id": 3122
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ordenar una lista `list` de n\u00fameros dados por el usuario en consola?"
    },
    "mr": {
      "python": "list = []\ntext = input('Ingrese Numero ')\nlist = [int(i) for i in text.split(' ')]\nlist.sort()"
    },
    "question_id": 30292
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ordenar una lista `list` de n\u00fameros dados por el usuario en consola?"
    },
    "mr": {
      "python": "list = []  \nprint('Ingresa 3 Numeros')\nfor x in range(3):\n    ingresado = input('Ingrese:')  \n    list.append(ingresado)  \n\nlist.sort() "
    },
    "question_id": 30292
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ordenar una lista `list` de n\u00fameros dados por el usuario en consola?"
    },
    "mr": {
      "python": "print('Ingresa numeros, 0 para terminar')\nlist = []\nnum = input()\nwhile num != 0:\n    list.append(num)\n    num = input()\n\nprint(\"%d numeros fueron escritos\") % len(list)\nprint(sorted(list))"
    },
    "question_id": 30292
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo a\u00f1adir listas `lista` con valores `val1` y `val2` ingresados por el usuario en otra lista `lista2`?"
    },
    "mr": {
      "python": "lista2 = []\nrespuesta = ''\nwhile respuesta.lower() != 'no':\n    lista = []\n    val1 = lista.append(raw_input('ingrese val1: '))\n    val2 = lista.append(raw_input('ingrese val2: ))\n    lista2.append(lista)\n    respuesta = raw_input('si desea ingresar datos de otro alumno ingrese Si, de lo contrario, ingrese No ')"
    },
    "question_id": 43558
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo capturar el valor de una tecla cuando el usuario la presiona?"
    },
    "mr": {
      "python": "ch = screen.getch()"
    },
    "question_id": 71086
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo capturar el valor de una tecla cuando el usuario la presiona?"
    },
    "mr": {
      "python": "def teclaPulsada(key): \n    print(\"Pulsada: \", key) \n    with Listener(on_press=teclaPulsada) as listener: \n        listener.join() "
    },
    "question_id": 71086
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ejecutar un funci\u00f3n `fun` de manera asincr\u00f3nica?"
    },
    "mr": {
      "python": "with ThreadPoolExecutor() as e:\n        fs = {e.submit(fun)}\n        wait(fs)"
    },
    "question_id": 68420
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un Frame `mainframe` en Tkinter?"
    },
    "mr": {
      "python": "root=tk.Tk()\n\nmainframe = ttk.Frame(root)\nmainframe.grid()\nmainframe['padding'] = 5, 10"
    },
    "question_id": 62981
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar el valor m\u00e1s alto de `n` valores ingresados por consola?"
    },
    "mr": {
      "python": "n_mayor = 0\nk = 1\nn = input(\"Escriba la cantidad de numeros que desea comparar: \")\nwhile k<=n:\n    n = float(input('Digitar numero: '))\n    if n>n_mayor:\n        n_mayor = n\n    else:\n        n_mayor = n_mayor\n    k = k+1\nprint 'El mayor numero es: ',n_mayor"
    },
    "question_id": 5382
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un gr\u00e1fico de barras con los datos de un Data Frame `df` agrupados por la columna `col`?"
    },
    "mr": {
      "python": "grp=df.groupby(col)\ngrp.size().plot(kind='bar')"
    },
    "question_id": 21371
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una lista de tuplas de 2 valores a partir de una lista `lista`?"
    },
    "mr": {
      "python": "def troceo(lista):\n    return list(zip(*[iter(lista)]*2))"
    },
    "question_id": 22582
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una lista de tuplas de 2 valores a partir de una lista `lista`?"
    },
    "mr": {
      "python": "zipped = zip(lista[0::n], lista[1::2]) "
    },
    "question_id": 22582
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar la primera fila en una matriz 'matriz' que contenga solo n\u00fameros positivos y reemplazar cada fila de la lista por la suma de estos n\u00fameros?"
    },
    "mr": {
      "python": "def suma_nasver(matriz):\n    resultado = []\n    suma = 0\n    for arreglo in matriz:\n \n        elementos_negativos = list(filter(lambda elem: elem < 0, arreglo))\n        if not elementos_negativos:\n            \n            suma = sum(arreglo)\n            break\n\n    if suma:\n  \n        [resultado.append([suma]) for _ in range(len(matriz))]\n    return resultado"
    },
    "question_id": 2320
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar la primera fila en una matriz 'matriz' que contenga solo n\u00fameros positivos y reemplazar cada fila de la lista por la suma de estos n\u00fameros?"
    },
    "mr": {
      "python": "suma_positivos = 0\n\nfor fila in matriz:\n    \n    if all([numero > 0 for numero in fila]):\n            suma_positivos =  sum(fila)\n                   \n            break\n\nif suma_positivos:\n    matriz = [[suma_positivos for value in matriz] for row in matriz]"
    },
    "question_id": 2320
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo encontrar la primera fila en una matriz 'matriz' que contenga solo n\u00fameros positivos y reemplazar cada fila de la lista por la suma de estos n\u00fameros?"
    },
    "mr": {
      "python": "sumallpos = sum(next((x for x in matriz if min(x) > 0), [0]))\nif sumallpos:\n    matriz = [[sumallpos for x in y] for y in matriz]\nelse:\n    print('No hay filas con todos elementos positivos.')"
    },
    "question_id": 2320
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo convertir un archivo `file` csv en un array `list`?"
    },
    "mr": {
      "python": "reader = csv.reader(open(file, 'rb'))\nfor row in (reader):\n    row.split(',')\n    file = [row[0],row[1],row[2],row[3]]"
    },
    "question_id": 45217
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener la ra\u00edz digital de un n\u00famero `num`?"
    },
    "mr": {
      "python": "def raiz_digital(num):\n    suma = sum(int(digito) for digito in str(num))\n    if suma < 10:\n        return suma\n    else:\n        return raiz_digital(suma)"
    },
    "question_id": 1651
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener la ra\u00edz digital de un n\u00famero `num`?"
    },
    "mr": {
      "python": "def getDigitalRoot(num):\n    return num if num == 0 else num % 9 or 9"
    },
    "question_id": 1651
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener la ra\u00edz digital de un n\u00famero `num`?"
    },
    "mr": {
      "python": "def digital_root(num):\n    n = str(num)\n    while(len(n) > 1):\n        n = str(reduce(lambda x, y: x + y, map(int, n)))\n    return int(n)"
    },
    "question_id": 1651
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener los dos \u00faltimos d\u00edgitos del a\u00f1o seguidos del d\u00eda del a\u00f1o desde un datetime `date`?"
    },
    "mr": {
      "python": "print (date.strftime('%y%j'))"
    },
    "question_id": 1139
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo convertir de min\u00fasculas a may\u00fasculas un string `S`?"
    },
    "mr": {
      "python": "S.upper()"
    },
    "question_id": 15727
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo dividir un n\u00famero entero `num` por un n\u00famero `num1` decimal?"
    },
    "mr": {
      "python": "resultado = numero / n\u00famero1"
    },
    "question_id": 47500
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo conectarme a una red wifi `red` con contrase\u00f1a `pass`?"
    },
    "mr": {
      "python": "\"wireless = Wireless()\nwireless.interface()\nwireless.connect(ssid=red, password=pass)"
    },
    "question_id": 956
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear n objetos `obj` iguales?"
    },
    "mr": {
      "python": "for i in range(1,n):\n    exec(obj.format(i))"
    },
    "question_id": 60867
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear n objetos `obj` iguales?"
    },
    "mr": {
      "python": "[obj] * n "
    },
    "question_id": 60867
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un programa para guardar valores `key`, `val` en un diccionario `dic` en un archivo `file`?"
    },
    "mr": {
      "python": "def agregar(dic):\n    key = input(\u2018Palabra en espa\u00f1ol: \u2018)\n    val = input(\u2018Palabra en ingles: \u2018)\n    dic[key] = val\n\ndef cargar_datos():\n    try:\n        with open(file, \u2018rb\u2019) as f:\n            return pickle.load(f)\n    except (OSError, IOError) as e:\n        return dict()\n\ndef guardar_datos(dic):\n    with open(\u2018traducciones.dat\u2019, \u2018wb\u2019) as f:\n        pickle.dump(dic, f)\n\n\ndef main():\n    dic = cargar_datos()\n    menu ='''\n    2. A\u00f1adir palabra.\n    3. Guardar y salir.\n    '''\n\n    while True:\n        print(menu)\n        decision = input(\u2018\u00bfQue quieres hacer?: \u2018)\n        elif decision == \u20181\u2019:\n            agregar(dic)\n        elif decision == \u20182\u2019:\n            guardar_datos(dic)\n            break\n        else:\n            print('Opci\u00f3n inv\u00e1lida, intentelo de nuevo.')\n\nif __name__ == '__main__':\n    main()"
    },
    "question_id": 68734
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo utilizar el comando cd en un script?"
    },
    "mr": {
      "python": "os.chdir('..')"
    },
    "question_id": 18276
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo utilizar el comando cd en un script?"
    },
    "mr": {
      "python": "os.system('cd ..') "
    },
    "question_id": 18276
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo imprimir `n` n\u00fameros `num` ingresados por consola en la misma linea?"
    },
    "mr": {
      "python": "num=int(input(\"Ingrese un numero:\"))\na=0\nwhile(a<n):\n    print(num, end=',')\n    a+=1\""
    },
    "question_id": 66226
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo imprimir `n` n\u00fameros `num` ingresados por consola en la misma linea?"
    },
    "mr": {
      "python": "num=int(input(\u2018Ingrese un numero:\u2019))\na=0\nnumeros = \u2018\u2019 #String que contendra los numeros\nwhile(a<n):\n    numeros = numeros + str(num) + \",\" #agregamos al string el numeros y una coma\n    a+=1\n\nnumeros = numeros[:-1] \nprint numeros \n"
    },
    "question_id": 66226
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo trasponer una lista `aux`?"
    },
    "mr": {
      "python": "aux = [[fila[i] for fila in aux ] for i in range(len(aux[0]))]"
    },
    "question_id": 56480
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo trasponer una lista `aux`?"
    },
    "mr": {
      "python": "aux = np.transpose(aux)"
    },
    "question_id": 56480
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo trasponer una lista `aux`?"
    },
    "mr": {
      "python": "aux = [list(i) for i in zip(*aux)]"
    },
    "question_id": 56480
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular la cantidad de n\u00fameros primos en una lista `lista` y ordenarla de manera ascendente y descendente?"
    },
    "mr": {
      "python": "def is_prime(n):\n    return n > 1 and all(n % i for i in range(2, n))\n\nprint(\"Cantidad de primos   : {0}\".format(sum(1 for n in lista if is_prime(n))))\nprint(\"Lista ordenada (asc) : {0}\".format(sorted(lista)))\nprint(\"Lista ordenada (desc): {0}\".format(sorted(lista,reverse=True)))"
    },
    "question_id": 54616
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un intervalo de fecha de inicio `desde` hasta una fecha final `hasta`?"
    },
    "mr": {
      "python": "def rango_fechas(desde, hasta):\n    rango = []\n    dias_totales = (hasta - desde).days\n    for days in range(dias_totales + 1): \n        fecha = desde + relativedelta(days=days)\n        rango.append(fecha)\n    return rango"
    },
    "question_id": 7601
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo identificar si el texto `addr` introducido por consola es un dominio o una ip?"
    },
    "mr": {
      "python": "addr = raw_input('Introduce la ip o el nombre de dominio: ')\ndominios = ['gmail','hotmail']\nbandera = \n\nfor proveedor in dominios :\n    if (cadena.find(proveedor,0,len(cadena)) > 0):\n       bandera = True\n\nif(bandera):\n    print 'es un proveedor'\nelse:\n    print 'es un dominio'"
    },
    "question_id": 51617
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo identificar si el texto `addr` introducido por consola es un dominio o una ip?"
    },
    "mr": {
      "python": "addr = raw_input('Introduce la ip o el nombre de dominio: ')\naddrs= ['.com', '.es']\nencontrado = False\n\nfor valor in addrs :\n    if addr.find(valor) > -1 :\n        encontrado = True\n\n\nif encontrado :\n    print 'es un dominio'\nelse:\n    print 'es una ip'"
    },
    "question_id": 51617
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo identificar si el texto `addr` introducido por consola es un dominio o una ip?"
    },
    "mr": {
      "python": "addr=input ('Introduce la ip o el nombre de dominio: ')\n\ntry:\n    aux=int(addr)\n    print (addr, ': es una ip')\n\nexcept:\n   print (addr, ' es un dominio')"
    },
    "question_id": 51617
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo especificar que un campo `field` de un Form en Django no es obligatorio?"
    },
    "mr": {
      "python": "def __init__(self, *args, **kwargs):\n    super(self.__class__, self).__init__(*args, **kwargs)\n    \n    self.fields[field].required = False  \n"
    },
    "question_id": 30470
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular la pendiente entre cada uno de los puntos en los arrays `x`, `y` y graficarlos?"
    },
    "mr": {
      "python": "pendiente = np.diff(y) / np.diff(x)\nplt.plot(pendiente, '-m')\nplt.show()\n"
    },
    "question_id": 3070
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo hacer un campo `field` de un formulario `Form`requerido en Django?"
    },
    "mr": {
      "python": "class Form(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(Form, self).__init__(*args, **kwargs)\n        self.fields[field].widget.attrs = {\n            'required': True\n        }"
    },
    "question_id": 4201
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo eliminar todos los danos no num\u00e9ricos de una lista `list`?"
    },
    "mr": {
      "python": "l2 = []\nfor elem in list:\n    try:\n        l2.append(float(elem))\n    except ValueError:\n        pass"
    },
    "question_id": 8218
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo eliminar todos los danos no num\u00e9ricos de una lista `list`?"
    },
    "mr": {
      "python": "with localcontext(ExtendedContext):\n    l2 = [ x for x in (Decimal(s) for s in list)\n                 if x.is_finite() ]"
    },
    "question_id": 8218
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar los m\u00faltiplos de `n` desde 1 hasta `m`?"
    },
    "mr": {
      "python": "def multiplo():\n    numero = n\n    total = 0 \n\n    while numero <= m:\n        total = total + numero\n        numero = numero + n\n    print(total)"
    },
    "question_id": 56815
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar los m\u00faltiplos de `n` desde 1 hasta `m`?"
    },
    "mr": {
      "python": "numero = 1\nwhile numero <= m:\n\n        total = n * numero\n        numero = numero + 1\n\n   print(total)"
    },
    "question_id": 56815
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar los m\u00faltiplos de `n` desde 1 hasta `m`?"
    },
    "mr": {
      "python": "def multiplos_de_n():\n    total = 0\n    for i in range(1, m+1):\n        if (i % n) == 0:\n            print '%d es multiplo de n' % (i)\n            total += i\n\n    print 'El total de sumar los multiplos de n entre 1 y m es: %d' % (total)"
    },
    "question_id": 56815
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo guardar el resultado de un comando `command` externo?"
    },
    "mr": {
      "python": "resultado =subprocess.check_output(command, shell=True)"
    },
    "question_id": 65586
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo leer elementos de un archivo de texto `file` y agregarlos a una lista `list`?"
    },
    "mr": {
      "python": "list = []\narch = open(file, 'r')\n\nfor linea in arch:\n    list.append(int(linea))\n\narch.close()"
    },
    "question_id": 67166
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo leer elementos de un archivo de texto `file` y agregarlos a una lista `list`?"
    },
    "mr": {
      "python": "list=[]\n\narch = open(file, 'r')\n\nfor linea in arch:\n    list.append(linea.strip())\n\narch.close() "
    },
    "question_id": 67166
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo leer elementos de un archivo de texto `file` y agregarlos a una lista `list`?"
    },
    "mr": {
      "python": "list = []\nwith open(file) as procfile:\n    for line in procfile:\n        list.append(line.strip())\nreturn list"
    },
    "question_id": 67166
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular el n\u00famero de palabras `num` que contengan la letra `ch` en un texto `S`?"
    },
    "mr": {
      "python": "num = 0\nfor palabra in S.split():\n    if ch in palabra:\n        num  += 1\nprint num"
    },
    "question_id": 49118
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular el n\u00famero de palabras `num` que contengan la letra `ch` en un texto `S`?"
    },
    "mr": {
      "python": "num=0\ntextoLista=S.split()\n\nfor palabra in textoLista:\n    for caracter in palabra:\n        if ch == caracter:\n            contador=contador+1\n            break\nprint contador"
    },
    "question_id": 49118
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo agregar los elementos de una cadena `S` a una matriz de `n`x`m`?"
    },
    "mr": {
      "python": "matrix = []\npos = 0\n\nfor i in range(n):\n    matrix.append([])\n    for j in range(m):\n        matrix[i].append(S[pos] if pos < len(S) else None)\n        pos += 1\n\nprint matrix"
    },
    "question_id": 21173
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo agregar los elementos de una cadena `S` a una matriz de `n`x`m`?"
    },
    "mr": {
      "python": "matrix = []\naux=0\nfor i in range(n):\n    for j in range(n):\n        if aux<len(S):\n            matrix[i][j] = S[aux]  \n            aux+=1"
    },
    "question_id": 21173
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo puedo multiplicar dos listas de `INT` `L1` y `L2` ?"
    },
    "mr": {
      "python": "L1 = [3,4,2,6]\nL2 = [98, 80,86,78]\n\nlista_multi = list(map(operator.mul, L1, L2))\""
    },
    "question_id": 96261
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo puedo multiplicar dos listas de `INT` `L1` y `L2` ?"
    },
    "mr": {
      "python": "np.multiply(L1,L2)"
    },
    "question_id": 96261
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo puedo multiplicar dos listas de `INT` `L1` y `L2` ?"
    },
    "mr": {
      "python": "lista_multi = []\ni = 0 \nfor x in lista_creditos:\n        cr = L1[i]\n        ca = L2[i]\n        print cr, ca, cr * ca\n        lista_multi.append(cr*ca)\n        i = i + 1"
    },
    "question_id": 96261
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener las posiciones del array `L` donde encuentre un valor `x`?"
    },
    "mr": {
      "python": "array = np.array(L)\nnp.where(array == x)"
    },
    "question_id": 24577
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo filtrar datos que contengan el valor `val`en la columna `col` al cargar un CSV en un dataframe `df1` usando Pandas?"
    },
    "mr": {
      "python": "df[df[col] == val]\""
    },
    "question_id": 96541
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo loguearse en una p\u00e1gina web `x` usando el usuario `user` y la contrase\u00f1a `pass` y descargar un archivo ubicado en el link de acceso `link`?"
    },
    "mr": {
      "python": "browser = mechanize.Browser() \nbrowser.set_handle_robots(False)   \nbrowser.open(x)\n\nbrowser.select_form(name=\"login_form\") \nbrowser[\"username\"] = user browser[\"password\"] = pass\nresponse = browser.submit()\n\n\nbrowser.retrieve(link)[0]\""
    },
    "question_id": 3778
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un dataframe `df1` a partir de otro dataframe `df` filtrando columnas que contengan \u00fanicamente datos de tipo \u00b4type\u00b4?"
    },
    "mr": {
      "python": "df1 = df.select_dtypes(include=[np.type])"
    },
    "question_id": 148266
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un dataframe `df1` a partir de otro dataframe `df` filtrando columnas que contengan \u00fanicamente datos de tipo \u00b4type\u00b4?"
    },
    "mr": {
      "python": "df1 = []\nfor col in df.columns:\n  if df[col].dtype == type:\n    df1.append(df[col])\""
    },
    "question_id": 148266
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo abrir un archivo `fichero.txt` en modo lectura y escritura?"
    },
    "mr": {
      "python": "with open(fichero, 'r') as archivo:\n    pass   \n\nwith open(fichero, 'w') as archivo:\n    pass"
    },
    "question_id": 35491
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo abrir un archivo `fichero.txt` en modo lectura y escritura?"
    },
    "mr": {
      "python": "with open(fichero, 'r+') as archivo:"
    },
    "question_id": 35491
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo cambiar el nombre de un archivo ubicado en la direcci\u00f3n `dir` a `file`?"
    },
    "mr": {
      "python": "os.rename(dir, file)"
    },
    "question_id": 68258
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo cambiar el nombre de un archivo ubicado en la direcci\u00f3n `dir` a `file`?"
    },
    "mr": {
      "python": "os.rename(dir, file)"
    },
    "question_id": 68258
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo inveritr las palabras individuales de un string `S`?"
    },
    "mr": {
      "python": "def invert(m):\n    return m.group(0)[::-1]\n\nresultado = pat.sub(invert, S)"
    },
    "question_id": 194809
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo inveritr las palabras individuales de un string `S`?"
    },
    "mr": {
      "python": "[x[::-1] for x inS).split(' ')]"
    },
    "question_id": 194809
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo inveritr las palabras individuales de un string `S`?"
    },
    "mr": {
      "python": "def reverse(S):\n    return ' '.join(list(map(lambda x: x[::-1], S.split())))"
    },
    "question_id": 194809
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo eliminar una carpeta `dir` con varios archivos dentro?"
    },
    "mr": {
      "python": "shutil.rmtree(dir)"
    },
    "question_id": 103768
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo generar en la terminal un 'Presione 'ESC' para continuar...'?"
    },
    "mr": {
      "python": "print('Presione 'Esc' para continuar...')\nkey = None\nwhile key != '\\x1b':\n    key = msvcrt.getch()"
    },
    "question_id": 129724
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo puedo sustituir valores `falta` si el valor es 0 y `sobra` si el valor es 1 '' en un dataframe `df`?"
    },
    "mr": {
      "python": "new_df = df.astype('str')\nnew_df[new_df == \"1\"] = 'Presente'\nnew_df[new_df == \"0\"] = 'Falta'"
    },
    "question_id": 104440
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo puedo sustituir valores `falta` si el valor es 0 y `sobra` si el valor es 1 '' en un dataframe `df`?"
    },
    "mr": {
      "python": "df.replace({1: 'presente', 0: 'falta'},  inplace = True)"
    },
    "question_id": 104440
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo hacer una tabla de distribuci\u00f3n de frecuencias de los datos del archivo `file`?"
    },
    "mr": {
      "python": "filename = file\ndata = np.loadtxt(filename)\nhist, bin_edges = np.histogram(data, 10)\nplt.hist(data, bins=bin_edges)\nplt.show()"
    },
    "question_id": 40830
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo hacer una tabla de distribuci\u00f3n de frecuencias de los datos del archivo `file`?"
    },
    "mr": {
      "python": "lista_variables = file.values.tolist()\n# Ordenaci\u00f3n de los datos.\nlista_ordenada_variables = np.sort(lista_variables, axis=None)\nfrecuencias = pd.Series(lista_ordenada_variables).value_counts()\nprint (\"\\nVariable (X) - Frecuencias absolutas (f)\\n\" ,dicc(frecuencias))"
    },
    "question_id": 40830
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear rutas relativas `rut` con una ruta base `base`?"
    },
    "mr": {
      "python": "Rutasol = os.path.join(rut, base)\nRutasol = os.path.abspath(Rutasol)"
    },
    "question_id": 55025
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear rutas relativas `rut` con una ruta base `base`?"
    },
    "mr": {
      "python": "rutabase = Path(base)\n\nrutarel = Path(rut)\n\nrutasol = rutabase + rutarel"
    },
    "question_id": 55025
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo recorrer los valores de un diccionario `dic` de listas?"
    },
    "mr": {
      "python": "for key in dic:\n   dic[key]"
    },
    "question_id": 110548
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo determinar si todos los d\u00edgitos de un n\u00famero entero `num` son iguales?"
    },
    "mr": {
      "python": "def digitos_iguales(num):\n    return num == 0 or num % ((10**int(log10(abs(num))+1) - 1) // 9) == 0"
    },
    "question_id": 33325
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo determinar si todos los d\u00edgitos de un n\u00famero entero `num` son iguales?"
    },
    "mr": {
      "python": "def digitos_iguales(num):\n    m, c = divmod(num, 10)\n    d = c\n\n    while m>0 and d == c:\n        m, d = divmod(m, 10)\n\n    return (d==c)"
    },
    "question_id": 33325
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo determinar si todos los d\u00edgitos de un n\u00famero entero `num` son iguales?"
    },
    "mr": {
      "python": "ultimoDigito = num % 10\ntodosIguales = True\nwhile (n != 0) & (todosIguales):\n    digito = n % 10\n    n = n // 10\n    todosIguales = digito == ultimoDigito"
    },
    "question_id": 33325
  },
  {
    "question": {
      "es": "\u00bfComo sumar los d\u00edgitos de un numero `num`, y seguir sumando si esta suma aun tiene mas de 1 d\u00edgito?"
    },
    "mr": {
      "python": "def suma_de_digitos_iterativa(num): \n    while num > 9:\n        num = sum(int(d) for d in str(num))\n    return num"
    },
    "question_id": 144004
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una ventana de confirmaci\u00f3n al intentar cerrar una ventana en tkinter?"
    },
    "mr": {
      "python": "class MyDialog:\n    def __init__(self, parent):\n        self.top = tk.Toplevel(parent)\n        self.parent = parent\n        self.top.title(\"Salir\")\n\n        tk.Label(self.top, text=\"\u00bfEst\u00e1 seguro?\").grid(row=0, column=0, columnspan=2)\n\n        self.button1 = tk.Button(self.top, text=\"Si, salir de la app.\", command=self.salir)\n        self.button2 = tk.Button(self.top, text=\"No, solo minimizar.\", command=self.minimizar)\n        self.button1.grid(row=1, column=0, padx=5, pady=5)\n        self.button2.grid(row=1, column=1, padx=5, pady=5)\n\n    def salir(self):\n        self.top.destroy()\n        self.parent.destroy()\n\n    def minimizar(self):\n        self.top.destroy()\n        self.parent.iconify()\n\n\nclass MyApp:\n    def __init__(self, parent):\n        self.parent = parent\n        self.parent.protocol(\"WM_DELETE_WINDOW\", self.on_closing)\n\n    def on_closing(self):\n        d = MyDialog(root)\n        self.parent.wait_window(d.top)\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = MyApp(root)\n    root.mainloop()"
    },
    "question_id": 104691
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo convertir cada l\u00ednea de un archivo de texto `file` en una lista?"
    },
    "mr": {
      "python": "salida = []\nwith open(file, 'r') as f:\n    lineas = [linea.split() for linea in f]"
    },
    "question_id": 69610
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo comparar si cada valor del vector `a` es menor que el del vector `b`?"
    },
    "mr": {
      "python": "def elementos_a_menor_que_elementos_b(a, b):\n    if len(a) != len(b):\n        print('Las listas no tiene el mismo tama\u00f1o')\n        return False\n\n    for item_a, item_b in zip(a, b):\n        if item_a > item_b:\n            return False\n\n    return True"
    },
    "question_id": 90333
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo comparar si cada valor del vector `a` es menor que el del vector `b`?"
    },
    "mr": {
      "python": "c = np.all(np.array(a) < np.array(b))"
    },
    "question_id": 90333
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo comparar si cada valor del vector `a` es menor que el del vector `b`?"
    },
    "mr": {
      "python": "np.all(np.less(a,b))"
    },
    "question_id": 90333
  },
  {
    "question": {
      "es": "\u00bfComo generar un archivo csv a partir de una lista `list`?"
    },
    "mr": {
      "python": "datos = np.asarray(list)\nnp.savetxt('output.csv',   \n           datos.T,        \n           fmt='%d',       \n           delimiter=',')"
    },
    "question_id": 11698
  },
  {
    "question": {
      "es": "\u00bfComo generar un archivo csv a partir de una lista `list`?"
    },
    "mr": {
      "python": "with open('output.csv', 'wb') as f:\n  writer = csv.writer(f)\n  writer.writerows(zip(*list))"
    },
    "question_id": 11698
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar dos vectores `a` y `b` representados por tuplas?"
    },
    "mr": {
      "python": "tuple(sum(x) for x in zip(a, b))"
    },
    "question_id": 314
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar dos vectores `a` y `b` representados por tuplas?"
    },
    "mr": {
      "python": "lambda a,b: tuple(starmap(add, izip(a, b)))"
    },
    "question_id": 314
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo llamar a la funcion `get` de un script `model_get ` desde otro script?"
    },
    "mr": {
      "python": "from .model_get import get"
    },
    "question_id": 183228
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo mostrar un n\u00famero `num` con `n` ceros a la izquierda?"
    },
    "mr": {
      "python": "num.zfill(n)"
    },
    "question_id": 60617
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear una pir\u00e1mide de asteriscos con n\u00famero de l\u00edneas `lineas`?"
    },
    "mr": {
      "python": "def Piramide(lineas):    \n    for numero_linea in range(lineas): \n        espacios = lineas - numero_linea - 1 \n        asteriscos = 1 + numero_linea * 2\n        print \" \" * espacios + \"*\" * asteriscos\n    return "
    },
    "question_id": 4799
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo pasar el valor de una variable `SueldoBruto` de la clase `Trabajador` de una funci\u00f3n `calcular_sueldo` a la funci\u00f3n `imprimir_sueldo`?"
    },
    "mr": {
      "python": "class Trabajador: \n    \n    SueldoBruto = 0\n    \n\ndef calcular_sueldo():\n        Trabajadores.SueldoBruto = 10000\n\ndef imprimir_sueldo():\n        print(Trabajador.SueldoBruto)"
    },
    "question_id": 84618
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo extraer datos de la hoja `sheet` en un archivo `file` de excel y crear un diccionario de listas `dic`?"
    },
    "mr": {
      "python": "wb = openpyxl.load_workbook(file)\nws = wb.get_sheet_by_name(sheet)\n\ndic = collections.defaultdict(list)\nfor row in ws.iter_rows():\n    dic[row[0].value].append(row[1].value)"
    },
    "question_id": 113620
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo extraer datos de la hoja `sheet` en un archivo `file` de excel y crear un diccionario de listas `dic`?"
    },
    "mr": {
      "python": "wb2 = xlrd.open_workbook(file)\nsheet = wb2.sheet_by_index(sheet)\n\ndir_cantidad = len(sheet.col_values(0)) - 1\n\nLista = {}\n\nfor i in range(0,dir_cantidad):\n    \n    connection = sheet.cell(i, 0).value\n    \n\n    if connection in Lista:\n        conn = Lista.get(connection)\n        conn.append(sheet.cell(i, 1).value)\n        \n        Lista[connection] = conn\n    else:\n        Lista[connection] = [sheet.cell(i, 1).value]\n"
    },
    "question_id": 113620
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un diccionario `dic2` con la suma de los valores de cada una de las llaves en un diccionario `dic`?"
    },
    "mr": {
      "python": "dic2 = {key: [sum(value)] for key, value in dic.items()}"
    },
    "question_id": 87732
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo crear un diccionario `dic2` con la suma de los valores de cada una de las llaves en un diccionario `dic`?"
    },
    "mr": {
      "python": " def suma_valores_dic(dic):\n        dic2 = {}\n        for key, value in dic.items():\n            suma = 0\n            for v in value:\n                suma += v\n            dic2[key] = suma\n        return dic2"
    },
    "question_id": 87732
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo insertar `n` filas a una matr\u00edz `M` de numpy?"
    },
    "mr": {
      "python": "for i in range(n) : \n\tM = numpy.insert(M, i, [i + 1, 0, 0])"
    },
    "question_id": 39070
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo extrar el n\u00famero mayor  y el n\u00famero menor que el usuario introduce por comando a una lista `list`?"
    },
    "mr": {
      "python": "num = int(input('\u00bfCu\u00e1ntos n\u00fameros vas a introducir?: '))\nlist = []\nfor _ in range(num):\n    numero = int(input('Dime un n\u00famero: '))\n    listaNumeros.append(numero)\n\nprint('El n\u00famero mayor es el {}'.format(max(list)))\nprint('El n\u00famero menor es el {}'.format(min(list)))"
    },
    "question_id": 107415
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo extrar el n\u00famero mayor  y el n\u00famero menor que el usuario introduce por comando a una lista `list`?"
    },
    "mr": {
      "python": "num = int(input('\u00bfCu\u00e1ntos n\u00fameros vas a introducir?: '))\ncont=0\nmayor=0\nmenor=999999\nlist = []\nwhile num>0:\n    num=num-1\n    numeros=int(input('Dime un n\u00famero: '))\n    listaNumeros.append(numeros)\n    if mayor<numeros:\n         mayor=numeros\n    if menor>numeros:\n         menor=numeros\n    if numeros<0:\n        cont=cont+1\n\nprint('El n\u00famero mayor es el ' % mayor)\nprint('El n\u00famero menor es el ' % menor)"
    },
    "question_id": 107415
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo eliminar filas y columnas de una matriz `matriz` si todos sus valores son 0?"
    },
    "mr": {
      "python": "good_cols = numpy.any(matriz_v.T != 0,  axis = 1)\nmatriz_v = matriz_v[:, good_cols][good_cols, :]"
    },
    "question_id": 71462
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar los valores de la columna `a` agrupando los valores de las columnas `b` y `c` en un dataframe df?"
    },
    "mr": {
      "python": "g = df.groupby(['b', 'c'])['a'].sum()"
    },
    "question_id": 122879
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo graficar los datos de una hoja `sheet` de un documento de excel `file`?"
    },
    "mr": {
      "python": "wb = load_workbook(file, data_only=True)\nsheet1 = wb.get_sheet_by_name(sheet)\n\nmatriz = np.zeros((sheet1.max_row, sheet1.max_column))\n\nfor i in range(0,sheet1.max_row):\n    for j in range(0,sheet1.max_column):\n        matriz[i,j]=sheet1.cell(row=i+1, column=j+1).value\n\ncolors = cycle([\"aqua\", \"black\", \"blue\", \"fuchsia\", \"gray\", \"green\", \"lime\", \"maroon\", \"navy\", \"olive\", \"purple\", \"red\", \"silver\", \"teal\", \"yellow\"])\nplt.xlabel('tiempo')\nplt.ylabel('intensidad')\nfor y in range(1, sheet1.max_column):\n    plt.plot(matriz[:,0],matriz[:,y], label=\"Data \" + str(y),       color=next(colors))\nplt.legend(loc='upper left', fontsize='small')\nplt.grid(True)\nplt.xlim(0,70)\nplt.ylim(0,70)\nplt.title('Grafica tiempo/intensidad')\nplt.show()"
    },
    "question_id": 26373
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo almacenar en una lista `list` los datos generados en un for que recorre una lista `list2`?"
    },
    "mr": {
      "python": "list = [(i+1) for i in list2]"
    },
    "question_id": 117775
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo extraer la columna `col` de un DataFrame `df_viejo` y crear un DataFrame `df` con ellas?"
    },
    "mr": {
      "python": "df = pandas.DataFrame()\n df[col] = df_viejo[col]"
    },
    "question_id": 132982
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo formar matrices `M` de `m x 2` datos ingresados por el usuario?"
    },
    "mr": {
      "python": "m = int(input(\"Teclea el n\u00famero de filas:\"))\nM = np.array(\n    np.zeros((m)), \n    dtype = [\n        ('p', int),\n        ('q', int)\n    ]\n) \nfor i in range(m):\n    p_ = input(\"p: \")\n    M['p'][i] = int(p_)\n    q_ = input(\"q: \")\n    M['q'][i] = int(q_)\n\nprint(mi_arr)"
    },
    "question_id": 13245
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo simular el lanzamiento de un dado `n` veces?"
    },
    "mr": {
      "python": "def dice():\n  dado = []\n  for i in range(n):\n      dado.append(random.choice(range(1,7)))\n  return dado"
    },
    "question_id": 99638
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo simular el lanzamiento de un dado `n` veces?"
    },
    "mr": {
      "python": "def dado(n):\n    result=[]\n    for i in xrange(0,n):\n        result.append(random.randint(1, 6))\n    return result"
    },
    "question_id": 99638
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo pausar un script por `n` segundos?"
    },
    "mr": {
      "python": "time.sleep(n)"
    },
    "question_id": 36394
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar todos los enteros dentro de una matriz `M`?"
    },
    "mr": {
      "python": "sum(itertools.chain.from_iterable(M))"
    },
    "question_id": 167201
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo sumar todos los enteros dentro de una matriz `M`?"
    },
    "mr": {
      "python": "suma = sum(sum(x) for x in M)"
    },
    "question_id": 167201
  },
  {
    "question": {
      "es": "\u00bfComo guardar una imagen ubicada en el directorio `dir` en un nuevo directorio `dir2`?"
    },
    "mr": {
      "python": "mg = Image.open(dir)\nimg.save(dir2)"
    },
    "question_id": 93379
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ejecutar los archivos `file1`, `file2` y `file3` en secuencia?"
    },
    "mr": {
      "python": "process1 = subprocess.Popen(['python', file1])\nprocess2 = subprocess.Popen(['python', file2])\nprocess3 = subprocess.Popen(['python', file3])"
    },
    "question_id": 107612
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener los elementos comunes de dos listas `a` y `b`?"
    },
    "mr": {
      "python": "def listas(a, b):\n    lista_final = []\n    for i in a:\n        if (i not in lista_final) and (i in b):\n            lista_final.append(i)\n    return lista_final"
    },
    "question_id": 129553
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener los elementos comunes de dos listas `a` y `b`?"
    },
    "mr": {
      "python": "def intersection(a,b):\n    c = []\n    for i in a:\n        for j in b:\n           if i == j:\n               c.append(i)\n    c = list(tuple(c))\n    return c            "
    },
    "question_id": 129553
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo obtener la posici\u00f3n y el valor del segundo mayor elemento de una lista `list`?"
    },
    "mr": {
      "python": "list_sort = sorted(enumerate(list), key=itemgetter(1),  reverse=True)\nindex, value = list_sort[1]"
    },
    "question_id": 98725
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ordenar una cadena `S` desde su palabra m\u00e1s larga a la m\u00e1s corta?"
    },
    "mr": {
      "python": "sorted(S.split(), key=lambda palabra: len(palabra), reverse=True)"
    },
    "question_id": 1732
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ordenar una cadena `S` desde su palabra m\u00e1s larga a la m\u00e1s corta?"
    },
    "mr": {
      "python": "for i in reversed(sorted(S.split(), key=lambda item: len(item))):\n    print i"
    },
    "question_id": 1732
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo realizar una iteraci\u00f3n anidada del valor de una lista `list` y luego de los valores siguientes hasta el final?"
    },
    "mr": {
      "python": "for i, item in enumerate(list):\n    for item2 in list[i:]:\"\n  "
    },
    "question_id": 9367
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo realizar una iteraci\u00f3n anidada del valor de una lista `list` y luego de los valores siguientes hasta el final?"
    },
    "mr": {
      "python": "for i in range(len(list)):\n    for j in range((i+1), len(list)):  \n        print(list[j])"
    },
    "question_id": 9367
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo realizar una iteraci\u00f3n anidada del valor de una lista `list` y luego de los valores siguientes hasta el final?"
    },
    "mr": {
      "python": "for i in list\n    for j in list[i+1:len(j)]"
    },
    "question_id": 9367
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo recorrer una cadena `S` de derecha a izquierda?"
    },
    "mr": {
      "python": "S[::-1]"
    },
    "question_id": 138290
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo convertir un dato `a` de `string` a `int`?"
    },
    "mr": {
      "python": "numero= int(a)"
    },
    "question_id": 364966
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo retornar dos valores `val1` y `val2` en una funci\u00f3n?"
    },
    "mr": {
      "python": "return var1, var2"
    },
    "question_id": 51410
  },
  {
    "question": {
      "es": "\u00bfComo verifico si un archivo `file` tiene contenido o est\u00e1 vac\u00edo?"
    },
    "mr": {
      "python": "if os.stat(file).st_size == 0:\n     print('Vac\u00edo')"
    },
    "question_id": 30666
  },
  {
    "question": {
      "es": "\u00bfComo verifico si un archivo `file` tiene contenido o est\u00e1 vac\u00edo?"
    },
    "mr": {
      "python": "os.stat(file).st_size == 0"
    },
    "question_id": 30666
  },
  {
    "question": {
      "es": "\u00bfComo verifico si un archivo `file` tiene contenido o est\u00e1 vac\u00edo?"
    },
    "mr": {
      "python": "archivo = open(file, 'r')\n\nvacio = True\nfor linea in archivo:\n    if len(linea) > 0:\n        vacio = False\n\narchivo.close()\n\nif vacio:\n    print('El archivo est\u00e1 vacio')\nelse:\n    print('El archivo contiene algo')"
    },
    "question_id": 30666
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo iterar una lista `list` y guardar sus valores en un archivo `file`?"
    },
    "mr": {
      "python": "mi_path = file\nf = open(mi_path, 'a+')\n\nfor i in list:\n    f.write(i)\n\nf.close()"
    },
    "question_id": 86430
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo iterar una lista `list` y guardar sus valores en un archivo `file`?"
    },
    "mr": {
      "python": "f = open(file, \"a\")\n\nfor i in list:\n    f.write(i)\n\nf.close()"
    },
    "question_id": 86430
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo reemplazar el separador decimal de comas por puntos en la columna `col` de un DataFrame `df`?"
    },
    "mr": {
      "python": "df['col_1'] = df[col].str.replace(',', '.').astype(float)"
    },
    "question_id": 183061
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo reemplazar el separador decimal de comas por puntos en la columna `col` de un DataFrame `df`?"
    },
    "mr": {
      "python": "comas_por_puntos = [float(x.replace(',','.')) for x in df[col]]"
    },
    "question_id": 183061
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo guardar una matriz `M` en un archivo `file.csv`?"
    },
    "mr": {
      "python": "with open(file.csv, 'w', newline='', encoding='utf-8') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerows(M)"
    },
    "question_id": 61046
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo determinar la palabra m\u00e1s larga `mayor` y la m\u00e1s corta `menor` de un String `S`?"
    },
    "mr": {
      "python": "mayor=''\nmenor=''\npalabra=''\n\nfor c in oracion:\n  if c == ' ':\n    if palabra != '':\n      mayor = palabra if len(mayor)<len(palabra) or mayor == '' else mayor\n      menor = palabra if len(menor)>len(palabra) or menor == '' else menor\n\n    palabra = ''\n\n  palabra = palabra + c\n\nprint(mayor)\nprint(menor)"
    },
    "question_id": 109768
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo determinar la palabra m\u00e1s larga `mayor` y la m\u00e1s corta `menor` de un String `S`?"
    },
    "mr": {
      "python": "z,n=0,0\nmayor=''\nmenor=p\nwhile z<len(S):\n    for letra in S[z:len(S)] :\n        z+=1\n        n+=1\n        if letra==' ':\n            break\n    if S[z-n:z-1]!='':\n        if len(S[z-n:z-1])>=len(mayor):\n            mayor=S[z-n:z-1]\n        if len(S[z-n:z-1])<=len(menor):\n            menor=S[z-n:z-1]\n    n=0\nprint mayor\nprint menor"
    },
    "question_id": 109768
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo ejecutar un script `script` cada segundo?"
    },
    "mr": {
      "python": "def ejecutaScript(script):\n    Script\n    print 'Ejecutando Script...'\n    time.sleep(1)\n\nwhile True:\n    ejecutaScript(script)"
    },
    "question_id": 6786
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo calcular la desviaci\u00f3n est\u00e1ndar de la columna `col` en un DataFrame `df`?"
    },
    "mr": {
      "python": "std = df[col].std()"
    },
    "question_id": 191740
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo determinar si los d\u00edgitos de un n\u00famero `Num` son m\u00faltiplos de los otros d\u00edgitos del mismo n\u00famero?"
    },
    "mr": {
      "python": "Num=abs(int(input('Digite un n\u00famero entero de tres d\u00edgitos')))\nif Num==0 or Num==1:\n    print('El n\u00famero ingresado no tiene tres d\u00edgitos \\a')\nelse:\n    Num_Dig=ceil(log10(Num))\n    if Num_Dig!=3:  \n        print('El n\u00famero ingresado no tiene tres d\u00edgitos \\a')\n    else:\n        Dig_1=Num%10\n        Dig_2=(Num%100)//10\n        Dig_3=(Num//100)\n        ninguno = True\n        if Dig_1%Dig_2==0:\n            print('El d\u00edgito {Dig_1} es multiplo de {Dig_2}')\n            ninguno = False\n        if Dig_1%Dig_3==0:\n            print('El d\u00edgito {Dig_1} es multiplo de {Dig_3}')\n            ninguno = False\n        if Dig_2%Dig_1==0:\n            print('El d\u00edgito {Dig_2} es multiplo de {Dig_1}')\n            ninguno = False\n        if Dig_2%Dig_3==0:\n            print('El d\u00edgito {Dig_2} es multiplo de {Dig_3}')\n            ninguno = False\n        if Dig_3%Dig_1==0:\n            print('El d\u00edgito {Dig_3} es multiplo de {Dig_1}')\n            ninguno = False\n        if ninguno:\n            print('Ning\u00fan d\u00edgito en el n\u00famero {Num} es multiplo de otro')"
    },
    "question_id": 195388
  },
  {
    "question": {
      "es": "\u00bfC\u00f3mo listar todos los archivos y subcarpetas en una carpeta `dir`?"
    },
    "mr": {
      "python": "rootDir = dir\nfor dirName, subdirList, fileList in os.walk(rootDir):\n    print('Directorio encontrado: %s' % dirName)\n    for fname in fileList:\n        print('\\t%s' % fname)"
    },
    "question_id": 4292
  },
  {
    "question": {
      "ja": "2\u6b21\u5143\u914d\u5217`arr`\u306e\u8981\u7d20\u3068\u306a\u3063\u3066\u3044\u308b1\u6b21\u5143\u914d\u5217\u304b\u3089\u5148\u982d\u306e\u5024\u306e\u307f\u3092\u629c\u304d\u51fa\u3059"
    },
    "mr": {
      "python": "arr[:, 0]"
    },
    "question_id": 37146
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b"
    },
    "mr": {
      "python": "df.to_dict()"
    },
    "question_id": 25263
  },
  {
    "question": {
      "ja": "HTML\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u5404\u884c\u3092\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "soup.find('tbody').find_all('tr')"
    },
    "question_id": 28178
  },
  {
    "question": {
      "ja": "y\u8ef8\u306e\u7279\u5b9a\u306e\u76ee\u76db`n`\u306e\u8272\u3092\u8d64\u306b\u5909\u3048\u308b"
    },
    "mr": {
      "python": "labels[n].set_color('red')"
    },
    "question_id": 21638
  },
  {
    "question": {
      "ja": "\u30cd\u30b9\u30c8\u3057\u305f\u95a2\u6570\u304b\u3089\u5916\u306e\u95a2\u6570\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u5909\u6570`a`\u3092\u53c2\u7167\u30fb\u5909\u66f4\u3059\u308b"
    },
    "mr": {
      "python": "nonlocal a"
    },
    "question_id": 34517
  },
  {
    "question": {
      "ja": "POST\u30c7\u30fc\u30bf\u3092cgi.FieldStrage\u3067\u53d7\u3051\u53d6\u308b"
    },
    "mr": {
      "python": "class handler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        os.environ['REQUEST_METHOD'] = 'POST'\n        form = cgi.FieldStorage(self.rfile, self.headers)"
    },
    "question_id": 8656
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`li`\u306e\u4e2d\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u4e00\u3064\u306e\u8981\u7d20\u3092\u9078\u629e\u3059\u308b"
    },
    "mr": {
      "python": "random.choice(li)"
    },
    "question_id": 9836
  },
  {
    "question": {
      "ja": "\u8981\u7d20\u304c\u6570\u5024\u306e\u30ea\u30b9\u30c8\u578b\u30c7\u30fc\u30bf`d`\u3092\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf`binaryVrc.bin`\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b"
    },
    "mr": {
      "python": "X = np.array(d, dtype='float32')\nX.tofile('binaryVec.bin')"
    },
    "question_id": 1589
  },
  {
    "question": {
      "ja": "xml\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8'doc'\u3092\u6587\u5b57\u30b3\u30fc\u30c9`sjis`\u3067\u30d1\u30fc\u30b9\u3059\u308b"
    },
    "mr": {
      "python": "doc.toxml(encoding='sjis'))"
    },
    "question_id": 16807
  },
  {
    "question": {
      "ja": "\u958b\u3044\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb'f'\u3092\u9589\u3058\u308b"
    },
    "mr": {
      "python": "f.close()"
    },
    "question_id": 38532
  },
  {
    "question": {
      "ja": "multipart\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u8907\u6570\u306e\u30c7\u30fc\u30bf`files`, `data`\u3092`url'\u306bPOST\u3059\u308b"
    },
    "mr": {
      "python": "requests.post(url, files=files, data=data)"
    },
    "question_id": 37696
  },
  {
    "question": {
      "ja": "\u30af\u30e9\u30b9\u6570\u306e\u6bd4\u7387\u3092\u4fdd\u3063\u305f\u307e\u307e\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b"
    },
    "mr": {
      "python": "sss = StratifiedShuffleSplit()\nsss.get_n_splits(X, y)"
    },
    "question_id": 29368
  },
  {
    "question": {
      "ja": "y\u8ef8\u306e\u30d7\u30ed\u30c3\u30c8\u306e\u7bc4\u56f2\u3092\u4e0b\u9650`low`\u3001\u4e0a\u9650`high`\u306b\u8a2d\u5b9a\u3059\u308b"
    },
    "mr": {
      "python": "plt.yticks(range(low,high))"
    },
    "question_id": 40699
  },
  {
    "question": {
      "ja": "\u30b0\u30e9\u30d5\u4e0a\u3067\u9078\u629e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u5ea7\u6a19\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "fig.canvas.mpl_connect('pick_event', onclick)"
    },
    "question_id": 11011
  },
  {
    "question": {
      "ja": "\u65e5\u672c\u8a9e\uff08\u3072\u3089\u304c\u306a\u3001\u30ab\u30bf\u30ab\u30ca\u3001\u6f22\u5b57\uff09\u306e\u5224\u5225\u3092\u3059\u308b\u6b63\u898f\u8868\u73fe\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "re.compile('[\u3041-\u3093\u30a1-\u30f3\u4e00-\u9fa5]+')"
    },
    "question_id": 42344
  },
  {
    "question": {
      "ja": "\u30d6\u30e9\u30a6\u30b6\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`br`\u304b\u3089submit\u3057\u305f\u969b\u306e\u8fd4\u308a\u5024\u3092\u8aad\u307f\u3053\u3080"
    },
    "mr": {
      "python": "br.submit().read()"
    },
    "question_id": 17145
  },
  {
    "question": {
      "ja": "\u30bf\u30d7\u30eb`data`\u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "[print(*i) for i in data]"
    },
    "question_id": 38824
  },
  {
    "question": {
      "ja": "\u30bf\u30d7\u30eb`data`\u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "for i in data:\n     print(' '.join(str(j) for j in i))"
    },
    "question_id": 38824
  },
  {
    "question": {
      "ja": "\u30bf\u30d7\u30eb`data`\u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "for i in data:\n     print(' '.join(map(str, i)))"
    },
    "question_id": 38824
  },
  {
    "question": {
      "ja": "`n`\u00d7`n`\u306e\u30c6\u30f3\u30bd\u30eb\u306e\u8981\u7d20\u306e\u3046\u30610\u4ee5\u4e0a\u306e\u5024\u306e\u548c\u3092\u8a08\u7b97\u3059\u308b"
    },
    "mr": {
      "python": "z = tf.constant(0, shape=[n, n], dtype=tf.int32)\nabs = tf.maximum(t, z)\nresult = tf.reduce_sum(abs)"
    },
    "question_id": 35299
  },
  {
    "question": {
      "ja": "\u30dc\u30bf\u30f3`button`\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u969b\u306b\u3001\u8a72\u5f53\u3059\u308b\u30a6\u30a3\u30f3\u30c9\u30a6\u3060\u3051\u3092\u9589\u3058\u308b"
    },
    "mr": {
      "python": "button.clicked.connect(self.w.close)"
    },
    "question_id": 40370
  },
  {
    "question": {
      "ja": "\u30d5\u30a1\u30a4\u30eb`f`\u306esha1\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u6c42\u3081\u308b"
    },
    "mr": {
      "python": "hashlib.sha1(f.read()).hexdigest()"
    },
    "question_id": 27830
  },
  {
    "question": {
      "ja": "\u753b\u50cf\u30c7\u30fc\u30bf\u3092`blob`\u3092DB\u5185\u306e`img_table`\u306b\u633f\u5165\u3059\u308b"
    },
    "mr": {
      "python": "db.execute('insert into img_table values(?)', [blob])"
    },
    "question_id": 41677
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u8a2d\u5b9a\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "print(settings.DATABASES)\n"
    },
    "question_id": 33970
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u5217\u30e9\u30d9\u30eb`x`\u306e\u5404\u884c\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u6b63\u898f\u8868\u73fe`pat`\u3092\u9069\u7528\u3059\u308b"
    },
    "mr": {
      "python": "df.x.str.extract(pat)"
    },
    "question_id": 38328
  },
  {
    "question": {
      "ja": "\u30d5\u30a1\u30a4\u30eb`file`\u3092\u4e0a\u66f8\u304d\u30e2\u30fc\u30c9\u3067\u958b\u304f"
    },
    "mr": {
      "python": "open(file, 'w')"
    },
    "question_id": 37418
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf`x_list`\u3001`y_list`\u304b\u3089\u306a\u308b\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u6307\u5b9a\u3059\u308b"
    },
    "mr": {
      "python": "plt.plot(x_list, y_list)"
    },
    "question_id": 41200
  },
  {
    "question": {
      "ja": "\u30dc\u30bf\u30f3'btn'\u3092\u62bc\u305b\u306a\u3044\u3088\u3046\u306b\u3059\u308b"
    },
    "mr": {
      "python": "btn.setEnabled(False)"
    },
    "question_id": 43255
  },
  {
    "question": {
      "ja": "2\u3064\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`a`\u3068`b`\u3092\u884c\u65b9\u5411\u306b\u7d50\u5408\u3059\u308b"
    },
    "mr": {
      "python": "pd.DataFrame([a, b])"
    },
    "question_id": 43369
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u30b3\u30fc\u30c9\u3092utf-8\u306b\u6307\u5b9a\u3057\u3066\u30d5\u30a1\u30a4\u30eb`file`\u3092\u958b\u304f"
    },
    "mr": {
      "python": "f = codecs.open(file, 'r', 'utf-8')"
    },
    "question_id": 24438
  },
  {
    "question": {
      "ja": "\u30d5\u30a1\u30a4\u30eb`file`\u3092\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u958b\u304f"
    },
    "mr": {
      "python": "with open(file, 'rb') as f:\n    data = f.read()"
    },
    "question_id": 10215
  },
  {
    "question": {
      "ja": "\u30cd\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u30ea\u30b9\u30c8`li`\u3092\u898b\u3084\u3059\u304f\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "pprint.pprint(li)"
    },
    "question_id": 28982
  },
  {
    "question": {
      "ja": "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`x`\u3092\u30d5\u30a1\u30a4\u30eb`hoge.pkl`\u306b\u4fdd\u5b58\u3059\u308b"
    },
    "mr": {
      "python": "pickle.dump(x, open('hoge.pkl', 'wb'))"
    },
    "question_id": 18992
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u8907\u6570\u306e\u7570\u306a\u308b\u8981\u7d20\u3092\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`change_dict`\u306e\u30ad\u30fc\u3068\u8981\u7d20\u306e\u30da\u30a2\u306b\u5f93\u3063\u3066\u7f6e\u304d\u63db\u3048\u308b"
    },
    "mr": {
      "python": "df.replace(change_dict)"
    },
    "question_id": 38400
  },
  {
    "question": {
      "ja": "DB\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`a`\u3092\u633f\u5165\u3082\u3057\u304f\u306f\u66f4\u65b0\u3057\u3066\u4fdd\u5b58\u3059\u308b"
    },
    "mr": {
      "python": "b.save()"
    },
    "question_id": 17321
  },
  {
    "question": {
      "ja": "\u9023\u756a\u306b\u306a\u3063\u3066\u3044\u308b100\u500b\u306eCSV\u30d5\u30a1\u30a4\u30eb'file_%d'\u3092\u30ea\u30b9\u30c8\u306b\u53d6\u308a\u8fbc\u3080"
    },
    "mr": {
      "python": "data = []\ni = 0\nwhile(i<100):\n    data.append(pd.read_csv('file_%d.csv'%i))\n    i+=1"
    },
    "question_id": 35793
  },
  {
    "question": {
      "ja": "\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30d9\u30af\u30c8\u30eb`vectorized`\u3092\u30d5\u30a1\u30a4\u30eb'my_vector.npy`\u306b\u4fdd\u5b58\u3059\u308b"
    },
    "mr": {
      "python": "numpy.save('my_vector', vectorized.toarray()"
    },
    "question_id": 20549
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8'li'\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u8981\u7d20\u306b\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3092\u884c\u3063\u3066\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "for i, name in enumerate(li):\n    print(i, name)"
    },
    "question_id": 9518
  },
  {
    "question": {
      "ja": "HTML\u30d5\u30a1\u30a4\u30eb'test.html'\u3092\u958b\u304d\u3001\u30c6\u30ad\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8'text'\u3092utf-8\u3067\u4fdd\u5b58\u3059\u308b"
    },
    "mr": {
      "python": "f = open('test.html', 'w')\nf.write(text.encode('utf-8'))"
    },
    "question_id": 19144
  },
  {
    "question": {
      "ja": "\u5b9f\u884c\u30d7\u30ed\u30b0\u30e9\u30e0\u3088\u308a\u4e0a\u306e\u968e\u5c64\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092import\u3059\u308b\u305f\u3081\u3001Python\u306ePath\u3078\u8a72\u5f53Path\u3092\u8ffd\u52a0\u3059\u308b"
    },
    "mr": {
      "python": "path = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0]\nsys.path.append(path)"
    },
    "question_id": 39740
  },
  {
    "question": {
      "ja": "numpy\u914d\u5217`arr`\u306b\u5bfe\u3057\u3066\u6570\u5024`n`\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u306e\u5408\u8a08\u53ca\u3073\u500b\u6570\u3092\u6c42\u3081\u3066\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "print(arr[arr > n].sum())\nprint(numpy.sum(arr > n))"
    },
    "question_id": 38760
  },
  {
    "question": {
      "ja": "\u30a4\u30c6\u30e9\u30d6\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`data`\u306e\u8981\u7d20\u304b\u3089\u6587\u5b57\u5217`area_code`\u3068`prefecture`\u3092\u63a2\u3057\u3001\u305d\u308c\u305e\u308c\u30ad\u30fc\u3068\u8981\u7d20\u306b\u6301\u3064\u8f9e\u66f8`results`\u3092\u4f5c\u308b"
    },
    "mr": {
      "python": "results = {}\nfor item in data:\n    results[item.find('areacode').text] = item.find('prefecture').text"
    },
    "question_id": 35102
  },
  {
    "question": {
      "ja": "\u8981\u7d20\u304cNumPy\u914d\u5217\u306e\u30ea\u30b9\u30c8`arr_list`\u30922\u6b21\u5143\u306eNumPy\u914d\u5217\u306b\u5909\u63db\u3059\u308b"
    },
    "mr": {
      "python": "np.stack(arr_list)"
    },
    "question_id": 41440
  },
  {
    "question": {
      "ja": "HTML\u3092\u30d1\u30fc\u30b9\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`soup`\u304b\u3089\u30bf\u30b0`p`\u3092\u3059\u3079\u3066\u898b\u3064\u3051\u308b"
    },
    "mr": {
      "python": "soup.find_all('p')"
    },
    "question_id": 35741
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u5217`c_label`\u3092Groupby\u3067\u307e\u3068\u3081\u305f\u30c7\u30fc\u30bf\u306e\u6700\u5f8c\u306e\u884c\u3092\u53d6\u308a\u51fa\u3059"
    },
    "mr": {
      "python": "df.groupby([c_lable]).last()"
    },
    "question_id": 40444
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`a_list`\u306e\u8981\u7d20\u306e\u4e2d\u306e\u30ea\u30b9\u30c8`b_list`\u306e\u8981\u7d20\u3068\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "print([i for i in b_list if i in a_list])"
    },
    "question_id": 39240
  },
  {
    "question": {
      "ja": "\u82f1\u540d\u306e\u6708\u3092\u542b\u3080\u65e5\u4ed8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8'%d%b%Y'\u306e\u6587\u5b57\u5217`dt_s`\u3092datetime\u578b\u306b\u5909\u63db\u3059\u308b"
    },
    "mr": {
      "python": "datetime.strptime(dt_s,'%d%b%Y')"
    },
    "question_id": 39375
  },
  {
    "question": {
      "ja": "\u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`ppt`\u306e\u30b5\u30a4\u30ba\u3092\u3001\u6a2a\u5e45`X`\u3068\u7e26\u5e45`Y`\u306b\u3001English Metric Unit\u3067\u6307\u5b9a\u3057\u3066\u5909\u3048\u308b"
    },
    "mr": {
      "python": "ppt.slide_width = X\nppt.slide_height = Y"
    },
    "question_id": 37638
  },
  {
    "question": {
      "ja": "\u6570\u5024`n`\u3092\u5206\u5272\u3057\u3066\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\u3059\u308b"
    },
    "mr": {
      "python": "li = [int(c) for c in n]"
    },
    "question_id": 38960
  },
  {
    "question": {
      "ja": "seleniumt\u3067Firefox\u4ed5\u69d8\u6642\u306bjavascript\u3092\u7121\u52b9\u306b\u3059\u308b"
    },
    "mr": {
      "python": "options = Options()\noptions.set_preference('javascript.enabled', False)\ndriver = webdriver.Firefox(options=options"
    },
    "question_id": 33908
  },
  {
    "question": {
      "ja": "seleniumt\u3067Firefox\u4ed5\u69d8\u6642\u306bjavascript\u3092\u7121\u52b9\u306b\u3059\u308b"
    },
    "mr": {
      "python": "profile = webdriver.FirefoxProfile()\nprofile.DEFAULT_PREFERENCES['frozen']['javascript.enabled'] = False\nprofile.set_preference(\"app.update.auto\", False)\nprofile.set_preference(\"app.update.enabled\", False)\nprofile.update_preferences()"
    },
    "question_id": 33908
  },
  {
    "question": {
      "ja": "seleniumt\u3067Firefox\u4ed5\u69d8\u6642\u306bjavascript\u3092\u7121\u52b9\u306b\u3059\u308b"
    },
    "mr": {
      "python": "profile = webdriver.FirefoxProfile()\nprofile.set_preference(\"javascript.enabled\", False)\ndriver = webdriver.Firefox(profile)"
    },
    "question_id": 33908
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217`s`\u304c\u6570\u3092\u8868\u3059\u6587\u5b57\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b"
    },
    "mr": {
      "python": "s.isnumeric()"
    },
    "question_id": 19770
  },
  {
    "question": {
      "ja": "\u30bd\u30b1\u30c3\u30c8\u60c5\u5831\u3092\u4fdd\u5b58\u3059\u308b"
    },
    "mr": {
      "python": "original_socket = socket.socket"
    },
    "question_id": 29614
  },
  {
    "question": {
      "ja": "\u30c7\u30a3\u30ec\u30af\u30c8\u30ea`dir`\u5185\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "os.listdir(dir)"
    },
    "question_id": 41032
  },
  {
    "question": {
      "ja": "\u753b\u50cf`img`\u304c\u7a7a\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b"
    },
    "mr": {
      "python": "img is None"
    },
    "question_id": 37709
  },
  {
    "question": {
      "ja": "\u914d\u5217`a_1`\u3068`a_2`\u3092\u7d50\u5408\u3059\u308b"
    },
    "mr": {
      "python": "cupy.concatenate((a_1,a_2),axis=0)"
    },
    "question_id": 39516
  },
  {
    "question": {
      "ja": "\u30b9\u30c8\u30ea\u30fc\u30e0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`stream`\u304b\u3089\u8a00\u8a9e\u304c\u4e2d\u56fd\u8a9e\u306e\u30c4\u30a4\u30fc\u30c8\u306e\u307f\u3092\u629c\u304d\u51fa\u3059"
    },
    "mr": {
      "python": "stream.filter(track=[u'\u4e2d\u56fd', ], languages=['zh'])"
    },
    "question_id": 29331
  },
  {
    "question": {
      "ja": "\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9`cnn`\u306b\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb`mode.ckpt`\u3092\u8aad\u307f\u8fbc\u3080"
    },
    "mr": {
      "python": "cnn.saver.restore(cnn.sess, 'model.ckpt')"
    },
    "question_id": 35881
  },
  {
    "question": {
      "ja": "`x`\u306b\u95a2\u3059\u308b\u591a\u9805\u5f0f`f`\u306e\u5404\u6b21\u6570\u306e\u4fc2\u6570\u3092\u6c42\u3081\u3066\u30ea\u30b9\u30c8\u306b\u3059\u308b"
    },
    "mr": {
      "python": "p = Poly(f, x)\np.coeffs()"
    },
    "question_id": 33677
  },
  {
    "question": {
      "ja": "\u5909\u6570`a`\u3068`b`\u306e\u30d3\u30c3\u30c8\u6f14\u7b97"
    },
    "mr": {
      "python": "a & b"
    },
    "question_id": 37449
  },
  {
    "question": {
      "ja": "\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306e\u4e00\u89a7\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "globals()"
    },
    "question_id": 42442
  },
  {
    "question": {
      "ja": "\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5165\u529b`stdin`\u3092\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "for line in stdin:\n    a = line.rstrip().split(' ')\n    print(a)"
    },
    "question_id": 40830
  },
  {
    "question": {
      "ja": "\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5165\u529b`stdin`\u3092\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "l = []\nfor line in stdin:\n  a = line.rstrip().split(' ')\n  l.append(a)\nprint(l)"
    },
    "question_id": 40830
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`word_list'\u5185\u306b\u51fa\u73fe\u3059\u308b\u5358\u8a9e\u3092\u6570\u3048\u308b"
    },
    "mr": {
      "python": "Counter(word_list)"
    },
    "question_id": 38030
  },
  {
    "question": {
      "ja": "tweepy\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9`api`\u3092\u4f7f\u3044\u3001\u6587\u5b57\u5217`word`\u3092\u542b\u3093\u3060\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22\u3057\u3001\u7d50\u679c\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u5f97\u308b"
    },
    "mr": {
      "python": "search = api.search(q=word)"
    },
    "question_id": 38878
  },
  {
    "question": {
      "ja": "\u95a2\u6570`f`\u3068`g`\u3092\u53d7\u3051\u53d6\u3063\u3066\u95a2\u6570\u540c\u58eb\u306e\u548c\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570`add_functions`\u3092\u5b9a\u7fa9\u3059\u308b"
    },
    "mr": {
      "python": "def add_functions(f, g):\n    return lambda x: f(x) + g(x)"
    },
    "question_id": 38724
  },
  {
    "question": {
      "ja": "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`obj`\u306e\u30af\u30e9\u30b9\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "type(obj)"
    },
    "question_id": 22439
  },
  {
    "question": {
      "ja": "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`obj`\u306e\u30af\u30e9\u30b9\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "obj.__class__"
    },
    "question_id": 22439
  },
  {
    "question": {
      "ja": "\u6307\u5b9a\u3057\u305fURL`url`\u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "with urllib.request.urlopen(url) as r:\n    print(r.read())"
    },
    "question_id": 39340
  },
  {
    "question": {
      "ja": "\u5165\u529b\u753b\u50cf\u3092`img`\u3001\u51fa\u529b\u753b\u50cf\u3092`img2`\u3068\u3057\u3066\u7279\u5fb4\u70b9`kp`\u3092\u63cf\u753b\u3059\u308b"
    },
    "mr": {
      "python": "cv2.drawKeypoints(img, kp, img2, color=(0,255,0), flags=0)"
    },
    "question_id": 17418
  },
  {
    "question": {
      "ja": "\u30d5\u30a9\u30eb\u30c0\u540d`foldername'\u3068\u30d5\u30a1\u30a4\u30eb\u540d`filename`\u3092\u7d50\u5408\u3057\u305f\u30d1\u30b9\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "os.path.join(foldername, filename)"
    },
    "question_id": 39589
  },
  {
    "question": {
      "ja": "X\u8ef8\u306e\u7bc4\u56f2\u3092\u4e0b\u9650`l`\u3068\u4e0a\u9650`h`\u306b\u6307\u5b9a\u3059\u308b"
    },
    "mr": {
      "python": "ax.set_xlim(l, h)"
    },
    "question_id": 23577
  },
  {
    "question": {
      "ja": "\u6574\u6570`src`\u3092\u7279\u5b9a\u306e\u7bc4\u56f2`range`\u306e\u500d\u6570\u3067\u5207\u308a\u4e0a\u3052\u308b"
    },
    "mr": {
      "python": "int(math.ceil(src/float(range)) * range)"
    },
    "question_id": 41087
  },
  {
    "question": {
      "ja": "\u6574\u6570`src`\u3092\u7279\u5b9a\u306e\u7bc4\u56f2`range`\u306e\u500d\u6570\u3067\u5207\u308a\u4e0a\u3052\u308b"
    },
    "mr": {
      "python": "src if src % range == 0 else src + range - src % range"
    },
    "question_id": 41087
  },
  {
    "question": {
      "ja": "\u8981\u7d20\u6570\u306e\u7dcf\u548c\u304c`N`\u3068\u306a\u308b\u5236\u7d04\u306e\u4e0b\u3001`n`\u6b21\u5143\u306e\u30e9\u30f3\u30c0\u30e0\u30d9\u30af\u30c8\u30eb`answer`\u3092\u751f\u6210\u3059\u308b"
    },
    "mr": {
      "python": "random_numbers = np.random.rand(n)\nanswer = N * random_numbers / np.sum(random_numbers)"
    },
    "question_id": 40711
  },
  {
    "question": {
      "ja": "\u8981\u7d20\u6570\u306e\u7dcf\u548c\u304c`N`\u3068\u306a\u308b\u5236\u7d04\u306e\u4e0b\u3001`n`\u6b21\u5143\u306e\u30e9\u30f3\u30c0\u30e0\u30d9\u30af\u30c8\u30eb`answer`\u3092\u751f\u6210\u3059\u308b"
    },
    "mr": {
      "python": "answer = np.random.dirichlet(np.ones(n)) * N"
    },
    "question_id": 40711
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`li`\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u308b"
    },
    "mr": {
      "python": "random.shuffle(li)"
    },
    "question_id": 31924
  },
  {
    "question": {
      "ja": "\u8907\u6570\u306e\u30ea\u30b9\u30c8`a`\u3068`b`\u306e\u76f4\u7a4d\uff08\u30c7\u30ab\u30eb\u30c8\u7a4d\uff09\u3092\u751f\u6210\u3057\u3001\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u7d50\u679c\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "itertools.product(a,b)"
    },
    "question_id": 40343
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u5217`a`\u3092\u6b63\u898f\u8868\u73fe`reg'\u3067\u62bd\u51fa\u3059\u308b"
    },
    "mr": {
      "python": "df['a'].str.extract(reg, expand=True)"
    },
    "question_id": 36217
  },
  {
    "question": {
      "ja": "2\u3064\u306e\u30ea\u30b9\u30c8`factories'\u3068`shops`\u306e\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30ad\u30fc\u3068\u3057\u3001\u30bf\u30d7\u30eb`costs`\u5404\u8981\u7d20\u3092\u8981\u7d20\u7b49\u3059\u308b\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b"
    },
    "mr": {
      "python": "d = {f+s : cost for ((f,s), cost) in zip(product(factories,shops), costs)}"
    },
    "question_id": 27871
  },
  {
    "question": {
      "ja": "2\u3064\u306e\u30ea\u30b9\u30c8`factories'\u3068`shops`\u306e\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30ad\u30fc\u3068\u3057\u3001\u30bf\u30d7\u30eb`costs`\u5404\u8981\u7d20\u3092\u8981\u7d20\u7b49\u3059\u308b\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b"
    },
    "mr": {
      "python": "root = [''.join((x, y)) for x, y in itertools.product(factories, shops)]\nd = dict(zip(root, cost))"
    },
    "question_id": 27871
  },
  {
    "question": {
      "ja": "\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u3068\u3057\u3066\u7528\u3044\u308b\u4e8b\u304c\u3067\u304d\u306a\u3044HTML5\u306edata-\u5c5e\u6027\u3001\u4f8b\u3048\u3070`data-locel`\u304c`address`\u306b\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`soup`\u304b\u3089\u691c\u7d22\u3059\u308b"
    },
    "mr": {
      "python": "sop.find_all(attrs={\"data-locate\": \"address\"})"
    },
    "question_id": 40676
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8`li`\u306e\u982d\u6587\u5b57\u3092\u7d50\u5408\u3057\u305f\u6587\u5b57\u5217`s`\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "s = ''.join(i[0] for i in li)"
    },
    "question_id": 42256
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8`li`\u306e\u982d\u6587\u5b57\u3092\u7d50\u5408\u3057\u305f\u6587\u5b57\u5217`s`\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "s = ''\nfor line in li:\n    s += v[0]"
    },
    "question_id": 42256
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`li`\u306e\u4e2d\u306b\u8981\u7d20`i`\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u6761\u4ef6\u5206\u5c90\u3092\u884c\u3046"
    },
    "mr": {
      "python": "if i not in li:"
    },
    "question_id": 18967
  },
  {
    "question": {
      "ja": "\u30b5\u30fc\u30d0\u30fc\u306b\u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf`req_data`\u3092UTF-8\u3067\u7b26\u53f7\u5316\u3059\u308b"
    },
    "mr": {
      "python": "json.dumps(req_data).encode('utf-8'))"
    },
    "question_id": 37648
  },
  {
    "question": {
      "ja": "Linux\u306edu\u30b3\u30de\u30f3\u30c9\u3092\u5229\u7528\u3057\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea`/var/hoge`\u306e\u30b5\u30a4\u30ba\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "cmd = 'du -b /var/hoge'\nint(subprocess.check_output(cmd, shell=True).split()[0])"
    },
    "question_id": 22991
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217`str`\u5185\u306e\u3001\u65e5\u672c\u8a9e\u3067\u631f\u307e\u308c\u305f\u7a7a\u767d\u3092\u524a\u9664\u3059\u308b"
    },
    "mr": {
      "python": "re.sub('([\u3042-\u3093\u30a2-\u30f3\u4e00-\u9fd0\u30fc])\\s+((?=[\u3042-\u3093\u30a2-\u30f3\u4e00-\u9fd0\u30fc]))',r'\\1\\2', str)"
    },
    "question_id": 39502
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217\u306e\u5909\u6570`s`\u3068`n`\u3092UTF-8\u306b\u5909\u63db\u3057\u3066\u7d50\u5408\u3059\u308b"
    },
    "mr": {
      "python": "u'{0}{1}'.format(s, n)"
    },
    "question_id": 16805
  },
  {
    "question": {
      "ja": "1\u304c`N`\u500b, 2\u304c`N`\u500b, ..., `M`\u304c`N`\u500b\u4e26\u3076\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b"
    },
    "mr": {
      "python": "[x+1 for x in range(M) for y in range(N)]"
    },
    "question_id": 40978
  },
  {
    "question": {
      "ja": "1\u304c`N`\u500b, 2\u304c`N`\u500b, ..., `M`\u304c`N`\u500b\u4e26\u3076\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b"
    },
    "mr": {
      "python": "[i // n + 1 for i in range(N * M)]"
    },
    "question_id": 40978
  },
  {
    "question": {
      "ja": "distplot\u3067\u8868\u793a\u3057\u305f\u30c7\u30fc\u30bf`x`\u306b\u95a2\u3059\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u4e0a\u306e\u30d4\u30f3\u306e\u9ad8\u3055\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u5f97\u308b"
    },
    "mr": {
      "python": "[h.get_height() for h in sns.distplot(x).patches]"
    },
    "question_id": 39379
  },
  {
    "question": {
      "ja": "\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u7bc4\u56f2`ax`\u3092\u6b63\u65b9\u5f62\u306b\u3059\u308b"
    },
    "mr": {
      "python": "ax=plt.subplot(aspect='equal')"
    },
    "question_id": 38415
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217\u578b\u5909\u6570`string`\u306e\u5024\u3092\u6570\u5024\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b"
    },
    "mr": {
      "python": "locals()[string]"
    },
    "question_id": 37757
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217\u578b\u5909\u6570`string`\u306e\u5024\u3092\u6570\u5024\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3068\u3057\u3066\u8a55\u4fa1\u3059\u308b"
    },
    "mr": {
      "python": "eval(string)"
    },
    "question_id": 37757
  },
  {
    "question": {
      "ja": "JSON\u3092\u8868\u3059\u6587\u5b57\u5217`s_json`\u304b\u3089\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`d`\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "d = json.loads(s_json)"
    },
    "question_id": 34422
  },
  {
    "question": {
      "ja": "HTML\u30d1\u30fc\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`soup`\u306e\u4e2d\u3067HTML\u30bf\u30b0\u306e`a_id`\u306e\u5c5e\u6027\u5024\u3092\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "soup.get('a_id')"
    },
    "question_id": 27686
  },
  {
    "question": {
      "ja": "\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u7279\u5b9a\u306e\u62e1\u5f35\u5b50`.dat`\u3092\u3082\u3064\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092`.gui`\u306b\u3059\u3079\u3066\u66f8\u304d\u63db\u3048\u308b"
    },
    "mr": {
      "python": "[os.rename(f, f.replace('.dat', '.gui')) for f in os.listdir('.') if not f.startswith('.')]"
    },
    "question_id": 41054
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u305f\u65b0\u305f\u306a\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df2`\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "df2 = df.reset_index(drop=True)"
    },
    "question_id": 43303
  },
  {
    "question": {
      "ja": "\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u5165\u3063\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u30921\u5206\u3054\u3068\u306b\u30ea\u30b5\u30f3\u30d7\u30eb\u3057\u3001\u9593\u306e\u5024\u306f\u76f4\u524d\u306e\u5024\u3067\u88dc\u5b8c\u3059\u308b"
    },
    "mr": {
      "python": "df.resample('1min').ffill()"
    },
    "question_id": 43322
  },
  {
    "question": {
      "ja": "\u8907\u7d20\u6570`z`\u306e\u5b9f\u6570\u90e8\u306e\u307f\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "z.real"
    },
    "question_id": 35683
  },
  {
    "question": {
      "ja": "\u30a4\u30c6\u30e9\u30d6\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`iter`\u306e`r`\u500b\u306e\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u5f97\u308b"
    },
    "mr": {
      "python": "list(itertools.combinations(iter, r))"
    },
    "question_id": 41058
  },
  {
    "question": {
      "ja": "Excel\u30b7\u30fc\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`sheet`\u5185\u306e\u884c`row`\u3001\u5217`col`\u306e\u30bb\u30eb\u306e\u5024\u3092\u5f97\u308b"
    },
    "mr": {
      "python": "sheet.cell_value(row, col))"
    },
    "question_id": 42573
  },
  {
    "question": {
      "ja": "\u7d44\u307f\u8fbc\u307f\u95a2\u6570`eval`\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u969b\u306b\u30a8\u30e9\u30fc\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "__builtins__.eval = lambda x: 'eval is not allowed'"
    },
    "question_id": 30539
  },
  {
    "question": {
      "ja": "\u5f15\u6570`args`\u3092\u30a2\u30f3\u30d1\u30c3\u30af\u3057\u3066\u95a2\u6570`func`\u306b\u6e21\u3059"
    },
    "mr": {
      "python": "func(*args)"
    },
    "question_id": 40361
  },
  {
    "question": {
      "ja": "\u5217\u540d`range`\u306e\u8981\u7d20\u3092\u30ea\u30b9\u30c8`r`\u3001\u5217\u540d`result`\u306e\u8981\u7d20\u3092\u30ea\u30b9\u30c8`l`\u3068\u3057\u3066\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u308b"
    },
    "mr": {
      "python": "d = {'range': r, 'result': l}\ndf = pd.DataFrame(data=d)"
    },
    "question_id": 43333
  },
  {
    "question": {
      "ja": "\u4f8b\u5916\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "try:\n    hoge()\nexcept:\n    traceback.print_exc()"
    },
    "question_id": 6972
  },
  {
    "question": {
      "ja": "\u4f8b\u5916\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "try:\n    hoge()\nexcept:\n    print(sys.exc_info())"
    },
    "question_id": 6972
  },
  {
    "question": {
      "ja": "\u4f8b\u5916\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "try:\n    hoge()\nexcept Exception as e:\n    print('Error:', e.args)\n    fuga()"
    },
    "question_id": 6972
  },
  {
    "question": {
      "ja": "\u30d5\u30a1\u30a4\u30eb`C:\\Users\\Documents\\python programs`\u3092\u958b\u304f"
    },
    "mr": {
      "python": "f = open(r'C:\\Users\\Documents\\python programs', 'r', encoding='utf-8')"
    },
    "question_id": 11582
  },
  {
    "question": {
      "ja": "PYTHONPATH\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "print(sys.path)"
    },
    "question_id": 12174
  },
  {
    "question": {
      "ja": "\u30af\u30a8\u30ea\u7d50\u679c\u306e\u6b21\u306e\u884c\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "fetchone()"
    },
    "question_id": 4616
  },
  {
    "question": {
      "ja": "\u73fe\u5728\u306e\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "print(os.getcwd())"
    },
    "question_id": 20536
  },
  {
    "question": {
      "ja": "\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb`myfile.txt`\u306e\u884c\u6570\u3092\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "sum(1 for line in open('myfile.txt'))"
    },
    "question_id": 6225
  },
  {
    "question": {
      "ja": "\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb`myfile.txt`\u306e\u884c\u6570\u3092\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "len(open('myfile.txt').readlines())"
    },
    "question_id": 6225
  },
  {
    "question": {
      "ja": "\u30b9\u30ec\u30c3\u30c9`t`\u3092\u5b9a\u671f\u7684\u306b\u5b9f\u884c\u3059\u308b"
    },
    "mr": {
      "python": "t=threading.Timer(interval, function)\nt.start()"
    },
    "question_id": 24508
  },
  {
    "question": {
      "ja": "\u5909\u6570`a`\u304cNone\u3067\u306a\u3044\u5834\u5408\u306b\u5909\u6570\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "if a is not None:\n    print(a)"
    },
    "question_id": 47199
  },
  {
    "question": {
      "ja": "\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u306e\u4e2d\u8eab\u3092\u5168\u3066"
    },
    "mr": {
      "python": "for r in data:\n    list.append(', '.join(r))\nprint(\"\\n\".join(list))"
    },
    "question_id": 23332
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u30b3\u30fc\u30c9"
    },
    "mr": {
      "python": "f = open('all_names.csv', 'w', encoding='UTF-8') "
    },
    "question_id": 34431
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`list`\u304b\u3089\u6761\u4ef6\u3068\u306a\u308b\u6587\u5b57\u5217`string`\u3068\u90e8\u5206\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3066\u65b0\u3057\u3044\u30ea\u30b9\u30c8`newlist`\u3092\u4f5c\u308b"
    },
    "mr": {
      "python": "newlist = []\nif any(s.endswith('string') for s in list):\n    newl.append('string')"
    },
    "question_id": 33700
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`list`\u304b\u3089\u6761\u4ef6\u3068\u306a\u308b\u6587\u5b57\u5217`string`\u3068\u90e8\u5206\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3066\u65b0\u3057\u3044\u30ea\u30b9\u30c8`newlist`\u3092\u4f5c\u308b"
    },
    "mr": {
      "python": "newlist = []\nfor s in list:\n    if 'string' in s:\n        newlist.append(s)"
    },
    "question_id": 33700
  },
  {
    "question": {
      "ja": "\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "plt.figure() "
    },
    "question_id": 27556
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`data_frame`\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "display(data_frame)"
    },
    "question_id": 37060
  },
  {
    "question": {
      "ja": "\u753b\u50cf`image`\u3092\u8868\u793a\u3059\u308b:\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u3059\u3050\u306b\u7d42\u4e86\u3057\u306a\u3044\u3088\u3046\u306bWait\u3059\u308b"
    },
    "mr": {
      "python": "cv2.imshow('image', img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()"
    },
    "question_id": 31537
  },
  {
    "question": {
      "ja": "\u8868`table`\u3092\u753b\u9762\u306b\u8868\u793a\u3059\u308b\uff08texttable)"
    },
    "mr": {
      "python": "table = Texttable()\nprint(table.draw())"
    },
    "question_id": 12310
  },
  {
    "question": {
      "ja": "\u5c11\u6570\u70b9\u306b\u30b3\u30f3\u30de\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb`arena.txt`\u3092\u8aad\u307f\u8fbc\u3080"
    },
    "mr": {
      "python": "df = pd.read_csv('arena.txt', header=None, delim_whitespace=True, decimal=',')"
    },
    "question_id": 19311
  },
  {
    "question": {
      "ja": "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`json_data`\u3092JSON\u6587\u5b57\u5217`json_str`\u306b\u5909\u63db\u3059\u308b"
    },
    "mr": {
      "python": "json_str = json.dumps(json_data)"
    },
    "question_id": 42268
  },
  {
    "question": {
      "ja": "CSV\u30d5\u30a1\u30a4\u30eb`file.csv`\u3092`data`\u306b\u8aad\u307f\u8fbc\u3080"
    },
    "mr": {
      "python": "data = np.genfromtxt('file.csv')"
    },
    "question_id": 51387
  },
  {
    "question": {
      "ja": "\u6761\u4ef6`condition`\u3092\u6e80\u305f\u3059\u884c\u3092\u524a\u9664\u3059\u308b"
    },
    "mr": {
      "python": "df.drop(df.index[df.row == \"condition\"], inplace=True)"
    },
    "question_id": 38598
  },
  {
    "question": {
      "ja": "\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u5185\u306e\u8981\u7d20"
    },
    "mr": {
      "python": "print list[x][y]"
    },
    "question_id": 20094
  },
  {
    "question": {
      "ja": "for\u30eb\u30fc\u30d7\u3067\u6570\u5b57\u3092\u6dfb\u5b57\u306b\u6301\u3064\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u3092\u751f\u6210\u3059\u308b"
    },
    "mr": {
      "python": "for i in range(x):\n  for j in range(y):\n    exec(\"list_\" + str(i) + \"_\" + str(j) + \"= [i, j]\")"
    },
    "question_id": 18780
  },
  {
    "question": {
      "ja": "\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u73fe\u5728\u306e\u65e5\u4ed8\u3092\u5165\u308c\u308b"
    },
    "mr": {
      "python": "now = datetime.datetime.now()\nfile_name = 'file_{0:%Y%m%d-%H%M%S}.txt'.format(now)"
    },
    "question_id": 19552
  },
  {
    "question": {
      "ja": "\u30b0\u30e9\u30d5\u306b\u7dda\u5f62\u56de\u5e30\u76f4\u7dda\u3092\u8ffd\u52a0\u3059\u308b"
    },
    "mr": {
      "python": "a, b = np.polyfit(x, y, 1)\nlinear = a * x + b\n\nax.plot(x, linear,color=\"black\")"
    },
    "question_id": 38755
  },
  {
    "question": {
      "ja": "\u30e1\u30f3\u30d0\u95a2\u6570\u304b\u3089\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "class Foo:\n    def whoAmI(self):\n        print( \"I am \" + self.__class__.__name__)\n\nFoo().whoAmI()"
    },
    "question_id": 4556
  },
  {
    "question": {
      "ja": "\u30e1\u30f3\u30d0\u95a2\u6570\u304b\u3089\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "class Foo(object):\n    def __init__(self):\n        print(self.__class__.__name__) # >>> Foo\n\na = Foo()\nprint(a.__class__.__name__) # >>> Foo"
    },
    "question_id": 4556
  },
  {
    "question": {
      "ja": "XPath\u3092\u4f7f\u3044\u8981\u7d20`element`\u306e\u5b58\u5728\u3092\u6761\u4ef6\u3068\u3057\u3066\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b"
    },
    "mr": {
      "python": "try:\n    driver.find_element(By.XPATH, element)\nexcept:\n    process_if_the_element_does_not_exist"
    },
    "question_id": 30895
  },
  {
    "question": {
      "ja": "\u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092Firefox\u306b\u5909\u66f4\u3059\u308b"
    },
    "mr": {
      "python": "headers = {\"User-Agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0\"}"
    },
    "question_id": 27922
  },
  {
    "question": {
      "ja": "\u73fe\u5728\u306e\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092`path/to`\u306b\u5909\u66f4\u3059\u308b"
    },
    "mr": {
      "python": "chdir('/path/to') "
    },
    "question_id": 42850
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf`data`\u304b\u3089\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u5224\u5b9a\u3057\u3001Unicode\u306b\u5909\u63db\u3059\u308b"
    },
    "mr": {
      "python": "guess = chardet.detect(data)\nunicode_data = data.decode(guess['encoding'])"
    },
    "question_id": 11182
  },
  {
    "question": {
      "ja": "\u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u305fCSV\u30d5\u30a1\u30a4\u30eb`file`\u3092\u8aad\u307f\u8fbc\u3080"
    },
    "mr": {
      "python": "pd.read_csv(file, sep='\\s+')"
    },
    "question_id": 35394
  },
  {
    "question": {
      "ja": "\u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u305fCSV\u30d5\u30a1\u30a4\u30eb`file`\u3092\u8aad\u307f\u8fbc\u3080"
    },
    "mr": {
      "python": "pd.read_csv(file, delim_whitespace=True)"
    },
    "question_id": 35394
  },
  {
    "question": {
      "ja": "\u5909\u6570`variable`\u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306e\u307f\u5024\u3092\u4ee3\u5165\u3092\u3059\u308b"
    },
    "mr": {
      "python": "variable = value if variable is None else v"
    },
    "question_id": 37591
  },
  {
    "question": {
      "ja": "\u5909\u6570`variable`\u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306e\u307f\u5024\u3092\u4ee3\u5165\u3092\u3059\u308b"
    },
    "mr": {
      "python": "variable = value if variable is None else variable"
    },
    "question_id": 37591
  },
  {
    "question": {
      "ja": "Windows\u4e0a\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3`app`\u3092\u5b9f\u884c\u3059\u308b"
    },
    "mr": {
      "python": "os.startfile('C:\\Program Files\\....\\app.exe')"
    },
    "question_id": 11601
  },
  {
    "question": {
      "ja": "\u6570\u5024`number`\u3092\u4e00\u6841\u305a\u3064\u53d6\u5f97\u3057\u3066\u30ea\u30b9\u30c8`num_list`\u306b\u3059\u308b"
    },
    "mr": {
      "python": "num_list = []\nwhile numer != 0:\n  num.append(number % 10)\n  n /= 10\nnum_list.reverse()"
    },
    "question_id": 26837
  },
  {
    "question": {
      "ja": "\u6570\u5024`number`\u3092\u4e00\u6841\u305a\u3064\u53d6\u5f97\u3057\u3066\u30ea\u30b9\u30c8`num_list`\u306b\u3059\u308b"
    },
    "mr": {
      "python": "num_list = map(int, str(number))"
    },
    "question_id": 26837
  },
  {
    "question": {
      "ja": "\u5b9a\u6570\u306e\u8a55\u4fa1\u7d50\u679c\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "hello  = tf.constant(\"Hello\")\nf = tf.function(example)\nprint(eval(f([], hello)))"
    },
    "question_id": 59780
  },
  {
    "question": {
      "ja": "\u6b63\u898f\u8868\u73fe\u3067\u6587\u5b57\u5217`text`\u306e\u4e2d\u304b\u3089\u6570\u5024\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u30ea\u30b9\u30c8`list`\u306b\u3059\u308b"
    },
    "mr": {
      "python": "pattern=r\"([0-9]*)\"\nlist=re.findall(pattern,text)"
    },
    "question_id": 38276
  },
  {
    "question": {
      "ja": "y\u8ef8\u306e\u4e0b\u9650\u5024\u3092\u6307\u5b9a\u3057\u3001\u4e0a\u9650\u5024\u306f\u81ea\u52d5\u306b\u3059\u308b"
    },
    "mr": {
      "python": "rp = sns.regplot(x, y, data=df, order=1, line_kws={\"color\":\"indianred\"})\nrp.axes.set_ylim(0,)"
    },
    "question_id": 49558
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217`word`\u306e\u9806\u756a\u3092`h`\u756a\u76ee\u3067\u5165\u308c\u66ff\u3048\u308b"
    },
    "mr": {
      "python": "tmp1 = word[:h]\nword = word[h:]\nword.extend(tmp1)"
    },
    "question_id": 65284
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`attributes`\u306e\u5168\u8981\u7d20\u306e\u6570\u5024\u306b\u5bfe\u3057\u3066for\u6587\u3067\u30de\u30a4\u30ca\u30b91\u3059\u308b"
    },
    "mr": {
      "python": "for i, attribute in enumerate(attributes):\n    attributes[i] = attribute-1"
    },
    "question_id": 31916
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`attributes`\u306e\u5168\u8981\u7d20\u306e\u6570\u5024\u306b\u5bfe\u3057\u3066for\u6587\u3067\u30de\u30a4\u30ca\u30b91\u3059\u308b"
    },
    "mr": {
      "python": "for i in range(len(attributes)):\n    attributes[i] = attributes[i]-1"
    },
    "question_id": 31916
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`attributes`\u306e\u5168\u8981\u7d20\u306e\u6570\u5024\u306b\u5bfe\u3057\u3066for\u6587\u3067\u30de\u30a4\u30ca\u30b91\u3059\u308b"
    },
    "mr": {
      "python": "attributes = [attribute-1 for attribute in attributes]"
    },
    "question_id": 31916
  },
  {
    "question": {
      "ja": "\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u304b\u3089\u91cd\u8907\u3059\u308b\u8981\u7d20\u306e\u307f\u62bd\u51fa\u3059\u308b"
    },
    "mr": {
      "python": "c = Counter(map(tuple, list))"
    },
    "question_id": 21171
  },
  {
    "question": {
      "ja": "\u9023\u756a\u500b\u6570`num_of_file`\u306etxt\u30d5\u30a1\u30a4\u30eb`data{}.txt`\u3092\u8aad\u307f\u8fbc\u3080"
    },
    "mr": {
      "python": "data = [None] * num_of_file\nfor i in range(num_of_file):\n    with open('data{}.txt'.format(i + 1), mode=\"r\", encoding=\"utf-8\") as f:\n        data[i] = f.read()"
    },
    "question_id": 45204
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217`string`\u3092byte\u578b"
    },
    "mr": {
      "python": "urllib.parse.urlencode('string').encode('ascii')"
    },
    "question_id": 24786
  },
  {
    "question": {
      "ja": "\u4e3b\u6210\u5206\u5206\u6790 "
    },
    "mr": {
      "python": "pca = PCA()\npca.fit(imgAry)\npca_res = pca.transform(imgAry)\nrestoredImgAry = pca.inverse_transform(pca_res)"
    },
    "question_id": 5822
  },
  {
    "question": {
      "ja": "\u30b0\u30e9\u30d5\u30b5\u30a4\u30ba\u3092\u8abf\u6574\u3057\u3066\u4fdd\u5b58\u3059\u308b"
    },
    "mr": {
      "python": "plt.savefig(fnameF, dpi=200, bbox_inches=\"tight\", pad_inches=0.1)"
    },
    "question_id": 42516
  },
  {
    "question": {
      "ja": "\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u304b\u3089\u7a7a\u767d\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b"
    },
    "mr": {
      "python": "list = [x for x in list if x]"
    },
    "question_id": 18685
  },
  {
    "question": {
      "ja": "\u4e8c\u6b21\u5143\u30ea\u30b9\u30c8`list`\u304b\u3089\u7a7a\u767d\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b"
    },
    "mr": {
      "python": "for i in range(len(list) - 1, -1, -1):\n  if not list[i]:\n    del list[i]"
    },
    "question_id": 18685
  },
  {
    "question": {
      "ja": "\u53d7\u4fe1\u3057\u305f\u6587\u5b57\u5217`ser`\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "while True:\n   if ser.inWaiting() > 0\n      data = ser.read(ser.inWaiting())\n      print(data)"
    },
    "question_id": 8532
  },
  {
    "question": {
      "ja": "JSON\u6587\u5b57\u5217`json_string`\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`json_obj`\u306b\u8aad\u307f\u8fbc\u3080\uff08json)"
    },
    "mr": {
      "python": "json_obj = json.loads(json_string)"
    },
    "question_id": 34692
  },
  {
    "question": {
      "ja": "\u30ab\u30e9\u30fc\u753b\u50cf`img`\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\nplt.imshow(gray_img)\nplt.gray()\nplt.show()"
    },
    "question_id": 35864
  },
  {
    "question": {
      "ja": "X\u8ef8\u306e\u9593\u9694\u3092`ticks`\u306b\u3001\u30e9\u30d9\u30eb\u3092`labels`\u306b\u3059\u308b"
    },
    "mr": {
      "python": "plt.xticks(range(0, len(labels), ticks), labels[::ticks])"
    },
    "question_id": 49478
  },
  {
    "question": {
      "ja": "\u9023\u756a\u306b\u306a\u3063\u3066\u3044\u308b`num_of_file`\u500b\u306eExcel\u30d5\u30a1\u30a4\u30eb`excel_file`\u3092\u30ea\u30b9\u30c8\u306b\u8aad\u307f\u8fbc\u3080"
    },
    "mr": {
      "python": "book_list = []\nfor n in range(1, num_of_file + 1):\n    file_name = 'excel_file%d.xls' % (n)\n    book_list.append(xlrd.open_workbook(file_name))"
    },
    "question_id": 16769
  },
  {
    "question": {
      "ja": "\u30b3\u30f3\u30de\u533a\u5207\u308a\u306eCSV\u30d5\u30a1\u30a4\u30eb`file.csv`\u3092\u8aad\u307f\u8fbc\u3080"
    },
    "mr": {
      "python": "data=np.genfromtxt('file.csv', delimiter=',')"
    },
    "question_id": 24388
  },
  {
    "question": {
      "ja": "datetime\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`dt`\u304b\u3089Unix Time\u3092\u6c42\u3081\u308b"
    },
    "mr": {
      "python": "dt.timestamp()"
    },
    "question_id": 2220
  },
  {
    "question": {
      "ja": "\u884c`col_name`\u306b\u7279\u5b9a\u306e\u6587\u5b57\u5217`string`\u3092\u542b\u3080\u884c\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u304b\u3089\u62bd\u51fa\u3059\u308b"
    },
    "mr": {
      "python": "df[df['col_name'].str.contains('string')]"
    },
    "question_id": 44723
  },
  {
    "question": {
      "ja": "\u4e0a\u4f4d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u30e2\u30b8\u30e5\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb`file.py`\u3092import\u3059\u308b"
    },
    "mr": {
      "python": "from .. import file.py"
    },
    "question_id": 39007
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`list`\u306e\u672b\u5c3e\u304b\u3089`n`\u500b\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059"
    },
    "mr": {
      "python": "list[-n:]"
    },
    "question_id": 46711
  },
  {
    "question": {
      "ja": "Unicode\u30a8\u30b9\u30b1\u30fc\u30d7\u3055\u308c\u305f\u30d0\u30a4\u30c8\u5217`b_string`\u3092\u6587\u5b57\u5217\u306b\u5909\u63db"
    },
    "mr": {
      "python": "b_string.decode('unicode-escape')"
    },
    "question_id": 17648
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217`str`\u5185\u306e\u5bfe\u8c61\u6587\u5b57\u5217`old_s`\u3092\u5225\u306e\u6587\u5b57\u5217`new_s`\u306b\u7f6e\u63db\u3059\u308b"
    },
    "mr": {
      "python": "str.replace(old_s, new_s)"
    },
    "question_id": 9633
  },
  {
    "question": {
      "ja": "\u7a7a\u884c\u304c\u5165\u529b\u3055\u308c\u308b\u307e\u3067\u6a19\u6e96\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u308b"
    },
    "mr": {
      "python": "while True:\n  try:\n    line = input()\n    if line == '':\n        break\n    else:\n        yield line\n    except EOFError:\n        break"
    },
    "question_id": 37327
  },
  {
    "question": {
      "ja": "\u30ed\u30b0\u3092\u51fa\u529b\u305b\u305a\u306b\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046"
    },
    "mr": {
      "python": "model.fit(X, Y, epochs=200, batch_size=1, verbose=0)"
    },
    "question_id": 37831
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217`str`\u3092\u30d0\u30a4\u30c8\u5217"
    },
    "mr": {
      "python": "str.encode('utf-8')"
    },
    "question_id": 53340
  },
  {
    "question": {
      "ja": "\u8981\u7d20\u304c\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u3001\u8981\u7d20\u6570`n`\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b"
    },
    "mr": {
      "python": "for i in range(n):\n    df[i] = pd.DataFrame()"
    },
    "question_id": 45120
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217`str`\u306e\u4e2d\u306e\u9023\u7d9a\u3057\u305f\u8907\u6570\u306e\u5168\u89d2\u7a7a\u767d\u30921\u3064\u306e\u5168\u89d2\u7a7a\u767d\u3067\u7f6e\u63db\u3059\u308b"
    },
    "mr": {
      "python": "re.sub('[\\u3000]{2,}', '\\u3000', str)"
    },
    "question_id": 24987
  },
  {
    "question": {
      "ja": "\u540c\u968e\u5c64\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u30e2\u30b8\u30e5\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb`file.py`\u3092import\u3059\u308b"
    },
    "mr": {
      "python": "from . import file.py"
    },
    "question_id": 33012
  },
  {
    "question": {
      "ja": "\u753b\u50cf`img`\u3092\u30d5\u30a1\u30a4\u30eb\u540d`file.jpg`\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b"
    },
    "mr": {
      "python": "cv2.imwrite('file.jpg', img)"
    },
    "question_id": 50500
  },
  {
    "question": {
      "ja": "\u884c\u5217`a`\u3068`b`\u306e\u7a4d\u3092\u8a08\u7b97\u3059\u308b"
    },
    "mr": {
      "python": "np.dot(a, b)"
    },
    "question_id": 41336
  },
  {
    "question": {
      "ja": "\u7a7a\u767d\u533a\u5207\u308a\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb`file.txt`\u3092\u30b3\u30f3\u30de\u533a\u5207\u308a\u306ecsv\u30d5\u30a1\u30a4\u30eb`new_file.csv`\u306b\u5909\u63db\u3059\u308b"
    },
    "mr": {
      "python": "df = pd.read_table('file.txt', header=None, delim_whitespace=True)\ndf.to_csv('new_file.csv', index=False, header=False)"
    },
    "question_id": 48742
  },
  {
    "question": {
      "ja": "\u6570\u5024`n`\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b"
    },
    "mr": {
      "python": "str(n)"
    },
    "question_id": 35271
  },
  {
    "question": {
      "ja": "\u591a\u6b21\u5143\u914d\u5217`x1`\u3068`x2`\u3092\u9023\u7d50\u3059\u308b"
    },
    "mr": {
      "python": "chainer.functions.concat([x1, x2], axis=1)"
    },
    "question_id": 30337
  },
  {
    "question": {
      "ja": "\u95a2\u6570`function`\u306e\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u8abf\u3079\u308b"
    },
    "mr": {
      "python": "@profile \ndef function():\n    #function_code"
    },
    "question_id": 49825
  },
  {
    "question": {
      "ja": "\u8907\u6570\u306e\u6574\u6570\u5024\u3092input\u3067\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "a,b,c = map(int,input().split())"
    },
    "question_id": 53030
  },
  {
    "question": {
      "ja": "2\u6b21\u5143\u30ea\u30b9\u30c8`li`\u5185\u306e\u91cd\u8907\u3057\u3066\u3044\u308b\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059"
    },
    "mr": {
      "python": "c = Counter(tuple(x) for x in li)\n[list(k) for k,v in c.items() if v >=2]"
    },
    "question_id": 20048
  },
  {
    "question": {
      "ja": "2\u3064\u306e\u30ea\u30b9\u30c8`li`\u3068`li2`\u3092\u6bd4\u8f03\u3057\u3001\u91cd\u8907\u3057\u3066\u3044\u308b\u8981\u7d20\u3092\u524a\u9664\u3059\u308b"
    },
    "mr": {
      "python": "list(filter(lambda x:x not in li2, li))"
    },
    "question_id": 21070
  },
  {
    "question": {
      "ja": "\u6574\u6570\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8`li'\u304b\u3089\u3001\u5408\u8a08\u3059\u308b\u30680\u306b\u306a\u308b3\u3064\u306e\u6574\u6570\u3092\u6c42\u3081\u308b"
    },
    "mr": {
      "python": "li.sort()\nM = len(li) - 1\nfor i, e in enumerate(li):\n    j = i + 1\n    k = M\n    while k > j:\n        s = li[i] + li[j] + li[k]\n        if s == 0:\n            print(li[i], li[j], li[k])\n            k -= 1\n        elif s > 0:\n            k -= 1\n        else:\n            j += 1"
    },
    "question_id": 19098
  },
  {
    "question": {
      "ja": "\u8f9e\u66f8\u30c7\u30fc\u30bf\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "mecab = MeCab.Tagger('-Ochasen')\ninfo = mecab.dictionary_info()\nprint(info.charset)"
    },
    "question_id": 42804
  },
  {
    "question": {
      "ja": "\u65e2\u5b58\u306e\u30e2\u30c7\u30eb'old_model'\u3092\u8aad\u307f\u8fbc\u307f\u30c7\u30fc\u30bf`sentences`\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3055\u305b\u3066\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u308b"
    },
    "mr": {
      "python": "model = word2vec.Word2Vec.load('old_model')\nmodel.train(sentences)"
    },
    "question_id": 29214
  },
  {
    "question": {
      "ja": "\u914d\u5217`ary`\u306e\u5404\u8981\u7d20\u306b\u30b3\u30f3\u30de\u3092\u4ed8\u3051\u3066\u5c0f\u6570\u70b9\u56db\u6841\u307e\u3067\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "print(np.array2string(ary, separator=', ', formatter={'float_kind': lambda x: '{: .4f}'.format(x)}))"
    },
    "question_id": 36377
  },
  {
    "question": {
      "ja": "\u5916\u90e8\u30d7\u30ed\u30bb\u30b9`cat`\u3092\u547c\u3073\u51fa\u3057\u3001\u30d5\u30a1\u30a4\u30eb`file`\u306e\u4e2d\u8eab\u3092\u8aad\u307f\u8fbc\u3080"
    },
    "mr": {
      "python": "contents = subprocess.check_output('cat file', shell=True)"
    },
    "question_id": 23839
  },
  {
    "question": {
      "ja": "\u753b\u50cf'file.png'\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u8aad\u307f\u8fbc\u3080"
    },
    "mr": {
      "python": "img = cv2.imread('file.png', 0)"
    },
    "question_id": 34981
  },
  {
    "question": {
      "ja": "\u91cd\u307f`W`\u3084\u30d0\u30a4\u30a2\u30b9`b`\u306a\u3069\u306e\u5909\u6570\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "print(sess.run(W))\nprint(sess.run(b))"
    },
    "question_id": 25412
  },
  {
    "question": {
      "ja": "base64\u3067\u7b26\u53f7\u5316\u3055\u308c\u305f\u6587\u5b57\u5217`s`\u3092\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b"
    },
    "mr": {
      "python": "base64.b64decode(s).decode()"
    },
    "question_id": 33506
  },
  {
    "question": {
      "ja": "\u914d\u5217\u30c7\u30fc\u30bf`x`,`y`\u306e\u6563\u5e03\u56f3\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "plt.scatter(x, y)"
    },
    "question_id": 24190
  },
  {
    "question": {
      "ja": "HTML\u30d5\u30a1\u30a4\u30eb`html`\u5185\u306e\u9806\u5e8f\u306a\u3057\u30ea\u30b9\u30c8\u3092python\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u53d6\u308a\u8fbc\u3080"
    },
    "mr": {
      "python": "soup = bs4.BeautifulSoup(html, 'lxml')\nunorder_list = soup.find_all('ul', id='front')\nnew_list = []\nfor ul_tag in unorder_list:\n    for li in ul_tag.find_all('li'):\n        new_list.append(li.text)\nprint(new_list)"
    },
    "question_id": 40646
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u5185\u306e\u5217`col_label`\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u884c\u3092\u62bd\u51fa\u3059\u308b\uff08pandas)"
    },
    "mr": {
      "python": "df[df.duplicated(subset=col_lable)]"
    },
    "question_id": 41775
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u5217`col_1`\u3068`col_2`\u306b\u3064\u3044\u3066\u30af\u30ed\u30b9\u96c6\u8a08\u3092\u884c\u3063\u305f\u7d50\u679c\u3092\u7a4d\u307f\u4e0a\u3052\u30b0\u30e9\u30d5\u306b\u3059\u308b"
    },
    "mr": {
      "python": "pandas.crosstab(df[col_1], df[col_2]).plot(kind='bar',stacked=True)"
    },
    "question_id": 33034
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`li`\u304b\u3089\u691c\u7d22\u3059\u308b\u5024`v`\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3059\u3079\u3066\u53d6\u5f97\u3057\u3066\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "ans = []\nfor index, value in enumerate(li):\n    if value == v:\n        ans.append(index)"
    },
    "question_id": 23246
  },
  {
    "question": {
      "ja": "\u30ea\u30b9\u30c8`li`\u304b\u3089\u691c\u7d22\u3059\u308b\u5024`v`\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3059\u3079\u3066\u53d6\u5f97\u3057\u3066\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "ans = [ i for i, value in enumerate(li) if value == v]"
    },
    "question_id": 23246
  },
  {
    "question": {
      "ja": "\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`d`\u5185\u306e\u5b58\u5728\u3057\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u30ad\u30fc`k`\u3092\u524a\u9664\u3059\u308b"
    },
    "mr": {
      "python": "d.pop(k, None) "
    },
    "question_id": 30088
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u5185\u306e\u5217`col_label`\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u884c\u3092\u524a\u9664\u3059\u308b\uff08pandas)"
    },
    "mr": {
      "python": "df.drop_duplicates(subset=col_lable)"
    },
    "question_id": 41700
  },
  {
    "question": {
      "ja": "\u4eca\u65e5\u304b\u3089\u4e00\u30f6\u6708\u524d\u306e\u65e5\u4ed8\u3092\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "today = datetime.date.today()\nprevious_month = today - dateutil.relativedelta.relativedelta(months=1)"
    },
    "question_id": 30824
  },
  {
    "question": {
      "ja": "Bluetooth\u306eRSSI\u5024\u3092\u53d6\u5f97\u3059\u308b"
    },
    "mr": {
      "python": "bluetooth.byte_to_signed_int()"
    },
    "question_id": 30882
  },
  {
    "question": {
      "ja": "\u6587\u5b57\u5217`str`\u304b\u3089\u7a7a\u767d\u3068\u6539\u884c\u3092\u53d6\u308a\u9664\u304f"
    },
    "mr": {
      "python": "str.strip()"
    },
    "question_id": 42011
  },
  {
    "question": {
      "ja": "\u4fe1\u53f7\u30c7\u30fc\u30bf`data`\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5468\u6ce2\u6570`fs`\u3067\u5468\u6ce2\u6570\u89e3\u6790\u3057\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3092\u8868\u793a\u3059\u308b"
    },
    "mr": {
      "python": "f,t,Sxx = signal.spectrogram(data, fs)\nplt.pcolormesh(t, f, Sxx)"
    },
    "question_id": 23218
  },
  {
    "question": {
      "ja": "Shift_JIS\u3067\u7b26\u53f7\u5316\u3055\u308c\u305f\u6587\u5b57\u5217`sjis_str`\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b"
    },
    "mr": {
      "python": "sjis_str.decode('shift-jis')"
    },
    "question_id": 39255
  },
  {
    "question": {
      "ja": "\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0`df`\u306e\u5217`col`\u3092\u6587\u5b57\u5217\u578b\u306b\u5909\u66f4\u3059\u308b"
    },
    "mr": {
      "python": "df[col] = df[col].astype(str)"
    },
    "question_id": 41519
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u0430 `num`"
    },
    "mr": {
      "python": "math.modf(num)[0]"
    },
    "question_id": 757454
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u0430 `num`"
    },
    "mr": {
      "python": "num % 1"
    },
    "question_id": 757454
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0447\u0438\u0441\u043b\u043e `part` \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 `whole`"
    },
    "mr": {
      "python": "100 / whole * part"
    },
    "question_id": 247377
  },
  {
    "question": {
      "ru": "\u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u043f\u0435\u0440\u0432\u0443\u044e \u0431\u0443\u043a\u0432\u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "s.title()"
    },
    "question_id": 712792
  },
  {
    "question": {
      "ru": "\u0418\u0437\u043c\u0435\u0440\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f `time_work` \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `func`"
    },
    "mr": {
      "python": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t"
    },
    "question_id": 775089
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "re.findall('(\\d+)', s)"
    },
    "question_id": 157675
  },
  {
    "question": {
      "ru": "\u0412\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u0440\u0442\u0435\u0436 \u0447\u0438\u0441\u0435\u043b `my_tupels` \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c `sep`"
    },
    "mr": {
      "python": "my_tupels = tuple(map(int, input().split(sep)))\n"
    },
    "question_id": 567383
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e `nums` \u0432 \u0444\u0430\u0439\u043b `file_path`"
    },
    "mr": {
      "python": "file_1 = open(file_path, \"w\")\\n\nfile_1.write(str(num))\nfile_1.close()"
    },
    "question_id": 210870
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e `nums` \u0432 \u0444\u0430\u0439\u043b `file_path`"
    },
    "mr": {
      "python": "with open(file_path, 'w') as f:\\n\n\\tprint(str(num))\\n"
    },
    "question_id": 210870
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c POST-\u0437\u0430\u043f\u0440\u043e\u0441 `res` c JSON \u0434\u0430\u043d\u043d\u044b\u043c\u0438 `data` \u043d\u0430 `url`"
    },
    "mr": {
      "python": "res = requests.post(url, json=data)"
    },
    "question_id": 681594
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0443\u0441\u0441\u043a\u043e\u044f\u0437\u044b\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `my_dict` \u0432 JSON "
    },
    "mr": {
      "python": "json.dumps(my_dict, ensure_ascii=False)"
    },
    "question_id": 584129
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043e\u0431\u0449\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b `common_items` \u0441\u043f\u0438\u0441\u043a\u0430 `my_list1` \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 `my_list2` "
    },
    "mr": {
      "python": "count_values_l1 = Counter(my_list1)\\n\ncount_values_l2 = Counter(my_list2)\\n\nkeys1 = count_values_l1.keys()\\n\nkeys2 = count_values_l2.keys()\\n\ncommon_items = []\\n\nfor key in keys1:\\n\n\\tif key in keys2:\\n\n\\t\\tcommon_items += [key] * min(count_values_l1[key], count_values_l2[key])\n"
    },
    "question_id": 37137
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043e\u0431\u0449\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b `common_items` \u0441\u043f\u0438\u0441\u043a\u0430 `my_list1` \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 `my_list2` "
    },
    "mr": {
      "python": "list(set(my_list1) & set(my_list2))"
    },
    "question_id": 37137
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u043b\u043e\u0436\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e `n` \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0438 `factors`"
    },
    "mr": {
      "python": "factors = []\\n\nwhile n % 2 == 0:\\n\n\\tfactors.append(n)\\n\n\\tn = n / 2\\n\\n\n    \nfor i in range(3,int(math.sqrt(n))+1,2):\\n\n\\twhile (n % i == 0):\\n\n\\t\\tfactors.append(i)\\n\n\\t\\tn = n / i\\n\\n\n    \nif n > 2:\\n\n\\tfactors.append(n)"
    },
    "question_id": 645227
  },
  {
    "question": {
      "ru": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u043e\u043a `my_list` \u0434\u043b\u0438\u043d\u043d\u043e\u0439 `N` \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 `val1` \u0434\u043e `val2`"
    },
    "mr": {
      "python": "my_list = [random.randint(val1, val2) for i in range(N)]"
    },
    "question_id": 565846
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 `file_path`"
    },
    "mr": {
      "python": "os.path.join(os.path.abspath(os.curdir), file_path)"
    },
    "question_id": 801094
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u0430 `my_list` \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438 `i` \u0438 `j`"
    },
    "mr": {
      "python": "my_list[i], my_list[j] = my_list[j], my_list[i]"
    },
    "question_id": 925879
  },
  {
    "question": {
      "ru": "\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 VK \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0441 id `APP_ID` \u0441 \u043b\u043e\u0433\u0438\u043d\u043e\u043c `LOGIN` \u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u043c `PASS`"
    },
    "mr": {
      "python": "def auth_vk_password():\\n\n\\tsession = vk.AuthSession(app_id=APP_ID, user_login=LOGIN, user_password=PASS)\n\\tfile = open(\"auth_vk.ini\", 'w')\n\\tfile.writelines(session.access_token)\n\\treturn session\n\ntry:\\n\n\\tfile = open(\"auth_vk.ini\", 'r')\\n\nexcept IOError as e:\\n\n\\taccess_token = auth_vk_password().access_token\\n\nelse:\\n\n\\taccess_token = file.readline()\\n\n\nsession = vk.Session(access_token=access_token)\\n\nif session:\\n\n\\tprint('\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e!')\\n\nelse:\\n\n\\tprint('\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c!')\\n"
    },
    "question_id": 140252
  },
  {
    "question": {
      "ru": "\u0412\u0432\u0435\u0441\u0442\u0438 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list = input().split()"
    },
    "question_id": 649828
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u043b\u044e\u0447\u0430 `my_key` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 `my_dict`"
    },
    "mr": {
      "python": "my_key in my_dict"
    },
    "question_id": 752179
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u043b\u044e\u0447\u0430 `my_key` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 `my_dict`"
    },
    "mr": {
      "python": "if my_key in my_dict:\\n\n\\tprint('\u041a\u043b\u044e\u0447 {my_key} \u0435\u0441\u043b\u0438 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435')\\n\nelse:\\n\n\\tprint('\u041a\u043b\u044e\u0447\u0430 {my_key} \u043d\u0435\u0442 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435')\\n"
    },
    "question_id": 752179
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 `file_extension` \u0444\u0430\u0439\u043b\u0430 `file_path`"
    },
    "mr": {
      "python": "filename, file_extension = os.path.splitext(file_path)"
    },
    "question_id": 540082
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 `file_extension` \u0444\u0430\u0439\u043b\u0430 `file_path`"
    },
    "mr": {
      "python": "file_extension= file_path.split('.')[-1]"
    },
    "question_id": 540082
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s` \u043f\u043e\u0441\u043b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 `symbol`"
    },
    "mr": {
      "python": "s = s[:s.find(symbol)]"
    },
    "question_id": 502573
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s` \u043f\u043e\u0441\u043b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 `symbol`"
    },
    "mr": {
      "python": "s = s.split(symbol)[0]"
    },
    "question_id": 502573
  },
  {
    "question": {
      "ru": "\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043c\u0435\u0442\u043e\u0434 `method1` \u043a\u043b\u0430\u0441\u0441\u0430 `A` \u0438 \u043c\u0435\u0442\u043e\u0434 `method2` \u043a\u043b\u0430\u0441\u0441\u0430 B"
    },
    "mr": {
      "python": "class A_heir(A):\\n\n\\tdef __init__(self):\\n\n\\t\\tsuper().__init__()\\n\n        \n\\tdef __call__(self, func_name=\"\", args=[], kwargs={}):\\n\n\\t\\treturn getattr(self, func_name)(*args, **kwargs)\\n\n\nclass B_heir(B):\\n\n\\tdef __init__(self):\\n\n\\t\\tsuper().__init__()\\n\n        \n\\tdef __call__(self, func_name=\"\", args=[], kwargs={}):\\n\n\\t\\treturn getattr(self, func_name)(*args, **kwargs)\\n\n            \na = A_heir()\\n\nb = B_heir()\\n\n\np1 = Process(target=a, kwargs={'func_name': method1})\\n\np2 = Process(target=b, kwargs={'func_name': method2})\\n\np1.start()\\n\np2.start()\\n\n\np1.join()\\n\np2.join()\\n"
    },
    "question_id": 452762
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 `diff_list` \u0441\u043f\u0438\u0441\u043a\u043e\u0432 `my_list1` \u0438 `my_list2`"
    },
    "mr": {
      "python": "count_values1 = Counter(my_list1)\\n\ncount_values2 = Counter(my_list2)\\n\n\nkeys1 = list(count_values1.keys())\\n\nkeys2 = list(count_values2.keys())\\n\n\ndiff_list = []\\n\nfor key in set(keys1 + keys2):\\n\n\\tif key in keys1 and key in keys2:\\n\n\\t\\tdiff_list += [key] * abs(count_values1[key] - count_values2[key])\\n\n\\telif key in keys1:\\n\n\\t\\tdiff_list += [key] * count_values1[key]\\n\n\\telif key in keys2:\\n\n\\t\\tdiff_list += [key] * count_values2[key]\\n"
    },
    "question_id": 21825
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 `diff_list` \u0441\u043f\u0438\u0441\u043a\u043e\u0432 `my_list1` \u0438 `my_list2`"
    },
    "mr": {
      "python": "diff_list = list(set(my_list1)-set(my_list2)) + list(set(my_list2)-set(my_list1))"
    },
    "question_id": 21825
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b `total`, \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0445 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043e\u043d\u0446\u0430 \u0432\u0432\u043e\u0434\u0430 `end_sign`"
    },
    "mr": {
      "python": "total = 0\\n\nwhile True:\\n\n\\tn = int(input())\\n\n\\tif n == end_sign:\\n\n\\t\\tbreak\\n\n\\ttotal += n\\n"
    },
    "question_id": 384437
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 `my_char` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": " s.index(my_char)"
    },
    "question_id": 513149
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 `my_char` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": " s.find(my_char)"
    },
    "question_id": 513149
  },
  {
    "question": {
      "ru": "\u0412\u0432\u0435\u0441\u0442\u0438 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0447\u0438\u0441\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list = list(map(int, input().split()))"
    },
    "question_id": 934453
  },
  {
    "question": {
      "ru": "\u0412\u0432\u0435\u0441\u0442\u0438 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0447\u0438\u0441\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list = [int(a) for a in input().split()]"
    },
    "question_id": 934453
  },
  {
    "question": {
      "ru": "\u0421\u0433\u043d\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c word \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 `output_file_path` \u043f\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0443 \u0438\u0437 word \u0444\u0430\u0439\u043b\u0430 `template_path` \u0441 JSON \u0434\u0430\u043d\u043d\u044b\u043c\u0438 data"
    },
    "mr": {
      "python": "#python-docx-template\\n\ndoc = DocxTemplate(template_path)\\n\ndata = { 'var_name' : \"HELLO WORLD!\" }\\n\ndoc.render(data)\\n\ndoc.save(output_file_path)"
    },
    "question_id": 515513
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u043e\u0439 \u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "if not my_list:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n\nelse:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n"
    },
    "question_id": 524081
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u043e\u0439 \u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "if length(my_list) == 0:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n\nelse:\\n\n\\tprint(\"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\")\\n"
    },
    "question_id": 524081
  },
  {
    "question": {
      "ru": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e \u0447\u0438\u0441\u043b\u0430 `num`"
    },
    "mr": {
      "python": "for i in range(1, num):\\n\n\\tprint(*range(i, i*num+1, i), sep='\\t')\\n"
    },
    "question_id": 766573
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u0441 JSON \u0434\u0430\u043d\u043d\u044b\u043c\u0438 `data` \u0438 \u0444\u0430\u0439\u043b\u043e\u043c `file_path` \u043d\u0430 `url`"
    },
    "mr": {
      "python": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, data=data, files=files)"
    },
    "question_id": 724582
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "Counter(s)"
    },
    "question_id": 735924
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "{c:s.count(c) for c in set(s)}"
    },
    "question_id": 735924
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f `my_dict` \u043f\u043e \u043a\u043b\u044e\u0447\u0443 `my_key`"
    },
    "mr": {
      "python": "my_dict[my_key]"
    },
    "question_id": 504426
  },
  {
    "question": {
      "ru": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443 utf-8 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430"
    },
    "mr": {
      "python": "## -*- coding: utf-8 -*-"
    },
    "question_id": 387249
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 `s` c \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c `sep` "
    },
    "mr": {
      "python": "s = sep.join(my_list)"
    },
    "question_id": 66490
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 `s` c \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c `sep` "
    },
    "mr": {
      "python": "s = sep.join(map(str, my_list))"
    },
    "question_id": 66490
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0446\u0438\u0444\u0440\u044b \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "re.sub(r'[^\\w\\s]+|[\\d]+', r'',s)"
    },
    "question_id": 363427
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u0434\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "for c in s:\\n\n\\tprint(ord(c))"
    },
    "question_id": 224298
  },
  {
    "question": {
      "ru": "\u0421\u043f\u0430\u0440\u0441\u0438\u0442\u044c HTML-\u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b `code` \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 `url`"
    },
    "mr": {
      "python": "with urllib.request.urlopen(url) as res:\n    code = res.read()"
    },
    "question_id": 182910
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u0440\u0432\u0430\u0440\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `parent_func` \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `child_func`"
    },
    "mr": {
      "python": "def child_func():\\n\n\\tif something_went_wrong:\\n\n\\t\\traise Exception(\"Something went wrong\")\\n\n    \ndef parent_func():\\n\n\\t# ...\\n\n\\ttry:\\n\n\\t\\tchild_func()\\n\n\\texcept Exception as e:\\n\n\\t\\tprint(\"Error:\", e)\\n\n\\t\\treturn"
    },
    "question_id": 715809
  },
  {
    "question": {
      "ru": "\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 `my_obj` \u043a\u043b\u0430\u0441\u0441\u0430 `My_class`"
    },
    "mr": {
      "python": "class ClassEncoder(json.JSONEncoder):\\n\n\\tdef default(self, obj):\\n\n\\tif isinstance(obj, My_class):\\n\n\\t\\treturn obj.__dict__\\n\n\\treturn json.JSONEncoder.default(self, obj)\\n\n        \njson.dumps(my_obj, cls=ClassEncoder)\\n"
    },
    "question_id": 850118
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u043d\u0430 \u0441\u043b\u043e\u0432\u0430 `words`"
    },
    "mr": {
      "python": "words = s.split()"
    },
    "question_id": 673692
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 `s` \u0441\u0442\u0440\u043e\u043a\u043e\u0439"
    },
    "mr": {
      "python": "isinstance(s, str)"
    },
    "question_id": 843929
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e `my_set`"
    },
    "mr": {
      "python": "my_set = set(my_list)"
    },
    "question_id": 705331
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043a\u043b\u0430\u0432\u0438\u0448\u0438 `my_key` \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e `my_func`"
    },
    "mr": {
      "python": "keyboard.add_hotkey(my_key, my_func)"
    },
    "question_id": 841014
  },
  {
    "question": {
      "ru": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 `cmd` \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c `TOKEN` \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432 \u043e\u0442\u0432\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 `mess`"
    },
    "mr": {
      "python": "bot = telebot.TeleBot(TOKEN)\\n\n\n@bot.message_handler(commands=[cmd])\\n\ndef add(message):\\n\n\\tbot.send_message(message.chat.id, mess)"
    },
    "question_id": 589590
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e `num` \u043d\u0430 \u0440\u0430\u0437\u0440\u044f\u0434\u044b"
    },
    "mr": {
      "python": "list(str(num))"
    },
    "question_id": 262786
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e `num` \u043d\u0430 \u0440\u0430\u0437\u0440\u044f\u0434\u044b"
    },
    "mr": {
      "python": "[int(i) for i in str(num)]"
    },
    "question_id": 262786
  },
  {
    "question": {
      "ru": "\u0418\u0437\u043c\u0435\u0440\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f `time_work` \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `func`"
    },
    "mr": {
      "python": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t"
    },
    "question_id": 313184
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0441\u0442\u044c \u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "any(map(str.isdigit, s))"
    },
    "question_id": 678639
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0441\u0442\u044c \u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "re.search('\\d+', s)"
    },
    "question_id": 678639
  },
  {
    "question": {
      "ru": "\u0421\u0447\u0438\u0442\u0430\u0442\u044c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0447\u0438\u0441\u043b\u043e \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e `num`"
    },
    "mr": {
      "python": "num = int(input().strip())"
    },
    "question_id": 830473
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430 `word` \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 `n` \u043f\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0443"
    },
    "mr": {
      "python": "form = { # \u043f\u0440\u0438\u043c\u0435\u0440 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u0441\u043b\u043e\u0432\u0430 \"\u043a\u043e\u0440\u043e\u0432\u0430\"\\n\n    \"11-14\": \"\u043a\u043e\u0440\u043e\u0432\",\\n\n    \"0,5-9\": \"\u043a\u043e\u0440\u043e\u0432\",\\n\n    \"1\": \"\u043a\u043e\u0440\u043e\u0432\u0430\",\\n\n    \"2-4\": \"\u043a\u043e\u0440\u043e\u0432\u044b\",\\n\n}\\n\n\nif n >= 11 and n <= 14:\\n\n\\tprint(n, form[\"11-14\"])\\n\nelse:\\n\n\\ttemp = n % 10\\n\n\\tif temp == 0 or (temp >= 5 and temp <= 9):\\n\n\\t\\tprint(n, form[\"0,5-9\"])\\n\n\\tif temp == 1:\\n\n\\t\\tprint(n, form[\"1\"])\\n\n\\tif temp >=2 and temp <=4:\\n\n\\t\\tprint(n, form[\"2-4\"])\\n"
    },
    "question_id": 307354
  },
  {
    "question": {
      "ru": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u043e\u043a `my_list` \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 `val1` \u0434\u043e `val2` \u0434\u043b\u0438\u043d\u043d\u043e\u0439 `N`"
    },
    "mr": {
      "python": "my_list = [random.randint(val1, val2) for i in range(N)]"
    },
    "question_id": 773920
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043f\u0438\u0441\u043a\u043e\u0432 `splitted` \u043f\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044e `sep`"
    },
    "mr": {
      "python": "splitted = [[]]\\n\nfor item in my_list:\\n\n\\tif item == sep:\\n\n\\t\\tsplitted.append([])\\n\n\\telse:\\n\n\\t\\tsplitted[-1].append(item)"
    },
    "question_id": 115592
  },
  {
    "question": {
      "ru": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u0440\u0430\u0437\u043c\u0435\u0440\u0430 `M`x`N` \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0439 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c `val`"
    },
    "mr": {
      "python": "my_list = [[val for _ in range(N)] for _ in range(M)]"
    },
    "question_id": 158145
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 `n` \u0447\u043b\u0435\u043d\u043e\u0432 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u0447\u043b\u0435\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 `f(x)`"
    },
    "mr": {
      "python": "s = 0\\n\nfor x in range(1, n+ 1):\\n\n\\ts += f(x)\\n"
    },
    "question_id": 592250
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 `n` \u0447\u043b\u0435\u043d\u043e\u0432 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u0447\u043b\u0435\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 `f(x)`"
    },
    "mr": {
      "python": "s = 0\\n\nx = 0\\n\nwhile True:\\n\n\\tx+= 1\\n\n\\ts += f(x)\\n\n\\tif x == n:\\n\n\\t\\tbreak\\n"
    },
    "question_id": 592250
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u044b `old_date` \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 `new_date` \u0444\u043e\u0440\u043c\u0430\u0442\u0430 `date_format` \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 datetime "
    },
    "mr": {
      "python": "new_date = datetime.strptime(old_date, date_format)"
    },
    "question_id": 419321
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u044b `old_date` \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 `new_date` \u0444\u043e\u0440\u043c\u0430\u0442\u0430 `date_format` \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 datetime "
    },
    "mr": {
      "python": "locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')\\n\nnew_date = datetime.strptime(old_date, date_format).date()"
    },
    "question_id": 419321
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 try-catch"
    },
    "mr": {
      "python": "try:\\n\n\\tpassexcept Exception as e:\\n\n\\tprint('\u041e\u0448\u0438\u0431\u043a\u0430:\\n', traceback.format_exc())\\n"
    },
    "question_id": 505510
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 try-catch"
    },
    "mr": {
      "python": "try:\\n\n\\tpassexcept Exception as e:\\n\n\\tprint('\u041e\u0448\u0438\u0431\u043a\u0430:\\n', e)\\n"
    },
    "question_id": 505510
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `old_s` \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443 `new_s` \u0432 \u0444\u0430\u0439\u043b\u0435 `file_path`"
    },
    "mr": {
      "python": "with open (file_path, 'r') as f:\\n\n\\told_data = f.read()\\n\n\nnew_data = old_data.replace(old_s, new_s)\\n\n\nwith open (file_path, 'w') as f:\\n\n\\tf.write(new_data)\\n"
    },
    "question_id": 654183
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 `count` \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 `sub` \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 `s`"
    },
    "mr": {
      "python": "count = 0\\n\ni = -1\\n\nwhile True:\\n\n\\ti = s.find(sub, i+1)\\n\n\\tif i == -1:\\n\n\\t\\tbreak\\n\n\\tcount += 1"
    },
    "question_id": 404985
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0438\u0441\u044c\u043c\u043e \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c `message` \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 `receiver_email` \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c gmail-\u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0441 \u043b\u043e\u0433\u0438\u043d\u043e\u043c `sender_email` \u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u043c `password`"
    },
    "mr": {
      "python": "# \u0414\u0430\u0439\u0442\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 https://myaccount.google.com/lesssecureapps\nport = 465  # For SSL\\n\nsmtp_server = \"smtp.gmail.com\"\\n\ncontext = ssl.create_default_context()\\n\nwith smtplib.SMTP_SSL(smtp_server, port, context=context) as server:\\n\n\\tserver.login(sender_email, password)\\n\n\\tserver.sendmail(sender_email, receiver_email, message)\\n"
    },
    "question_id": 193764
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0434\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0446\u0432\u0435\u0442\u043e\u043c `color` \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b"
    },
    "mr": {
      "python": "colors = {\\n\n\"\u043a\u0440\u0430\u0441\u043d\u044b\u0439\": '\\u001b[31m',\\n\n\"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\": '\\u001b[32m',\\n\n\"\u0441\u0438\u043d\u0438\u0439\": '\\u001b[34m',\\n\n\"\u0431\u0435\u043b\u044b\u0439\": '\\u001b[37m',\\n\n\"\u0447\u0435\u0440\u043d\u044b\u0439\": '\\u001b[30m',\\n\n\"\u0436\u0435\u043b\u0442\u044b\u0439\": '\\u001b[33m',\\n\n'reset': '\\033[0m'\\n\n}\\n\nprint('{ colors[color] }{ s }{ colors['reset'] }')"
    },
    "question_id": 294557
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0434\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0446\u0432\u0435\u0442\u043e\u043c `color` \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b"
    },
    "mr": {
      "python": "#import colorama\n#from colorama import Fore\n#from colorama import Style\n\ncolors = {\\n\n\"\u043a\u0440\u0430\u0441\u043d\u044b\u0439\": 'RED'\\n,\n\"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\": 'GREEN',\\n\n\"\u0441\u0438\u043d\u0438\u0439\": 'BLUE',\\n\n\"\u0431\u0435\u043b\u044b\u0439\": 'WHITE',\\n\n\"\u0447\u0435\u0440\u043d\u044b\u0439\": 'BLACK',\\n\n\"\u0436\u0435\u043b\u0442\u044b\u0439\": 'YELLOW'\\n\n}\\n\nprint(getattr(Fore, colors[color]) + Style.BRIGHT + s + Style.RESET_ALL)"
    },
    "question_id": 294557
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list.reverse()"
    },
    "question_id": 427051
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list = my_list[::-1]"
    },
    "question_id": 427051
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list = list(reversed(my_list))"
    },
    "question_id": 427051
  },
  {
    "question": {
      "ru": "\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u044e\u0447\u0435\u0439 `list_key` \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 `list_value` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `my_dict`"
    },
    "mr": {
      "python": "my_dict = dict(zip(list_key, list_value))"
    },
    "question_id": 789625
  },
  {
    "question": {
      "ru": "\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u044e\u0447\u0435\u0439 `list_key` \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 `list_value` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `my_dict`"
    },
    "mr": {
      "python": "my_dict = {list_key[i]: list_value[i] for i in range(len(list_key))}"
    },
    "question_id": 789625
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0438\u0441\u044c\u043c\u043e \u0441  \u0444\u0430\u0439\u043b\u043e\u043c `file_path`  \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 `receiver_email` \u0441 smtp-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 `smtp_server` \u0441 \u043b\u043e\u0433\u0438\u043d\u043e\u043c `sender_email` \u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u043c `password`"
    },
    "mr": {
      "python": "basename = os.path.basename(file_path)\\n\n\n# Compose attachment\\n\npart = MIMEBase('application', \"octet-stream\")\\n\npart.set_payload(open(file_path ,\"rb\").read() )\\n\nencoders.encode_base64(part)\\n\npart.add_header('Content-Disposition', 'attachment; filename=\"%s\"' % basename)\\n\n\n# Compose message\\n\nmsg = MIMEMultipart()\\n\nmsg['From'] = sender_email\\n\nmsg['To'] = receiver_email\\n\nmsg.attach(part)\\n\n\n# Send mail\\n\nsmtp = SMTP_SSL(smtp_server)\\n\nsmtp.connect(smtp_server, 465)\\n\nsmtp.login(sender_email, password)\\n\nsmtp.sendmail(sender_email, receiver_email, msg.as_string())\\n\nsmtp.quit()\\n"
    },
    "question_id": 1
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 `s` `n` \u0440\u0430\u0437 \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c `sep`"
    },
    "mr": {
      "python": "print(sep.join([s] * n))"
    },
    "question_id": 477678
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0446\u044b `cols` \u0441 \u0438\u043d\u0434\u0435\u043a\u0430\u0441\u0430\u043c\u0438 `list_indexes` pandas \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 `df`"
    },
    "mr": {
      "python": "cols = df.iloc[:, indexes]"
    },
    "question_id": 635319
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b `total` \u0441\u043f\u0438\u0441\u043a\u0430 `my_list`"
    },
    "mr": {
      "python": "total = sum(my_list)"
    },
    "question_id": 1085344
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b `total` \u0441\u043f\u0438\u0441\u043a\u0430 `my_list`"
    },
    "mr": {
      "python": "total = 0\\n\nfor i in my_list:\\n\n\\ttotal += i\\n"
    },
    "question_id": 1085344
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0435\u0447\u043d\u0438\u0435 `max_value` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 `my_list`"
    },
    "mr": {
      "python": "max_val = {x: y for x, y in filter(lambda x: my_list[x[0]] == max(my_list.values()), my_list.items())}\n"
    },
    "question_id": 759476
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0435\u0447\u043d\u0438\u0435 `max_value` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 `my_list`"
    },
    "mr": {
      "python": "max_val = max(my_list.values())"
    },
    "question_id": 759476
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 `n` \u0441\u043b\u043e\u0432 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 `my_list` \u0432 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439"
    },
    "mr": {
      "python": "print(*random.sample(set(my_list),n))"
    },
    "question_id": 407127
  },
  {
    "question": {
      "ru": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443 utf-8 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430"
    },
    "mr": {
      "python": "## -*- coding: utf-8 -*-"
    },
    "question_id": 526785
  },
  {
    "question": {
      "ru": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u0440\u0442\u0435\u0436 `my_tuple` \u043a \u0441\u043f\u0438\u0441\u043a\u0443 `my_list`"
    },
    "mr": {
      "python": "my_list.extend(my_tuple)"
    },
    "question_id": 446920
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s` \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 `i` \u043d\u0430 \u0441\u0438\u043c\u0432\u043e\u043b `symbol`"
    },
    "mr": {
      "python": "s[:i] + symbol + s[i + 1:]"
    },
    "question_id": 103581
  },
  {
    "question": {
      "ru": "\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list = sorted(my_list)"
    },
    "question_id": 28096
  },
  {
    "question": {
      "ru": "\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list.sort()"
    },
    "question_id": 28096
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c ip-\u0430\u0434\u0440\u0435\u0441 `my_ip` \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430 \u0432 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435 "
    },
    "mr": {
      "python": "conn = http.client.HTTPConnection(\"ifconfig.me\")\\n\nconn.request(\"GET\", \"/ip\")\\n\nmy_ip = conn.getresponse().read()\\n"
    },
    "question_id": 133137
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u043e\u0448\u043b\u043e \u043c\u0435\u0436\u0434\u0443 \u0434\u0430\u0442\u0430\u043c\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 datetime `first_date` \u0438 `second_date` "
    },
    "mr": {
      "python": "second_date - first_date"
    },
    "question_id": 134564
  },
  {
    "question": {
      "ru": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u0442\u043e\u0447\u043a\u0430\u043c \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 `points`"
    },
    "mr": {
      "python": "img = Image.new('RGB', (256, 256 * 3), 'white')\\n\nfor point in points:\\n\n\\tdraw.point(point + img.size,color=\"red\")\\n\n\nimg.show()\\n\n"
    },
    "question_id": 14349
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 `params` \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438"
    },
    "mr": {
      "python": "sys.argv"
    },
    "question_id": 236635
  },
  {
    "question": {
      "ru": "\u0418\u0437\u043c\u0435\u0440\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f `time_work` \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `func`"
    },
    "mr": {
      "python": "t = time.time()\\n\nfunc()\\n\ntime_work = time.time()-t"
    },
    "question_id": 230436
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u0438 `prefix`"
    },
    "mr": {
      "python": "\ntext = \"\"\nwith open(file_path, 'r') as f:\n    for line in f:\n        if not re.search(r\"^({})\".format(prefix), line):\n            text += line\n\nwith open(file_path, 'w') as f:\n    f.write(text)"
    },
    "question_id": 273613
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "Counter(s.split())"
    },
    "question_id": 9096
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e `num` \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435\u043c `base` \u0432 \u0447\u0438\u0441\u043b\u043e `new_num` \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f "
    },
    "mr": {
      "python": "new_num = int(str(num), base) "
    },
    "question_id": 157783
  },
  {
    "question": {
      "ru": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 sqlite3 `file_path`"
    },
    "mr": {
      "python": "con = sqlite3.connect(db_path)\\n\ncur = con.cursor()\\n"
    },
    "question_id": 224243
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b `cmd` \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 `result`"
    },
    "mr": {
      "python": "result = os.popen(cmd, 'r', 1)"
    },
    "question_id": 225896
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `my_dict`"
    },
    "mr": {
      "python": "my_dict = json.loads(s)"
    },
    "question_id": 319317
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `my_dict`"
    },
    "mr": {
      "python": "my_dict = dict(ast.literal_eval(s))"
    },
    "question_id": 319317
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]"
    },
    "question_id": 235923
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n"
    },
    "question_id": 235923
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n"
    },
    "question_id": 235923
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b `num` \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "regexp = re.compile( \"\\s*(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?)\\s*;\", re.M )\\n\nnums = regexp.findall(s)\\n"
    },
    "question_id": 44503
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439 `sentences`"
    },
    "mr": {
      "python": "split_regex = re.compile(r'[.|!|?|\u2026]')\\n\nsentences = list(filter(lambda t: t, [t.strip() for t in split_regex.split(s)]))"
    },
    "question_id": 197142
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438"
    },
    "mr": {
      "python": "print(s, end=\" \")"
    },
    "question_id": 166814
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0437\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e `f` \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path`"
    },
    "mr": {
      "python": "exec(open(\"./file_path\").read())\\n\nf()\\n"
    },
    "question_id": 69121
  },
  {
    "question": {
      "ru": "\u0412\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u0430\u0443\u0434\u0438\u043e \u0444\u0430\u0439\u043b `file_path`"
    },
    "mr": {
      "python": "mixer.init()\\n\nmixer.music.load(file_path)\\n\nmixer.music.play()\\n"
    },
    "question_id": 75962
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044f `my_dict` \u0441 \u043a\u043b\u044e\u0447\u0435\u043c `my_key` \u0432\u043d\u0443\u0442\u0440\u0438 \u0446\u0438\u043a\u043b\u0430 for "
    },
    "mr": {
      "python": "keys = list(my_dict.keys()).copy()\\n\nfor i in keys:\\n\n    if my_key in my_dict:\n        del my_dict[my_key]\n"
    },
    "question_id": 91763
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e `num` \u0432 \u0431\u0430\u0439\u0442 \u0441\u0442\u0440\u043e\u043a\u0443"
    },
    "mr": {
      "python": "str(num).encode()"
    },
    "question_id": 297129
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a mysql \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 `db_name` \u043d\u0430 \u0445\u043e\u0441\u0442\u0435 `my_host` \u043f\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c `user` \u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u043c `password`"
    },
    "mr": {
      "python": "con = pymysql.connect(my_host, user, password, db_name)\\n \nwith con:\\n    \n\\tcur = con.cursor()\\n"
    },
    "question_id": 19994
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s` \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044e `my_dict`"
    },
    "mr": {
      "python": "frm = ''.join([str(i) for i in my_dict.keys()])\\n\nto = ''.join([str(i) for i in my_dict.values()])\\n\ntrantab = str.maketrans(frm, to)\\n\ns = s.translate(trantab)\\n"
    },
    "question_id": 55256
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s` \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044e `my_dict`"
    },
    "mr": {
      "python": "for i, symbol in enumerate(s):\\n\n\\tif symbol in my_dict:\\n\n\\t\\ts = s[:i] + str(my_dict[symbol]) + s[i+1:]\\n"
    },
    "question_id": 55256
  },
  {
    "question": {
      "ru": "\u0421\u0433\u0435\u043d\u0435\u043d\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0443\u0442\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 Django upload_to"
    },
    "mr": {
      "python": "def get_upload_path(instance, filename):\\n\n    return os.path.join(\n      \"user_%d\" % instance.owner.id, \"car_%s\" % instance.slug, filename)"
    },
    "question_id": 105134
  },
  {
    "question": {
      "ru": "\u0418\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `s` \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u043b\u043e\u0432\u0430 \u0441 \u0441\u0443\u0444\u0438\u043a\u0441\u043e\u043c `suff`"
    },
    "mr": {
      "python": "\" \".join(list(filter( lambda x : not x.endswith(suff), list(s.split()))))"
    },
    "question_id": 185524
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 `my_var`"
    },
    "mr": {
      "python": "globs = globals().copy()\\n\nvar_name = list(filter(lambda x: id(globs[x]) == id(my_var), globs))[0]\\n\nif var_name in globals():\\n\n\\tprint('y')\\n\nelse:\\n\n\\tprint('n')\\n"
    },
    "question_id": 294170
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 `values_by_key` \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 `dict_list` \u043f\u043e \u043a\u043b\u044e\u0447\u0443 `my_key`"
    },
    "mr": {
      "python": "values_by_key  = [x[my_key] for x in dict_list if my_key in x] \n"
    },
    "question_id": 205516
  },
  {
    "question": {
      "ru": "\u0421\u043f\u0430\u0440\u0441\u0438\u0442\u044c HTML-\u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b `code` \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 `url`"
    },
    "mr": {
      "python": "with urllib.request.urlopen(url) as res:\n    code = res.read()"
    },
    "question_id": 45499
  },
  {
    "question": {
      "ru": "\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 `cmd` \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0432 Linux"
    },
    "mr": {
      "python": "os.popen(\"sudo -S %s\"%(command), 'w').write(cmd)"
    },
    "question_id": 292305
  },
  {
    "question": {
      "ru": "\u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u043d\u0438\u0435 \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 `url`\u0432 Django"
    },
    "mr": {
      "python": "redirect(url)"
    },
    "question_id": 58045
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u043e\u043a\u043d\u043e Tkinter `window` \u043f\u043e \u0446\u0435\u043d\u0442\u0440\u0443"
    },
    "mr": {
      "python": "`x = (window.winfo_screenwidth() - window.winfo_reqwidth()) / 2\\n\ny = (window.winfo_screenheight() - window.winfo_reqheight()) / 2\\n\nwindow.wm_geometry(\"+%d+%d\" % (x, y))\\n\nwindow.mainloop()\\n"
    },
    "question_id": 19319
  },
  {
    "question": {
      "ru": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 `values` \u0432 excel \u0444\u0430\u0439\u043b `filename`"
    },
    "mr": {
      "python": "book = xlwt.Workbook()\\n\nsheet1 = book.add_sheet(\"sheet1\")\\n\n\nfor row_index, row_values in enumerate(values):\\n\n\\trow = sheet1.row(row_index)\\n\n\\tfor col_index, col in enumerate(row_values):\\n\n\\t\\tvalue = row_values[col_index]\\n\n\\t\\trow.write(col_index, value)\\n\n\nbook.save(filename)"
    },
    "question_id": 211668
  },
  {
    "question": {
      "ru": "\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u043f\u043e\u043f\u0430\u0440\u043d\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u0430 `my_list` \u0432 \u0441\u0442\u0440\u043e\u043a\u0438"
    },
    "mr": {
      "python": "list(map(lambda x: x[0]+x[1], zip(my_list[0::2], my_list[1::2])))"
    },
    "question_id": 163083
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0432\u0435\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 `s` \u0432 \u0431\u0430\u0439\u0442-\u0441\u0442\u0440\u043e\u043a\u0443"
    },
    "mr": {
      "python": "s.encode()\n"
    },
    "question_id": 62533
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0432 JSON \u043e\u0431\u044a\u0435\u043a\u0442 `my_json`"
    },
    "mr": {
      "python": "my_json = json.loads(s)\n"
    },
    "question_id": 215531
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c `file_path` \u043d\u0430 `url`"
    },
    "mr": {
      "python": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)"
    },
    "question_id": 86126
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e `my_f` \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0437\u0430\u043d\u043e\u0432\u043e"
    },
    "mr": {
      "python": "def stable_running():\\n\n\\ttry:\\n\n\\t\\tmy_f()\\n\n\\texcept ValueError:\\n\n\\t\\tstable_running()\\n"
    },
    "question_id": 301251
  },
  {
    "question": {
      "ru": "\u0417\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 MD5"
    },
    "mr": {
      "python": "hashlib.md5(s.unicode())"
    },
    "question_id": 1666
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b `file_path` \u0441 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 UTF-8"
    },
    "mr": {
      "python": "with open(file_path, 'r') as f:\\n\n\\tpass"
    },
    "question_id": 151750
  },
  {
    "question": {
      "ru": "\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a `strings` \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0438 \u0434\u043b\u0438\u043d\u0435"
    },
    "mr": {
      "python": "strings.sort()"
    },
    "question_id": 271764
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0442\u043e\u0447\u043a\u043e\u0439 \u0441\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438 `point` \u0438 \u0442\u043e\u0447\u043a\u0430\u043c\u0438 \u0441 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438 `points`"
    },
    "mr": {
      "python": "[math.dist(point, cur_point) for cur_point in points]"
    },
    "question_id": 103067
  },
  {
    "question": {
      "ru": "\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b\u044b `file_path1` \u0438 `file_path2` \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e"
    },
    "mr": {
      "python": "l1 = map(lambda x: x.strip(), list(open('test1.txt')))\\n\nl2 = map(lambda x: x.strip(), list(open('test2.txt')))\\n\ndiff_list = list(zip(l1, l2))\\n\n\nfor i, line in enumerate(diff_list):\\n\n\\tif line[0] == line[1]:\\n\n\\t\\tprint('\u0421\u0442\u0440\u043e\u043a\u0438 { i} \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442')\\n\n\\telse:\\n\n\\tprint('\u0421\u0442\u0440\u043e\u043a\u0438 { i} \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442')\\n"
    },
    "question_id": 306224
  },
  {
    "question": {
      "ru": "\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b\u044b `file_path1` \u0438 `file_path2` \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e"
    },
    "mr": {
      "python": "from difflib import ndiff\n\nt1 = open('test1.txt').read().splitlines(1)\nt2 = open('test2.txt').read().splitlines(1)\n\nprint ''.join(ndiff(t1, t2))"
    },
    "question_id": 306224
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 `old_sub` \u043d\u0430 \u043f\u043e\u0434\u0441\u0442\u043e\u043a\u0443 `new_sub` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s` `count` \u0440\u0430\u0437"
    },
    "mr": {
      "python": "s.replace(old_sub, new_sub, count)"
    },
    "question_id": 157647
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 `s` \u043f\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044e `sep` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `my_dict`"
    },
    "mr": {
      "python": "my_dict = dict([[x[1:-1] for x in s.split(sep)], ])"
    },
    "question_id": 303166
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0431\u0443\u0444\u0435\u0440\u0430 \u043e\u0431\u043c\u0435\u043d\u0430 `data`"
    },
    "mr": {
      "python": "win32clipboard.OpenClipboard()\\n\ndata = win32clipboard.GetClipboardData()\\n\nwin32clipboard.CloseClipboard()\\n"
    },
    "question_id": 80334
  },
  {
    "question": {
      "ru": "\u041e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043d\u0435\u0437\u043d\u0430\u0447\u0430\u0449\u0438\u0435 \u043d\u0443\u043b\u0438 \u0441\u043f\u0440\u0430\u0432\u0430"
    },
    "mr": {
      "python": "num = str(num)\\n\n\nif \".\" in num:\\n\n\\tinteger, tail = num.split(\".\")\\n\n\\ttail = re.sub(r'[0]*$', '', tail)\\n\n\\tif not tail:\\n\n\\t\\tnum = integer\\n\n\\telse:\\n\n\\t\\tnum = float(integer + \".\" + tail)"
    },
    "question_id": 101677
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441"
    },
    "mr": {
      "python": "time.timezone // 3600"
    },
    "question_id": 135134
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "re.sub(r'[^\\w\\s]', '', s)"
    },
    "question_id": 74955
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "for p in string.punctuation:\\n\n\\tif p in s:\\n\n\\t\\ts = s.replace(p, '')\\n"
    },
    "question_id": 74955
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c `file_path` \u043d\u0430 `url`"
    },
    "mr": {
      "python": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)"
    },
    "question_id": 91006
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b `cmd` \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 `result`"
    },
    "mr": {
      "python": "result = os.popen(cmd, 'r', 1)"
    },
    "question_id": 202621
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043c\u0435\u0440\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u0432 \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0439"
    },
    "mr": {
      "python": "def get_length_items_list(a):\\n\n\\treturn list(map(lambda x: 1 if isinstance(x, list) else 0, a))\\n\n\nlength_my_list = get_length_items_list(my_list)\\n\n\nwhile max(length_my_list) > 0:\\n\n\\tnew_list = []\\n\n\\tfor item in my_list:\\n\n\\t\\tif isinstance(item, list):\n\\t\\t\\tif len(item) > 0:\n\\t\\t\\t\\tnew_list += item\n\\t\\t\\telse:\n\\t\\t\\t\\tnew_list.append(item)\n\n\\tmy_list = new_list\n\\tlength_my_list = get_length_items_list(my_list)"
    },
    "question_id": 253869
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 `s` c \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c `sep` "
    },
    "mr": {
      "python": "s = sep.join(my_list)"
    },
    "question_id": 300050
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 `s` c \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c `sep` "
    },
    "mr": {
      "python": "s = \" \".join(map(str, my_list))"
    },
    "question_id": 300050
  },
  {
    "question": {
      "ru": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 c \u043a\u043e\u0434\u043e\u043c `code`"
    },
    "mr": {
      "python": "sys.exit(code)"
    },
    "question_id": 459170
  },
  {
    "question": {
      "ru": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 c \u043a\u043e\u0434\u043e\u043c `code`"
    },
    "mr": {
      "python": "raise SystemExit(code)"
    },
    "question_id": 459170
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 `chars`"
    },
    "mr": {
      "python": "chars = list(s)"
    },
    "question_id": 52873
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 `chars`"
    },
    "mr": {
      "python": "chars = [c for c in s]"
    },
    "question_id": 52873
  },
  {
    "question": {
      "ru": "\u041e\u043a\u0440\u0443\u0433\u043b\u0438\u0442\u044c `num` \u0434\u043e `n` \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439 "
    },
    "mr": {
      "python": "round(num, n)"
    },
    "question_id": 648454
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "s = s.replace(' ', '')"
    },
    "question_id": 359110
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "s = ''.join(s.split())"
    },
    "question_id": 359110
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 `my_list` \u0432 `list_value_counts`"
    },
    "mr": {
      "python": "Counter(my_list)"
    },
    "question_id": 418982
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 `my_list` \u0432 `list_value_counts`"
    },
    "mr": {
      "python": "{i: array.count(i) for i in my_list}"
    },
    "question_id": 418982
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0441\u043f\u0438\u0441\u043a\u0435 `my_list`"
    },
    "mr": {
      "python": "my_list = [el for el, _ in groupby(my_list)]"
    },
    "question_id": 575604
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0441\u043f\u0438\u0441\u043a\u0435 `my_list`"
    },
    "mr": {
      "python": "my_list = list(set(my_list))"
    },
    "question_id": 575604
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043a\u0432\u0430\u0440\u0430\u0442\u043d\u044b\u0439 \u043a\u043e\u0440\u0435\u043d\u044c \u0438\u0437 `num`"
    },
    "mr": {
      "python": "math.sqrt(x)"
    },
    "question_id": 397222
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a `my_number_strs` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b `my_numbers`"
    },
    "mr": {
      "python": "my_numbers = [int(item) for item in my_number_strs]"
    },
    "question_id": 459401
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0441\u0442\u044c \u043b\u0438 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 `my_subs` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "re.search(sub_s, s)"
    },
    "question_id": 235938
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0441\u0442\u044c \u043b\u0438 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 `my_subs` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "sub_s in s"
    },
    "question_id": 235938
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0441\u0442\u044c \u043b\u0438 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 `my_subs` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": " s.find(sub_s) != -1 "
    },
    "question_id": 235938
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043e\u0431\u0449\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b `common_items` \u0441\u043f\u0438\u0441\u043a\u0430 `my_list1` \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 `my_list2` "
    },
    "mr": {
      "python": "count_values_l1 = Counter(my_list1)\\n\ncount_values_l2 = Counter(my_list2)\\n\nkeys1 = count_values_l1.keys()\\n\nkeys2 = count_values_l2.keys()\\n\ncommon_items = []\\n\nfor key in keys1:\\n\n\\tif key in keys2:\\n\n\\t\\tcommon_items += [key] * min(count_values_l1[key], count_values_l2[key])\n"
    },
    "question_id": 427942
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043e\u0431\u0449\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b `common_items` \u0441\u043f\u0438\u0441\u043a\u0430 `my_list1` \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 `my_list2` "
    },
    "mr": {
      "python": "list(set(my_list1) & set(my_list2))"
    },
    "question_id": 427942
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e "
    },
    "mr": {
      "python": "os.getcwd()"
    },
    "question_id": 535318
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e "
    },
    "mr": {
      "python": "os.path.abspath(os.curdir)"
    },
    "question_id": 535318
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e "
    },
    "mr": {
      "python": "os.path.abspath(__file__)\n\n"
    },
    "question_id": 535318
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b `file_path`"
    },
    "mr": {
      "python": "os.path.exists(file_path)"
    },
    "question_id": 414593
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 `data` \u0432 \u0444\u0430\u0439\u043b `file_path`"
    },
    "mr": {
      "python": "with open(path, \"w\") as file:\\n\n\\tprint(data, file=file)"
    },
    "question_id": 50064
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 `data` \u0432 \u0444\u0430\u0439\u043b `file_path`"
    },
    "mr": {
      "python": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tprint(data, file=file)"
    },
    "question_id": 50064
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043b\u044e\u0447 `my_key` \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f `my_dict` \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e `val` "
    },
    "mr": {
      "python": "my_key = None\\n\nfor k, v in my_dict.items():\\n\n\\tif v == val:\\n\n\\t\\tmy_key = k\\n\n\\t\\tbreak"
    },
    "question_id": 507330
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043b\u044e\u0447 `my_key` \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f `my_dict` \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e `val` "
    },
    "mr": {
      "python": "reversed_dict = dict(zip(my_dict.values(), my_dict.keys()))\\n\nmy_key = reversed_dict[val]"
    },
    "question_id": 507330
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e 'num' \u043d\u0430 \u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c"
    },
    "mr": {
      "python": "num % 2 == 0"
    },
    "question_id": 30653
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list.reverse()"
    },
    "question_id": 299026
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list = my_list[::-1]"
    },
    "question_id": 299026
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "my_list = list(reversed(my_list))"
    },
    "question_id": 299026
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 `item` \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 `my_list`"
    },
    "mr": {
      "python": "my_list.remove(item)"
    },
    "question_id": 81572
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 `item` \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 `my_list`"
    },
    "mr": {
      "python": "del my_list[my_list.index(item)]"
    },
    "question_id": 81572
  },
  {
    "question": {
      "ru": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443 utf-8 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430"
    },
    "mr": {
      "python": "## -*- coding: utf-8 -*-"
    },
    "question_id": 293
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a `s_list` \u043f\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044e `sep` "
    },
    "mr": {
      "python": "s_list = s.strip().split(sep)"
    },
    "question_id": 592812
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e `num` \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b `digits`"
    },
    "mr": {
      "python": "digits = [int(i) for i in str(num)]"
    },
    "question_id": 506457
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0432 `lines` \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u0441\u0442\u0440\u043e\u043a\u0438"
    },
    "mr": {
      "python": "with open(file_path) as file:\\n\n\\tlines = [line.rstrip() for line in file.readlines()]"
    },
    "question_id": 597892
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e"
    },
    "mr": {
      "python": "for x in my_list:\\n \n\\tprint(x)"
    },
    "question_id": 251048
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e"
    },
    "mr": {
      "python": "print('\\n'.join(my_list))"
    },
    "question_id": 251048
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043f\u0438\u0441\u043e\u043a `my_list` \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e"
    },
    "mr": {
      "python": "print('\\n'.join(list(map(str, my_list))))"
    },
    "question_id": 251048
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0444\u0430\u0439\u043b `file_path` \u0441 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 utf-8 \u0432 `data`"
    },
    "mr": {
      "python": "f = codecs.open(file_path, \"r\", \"utf_8_sig\" )\ndata = f.read()\nf.close()"
    },
    "question_id": 33868
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0444\u0430\u0439\u043b `file_path` \u0441 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 utf-8 \u0432 `data`"
    },
    "mr": {
      "python": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tdata = f.read()"
    },
    "question_id": 33868
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043b\u0438\u0448\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "s = ' '.join(s.split())"
    },
    "question_id": 248267
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e `num` \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f `from_base` \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f `to_base` "
    },
    "mr": {
      "python": "n = int(str(num), from_base)\\n\nalphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\\n\nnew_num = \"\"\\n\nwhile n > 0:\\n\n\\tn, m = divmod(n, to_base)\\n\n\\tnew_num += alphabet[m]\\n\nnum = new_num[::-1]"
    },
    "question_id": 607802
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u043e `num` \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435"
    },
    "mr": {
      "python": "isinstance(num, int)"
    },
    "question_id": 585259
  },
  {
    "question": {
      "ru": "\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u043e\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432"
    },
    "mr": {
      "python": "reg = re.compile('[^a-zA-Z ]')\\n\ns = reg.sub('', s))"
    },
    "question_id": 446226
  },
  {
    "question": {
      "ru": "\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u043e\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432"
    },
    "mr": {
      "python": "good_chars = (ascii_letters + whitespace).encode()\\n\njunk_chars = bytearray(set(range(0x100)) - set(good_chars))\\n\ns = s.encode('ascii', 'ignore').translate(None, junk_chars).decode()"
    },
    "question_id": 446226
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]"
    },
    "question_id": 542210
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n"
    },
    "question_id": 542210
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n"
    },
    "question_id": 542210
  },
  {
    "question": {
      "ru": "\u0421\u043a\u0430\u0447\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 `link` \u0432 `file_path`"
    },
    "mr": {
      "python": "with urllib.request.urlopen(link) as url:\\n\n\\tdownloaded_file = url.read()\\n\n\\twith open(file_path, \"wb\") as f:\\n\n\\t\\tf.write(downloaded_file)"
    },
    "question_id": 60925
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0441\u043b\u043e\u0432\u043e `word` \u0432 \u0444\u0430\u0439\u043b\u0435 `file_path`"
    },
    "mr": {
      "python": "with open(file_path,'r') as f:\\n\n\\ttext = f.read()\\n\n\nif word in text:\\n\n\\tprint('\u0421\u043b\u043e\u0432\u043e { word } \u0435\u0441\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435')\\n\nelse:\\n\n\\tprint('\u0421\u043b\u043e\u0432\u0430 {word} \u043d\u0435\u0442 \u0432 \u0444\u0430\u0439\u043b\u0435')\\n"
    },
    "question_id": 274131
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 `words` \u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c"
    },
    "mr": {
      "python": "words = s.split()\nwords.sort()"
    },
    "question_id": 505115
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b `my_symbol` \u043f\u043e \u0435\u0433\u043e \u043a\u043e\u0434\u0443 `char_code` "
    },
    "mr": {
      "python": "my_symbol = chr(char_code)"
    },
    "question_id": 565252
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b `file_path` \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0441 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 utf-8 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e f"
    },
    "mr": {
      "python": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tpass"
    },
    "question_id": 509576
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b `file_path` \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0441 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 utf-8 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e f"
    },
    "mr": {
      "python": "f = open(file_path,'a', encoding='utf-8')"
    },
    "question_id": 509576
  },
  {
    "question": {
      "ru": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0443\u0442\u044c `my_path` \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439"
    },
    "mr": {
      "python": "sys.path.append(my_path)\n"
    },
    "question_id": 42621
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u043b\u043e\u0432\u043e `word` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "re.search(r\"\\b{}\\b\".format(word), s)"
    },
    "question_id": 615741
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u043b\u043e\u0432\u043e `word` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "word in s.split()"
    },
    "question_id": 615741
  },
  {
    "question": {
      "ru": "\u0422\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 `matrix` \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 `new_matrix`"
    },
    "mr": {
      "python": "new_matrix = matrix.transpose()"
    },
    "question_id": 500957
  },
  {
    "question": {
      "ru": "\u0422\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 `matrix` \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 `new_matrix`"
    },
    "mr": {
      "python": "new_matrix = matrix.T"
    },
    "question_id": 500957
  },
  {
    "question": {
      "ru": "\u0422\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 `matrix` \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 `new_matrix`"
    },
    "mr": {
      "python": "new_matrix = []\\n\nfor i in range(len(matrix[0])):\\n\n\\tnew_matrix.append(list())\\n\n\\tfor j in range(len(matrix)):\\n\n\\t\\tnew_matrix[i].append(matrix[j][i])\\n"
    },
    "question_id": 500957
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 `my_list` \u0438\u0437 `rows` \u0441\u0442\u0440\u043e\u043a \u0438 `cols` \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b"
    },
    "mr": {
      "python": "my_list = [[input() for _ in range(cols)] for i in range(rows)]"
    },
    "question_id": 116074
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 `my_list` \u0438\u0437 `rows` \u0441\u0442\u0440\u043e\u043a \u0438 `cols` \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b"
    },
    "mr": {
      "python": "my_list = [[input().strip().split() for _ in range(cols)] for i in range(rows)]"
    },
    "question_id": 116074
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 `my_list` \u0438\u0437 `rows` \u0441\u0442\u0440\u043e\u043a \u0438 `cols` \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b"
    },
    "mr": {
      "python": "my_list = []\\n\nfor r in range(rows):\\n\n]tcur_row = []\\n\n\\tfor c  in range(cols):\\n\n\\t\\tval = input()\\n\n\\t\\tcur_row.append(val)\\n\n\\tmy_list.append(cur_row)\\n"
    },
    "question_id": 116074
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 `df` \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e `cond`"
    },
    "mr": {
      "python": "df = df.loc[cond]"
    },
    "question_id": 786730
  },
  {
    "question": {
      "ru": "\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u044c `my_dict` \u043f\u043e \u043a\u043b\u044e\u0447\u0430\u043c \u043f\u043e \u0432\u043e\u0437\u0440\u043e\u0441\u0442\u0430\u043d\u0438\u044e"
    },
    "mr": {
      "python": "OrderedDict(sorted(my_dict.items(), key=lambda t: t[0]))"
    },
    "question_id": 528474
  },
  {
    "question": {
      "ru": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443 utf-8 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430"
    },
    "mr": {
      "python": "## -*- coding: utf-8 -*-"
    },
    "question_id": 229015
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b `file_path` \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0441 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 utf-8 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e f"
    },
    "mr": {
      "python": "with open(file_path, mode='a', encoding='utf-8') as f:\\n\n\\tpass"
    },
    "question_id": 517085
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b `file_path` \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0441 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 utf-8 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e f"
    },
    "mr": {
      "python": "f = open(file_path,'a', encoding='utf-8')"
    },
    "question_id": 517085
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c POST-\u0437\u0430\u043f\u0440\u043e\u0441 c JSON \u0434\u0430\u043d\u043d\u044b\u043c\u0438 `data` \u043d\u0430 `url`"
    },
    "mr": {
      "python": "res = requests.post(url, json=data) \\n\nprint(res.text)\n"
    },
    "question_id": 690089
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a `count_lines` \u0432 \u0444\u0430\u0439\u043b\u0435 `file_path`"
    },
    "mr": {
      "python": "count_lines = sum(1 for line in open(file_path, 'r'))"
    },
    "question_id": 550742
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "with open(file_path) as file:\\n\n\\tmy_list = [row.strip() for row in file]"
    },
    "question_id": 928295
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "with open(file_path, 'r') as f:\\n\n\\tmy_list = f.read().splitlines()\\n"
    },
    "question_id": 928295
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `file_path` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a `my_list`"
    },
    "mr": {
      "python": "with io.open((file_path, encoding='utf-8') as f:\\n\n\\tmy_list = f.read().splitlines()\\n"
    },
    "question_id": 928295
  },
  {
    "question": {
      "ru": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443 utf-8 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430"
    },
    "mr": {
      "python": "## -*- coding: utf-8 -*-"
    },
    "question_id": 255207
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 `sub_s`  \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "s.replace(sub_s, \"\")\n"
    },
    "question_id": 777723
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 `mess` \u0432 \u0441\u043e\u043a\u0435\u0442 `sock`"
    },
    "mr": {
      "python": "sock.send(mess.encode())"
    },
    "question_id": 466658
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 `my_list`"
    },
    "mr": {
      "python": "my_list = [value for value in my_list if value]\n"
    },
    "question_id": 422461
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 `my_list`"
    },
    "mr": {
      "python": "my_list = [value for value in my_list if value != [None]]\n"
    },
    "question_id": 422461
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 `my_list` \u0432 `list_value_counts`"
    },
    "mr": {
      "python": "Counter(my_list)"
    },
    "question_id": 533108
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 `my_list` \u0432 `list_value_counts`"
    },
    "mr": {
      "python": "{i: array.count(i) for i in my_list}"
    },
    "question_id": 533108
  },
  {
    "question": {
      "ru": "\u0417\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 `new_s` \u0448\u0438\u0444\u0440\u043e\u043c \u0426\u0435\u0437\u0430\u0440\u044f \u0441\u043e \u0441\u0434\u0432\u0438\u0433\u043e\u043c `shift`"
    },
    "mr": {
      "python": "alpha = ' abcdefghijklmnopqrstuvwxyz'\\n\nnew_s = ''\\n\nfor c in s:\\n\n\\tnew_s += alpha[(alpha.index(c) + shift) % len(alpha)]\n"
    },
    "question_id": 594690
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 `s` \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c"
    },
    "mr": {
      "python": "s == s[::-1]"
    },
    "question_id": 424441
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 `s` \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c"
    },
    "mr": {
      "python": "s == reversed(s)"
    },
    "question_id": 424441
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e `d` \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `my_f`\u0432 \u0442\u043e\u0447\u043a\u0435 `x`"
    },
    "mr": {
      "python": "derivative(my_f, x)"
    },
    "question_id": 630116
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c `n` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s` \u043d\u0430 `new_char`"
    },
    "mr": {
      "python": "s = s[:n] + new_char + s[n+1:]"
    },
    "question_id": 577060
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 `img_path` \u0432 \u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0438\u043a\u0435"
    },
    "mr": {
      "python": "os.system(img_path)\n"
    },
    "question_id": 406558
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 `img_path` \u0432 \u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0438\u043a\u0435"
    },
    "mr": {
      "python": "os.startfile(img_path)\n"
    },
    "question_id": 406558
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 `chars`"
    },
    "mr": {
      "python": "list(s)"
    },
    "question_id": 458373
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 `chars`"
    },
    "mr": {
      "python": "[c for c in s]"
    },
    "question_id": 458373
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c `i` \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "s = s[:i] + s[i+1:]"
    },
    "question_id": 879670
  },
  {
    "question": {
      "ru": "\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 `dicts` \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `common_dict`"
    },
    "mr": {
      "python": "common_dict = {}\\n\nfor cur_dict in dicts:\\n\n\\tfor key in cur_dict:\\n\n\\t\\tif key not in common_dict:\\n\n\\t\\t\\tcommon_dict[key] = cur_dict[key]\\n\n\\t\\t\\tcontinue\\n\n\n\\t\\tif not isinstance(common_dict[key], list):\\n\n\\t\\\\ttcommon_dict[key] = [common_dict[key]] + [cur_dict[key]]\\n\n\\t\\t\\tcontinue\\n\n\n\\t\\tcommon_dict[key] += [cur_dict[key]]\\n"
    },
    "question_id": 119418
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c dll \u0444\u0430\u0439\u043b `filepath` \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e `lib`"
    },
    "mr": {
      "python": "lib = CDLL('some.dll')"
    },
    "question_id": 60790
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c cookie `cookies` \u0441 \u0441\u0430\u0439\u0442\u0430 `url`"
    },
    "mr": {
      "python": "session = requests.Session()\nresponse = session.get('http://google.com')\ncookies = session.cookies.get_dict()"
    },
    "question_id": 299217
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `f`"
    },
    "mr": {
      "python": " inspect.getargspec(f)"
    },
    "question_id": 65166
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b `cmd` \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 `result`"
    },
    "mr": {
      "python": "result = os.popen(cmd, 'r', 1)"
    },
    "question_id": 206151
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0440\u0442\u0435\u0436 `my_tuple` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a"
    },
    "mr": {
      "python": "list(my_tuple)"
    },
    "question_id": 118927
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u043f\u0438\u043d\u0433\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442 `host`"
    },
    "mr": {
      "python": "param = '-n' if platform.system().lower()=='windows' else '-c'\\n\ncommand = ['ping', param, '1', host]\\n\nprint(subprocess.call(command) == 0)\\n"
    },
    "question_id": 50821
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441 `i` \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 tkinter \u043b\u0438\u0441\u0442\u0431\u043e\u043a\u0441\u0430 `l` "
    },
    "mr": {
      "python": "def Get(event):\\n\n\\ti = event.widget.curselection()\\n\n\nl.bind(\"<<ListboxSelect>>\", Get)\\n"
    },
    "question_id": 78160
  },
  {
    "question": {
      "ru": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443 `my_encode` \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f `username`"
    },
    "mr": {
      "python": "os.environ('username').decode(my_encode)"
    },
    "question_id": 175425
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u0443 \u0432 Django `MyForm` \u0434\u0430\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f `user`"
    },
    "mr": {
      "python": "MyForm(instance=user)\n"
    },
    "question_id": 70512
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 `my_var` \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `my_func`"
    },
    "mr": {
      "python": "my_var = my_func()"
    },
    "question_id": 141157
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `my_string` \u043d\u0430 \u0441\u0438\u043c\u0432\u043e\u043b `my_symbol`"
    },
    "mr": {
      "python": "re.sub(' +', my_symbol, my_string_string)"
    },
    "question_id": 209059
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 `old_words` \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 `new_words` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "words=dict(zip(old_data, new_data))\\n\nfor word in words:\\n\n\\ts = re.sub(r\"\\b{}\\b\".format(word), words[word], s)\\n"
    },
    "question_id": 256777
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0443\u0437\u0435\u043b \u0440\u0430\u0432\u043d\u044b\u0439 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e `val` \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u043c \u0434\u0435\u0440\u0435\u0432\u0435 `tree`"
    },
    "mr": {
      "python": "def search(root,key):\\n\n     \n\\tif root is None or root.val == key:\\n\n\\t\\treturn root\n \n\\tif root.val < key:\\n\n\\t\\treturn search(root.right,key)\\n\n   \n\\treturn search(root.left,key)\n\nsearch(root,val)"
    },
    "question_id": 112581
  },
  {
    "question": {
      "ru": "\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b `a` \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e"
    },
    "mr": {
      "python": "l = len(a)\\n\nfor k in range(l-1): \\n\n\\tfor i in range(l-1):\\n\n\\t\\tif a[i][i] < a[i+1][i+1]:\\n\n\\t\\t\\ta[i][i],a[i+1][i+1] = a[i+1][i+1],a[i][i]\\n"
    },
    "question_id": 186169
  },
  {
    "question": {
      "ru": "\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b `a` \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e"
    },
    "mr": {
      "python": "l = len(a)\\n\nitems = [a[i][i] for i in range(l)]\\n\nitems.sort(reverse=True)\\n\nfor i in range(l):\\n\n\\ta[i][i] = items[i]\\n"
    },
    "question_id": 186169
  },
  {
    "question": {
      "ru": "\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 `cmd`"
    },
    "mr": {
      "python": "os.popen(cmd, 'r', 1)"
    },
    "question_id": 189166
  },
  {
    "question": {
      "ru": "\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 `cmd`"
    },
    "mr": {
      "python": "PIPE = subprocess.PIPE\nsubprocess.Popen(cmd, shell = True)"
    },
    "question_id": 189166
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c `n` \u0444\u0440\u0430\u043a\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u043e\u0439  `l` "
    },
    "mr": {
      "python": "from turtle import *\\n\nspeed(\"fastest\")\\n\n\ndef sierpinski(l,n):\\n\n\\tif n==0:\\n\n\\t\\tfor i in range(0,3):\\n\n\\t\\t\\tfd(l)\\n\n\\t\\t\\tleft(120)\\n\n\\telse:\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tfd(l/2)\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tbk(l/2)\\n\n\\t\\tleft(60)\\n\n\\t\\tfd(l/2)\\n\n\\t\\tright(60)\\n\n\\t\\tsierpinski(l/2,n-1)\\n\n\\t\\tleft(60)\\n\n\\t\\tbk(l/2)\\n\n\\t\\tright(60)\\n\n\nsierpinski(l, n)\\n"
    },
    "question_id": 168100
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043a\u0440\u044b\u0442\u044c \u043c\u043e\u0434\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u043d\u043e `win` \u043f\u043e \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 `btn` \u0432 Tkinter"
    },
    "mr": {
      "python": "btn.bind(\"<Button-1>\", lambda event: win.destroy())"
    },
    "question_id": 291044
  },
  {
    "question": {
      "ru": "\u0421\u043a\u0440\u044b\u0442\u044c \u043e\u043a\u043d\u043e Tkinter `win`"
    },
    "mr": {
      "python": "win.withdraw()"
    },
    "question_id": 215979
  },
  {
    "question": {
      "ru": "\u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b `table1` \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 `table2` \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043a\u0443\u0440\u0441\u043e\u0440\u043e\u043c `cursor`"
    },
    "mr": {
      "python": "cursor.execute('insert into {table1} select * from {table2}')"
    },
    "question_id": 160158
  },
  {
    "question": {
      "ru": "\u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "s.encode('unicode_escape')"
    },
    "question_id": 298270
  },
  {
    "question": {
      "ru": "\u0423\u0431\u0440\u0430\u0442\u044c \u043e\u043a\u043d\u043e PyQt  `win` \u0432 \u0442\u0440\u0435\u0439 \u043f\u043e \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043d\u0430 \u043a\u0440\u0435\u0441\u0442\u0438\u043a"
    },
    "mr": {
      "python": "\\tdef closeEvent(self, event):\\n\n\\t\\tif self.check_box.isChecked():\\n\n\\t\\t\\tevent.ignore()\\n\n\\t\\t\\tself.hide()\\n\n\\t\\t\\tself.tray_icon.showMessage(\n                \"Tray Program\",\n                \"Application was minimized to Tray\",\n                QSystemTrayIcon.Information,\n                2000\n            )\\n\n"
    },
    "question_id": 189042
  },
  {
    "question": {
      "ru": "\u041d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0432 Tkinter \u0432 \u043e\u043a\u043d\u0435 `root`"
    },
    "mr": {
      "python": "t = Text(root)\nt.pack()\nt.insert(END, s)"
    },
    "question_id": 108618
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u0430 `my_list` \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `f`"
    },
    "mr": {
      "python": "list(filter(f, my_list))"
    },
    "question_id": 72284
  },
  {
    "question": {
      "ru": "\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 `dicts` \u043f\u043e \u043a\u043b\u044e\u0447\u0443 `key`"
    },
    "mr": {
      "python": "dicts.sort(key=lambda x: x[key])"
    },
    "question_id": 83341
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c dbf \u0444\u0430\u0439\u043b `filepath`"
    },
    "mr": {
      "python": "data = open(filepath, 'rb').read(24)\nprint(struct.unpack('<I', data[4:8]))"
    },
    "question_id": 280734
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a `lines` \u0444\u0430\u0439\u043b\u0430 `filepath` "
    },
    "mr": {
      "python": "with open(filepath) as f:\\n\n\\tlines = f.readlines()[1::2]"
    },
    "question_id": 30683
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a `lines` \u0444\u0430\u0439\u043b\u0430 `filepath` "
    },
    "mr": {
      "python": "with open(filepath) as file:\\n\n\\tlines = [i.rstrip() for i in itertools.islice(file, 0, None, 2)]"
    },
    "question_id": 30683
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0438\u0440\u0438\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0434\u043b\u044f http \u0437\u0430\u043f\u0440\u043e\u0441\u0430 "
    },
    "mr": {
      "python": "urllib.parse.quote(s)"
    },
    "question_id": 241337
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0438\u0440\u0438\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0434\u043b\u044f http \u0437\u0430\u043f\u0440\u043e\u0441\u0430 "
    },
    "mr": {
      "python": "urllib.parse.quote_plus(s)"
    },
    "question_id": 241337
  },
  {
    "question": {
      "ru": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 `pub` \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 `priv` \u0434\u043b\u044f RSA \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f"
    },
    "mr": {
      "python": "(pub, priv) = rsa.newkeys(512)"
    },
    "question_id": 64496
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0438 \u043f\u0440\u043e\u043a\u0441\u0438 `proxy`"
    },
    "mr": {
      "python": "proxyDict = {\\n\n\\t'http': proxy # \"212.254.22.52:80\"\\n\n}\\n\n\nr = requests.get('http://icanhazip.com/', proxies=proxyDict)\\n\n\nif r.status_code == 200:\\n\n\\tif r.text != \"restricted to vpn\":\\n\n\\t\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n\n\\telse:\\n\n\\t\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n\nelse:\\n\n\\tprint(\"\u041f\u0440\u043e\u043a\u0441\u0438 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\")\\n"
    },
    "question_id": 124756
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0430\u0432\u043d\u043e \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u044f `my_dict` \u0441 \u043a\u043b\u044e\u0447\u043e\u043c `key` \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 `my_var`"
    },
    "mr": {
      "python": "my_dict[key]  ==  my_var"
    },
    "question_id": 121512
  },
  {
    "question": {
      "ru": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 `wallpaper_path` \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0431\u043e\u0435\u0432 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0441\u0442\u043e\u043b\u0430"
    },
    "mr": {
      "python": "wallpaper = bytes(wallpaper_path, 'utf-8')\\n\nctypes.windll.user32.SystemParametersInfoA(20, 0, wallpaper, 3)\\n"
    },
    "question_id": 119187
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0438\u0441\u044c\u043c\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 gmail \u0441 \u043b\u043e\u0433\u0438\u043d\u043e\u043c `username` \u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u043c `password`"
    },
    "mr": {
      "python": "\npop3server = poplib.POP3_SSL('pop.gmail.com')  # open connection\\n\nprint(pop3server.getwelcome())  # show welcome message\\n\npop3server.user(username)\\n\npop3server.pass_(password)\\n\npop3info = pop3server.stat()  # access mailbox status\\n\nmailcount = pop3info[0]  # toral email\\n\nmessages = []\\n\nfor i in range(mailcount):\\n\n\\tfor message in pop3server.retr(i + 1)[1]:\\n\n\\t\\tmessages.append(message)\\n\npop3server.quit()\\n"
    },
    "question_id": 13119
  },
  {
    "question": {
      "ru": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u0430\u0439\u043b `file_path` \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 `url`"
    },
    "mr": {
      "python": "files = {\\n\n    'file': open(file_path, 'rb')\n}\n\nr = requests.post(url, files=files)"
    },
    "question_id": 78491
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u043f\u043e\u0440\u0442\u0443 `com`  \u0441\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e `speed`"
    },
    "mr": {
      "python": "my_com_port = serial.Serial(com, speed, dsrdtr = 1, timeout = 0)"
    },
    "question_id": 196630
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u043a\u0443\u0440\u0441\u043e\u0440 \u043c\u044b\u0448\u0438 \u0432 \u0442\u043e\u0447\u043a\u0443 \u0441 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438 `coord`"
    },
    "mr": {
      "python": "win32api.SetCursorPos(coord)"
    },
    "question_id": 71961
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0447\u0438\u0441\u043b\u043e `n` \u0441\u0442\u0435\u043f\u0435\u043d\u044c\u044e 2"
    },
    "mr": {
      "python": "(n & (n-1) == 0) and n != 0"
    },
    "question_id": 316065
  },
  {
    "question": {
      "ru": "\u0412\u0432\u0435\u0441\u0442\u0438 \u043f\u0430\u0440\u043e\u043b\u044c `pass` \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b"
    },
    "mr": {
      "python": "pass = getpass.getpass(prompt='Password: ', stream=None)"
    },
    "question_id": 280539
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441 `i` \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 tkinter \u043b\u0438\u0441\u0442\u0431\u043e\u043a\u0441\u0430 `l` "
    },
    "mr": {
      "python": "def Get(event):\\n\n\\ti = event.widget.curselection()\\n\n\nl.bind(\"<<ListboxSelect>>\", Get)\\n"
    },
    "question_id": 73158
  },
  {
    "question": {
      "ru": "\u0421\u043f\u0430\u0440\u0441\u0438\u0442\u044c HTML-\u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b `code` \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 `url`"
    },
    "mr": {
      "python": "with urllib.request.urlopen(url) as res:\n    code = res.read()"
    },
    "question_id": 205664
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a `strings` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `strings_dict` \u043f\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044e `sep`"
    },
    "mr": {
      "python": "strings_dict = dict([x[0].strip().split(sep) for x in strings])"
    },
    "question_id": 300767
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c ini-\u0444\u0430\u0439\u043b `filepath` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `res`"
    },
    "mr": {
      "python": "with open(filepath, 'r') as f:\\n\n\\tlines = [i for i in f.readlines() if not i.startswith('[')]\\n\n\\tp = re.compile('(?P<key>\\S*(?==))\\S*(?P<znah>(?<==)\\S*)')\\n\n\\tres = {}\\n\n\\tfor line in lines:\\n\n\\t\\tparsed = re.findall(p, line)[0]\\n\n\\t\\tres[parsed[0]] = parsed[1]\\n"
    },
    "question_id": 127208
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b `nums` \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `filepath`"
    },
    "mr": {
      "python": "with open(filepath) as f:\\n\n\\tnums = list(map(int, f.read().split()))\\n"
    },
    "question_id": 316488
  },
  {
    "question": {
      "ru": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c POST-\u0437\u0430\u043f\u0440\u043e\u0441 `res` c JSON \u0434\u0430\u043d\u043d\u044b\u043c\u0438 `data` \u043d\u0430 `url`"
    },
    "mr": {
      "python": "res = requests.post(url, json=data)"
    },
    "question_id": 77855
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 `arrs` \u043d\u0430 \u044d\u043a\u0440\u0430\u043d"
    },
    "mr": {
      "python": "for a in arrs:\\n\n\\tprint(a)\\n"
    },
    "question_id": 25811
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 `arrs` \u043d\u0430 \u044d\u043a\u0440\u0430\u043d"
    },
    "mr": {
      "python": "for a in arrs:\\n\n\\tfor i in a:\\n\n\\t\\tprint(i, end=\" \")\\n\n\\tprint()\\n"
    },
    "question_id": 25811
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u0430 `num` \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 `num_start` \u0434\u043e \u0447\u0438\u0441\u043b\u0430 `num_end`"
    },
    "mr": {
      "python": "num = random.randint(num_start, num_end)"
    },
    "question_id": 54032
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0436\u0430\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0448\u0443 `key`"
    },
    "mr": {
      "python": "win32api.keybd_event(ord(key), 0, 0,0)"
    },
    "question_id": 124837
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0436\u0430\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0448\u0443 `key`"
    },
    "mr": {
      "python": "pyautogui.press('s')"
    },
    "question_id": 124837
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a `l` \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b `indices`"
    },
    "mr": {
      "python": "x = list(enumerate(l))\\n\nrandom.shuffle(x)\\n\nindices, l = zip(*x)\\n"
    },
    "question_id": 71878
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 `a` \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044e `my_dict`"
    },
    "mr": {
      "python": "for out_i, item in enumerate(a):\\n\n\\tfor inner_i, sub_item in enumerate(item):\\n\n\\t\\tif sub_item in my_dict:\\n\n\\t\\t\\ta[out_i][inner_i] = my_dict[sub_item]\\n"
    },
    "question_id": 87835
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 `email` \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u043e\u0439"
    },
    "mr": {
      "python": "pattern = r\"^[-\\w\\.]+@([-\\w]+\\.)+[-\\w]{2,4}$\"\n\nif re.match(pattern, email) is not None:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\")\nelse:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u0430 \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\""
    },
    "question_id": 306126
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 `email` \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u043e\u0439"
    },
    "mr": {
      "python": "pattern = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\n\nif re.match(pattern, email) is not None:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\")\nelse:\n    print(\"\u041f\u0440\u043e\u0432\u0435\u0440\u0430 \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430\""
    },
    "question_id": 306126
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0448\u0440\u0438\u0444\u0442\u043e\u0432 `fonts` \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435"
    },
    "mr": {
      "python": "root = Tkinter.Tk()\nfonts = list(tkFont.families())"
    },
    "question_id": 82882
  },
  {
    "question": {
      "ru": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b `nums` \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 `n1` \u0434\u043e `n2` \u0441 \u0442\u0430\u043a\u0438\u043c \u0436\u0435 \u0448\u0430\u0433\u043e\u043c \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0447\u0438\u0441\u043b\u0435 `base_nums`"
    },
    "mr": {
      "python": "nums = np.arange(n1, n2, base_nums[1] - base_nums[0])"
    },
    "question_id": 93534
  },
  {
    "question": {
      "ru": "\u0421\u0433\u0435\u043d\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c `n` \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b `nums`, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0432\u043d\u0430 `total`"
    },
    "mr": {
      "python": "my_total = -1\\n\nwhile my_total != total:\\n\n\\tnums = [random.randint(0,total) for _ in range(n)]\\n\n\\tmy_total = sum(nums)\\n"
    },
    "question_id": 197093
  },
  {
    "question": {
      "ru": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 `my_obj` \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `class_name`"
    },
    "mr": {
      "python": "my_obj = globals()[class_name]"
    },
    "question_id": 295537
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0440\u0442\u0435\u0436 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u043f\u0430\u0440 \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 `tupels` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `my_dict`"
    },
    "mr": {
      "python": "my_dict = dict(tupels)"
    },
    "question_id": 240287
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0446\u0432\u0435\u0442 `color_in_hex` \u044f\u0447\u0435\u0439\u043a\u0438 `cell_index` xlsx-\u0444\u0430\u0439\u043b\u0430 `bookpath` \u0442\u0430\u0431\u043b\u0438\u0446\u044b `sheet`"
    },
    "mr": {
      "python": "\nwb = openpyxl.load_workbook(bookpath, data_only = True)\\n\nsh = wb[sheet]\\n\ncolor_in_hex = sh[cell_index].fill.start_color.index\\n "
    },
    "question_id": 3726
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u0432 docx \u0444\u0430\u0439\u043b `file_path` \u0436\u0438\u0440\u043d\u044b\u043c"
    },
    "mr": {
      "python": "doc = docx.Document()\\n\np = doc.add_paragraph()\\n\n\nrunner = p.add_run(s)\\n\nrunner.bold = True\\n\n\ndoc.save(filepath)"
    },
    "question_id": 172669
  },
  {
    "question": {
      "ru": "\u041f\u043e \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 tkinter `btn` \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442 `s` \u0432 \u043f\u043e\u043b\u0435 `lbl`"
    },
    "mr": {
      "python": "def say(self):\\n\n\\tself.lbl[\"text\"] = s\\n\n\nself.btn[\"command\"] = self.say"
    },
    "question_id": 53872
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0443 `url` \u0438\u0437 BBCode \u0441\u0442\u0440\u043e\u043a\u0438 `s`"
    },
    "mr": {
      "python": "url = re.findall(r\"\\[url=(.*)\\]\", s)[0]"
    },
    "question_id": 26594
  },
  {
    "question": {
      "ru": "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 `s` \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0440\u0435\u0433\u0443\u043b\u0440\u043d\u044b\u043c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c `pattern` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `text`"
    },
    "mr": {
      "python": "`re.sub(pattern, r\"\\1{}\".format(s), text) "
    },
    "question_id": 262974
  },
  {
    "question": {
      "ru": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u0430\u0439\u043b `file` \u043f\u043e ftp \u0441 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u0431\u0430\u0440\u043e\u043c"
    },
    "mr": {
      "python": "def progress():\\n\n\\tdef callback(block):\\n\n\\t\\tcallback.uploaded += len(block)\\n\n\\t\\tprint('Uploaded %d bytes' % callback.uploaded)\\n\n\\tcallback.uploaded = 0\\n\n\\treturn callback\\n\n\nftp.storbinary(\"STOR \" + file, open(file, \"rb\"), 1024, progress())"
    },
    "question_id": 83802
  },
  {
    "question": {
      "ru": "\u0421\u043f\u0430\u0440\u0441\u0438\u0442\u044c HTML-\u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b `code` \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 `url`"
    },
    "mr": {
      "python": "with urllib.request.urlopen(url) as res:\n    code = res.read()"
    },
    "question_id": 178993
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e `num` \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044e \u0434\u043e `f` \u0437\u043d\u0430\u043a\u043e\u0432"
    },
    "mr": {
      "python": "print(\"{:.{}f}\".format(num, f)\")"
    },
    "question_id": 50259
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c xml \u0444\u0430\u0439\u043b `filepath` \u0432 \u043e\u0431\u044a\u0435\u043a\u0442 `tree`"
    },
    "mr": {
      "python": "tree = lxml.etree.parse(filepath)"
    },
    "question_id": 121752
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u043e\u0432 `a1`\u0438 `a2` \u043f\u043e\u043f\u0430\u0440\u043d\u043e"
    },
    "mr": {
      "python": "for a in zip(a1, a2):\\n\n\\tprint(*a)\\n"
    },
    "question_id": 27963
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0432\u0438\u0434\u0436\u0435\u0442 Tkinter `frame` \u0441\u043b\u0435\u0432\u0430 \u0441\u0432\u0435\u0440\u0445\u0443"
    },
    "mr": {
      "python": "frame.grid(column=0, row=0, sticky=(N, W))"
    },
    "question_id": 54149
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u0441\u0430\u043c\u043e\u0435 \u0431\u043b\u0438\u0437\u043a\u043e\u0435 \u0447\u0438\u0441\u043b\u043e `n` \u043a \u0447\u0438\u0441\u043b\u0443 `target_num` \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 `nums`"
    },
    "mr": {
      "python": "delta_nums = [abs(target_num - i) for i in nums]\nnum = nums[delta_nums.index(min(delta_nums))]"
    },
    "question_id": 61709
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b `sheet` sql \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043a\u0443\u0440\u0441\u043e\u0440\u043e\u043c `cursor`"
    },
    "mr": {
      "python": "cursor.columns(table=sheet)\n"
    },
    "question_id": 160598
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u044c \u043f\u0440\u0430\u0432\u0430 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 `filepath`"
    },
    "mr": {
      "python": "if os.access(filepath, os.R_OK):\\n\n\\tprint(\"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\")\\n\nelse:\\n\n\\tprint(\"\u041d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\")\\n"
    },
    "question_id": 111347
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c html \u0441\u0442\u0440\u043e\u043a\u0443 `html` \u0432 \u0434\u0435\u0440\u0435\u0432\u043e `root`"
    },
    "mr": {
      "python": "root = etree.HTML(html)"
    },
    "question_id": 37423
  },
  {
    "question": {
      "ru": "\u0421\u043a\u0430\u0447\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u0441 \u0441\u0430\u0439\u0442\u0430 `url` \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0431\u0430\u0440"
    },
    "mr": {
      "python": "with urllib.request.urlopen(utl) as Response:\\n\n\\tLength = Response.getheader('content-length')\\n\n\\tBlockSize = 1000000  # default value\\n\n\n\\tif Length:\\t\n\\t\\tLength = int(Length)\\n\n\\t\\tBlockSize = max(4096, Length // 20)\\n\n\n\\tprint(\"UrlLib len, blocksize: \", Length, BlockSize)\\n\n\n\\tBufferAll = io.BytesIO()\\n\n\\tSize = 0\\n\n        while True:\n            BufferNow = Response.read(BlockSize)\n            if not BufferNow:\n                break\n            BufferAll.write(BufferNow)\n            Size += len(BufferNow)\n            if Length:\n                Percent = int((Size / Length)*100)\n                print('download: {Percent}% {Url}')\n\n        print(\"Buffer All len:\", len(BufferAll.getvalue()))"
    },
    "question_id": 93346
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u0438 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 `dicts`"
    },
    "mr": {
      "python": "dicts = [json.dumps(i) for i in dicts]\\n\ndicts = [json.loads(i) for i in set(dicts)]\\n"
    },
    "question_id": 319702
  },
  {
    "question": {
      "ru": "\u0423\u0431\u0440\u0430\u0442\u044c \u043e\u043a\u043d\u043e PyQt  `win` \u0432 \u0442\u0440\u0435\u0439 \u043f\u043e \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043d\u0430 \u043a\u0440\u0435\u0441\u0442\u0438\u043a"
    },
    "mr": {
      "python": "\\tdef closeEvent(self, event):\\n\n\\t\\tif self.check_box.isChecked():\\n\n\\t\\t\\tevent.ignore()\\n\n\\t\\t\\tself.hide()\\n\n\\t\\t\\tself.tray_icon.showMessage(\n                \"Tray Program\",\n                \"Application was minimized to Tray\",\n                QSystemTrayIcon.Information,\n                2000\n            )\\n\n"
    },
    "question_id": 78494
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b `coords` \u043e\u043a\u043d\u0430 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c `title`"
    },
    "mr": {
      "python": "hwnd = win32gui.FindWindow(None, title)\\n\n\\tcoord = win32gui.GetWindowRect(hwnd)[0:2]\\n\n\\tprint(coord)\\n"
    },
    "question_id": 167202
  },
  {
    "question": {
      "ru": "\u0420\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b get \u0437\u0430\u043f\u0440\u043e\u0441\u0430 url `url` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c `query`"
    },
    "mr": {
      "python": "parsed_url = urlparse(url)\\n\nquery = parsed_url(parsed_url.query)\\n"
    },
    "question_id": 151936
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b `filepath` \u0432 \u0444\u0430\u0439\u043b `newfilepath`"
    },
    "mr": {
      "python": "os.replace(filepath, newfilepath)"
    },
    "question_id": 306957
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 `nums`  \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 `a`"
    },
    "mr": {
      "python": "r = range(min(a), max(a) + 1)\\\nnums = sorted(list(set(r) - set(a)))\\n"
    },
    "question_id": 249773
  },
  {
    "question": {
      "ru": "\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b django \u0431\u0435\u0437 \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432"
    },
    "mr": {
      "python": "objects.filter(children__isnull=True)"
    },
    "question_id": 2653
  },
  {
    "question": {
      "ru": "\u0421\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c c++ \u0444\u0430\u0439\u043b `filepath`"
    },
    "mr": {
      "python": "subprocess.check_output(['g++', filepath])"
    },
    "question_id": 122711
  },
  {
    "question": {
      "ru": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 `s` \u0441\u043b\u043e\u0432\u0430 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 `base_s`"
    },
    "mr": {
      "python": "list_s = s.split()\\n\nlist_base = base_s.split()\\n\nif set(list_s) & set(list_base):\\n\n\\tprint(\"\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442\")\\n\nelse:\\n\n\\tprint(\"\u041d\u0435 \u0441\u043e\u0434\u0435\u0440\u0434\u0436\u0438\u0442\"\\n"
    },
    "question_id": 249444
  },
  {
    "question": {
      "ru": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `f` \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 \u043a\u043b\u0430\u0432\u0438\u0448 CTRL+C"
    },
    "mr": {
      "python": "try:\\n\n\\tf()\\n\nexcept KeyboardInterrupt:\\n\n\\tprint(\"Catched KeyboardInterrupt exception\")\\n"
    },
    "question_id": 30398
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c \u0432\u043e\u043b\u043d\u0443 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 PyQt4"
    },
    "mr": {
      "python": "def paintEvent(self, event):\\n\n\\tpainter = QPainter(self)\\n\n\\tpts = self.pts\\n\n\\tpainter.setPen(QPen(QColor(Qt.darkGreen), 3))\\n\n\\tpainter.drawPolyline(self.poly(pts))\\n\n\\tpainter.setBrush(QBrush(QColor(255, 0, 0)))\\n\n\\tpainter.setPen(QPen(QColor(Qt.black), 1))\\n\n\\tfor x, y in pts:\\n\n\\t\\tpainter.drawEllipse(QRectF(x - 4, y - 4, 8, 8))\\n"
    },
    "question_id": 89883
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043d\u0430\u0436\u0430\u0442\u0438\u044f \u043c\u044b\u0448\u0438 `coords`"
    },
    "mr": {
      "python": "def on_click(x, y, button, pressed):\\n\n\\tcoords = (x, y)\\n\n\nwith pynput.mouse.Listener(on_click=on_click) as listener:\\n\n\\tlistener.join()\\n"
    },
    "question_id": 9273
  },
  {
    "question": {
      "ru": "\u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0441\u0430\u0439\u0442\u0430 `url` \u043a\u0430\u043a \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 `filepath` \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c selenium driver `driver`"
    },
    "mr": {
      "python": "driver.get(url)\nscreenshot = driver.save_screenshot(filepath)"
    },
    "question_id": 234414
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435 `filepath` \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c line_counts"
    },
    "mr": {
      "python": "with open(filepath) as f:\\n\n\\tlines = f.readlines()\\n\n\\tline_values = collections.Counter(lines)\\n"
    },
    "question_id": 210480
  },
  {
    "question": {
      "ru": "\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0435\u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u043b \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 `f` \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 `n` \u0434\u043e \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438"
    },
    "mr": {
      "python": "\nx = sympy.symbols('x')\\n\nprint(sympy.integrate(f, (x, n, sympy.oo)))\\n"
    },
    "question_id": 51160
  },
  {
    "question": {
      "ru": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f `dict1` \u043a\u043b\u044e\u0447\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 `dict2`"
    },
    "mr": {
      "python": "for key in dict2:\\n\n\\tif key in dict1:\\n\n\\t\\tdel dict1[key]\\n"
    },
    "question_id": 560
  },
  {
    "question": {
      "ru": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b `filepath` \u0441 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439 utf-8"
    },
    "mr": {
      "python": "with open(filepath,\"r\", encoding=\"utf-8\") as f:\\n\n\\tpass"
    },
    "question_id": 18892
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 c \u0438\u043c\u0435\u043d\u0435\u043c `name` \u043e\u0431\u044a\u0435\u043a\u0442\u0430 `obj`"
    },
    "mr": {
      "python": "getattr(obj, name)()"
    },
    "question_id": 242841
  },
  {
    "question": {
      "ru": "\u0423\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u043f\u0430\u043d\u0435\u043b\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 Django \u043c\u043e\u0434\u0435\u043b\u0438 User \u0438 Group"
    },
    "mr": {
      "python": "from django.contrib.auth.models import User, Group\\n\nadmin.site.unregister(User)\\n\nadmin.site.unregister(Group)\\n"
    },
    "question_id": 21336
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0436\u0430\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0448\u0443 `key`"
    },
    "mr": {
      "python": "win32api.keybd_event(ord(key), 0, 0,0)"
    },
    "question_id": 57046
  },
  {
    "question": {
      "ru": "\u041d\u0430\u0436\u0430\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0448\u0443 `key`"
    },
    "mr": {
      "python": "pyautogui.press('s')"
    },
    "question_id": 57046
  },
  {
    "question": {
      "ru": "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s` \u0441\u043b\u043e\u0432\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 `old_words` \u043d\u0430 \u0441\u043b\u043e\u0432\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 `new_words` "
    },
    "mr": {
      "python": "word_dict = dict(zip(old_data, new_data))\\n\nfor word in word_dict:\\n\n\\ts = re.sub(r\"\\b{}\\b\".format(word), word_dict[word], s)\\n"
    },
    "question_id": 265219
  },
  {
    "question": {
      "ru": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c 64-\u0440\u0438\u0447\u043d\u043e\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f `img_as_s` \u0432 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 `imgpath`"
    },
    "mr": {
      "python": "with open(imgpath, 'wb') as img :\n  img_obj = base64.b64decode(img_as_s,'!-')\n  img.write(img_obj)"
    },
    "question_id": 106280
  },
  {
    "question": {
      "ru": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 `headers` \u0441 \u0441\u0430\u0439\u0442\u0430 `url`"
    },
    "mr": {
      "python": "\nresponse = urllib.request.urlopen(url)\\n\nheaders = response.headers\\n"
    },
    "question_id": 14314
  },
  {
    "question": {
      "ru": "\u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s`"
    },
    "mr": {
      "python": "s.encode('unicode_escape')"
    },
    "question_id": 25915
  },
  {
    "question": {
      "ru": "\u041f\u0435\u0440\u0435\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u043a\u0430 `sign` \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 `s` \u043a\u0430\u043a \u0432 \u0431\u0438\u0442\u043e\u0432\u043e\u043c \u0447\u0438\u0441\u043b\u0435"
    },
    "mr": {
      "python": "p = 1 << (len(s)-1)\nl = []\nfor i in range(1, p):\n\\tdef rf(first, sec):\n\\t\\tc = first[0]\n\\t\\ts1 = sec\n\\t\\tif c & i > 0 :\n\\t\\t\\ts1 = sign+s1\n\\t\\treturn (c >> 1, first[1]+s1)\n\\tl.append(functools.reduce(rf, s[1:], (p >> 1, s[0]))[1])"
    },
    "question_id": 76183
  }
]