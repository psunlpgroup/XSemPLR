[
  {
    "question": {
      "en": "clear session key 'mykey'"
    },
    "mr": {
      "python": "del request.session['mykey']"
    },
    "question_id": 2375335
  },
  {
    "question": {
      "en": "get all the values in column `b` from pandas data frame `df`"
    },
    "mr": {
      "python": "df['b']"
    },
    "question_id": 17193850
  },
  {
    "question": {
      "en": "apply two different aggregating functions `mean` and `sum` to the same column `dummy` in pandas data frame `df`"
    },
    "mr": {
      "python": "df.groupby('dummy').agg({'returns': [np.mean, np.sum]})"
    },
    "question_id": 12589481
  },
  {
    "question": {
      "en": "search for occurrences of regex pattern `pattern` in string `url`"
    },
    "mr": {
      "python": "print(pattern.search(url).group(1))"
    },
    "question_id": 32792602
  },
  {
    "question": {
      "en": "sort list `xs` in ascending order of length of elements"
    },
    "mr": {
      "python": "xs.sort(lambda x, y: cmp(len(x), len(y)))"
    },
    "question_id": 2587402
  },
  {
    "question": {
      "en": "sum each value in a list `l` of tuples"
    },
    "mr": {
      "python": "map(sum, zip(*l))"
    },
    "question_id": 14180866
  },
  {
    "question": {
      "en": "get keys and items of dictionary `d`"
    },
    "mr": {
      "python": "list(d.items())"
    },
    "question_id": 3294889
  },
  {
    "question": {
      "en": "BeautifulSoup find string 'Python Jobs' in HTML body `body`"
    },
    "mr": {
      "python": "soup.body.findAll(text='Python Jobs')"
    },
    "question_id": 8936030
  },
  {
    "question": {
      "en": "Parse a file `sample.xml` using expat parsing in python 3"
    },
    "mr": {
      "python": "parser.ParseFile(open('sample.xml', 'rb'))"
    },
    "question_id": 1179305
  },
  {
    "question": {
      "en": "sort a list of strings 'mylist'."
    },
    "mr": {
      "python": "mylist.sort()"
    },
    "question_id": 36139
  },
  {
    "question": {
      "en": "sort list `X` based on values from another list `Y`"
    },
    "mr": {
      "python": "[x for y, x in sorted(zip(Y, X))]"
    },
    "question_id": 6618515
  },
  {
    "question": {
      "en": "remove a substring \".com\" from the end of string `url`"
    },
    "mr": {
      "python": "url = re.sub('\\\\.com$', '', url)"
    },
    "question_id": 1038824
  },
  {
    "question": {
      "en": "convert a list of strings `lst` to list of integers"
    },
    "mr": {
      "python": "[map(int, sublist) for sublist in lst]"
    },
    "question_id": 34696853
  },
  {
    "question": {
      "en": "Getting today's date in YYYY-MM-DD"
    },
    "mr": {
      "python": "datetime.datetime.today().strftime('%Y-%m-%d')"
    },
    "question_id": 32490629
  },
  {
    "question": {
      "en": "fill list `myList` with 4 0's"
    },
    "mr": {
      "python": "self.myList.extend([0] * (4 - len(self.myList)))"
    },
    "question_id": 7026131
  },
  {
    "question": {
      "en": "iterate backwards from 10 to 0"
    },
    "mr": {
      "python": "range(10, 0, -1)"
    },
    "question_id": 3476732
  },
  {
    "question": {
      "en": "display attribute `attr` for each object `obj` in list `my_list_of_objs`"
    },
    "mr": {
      "python": "print([obj.attr for obj in my_list_of_objs])"
    },
    "question_id": 444058
  },
  {
    "question": {
      "en": "insert spaces before capital letters in string `text`"
    },
    "mr": {
      "python": "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', text)"
    },
    "question_id": 199059
  },
  {
    "question": {
      "en": "match a sharp, followed by letters (including accent characters) in string `str1` using a regex"
    },
    "mr": {
      "python": "hashtags = re.findall('#(\\\\w+)', str1, re.UNICODE)"
    },
    "question_id": 18663644
  },
  {
    "question": {
      "en": "check if a local variable 'myVar' exists"
    },
    "mr": {
      "python": "if ('myVar' in locals()):\n    pass"
    },
    "question_id": 843277
  },
  {
    "question": {
      "en": "sympy solve matrix of linear equations `(([1, 1, 1, 1], [1, 1, 2, 3]))` with variables `(x, y, z)`"
    },
    "mr": {
      "python": "linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))"
    },
    "question_id": 31547657
  },
  {
    "question": {
      "en": "create a list with the sum of respective elements of the tuples of list `l`"
    },
    "mr": {
      "python": "[sum(x) for x in zip(*l)]"
    },
    "question_id": 14180866
  },
  {
    "question": {
      "en": "Pandas: How can I use the apply() function for a single column?"
    },
    "mr": {
      "python": "df['a'] = df['a'].apply(lambda x: x + 1)"
    },
    "question_id": 34962104
  },
  {
    "question": {
      "en": "convert Unicode codepoint to utf8 hex"
    },
    "mr": {
      "python": "chr(int('fd9b', 16)).encode('utf-8')"
    },
    "question_id": 867866
  },
  {
    "question": {
      "en": "find all digits in string '6,7)' and put them to a list"
    },
    "mr": {
      "python": "re.findall('\\\\d|\\\\d,\\\\d\\\\)', '6,7)')"
    },
    "question_id": 31465002
  },
  {
    "question": {
      "en": "iterate over a dictionary `dict` in sorted order"
    },
    "mr": {
      "python": "return sorted(dict.items())"
    },
    "question_id": 364519
  },
  {
    "question": {
      "en": "Reverse key-value pairs in a dictionary `map`"
    },
    "mr": {
      "python": "dict((v, k) for k, v in map.items())"
    },
    "question_id": 8650415
  },
  {
    "question": {
      "en": "How to get the length of words in a sentence?"
    },
    "mr": {
      "python": "[len(x) for x in s.split()]"
    },
    "question_id": 22749706
  },
  {
    "question": {
      "en": "substitute two or more whitespace characters with character '|' in string `line`"
    },
    "mr": {
      "python": "re.sub('\\\\s{2,}', '|', line.strip())"
    },
    "question_id": 36957908
  },
  {
    "question": {
      "en": "Sort a list 'lst' in descending order."
    },
    "mr": {
      "python": "sorted(lst, reverse=True)"
    },
    "question_id": 4644025
  },
  {
    "question": {
      "en": "get geys of dictionary `my_dict` that contain any values from list `lst`"
    },
    "mr": {
      "python": "[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]"
    },
    "question_id": 32792874
  },
  {
    "question": {
      "en": "transforming the string `s` into dictionary"
    },
    "mr": {
      "python": "dict(map(int, x.split(':')) for x in s.split(','))"
    },
    "question_id": 4127344
  },
  {
    "question": {
      "en": "find out the number of non-matched elements at the same index of list `a` and list `b`"
    },
    "mr": {
      "python": "sum(1 for i, j in zip(a, b) if i != j)"
    },
    "question_id": 14914615
  },
  {
    "question": {
      "en": "get the non-masked values of array `m`"
    },
    "mr": {
      "python": "m[~m.mask]"
    },
    "question_id": 3262437
  },
  {
    "question": {
      "en": "remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `"
    },
    "mr": {
      "python": "re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')"
    },
    "question_id": 1249388
  },
  {
    "question": {
      "en": "Truncate `\\r\\n` from each string in a list of string `example`"
    },
    "mr": {
      "python": "example = [x.replace('\\r\\n', '') for x in example]"
    },
    "question_id": 13781828
  },
  {
    "question": {
      "en": "copy list `old_list` as `new_list`"
    },
    "mr": {
      "python": "new_list = old_list[:]"
    },
    "question_id": 2612802
  },
  {
    "question": {
      "en": "insert directory 'libs' at the 0th index of current directory"
    },
    "mr": {
      "python": "sys.path.insert(0, 'libs')"
    },
    "question_id": 14850853
  },
  {
    "question": {
      "en": "add column `d` to index of dataframe `df`"
    },
    "mr": {
      "python": "df.set_index(['d'], append=True)"
    },
    "question_id": 11040626
  },
  {
    "question": {
      "en": "uniqueness for list of lists `testdata`"
    },
    "mr": {
      "python": "[list(i) for i in set(tuple(i) for i in testdata)]"
    },
    "question_id": 3724551
  },
  {
    "question": {
      "en": "update fields in Django model `Book` with arguments in dictionary `d` where primary key is equal to `pk`"
    },
    "mr": {
      "python": "Book.objects.filter(pk=pk).update(**d)"
    },
    "question_id": 5503925
  },
  {
    "question": {
      "en": "find the current directory"
    },
    "mr": {
      "python": "os.path.realpath(__file__)"
    },
    "question_id": 5137497
  },
  {
    "question": {
      "en": "get a name of function `my_function` as a string"
    },
    "mr": {
      "python": "my_function.__name__"
    },
    "question_id": 251464
  },
  {
    "question": {
      "en": "modify the width of a text control as `300` keeping default height in wxpython"
    },
    "mr": {
      "python": "wx.TextCtrl(self, -1, size=(300, -1))"
    },
    "question_id": 14306852
  },
  {
    "question": {
      "en": "Calling an external command \"echo Hello World\""
    },
    "mr": {
      "python": "print(os.popen('echo Hello World').read())"
    },
    "question_id": 89228
  },
  {
    "question": {
      "en": "display current time"
    },
    "mr": {
      "python": "now = datetime.datetime.now().strftime('%H:%M:%S')"
    },
    "question_id": 5110352
  },
  {
    "question": {
      "en": "Convert a string of numbers `example_string` separated by `,` into a list of integers"
    },
    "mr": {
      "python": "map(int, example_string.split(','))"
    },
    "question_id": 19334374
  },
  {
    "question": {
      "en": "get UTC datetime in ISO format"
    },
    "mr": {
      "python": "datetime.datetime.utcnow().isoformat()"
    },
    "question_id": 2150739
  },
  {
    "question": {
      "en": "binarize the values in columns of list `order` in a pandas data frame"
    },
    "mr": {
      "python": "pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]"
    },
    "question_id": 38704545
  },
  {
    "question": {
      "en": "Trimming \"\\n\" from string `myString`"
    },
    "mr": {
      "python": "myString.strip('\\n')"
    },
    "question_id": 761804
  },
  {
    "question": {
      "en": "print numbers in list `list` with precision of 3 decimal places"
    },
    "mr": {
      "python": "print('[%s]' % ', '.join('%.3f' % val for val in list))"
    },
    "question_id": 7351270
  },
  {
    "question": {
      "en": "return dataframe `df` with last row dropped"
    },
    "mr": {
      "python": "df.ix[:-1]"
    },
    "question_id": 11414596
  },
  {
    "question": {
      "en": "convert a python dictionary `d` to a list of tuples"
    },
    "mr": {
      "python": "[(v, k) for k, v in list(d.items())]"
    },
    "question_id": 674519
  },
  {
    "question": {
      "en": "remove a key 'key' from a dictionary `my_dict`"
    },
    "mr": {
      "python": "my_dict.pop('key', None)"
    },
    "question_id": 11277432
  },
  {
    "question": {
      "en": "return http status code 204 from a django view"
    },
    "mr": {
      "python": "return HttpResponse(status=204)"
    },
    "question_id": 12476452
  },
  {
    "question": {
      "en": "get value in string `line` matched by regex pattern '\\\\bLOG_ADDR\\\\s+(\\\\S+)'"
    },
    "mr": {
      "python": "print(re.search('\\\\bLOG_ADDR\\\\s+(\\\\S+)', line).group(1))"
    },
    "question_id": 32950347
  },
  {
    "question": {
      "en": "Get the sum of values to the power of their indices in a list `l`"
    },
    "mr": {
      "python": "sum(j ** i for i, j in enumerate(l, 1))"
    },
    "question_id": 40639071
  },
  {
    "question": {
      "en": "Sort dictionary `x` by value in ascending order"
    },
    "mr": {
      "python": "sorted(list(x.items()), key=operator.itemgetter(1))"
    },
    "question_id": 613183
  },
  {
    "question": {
      "en": "Print +1 using format '{0:+d}'"
    },
    "mr": {
      "python": "print('{0:+d}'.format(score))"
    },
    "question_id": 8337004
  },
  {
    "question": {
      "en": "Parsing HTML string `html` using BeautifulSoup"
    },
    "mr": {
      "python": "parsed_html = BeautifulSoup(html)\nprint(parsed_html.body.find('div', attrs={'class': 'container', }).text)"
    },
    "question_id": 11709079
  },
  {
    "question": {
      "en": "do a boolean check if a string `lestring` contains any of the items in list `lelist`"
    },
    "mr": {
      "python": "any(e in lestring for e in lelist)"
    },
    "question_id": 14411633
  },
  {
    "question": {
      "en": "execute command 'echo $0' in Z shell"
    },
    "mr": {
      "python": "os.system(\"zsh -c 'echo $0'\")"
    },
    "question_id": 533398
  },
  {
    "question": {
      "en": "Get the position of a regex match `is` in a string `String`"
    },
    "mr": {
      "python": "re.search('is', String).start()"
    },
    "question_id": 2674391
  },
  {
    "question": {
      "en": "sort 2d array `matrix` by row with index 1"
    },
    "mr": {
      "python": "sorted(matrix, key=itemgetter(1))"
    },
    "question_id": 2173797
  },
  {
    "question": {
      "en": "get value of the environment variable 'KEY_THAT_MIGHT_EXIST' with default value `default_value`"
    },
    "mr": {
      "python": "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"
    },
    "question_id": 4906977
  },
  {
    "question": {
      "en": "attach debugger pdb to class `ForkedPdb`"
    },
    "mr": {
      "python": "ForkedPdb().set_trace()"
    },
    "question_id": 4716533
  },
  {
    "question": {
      "en": "Convert ascii value 'P' to binary"
    },
    "mr": {
      "python": "bin(ord('P'))"
    },
    "question_id": 4523551
  },
  {
    "question": {
      "en": "combine  dataframe `df1` and dataframe `df2` by index number"
    },
    "mr": {
      "python": "pd.merge(df1, df2, left_index=True, right_index=True, how='outer')"
    },
    "question_id": 28773683
  },
  {
    "question": {
      "en": "play the wav file 'sound.wav'"
    },
    "mr": {
      "python": "winsound.PlaySound('sound.wav', winsound.SND_FILENAME)"
    },
    "question_id": 307305
  },
  {
    "question": {
      "en": "write a tuple of tuples `A` to a csv file using python"
    },
    "mr": {
      "python": "writer.writerow(A)"
    },
    "question_id": 8687568
  },
  {
    "question": {
      "en": "abort the execution of the script using message 'aa! errors!'"
    },
    "mr": {
      "python": "sys.exit('aa! errors!')"
    },
    "question_id": 179369
  },
  {
    "question": {
      "en": "Calling an external command \"some_command < input_file | another_command > output_file\""
    },
    "mr": {
      "python": "os.system('some_command < input_file | another_command > output_file')"
    },
    "question_id": 89228
  },
  {
    "question": {
      "en": "decode utf-8 code `x` into a raw unicode literal"
    },
    "mr": {
      "python": "print(str(x).decode('raw_unicode_escape'))"
    },
    "question_id": 8901996
  },
  {
    "question": {
      "en": "evaluate the expression '20<30'"
    },
    "mr": {
      "python": "eval('20<30')"
    },
    "question_id": 10586778
  },
  {
    "question": {
      "en": "trim string `myString `"
    },
    "mr": {
      "python": "myString.strip()"
    },
    "question_id": 761804
  },
  {
    "question": {
      "en": "convert double 0.00582811585976 to float"
    },
    "mr": {
      "python": "struct.unpack('f', struct.pack('f', 0.00582811585976))"
    },
    "question_id": 13291539
  },
  {
    "question": {
      "en": "get value of the environment variable 'KEY_THAT_MIGHT_EXIST'"
    },
    "mr": {
      "python": "print(os.environ.get('KEY_THAT_MIGHT_EXIST'))"
    },
    "question_id": 4906977
  },
  {
    "question": {
      "en": "Display a image file `pathToFile`"
    },
    "mr": {
      "python": "Image.open('pathToFile').show()"
    },
    "question_id": 5333244
  },
  {
    "question": {
      "en": "multiplication of two 1-dimensional arrays  in numpy"
    },
    "mr": {
      "python": "np.outer(a, b)"
    },
    "question_id": 23566515
  },
  {
    "question": {
      "en": "split a string `yas` based on tab '\\t'"
    },
    "mr": {
      "python": "re.split('\\\\t+', yas.rstrip('\\t'))"
    },
    "question_id": 17038426
  },
  {
    "question": {
      "en": "Get all `a` tags where the text starts with value `some text` using regex"
    },
    "mr": {
      "python": "doc.xpath(\"//a[starts-with(text(),'some text')]\")"
    },
    "question_id": 2755950
  },
  {
    "question": {
      "en": "update a list `l1` dictionaries with a key `count` and value from list `l2`"
    },
    "mr": {
      "python": "[dict(d, count=n) for d, n in zip(l1, l2)]"
    },
    "question_id": 10592674
  },
  {
    "question": {
      "en": "generate unique equal hash for equal dictionaries `a` and `b`"
    },
    "mr": {
      "python": "hash(pformat(a)) == hash(pformat(b))"
    },
    "question_id": 16735786
  },
  {
    "question": {
      "en": "Importing file `file` from folder '/path/to/application/app/folder'"
    },
    "mr": {
      "python": "sys.path.insert(0, '/path/to/application/app/folder')\nimport file"
    },
    "question_id": 4383571
  },
  {
    "question": {
      "en": "save a numpy array `image_array` as an image 'outfile.jpg'"
    },
    "mr": {
      "python": "scipy.misc.imsave('outfile.jpg', image_array)"
    },
    "question_id": 902761
  },
  {
    "question": {
      "en": "get current time in pretty format"
    },
    "mr": {
      "python": "strftime('%Y-%m-%d %H:%M:%S', gmtime())"
    },
    "question_id": 415511
  },
  {
    "question": {
      "en": "Match regex '[a-zA-Z][\\\\w-]*\\\\Z' on string 'A\\n'"
    },
    "mr": {
      "python": "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"
    },
    "question_id": 2317134
  },
  {
    "question": {
      "en": "python selenium click on button"
    },
    "mr": {
      "python": "driver.find_element_by_css_selector('.button .c_button .s_button').click()"
    },
    "question_id": 21350605
  },
  {
    "question": {
      "en": "assign the index of the last occurence of `x` in list `s` to the variable `last`"
    },
    "mr": {
      "python": "last = len(s) - s[::-1].index(x) - 1"
    },
    "question_id": 34438901
  },
  {
    "question": {
      "en": "replace unicode character '\\u2022' in string 'str' with '*'"
    },
    "mr": {
      "python": "str.decode('utf-8').replace('\\u2022', '*').encode('utf-8')"
    },
    "question_id": 13093727
  },
  {
    "question": {
      "en": "Regular expression in Python sentence extractor"
    },
    "mr": {
      "python": "re.split('\\\\.\\\\s', re.sub('\\\\.\\\\s*$', '', text))"
    },
    "question_id": 27946742
  },
  {
    "question": {
      "en": "convert 173 to binary string"
    },
    "mr": {
      "python": "bin(173)"
    },
    "question_id": 1476
  },
  {
    "question": {
      "en": "set the default encoding to 'utf-8'"
    },
    "mr": {
      "python": "sys.setdefaultencoding('utf8')"
    },
    "question_id": 21129020
  },
  {
    "question": {
      "en": "convert string '2011221' into a DateTime object using format '%Y%W%w'"
    },
    "mr": {
      "python": "datetime.strptime('2011221', '%Y%W%w')"
    },
    "question_id": 5882405
  },
  {
    "question": {
      "en": "create a matrix from a list `[1, 2, 3]`"
    },
    "mr": {
      "python": "x = scipy.matrix([1, 2, 3]).transpose()"
    },
    "question_id": 4690366
  },
  {
    "question": {
      "en": "close the window in tkinter"
    },
    "mr": {
      "python": "self.root.destroy()"
    },
    "question_id": 8009176
  },
  {
    "question": {
      "en": "set UTC offset by 9 hrs ahead for date '2013/09/11 00:17'"
    },
    "mr": {
      "python": "dateutil.parser.parse('2013/09/11 00:17 +0900')"
    },
    "question_id": 18722196
  },
  {
    "question": {
      "en": "convert `a` to string"
    },
    "mr": {
      "python": "str(a)"
    },
    "question_id": 961632
  },
  {
    "question": {
      "en": "convert string `s` to lowercase"
    },
    "mr": {
      "python": "s.lower()"
    },
    "question_id": 6797984
  },
  {
    "question": {
      "en": "How to group similar items in a list?"
    },
    "mr": {
      "python": "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"
    },
    "question_id": 27659153
  },
  {
    "question": {
      "en": "reset index to default in dataframe `df`"
    },
    "mr": {
      "python": "df = df.reset_index(drop=True)"
    },
    "question_id": 20490274
  },
  {
    "question": {
      "en": "check whether a path \"/does/not/exist\" exists"
    },
    "mr": {
      "python": "print(os.path.exists('/does/not/exist'))"
    },
    "question_id": 82831
  },
  {
    "question": {
      "en": "extract date from a string `monkey 10/01/1980 love banana`"
    },
    "mr": {
      "python": "dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)"
    },
    "question_id": 3276180
  },
  {
    "question": {
      "en": "double each character in string `text.read()`"
    },
    "mr": {
      "python": "re.sub('(.)', '\\\\1\\\\1', text.read(), 0, re.S)"
    },
    "question_id": 15175142
  },
  {
    "question": {
      "en": "convert date string '24052010' to date object in format '%d%m%Y'"
    },
    "mr": {
      "python": "datetime.datetime.strptime('24052010', '%d%m%Y').date()"
    },
    "question_id": 2803852
  },
  {
    "question": {
      "en": "Parse string `datestr` into a datetime object using format pattern '%Y-%m-%d'"
    },
    "mr": {
      "python": "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"
    },
    "question_id": 5868374
  },
  {
    "question": {
      "en": "get values from a dictionary `my_dict` whose key contains the string `Date`"
    },
    "mr": {
      "python": "[v for k, v in list(my_dict.items()) if 'Date' in k]"
    },
    "question_id": 17106819
  },
  {
    "question": {
      "en": "BeautifulSoup select 'div' elements with an id attribute value ending with sub-string '_answer' in HTML parsed string `soup`"
    },
    "mr": {
      "python": "soup.select('div[id$=_answer]')"
    },
    "question_id": 42180455
  },
  {
    "question": {
      "en": "lower-case the string obtained by replacing the occurrences of regex pattern '(?<=[a-z])([A-Z])' in string `s` with eplacement '-\\\\1'"
    },
    "mr": {
      "python": "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"
    },
    "question_id": 39414085
  },
  {
    "question": {
      "en": "Represent DateTime object '10/05/2012' with format '%d/%m/%Y' into format '%Y-%m-%d'"
    },
    "mr": {
      "python": "datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')"
    },
    "question_id": 10541640
  },
  {
    "question": {
      "en": "Get Last Day of the second month in year 2012"
    },
    "mr": {
      "python": "monthrange(2012, 2)"
    },
    "question_id": 42950
  },
  {
    "question": {
      "en": "apply `numpy.linalg.norm` to each row of a matrix `a`"
    },
    "mr": {
      "python": "numpy.apply_along_axis(numpy.linalg.norm, 1, a)"
    },
    "question_id": 7741878
  },
  {
    "question": {
      "en": "export a pandas data frame `df` to a file `mydf.tsv` and retain the indices"
    },
    "mr": {
      "python": "df.to_csv('mydf.tsv', sep='\\t')"
    },
    "question_id": 11041411
  },
  {
    "question": {
      "en": "get element at index 0 of each list in column 'value' of dataframe `df`"
    },
    "mr": {
      "python": "df['value'] = df['value'].str.get(0)"
    },
    "question_id": 38147447
  },
  {
    "question": {
      "en": "get a list of the row names from index of a pandas data frame"
    },
    "mr": {
      "python": "list(df.index)"
    },
    "question_id": 26640145
  },
  {
    "question": {
      "en": "Removing key values pairs from a list of dictionaries"
    },
    "mr": {
      "python": "[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]"
    },
    "question_id": 13254241
  },
  {
    "question": {
      "en": "remove first directory from path '/First/Second/Third/Fourth/Fifth'"
    },
    "mr": {
      "python": "os.path.join(*x.split(os.path.sep)[2:])"
    },
    "question_id": 26724275
  },
  {
    "question": {
      "en": "How can I compare two lists in python and return matches"
    },
    "mr": {
      "python": "[i for i, j in zip(a, b) if i == j]"
    },
    "question_id": 1388818
  },
  {
    "question": {
      "en": "URL encoding in python"
    },
    "mr": {
      "python": "urllib.parse.quote_plus('a b')"
    },
    "question_id": 8905864
  },
  {
    "question": {
      "en": "Get `3` unique items from a list"
    },
    "mr": {
      "python": "random.sample(list(range(1, 16)), 3)"
    },
    "question_id": 6494508
  },
  {
    "question": {
      "en": "sort list `users` using values associated with key 'id' according to elements in list `order`"
    },
    "mr": {
      "python": "users.sort(key=lambda x: order.index(x['id']))"
    },
    "question_id": 17734779
  },
  {
    "question": {
      "en": "ordering a list of dictionaries `mylist` by elements 'weight' and 'factor'"
    },
    "mr": {
      "python": "mylist.sort(key=lambda d: (d['weight'], d['factor']))"
    },
    "question_id": 861190
  },
  {
    "question": {
      "en": "Mysql commit current transaction"
    },
    "mr": {
      "python": "con.commit()"
    },
    "question_id": 21974169
  },
  {
    "question": {
      "en": "For each index `x` from 0 to 3, append the element at index `x` of list `b` to the list at index `x` of list a."
    },
    "mr": {
      "python": "[a[x].append(b[x]) for x in range(3)]"
    },
    "question_id": 18872717
  },
  {
    "question": {
      "en": "Get a list comprehension in list of lists `X`"
    },
    "mr": {
      "python": "[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]"
    },
    "question_id": 21360028
  },
  {
    "question": {
      "en": "create an empty data frame `df2` with index from another data frame `df1`"
    },
    "mr": {
      "python": "df2 = pd.DataFrame(index=df1.index)"
    },
    "question_id": 18176933
  },
  {
    "question": {
      "en": "delete all values in a list `mylist`"
    },
    "mr": {
      "python": "del mylist[:]"
    },
    "question_id": 14465279
  },
  {
    "question": {
      "en": "click on the text button 'section-select-all' using selenium python"
    },
    "mr": {
      "python": "browser.find_element_by_class_name('section-select-all').click()"
    },
    "question_id": 34527388
  },
  {
    "question": {
      "en": "remove duplicate characters from string 'ffffffbbbbbbbqqq'"
    },
    "mr": {
      "python": "re.sub('([a-z])\\\\1+', '\\\\1', 'ffffffbbbbbbbqqq')"
    },
    "question_id": 4574509
  },
  {
    "question": {
      "en": "get every thing after last `/`"
    },
    "mr": {
      "python": "url.rsplit('/', 1)"
    },
    "question_id": 7253803
  },
  {
    "question": {
      "en": "urlencode a querystring 'string_of_characters_like_these:$#@=?%^Q^$' in python 2"
    },
    "mr": {
      "python": "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"
    },
    "question_id": 5607551
  },
  {
    "question": {
      "en": "What is the most pythonic way to exclude elements of a list that start with a specific character?"
    },
    "mr": {
      "python": "[x for x in my_list if not x.startswith('#')]"
    },
    "question_id": 11791568
  },
  {
    "question": {
      "en": "Filter Django objects by `author` with ids `1` and `2`"
    },
    "mr": {
      "python": "Book.objects.filter(author__id=1).filter(author__id=2)"
    },
    "question_id": 5301996
  },
  {
    "question": {
      "en": "remove item \"b\" in list `a`"
    },
    "mr": {
      "python": "a.remove('b')"
    },
    "question_id": 2793324
  },
  {
    "question": {
      "en": "print a string `s` by splitting with comma `,`"
    },
    "mr": {
      "python": "print(s.split(','))"
    },
    "question_id": 5864485
  },
  {
    "question": {
      "en": "delete an item `thing` in a list `some_list` if it exists"
    },
    "mr": {
      "python": "cleaned_list = [x for x in some_list if x is not thing]"
    },
    "question_id": 4915920
  },
  {
    "question": {
      "en": "hide output of subprocess `['espeak', text]`"
    },
    "mr": {
      "python": "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"
    },
    "question_id": 11269575
  },
  {
    "question": {
      "en": "move the last item in list `a` to the beginning"
    },
    "mr": {
      "python": "a = a[-1:] + a[:-1]"
    },
    "question_id": 6490560
  },
  {
    "question": {
      "en": "find the first letter of each element in string `input`"
    },
    "mr": {
      "python": "output = ''.join(item[0].upper() for item in input.split())"
    },
    "question_id": 5775719
  },
  {
    "question": {
      "en": "sort dictionary `d` by key"
    },
    "mr": {
      "python": "od = collections.OrderedDict(sorted(d.items()))"
    },
    "question_id": 9001509
  },
  {
    "question": {
      "en": "count the number of pairs in dictionary `d` whose value equal to `chosen_value`"
    },
    "mr": {
      "python": "sum(x == chosen_value for x in list(d.values()))"
    },
    "question_id": 13462365
  },
  {
    "question": {
      "en": "create a list containing the `n` next values of generator `it`"
    },
    "mr": {
      "python": "[next(it) for _ in range(n)]"
    },
    "question_id": 4152376
  },
  {
    "question": {
      "en": "prepend string 'hello' to all items in list 'a'"
    },
    "mr": {
      "python": "['hello{0}'.format(i) for i in a]"
    },
    "question_id": 13331419
  },
  {
    "question": {
      "en": "zip file `pdffile` using its basename as directory name"
    },
    "mr": {
      "python": "archive.write(pdffile, os.path.basename(pdffile))"
    },
    "question_id": 12777222
  },
  {
    "question": {
      "en": "sort a list of dictionary values by 'date' in reverse order"
    },
    "mr": {
      "python": "list.sort(key=lambda item: item['date'], reverse=True)"
    },
    "question_id": 652291
  },
  {
    "question": {
      "en": "regex search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(d(d)d)'"
    },
    "mr": {
      "python": "re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)"
    },
    "question_id": 8970524
  },
  {
    "question": {
      "en": "replace nan values in a pandas data frame with the average of columns"
    },
    "mr": {
      "python": "df.apply(lambda x: x.fillna(x.mean()), axis=0)"
    },
    "question_id": 18689823
  },
  {
    "question": {
      "en": "check python version"
    },
    "mr": {
      "python": "sys.version_info"
    },
    "question_id": 1093322
  },
  {
    "question": {
      "en": "compare contents  at filehandles `file1` and `file2` using difflib"
    },
    "mr": {
      "python": "difflib.SequenceMatcher(None, file1.read(), file2.read())"
    },
    "question_id": 977491
  },
  {
    "question": {
      "en": "sort rows of numpy matrix `arr` in ascending order according to all column values"
    },
    "mr": {
      "python": "numpy.sort(arr, axis=0)"
    },
    "question_id": 10078470
  },
  {
    "question": {
      "en": "Converting string lists `s` to float list"
    },
    "mr": {
      "python": "floats = [float(x) for x in s.split()]"
    },
    "question_id": 4004550
  },
  {
    "question": {
      "en": "Get Last Day of the second month in 2100"
    },
    "mr": {
      "python": "calendar.monthrange(2100, 2)"
    },
    "question_id": 42950
  },
  {
    "question": {
      "en": "Move x-axis of the pyplot object `ax` to the top of a plot in matplotlib"
    },
    "mr": {
      "python": "ax.xaxis.set_ticks_position('top')"
    },
    "question_id": 14406214
  },
  {
    "question": {
      "en": "execute python code `myscript.py` in a virtualenv `/path/to/my/venv` from matlab"
    },
    "mr": {
      "python": "system('/path/to/my/venv/bin/python myscript.py')"
    },
    "question_id": 39538010
  },
  {
    "question": {
      "en": "Reverse string 'foo'"
    },
    "mr": {
      "python": "''.join(reversed('foo'))"
    },
    "question_id": 931092
  },
  {
    "question": {
      "en": "convert nested list 'Cards' into a flat list"
    },
    "mr": {
      "python": "[a for c in Cards for b in c for a in b]"
    },
    "question_id": 16734590
  },
  {
    "question": {
      "en": "Get items from a dictionary `bigdict` where the keys are present in `('l', 'm', 'n')`"
    },
    "mr": {
      "python": "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"
    },
    "question_id": 5352546
  },
  {
    "question": {
      "en": "replace carriage return in string `somestring` with empty string ''"
    },
    "mr": {
      "python": "somestring.replace('\\\\r', '')"
    },
    "question_id": 11755208
  },
  {
    "question": {
      "en": "check if type of a variable `s` is string"
    },
    "mr": {
      "python": "isinstance(s, str)"
    },
    "question_id": 4843173
  },
  {
    "question": {
      "en": "Generate MD5 checksum of file in the path `full_path` in hashlib"
    },
    "mr": {
      "python": "print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())"
    },
    "question_id": 3431825
  },
  {
    "question": {
      "en": "get relative path of path '/usr/var' regarding path '/usr/var/log/'"
    },
    "mr": {
      "python": "print(os.path.relpath('/usr/var/log/', '/usr/var'))"
    },
    "question_id": 7287996
  },
  {
    "question": {
      "en": "skip the newline while printing `line`"
    },
    "mr": {
      "python": "print(line.rstrip('\\n'))"
    },
    "question_id": 17027690
  },
  {
    "question": {
      "en": "Print variable `count` and variable `conv` with space string '    ' in between"
    },
    "mr": {
      "python": "print(str(count) + '    ' + str(conv))"
    },
    "question_id": 9969684
  },
  {
    "question": {
      "en": "get the dimensions of numpy array `a`"
    },
    "mr": {
      "python": "N.shape(a)"
    },
    "question_id": 3061761
  },
  {
    "question": {
      "en": "Delete an element \"hello\" from a dictionary `lol`"
    },
    "mr": {
      "python": "lol.pop('hello')"
    },
    "question_id": 5844672
  },
  {
    "question": {
      "en": "empty a list `lst`"
    },
    "mr": {
      "python": "del lst1[:]"
    },
    "question_id": 1400608
  },
  {
    "question": {
      "en": "read file 'filename' line by line into a list `lines`"
    },
    "mr": {
      "python": "lines = [line.rstrip('\\n') for line in open('filename')]"
    },
    "question_id": 3277503
  },
  {
    "question": {
      "en": "move last item of array `a` to the first position"
    },
    "mr": {
      "python": "a[-1:] + a[:-1]"
    },
    "question_id": 12845112
  },
  {
    "question": {
      "en": "extract table data from table `rows` using beautifulsoup"
    },
    "mr": {
      "python": "[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]"
    },
    "question_id": 8139797
  },
  {
    "question": {
      "en": "convert a dataframe `df`'s column `ID` into datetime, after removing the first and last 3 letters"
    },
    "mr": {
      "python": "pd.to_datetime(df.ID.str[1:-3])"
    },
    "question_id": 42100344
  },
  {
    "question": {
      "en": "Run 'test2.py' file with python location 'path/to/python' and arguments 'neededArgumetGoHere' as a subprocess"
    },
    "mr": {
      "python": "call(['path/to/python', 'test2.py', 'neededArgumetGoHere'])"
    },
    "question_id": 33218968
  },
  {
    "question": {
      "en": "kill a process `make.exe` from python script on windows"
    },
    "mr": {
      "python": "os.system('taskkill /im make.exe')"
    },
    "question_id": 6278847
  },
  {
    "question": {
      "en": "Create new string with unique characters from `s` seperated by ' '"
    },
    "mr": {
      "python": "print(' '.join(OrderedDict.fromkeys(s)))"
    },
    "question_id": 29360607
  },
  {
    "question": {
      "en": "reverse a string `some_string`"
    },
    "mr": {
      "python": "some_string[::(-1)]"
    },
    "question_id": 663171
  },
  {
    "question": {
      "en": "print cpu and memory usage"
    },
    "mr": {
      "python": "print((psutil.cpu_percent()))\nprint((psutil.virtual_memory()))"
    },
    "question_id": 276052
  },
  {
    "question": {
      "en": "convert list `l` to dictionary having each two adjacent elements as key/value pair"
    },
    "mr": {
      "python": "dict(zip(l[::2], l[1::2]))"
    },
    "question_id": 6900955
  },
  {
    "question": {
      "en": "Create list of dictionaries from pandas dataframe `df`"
    },
    "mr": {
      "python": "df.to_dict('records')"
    },
    "question_id": 29815129
  },
  {
    "question": {
      "en": "Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), \"hi\"]"
    },
    "mr": {
      "python": "((2, 3) not in [(2, 7), (7, 3), 'hi'])"
    },
    "question_id": 10406130
  },
  {
    "question": {
      "en": "get a string `randomkey123xyz987` between two substrings in a string `api('randomkey123xyz987', 'key', 'text')` using regex"
    },
    "mr": {
      "python": "re.findall(\"api\\\\('(.*?)'\", \"api('randomkey123xyz987', 'key', 'text')\")"
    },
    "question_id": 29703793
  },
  {
    "question": {
      "en": "encode `u'X\\xc3\\xbcY\\xc3\\x9f'` as unicode and decode with utf-8"
    },
    "mr": {
      "python": "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')"
    },
    "question_id": 4267019
  },
  {
    "question": {
      "en": "get the number of all keys in the nested dictionary `dict_list`"
    },
    "mr": {
      "python": "len(dict_test) + sum(len(v) for v in dict_test.values())"
    },
    "question_id": 35427814
  },
  {
    "question": {
      "en": "remove trailing newline in string 'test string \\n\\n'"
    },
    "mr": {
      "python": "'test string \\n\\n'.rstrip('\\n')"
    },
    "question_id": 275018
  },
  {
    "question": {
      "en": "Add 1 to each integer value in list `my_list`"
    },
    "mr": {
      "python": "new_list = [(x + 1) for x in my_list]"
    },
    "question_id": 9304408
  },
  {
    "question": {
      "en": "reverse a list `L`"
    },
    "mr": {
      "python": "L[::(-1)]"
    },
    "question_id": 3940128
  },
  {
    "question": {
      "en": "Find all words containing letters between A and Z in string `formula`"
    },
    "mr": {
      "python": "re.findall('\\\\b[A-Z]', formula)"
    },
    "question_id": 13840883
  },
  {
    "question": {
      "en": "create dataframe `df` with content of hdf store file '/home/.../data.h5' with key of 'firstSet'"
    },
    "mr": {
      "python": "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"
    },
    "question_id": 14591855
  },
  {
    "question": {
      "en": "remove letters from string `example_line` if the letter exist in list `bad_chars`"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]"
    },
    "question_id": 39532974
  },
  {
    "question": {
      "en": "Unzip a list of tuples `l` into a list of lists"
    },
    "mr": {
      "python": "zip(*l)"
    },
    "question_id": 12974474
  },
  {
    "question": {
      "en": "getting a list of all subdirectories in the directory `directory`"
    },
    "mr": {
      "python": "os.walk(directory)"
    },
    "question_id": 973473
  },
  {
    "question": {
      "en": "Get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function"
    },
    "mr": {
      "python": "max(lst, key=lambda x: x['score'])"
    },
    "question_id": 6561653
  },
  {
    "question": {
      "en": "Get a list `C` by subtracting values in one list `B` from corresponding values in another list `A`"
    },
    "mr": {
      "python": "C = [(a - b) for a, b in zip(A, B)]"
    },
    "question_id": 11677860
  },
  {
    "question": {
      "en": "Get the value with the maximum length in each column in array `foo`"
    },
    "mr": {
      "python": "[max(len(str(x)) for x in line) for line in zip(*foo)]"
    },
    "question_id": 6018916
  },
  {
    "question": {
      "en": "convert currency string `dollars` to decimal `cents_int`"
    },
    "mr": {
      "python": "cents_int = int(round(float(dollars.strip('$')) * 100))"
    },
    "question_id": 3887469
  },
  {
    "question": {
      "en": "Remove all data inside parenthesis in string `item`"
    },
    "mr": {
      "python": "item = re.sub(' \\\\(\\\\w+\\\\)', '', item)"
    },
    "question_id": 19794051
  },
  {
    "question": {
      "en": "concatenating values in `list1` to a string"
    },
    "mr": {
      "python": "str1 = ''.join((str(e) for e in list1))"
    },
    "question_id": 5618878
  },
  {
    "question": {
      "en": "parse date string '2009/05/13 19:19:30 -0400' using format '%Y/%m/%d %H:%M:%S %z'"
    },
    "mr": {
      "python": "datetime.strptime('2009/05/13 19:19:30 -0400', '%Y/%m/%d %H:%M:%S %z')"
    },
    "question_id": 1101508
  },
  {
    "question": {
      "en": "Check the status code of url \"www.python.org\""
    },
    "mr": {
      "python": "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"
    },
    "question_id": 1949318
  },
  {
    "question": {
      "en": "How can I launch an instance of an application using Python?"
    },
    "mr": {
      "python": "os.system('start excel.exe <path/to/file>')"
    },
    "question_id": 247724
  },
  {
    "question": {
      "en": "zip lists in a list [[1, 2], [3, 4], [5, 6]]"
    },
    "mr": {
      "python": "zip(*[[1, 2], [3, 4], [5, 6]])"
    },
    "question_id": 4112265
  },
  {
    "question": {
      "en": "Convert a string to integer with decimal in Python"
    },
    "mr": {
      "python": "int(s.split('.')[0])"
    },
    "question_id": 1094717
  },
  {
    "question": {
      "en": "get list of string elements in string `data` delimited by commas, putting `0` in place of empty strings"
    },
    "mr": {
      "python": "[(int(x) if x else 0) for x in data.split(',')]"
    },
    "question_id": 2606976
  },
  {
    "question": {
      "en": "print a celsius symbol on x axis of a plot `ax`"
    },
    "mr": {
      "python": "ax.set_xlabel('Temperature (\\u2103)')"
    },
    "question_id": 8440117
  },
  {
    "question": {
      "en": "Convert a Unicode string `a` to a 'ascii' string"
    },
    "mr": {
      "python": "a.encode('ascii', 'ignore')"
    },
    "question_id": 1207457
  },
  {
    "question": {
      "en": "create tuples containing elements that are at the same index of list `lst` and list `lst2`"
    },
    "mr": {
      "python": "[(i, j) for i, j in zip(lst, lst2)]"
    },
    "question_id": 18990069
  },
  {
    "question": {
      "en": "Group the values from django model `Article` with group by value `pub_date` and annotate by `title`"
    },
    "mr": {
      "python": "Article.objects.values('pub_date').annotate(article_count=Count('title'))"
    },
    "question_id": 1908741
  },
  {
    "question": {
      "en": "concatenate dataframe `df1` with `df2` whilst removing duplicates"
    },
    "mr": {
      "python": "pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)"
    },
    "question_id": 21317384
  },
  {
    "question": {
      "en": "replace fields delimited by braces {} in string \"Day old bread, 50% sale {0}\" with string 'today'"
    },
    "mr": {
      "python": "\"\"\"Day old bread, 50% sale {0}\"\"\".format('today')"
    },
    "question_id": 2847272
  },
  {
    "question": {
      "en": "upload uploaded file from path '/upload' to Google cloud storage 'my_bucket' bucket"
    },
    "mr": {
      "python": "upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')"
    },
    "question_id": 23823206
  },
  {
    "question": {
      "en": "Reverse a string 'hello world'"
    },
    "mr": {
      "python": "'hello world'[::(-1)]"
    },
    "question_id": 931092
  },
  {
    "question": {
      "en": "remove a substring \".com\" from the end of string `url`"
    },
    "mr": {
      "python": "print(url.replace('.com', ''))"
    },
    "question_id": 1038824
  },
  {
    "question": {
      "en": "creating a numpy array of 3d coordinates from three 1d arrays `x_p`, `y_p` and `z_p`"
    },
    "mr": {
      "python": "np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T"
    },
    "question_id": 18253210
  },
  {
    "question": {
      "en": "list all \".txt\" files of a directory \"/home/adam/\""
    },
    "mr": {
      "python": "print(glob.glob('/home/adam/*.txt'))"
    },
    "question_id": 3207219
  },
  {
    "question": {
      "en": "Getting the last element of list `some_list`"
    },
    "mr": {
      "python": "some_list[(-1)]"
    },
    "question_id": 930397
  },
  {
    "question": {
      "en": "make a 0.1 seconds time delay"
    },
    "mr": {
      "python": "time.sleep(0.1)"
    },
    "question_id": 510348
  },
  {
    "question": {
      "en": "set environment variable 'DEBUSSY' to '1'"
    },
    "mr": {
      "python": "os.environ['DEBUSSY'] = '1'"
    },
    "question_id": 5971312
  },
  {
    "question": {
      "en": "set the font 'Purisa' of size 12 for a canvas' text item `k`"
    },
    "mr": {
      "python": "canvas.create_text(x, y, font=('Purisa', 12), text=k)"
    },
    "question_id": 15457504
  },
  {
    "question": {
      "en": "create a list containing a four elements long tuples of permutations of binary values"
    },
    "mr": {
      "python": "itertools.product(list(range(2)), repeat=4)"
    },
    "question_id": 32292554
  },
  {
    "question": {
      "en": "create a list where each element is a dictionary with keys 'key1' and 'key2' and values corresponding to each value in the lists referenced by keys 'key1' and 'key2' in dictionary `d`"
    },
    "mr": {
      "python": "[{'key1': a, 'key2': b} for a, b in zip(d['key1'], d['key2'])]"
    },
    "question_id": 1780174
  },
  {
    "question": {
      "en": "count the number of trailing question marks in string `my_text`"
    },
    "mr": {
      "python": "len(my_text) - len(my_text.rstrip('?'))"
    },
    "question_id": 42178481
  },
  {
    "question": {
      "en": "deep copy list `old_list` as `new_list`"
    },
    "mr": {
      "python": "new_list = copy.deepcopy(old_list)"
    },
    "question_id": 2612802
  },
  {
    "question": {
      "en": "get the sum of the products of each pair of corresponding elements in lists `a` and `b`"
    },
    "mr": {
      "python": "sum(x * y for x, y in zip(a, b))"
    },
    "question_id": 41821112
  },
  {
    "question": {
      "en": "Get all the texts without tags from beautiful soup object `soup`"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(soup.findAll(text=True))"
    },
    "question_id": 2416823
  },
  {
    "question": {
      "en": "case insensitive string comparison between `first` and `second`"
    },
    "mr": {
      "python": "(first.lower() == second.lower())"
    },
    "question_id": 319426
  },
  {
    "question": {
      "en": "Trimming a string `str`"
    },
    "mr": {
      "python": "str.strip()"
    },
    "question_id": 761804
  },
  {
    "question": {
      "en": "get all column name of dataframe `df` except for column 'T1_V6'"
    },
    "mr": {
      "python": "df[df.columns - ['T1_V6']]"
    },
    "question_id": 32032836
  },
  {
    "question": {
      "en": "convert list of key-value tuples `[('A', 1), ('B', 2), ('C', 3)]` into dictionary"
    },
    "mr": {
      "python": "dict([('A', 1), ('B', 2), ('C', 3)])"
    },
    "question_id": 6586310
  },
  {
    "question": {
      "en": "List all the files that matches the pattern `hello*.txt`"
    },
    "mr": {
      "python": "glob.glob('hello*.txt')"
    },
    "question_id": 22625616
  },
  {
    "question": {
      "en": "get a list of values with key 'key' from a list of dictionaries `l`"
    },
    "mr": {
      "python": "[d['key'] for d in l if 'key' in d]"
    },
    "question_id": 25040875
  },
  {
    "question": {
      "en": "sort each row in a pandas dataframe `df` in descending order"
    },
    "mr": {
      "python": "df.sort(axis=1, ascending=False)"
    },
    "question_id": 25817930
  },
  {
    "question": {
      "en": "sort list of strings `the_list` by integer suffix before \"_\""
    },
    "mr": {
      "python": "sorted(the_list, key=lambda x: int(x.split('_')[1]))"
    },
    "question_id": 4287209
  },
  {
    "question": {
      "en": "group a list `list_of_tuples` of tuples by values"
    },
    "mr": {
      "python": "zip(*list_of_tuples)"
    },
    "question_id": 18637651
  },
  {
    "question": {
      "en": "list all the contents of the directory 'path'."
    },
    "mr": {
      "python": "os.listdir('path')"
    },
    "question_id": 2759323
  },
  {
    "question": {
      "en": "get the date 2 months from today"
    },
    "mr": {
      "python": "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"
    },
    "question_id": 546321
  },
  {
    "question": {
      "en": "plot a bar graph from the column 'color' in the DataFrame 'df'"
    },
    "mr": {
      "python": "df.colour.value_counts().plot(kind='bar')"
    },
    "question_id": 31029560
  },
  {
    "question": {
      "en": "get the date 1 month from today"
    },
    "mr": {
      "python": "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"
    },
    "question_id": 546321
  },
  {
    "question": {
      "en": "Convert hex string \"0xa\" to integer"
    },
    "mr": {
      "python": "int('0xa', 16)"
    },
    "question_id": 209513
  },
  {
    "question": {
      "en": "create a list containing elements from list `list` that are predicate to function `f`"
    },
    "mr": {
      "python": "[f(x) for x in list]"
    },
    "question_id": 1222677
  },
  {
    "question": {
      "en": "set the stdin of the process 'grep f' to be 'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'"
    },
    "mr": {
      "python": "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"
    },
    "question_id": 163542
  },
  {
    "question": {
      "en": "use upper case letters to print hex value `value`"
    },
    "mr": {
      "python": "print('0x%X' % value)"
    },
    "question_id": 13277440
  },
  {
    "question": {
      "en": "remove newline in string `s` on the right side"
    },
    "mr": {
      "python": "s.rstrip()"
    },
    "question_id": 275018
  },
  {
    "question": {
      "en": "Create new list `result` by splitting each item in list `words`"
    },
    "mr": {
      "python": "result = [item for word in words for item in word.split(',')]"
    },
    "question_id": 12808420
  },
  {
    "question": {
      "en": "split string \"0,1,2\" based on delimiter ','"
    },
    "mr": {
      "python": "\"\"\"0,1,2\"\"\".split(',')"
    },
    "question_id": 2168123
  },
  {
    "question": {
      "en": "check if a numpy array `a1` contains any element of another array `a2`"
    },
    "mr": {
      "python": "np.any(np.in1d(a1, a2))"
    },
    "question_id": 36190533
  },
  {
    "question": {
      "en": "remove duplicates from a list of sets 'L'"
    },
    "mr": {
      "python": "[set(item) for item in set(frozenset(item) for item in L)]"
    },
    "question_id": 32296933
  },
  {
    "question": {
      "en": "Matplotlib clear the current axes."
    },
    "mr": {
      "python": "plt.cla()"
    },
    "question_id": 741877
  },
  {
    "question": {
      "en": "get the ASCII value of a character u'\u3042' as an int"
    },
    "mr": {
      "python": "ord('\\u3042')"
    },
    "question_id": 227459
  },
  {
    "question": {
      "en": "format datetime in `dt` as string in format `'%m/%d/%Y`"
    },
    "mr": {
      "python": "dt.strftime('%m/%d/%Y')"
    },
    "question_id": 10624937
  },
  {
    "question": {
      "en": "get current date and time"
    },
    "mr": {
      "python": "datetime.datetime.now()"
    },
    "question_id": 415511
  },
  {
    "question": {
      "en": "download to a directory '/path/to/dir/filename.ext' from source 'http://example.com/file.ext'"
    },
    "mr": {
      "python": "urllib.request.urlretrieve('http://example.com/file.ext', '/path/to/dir/filename.ext')"
    },
    "question_id": 21018612
  },
  {
    "question": {
      "en": "Make a auto scrolled window to the end of the list in gtk"
    },
    "mr": {
      "python": "self.treeview.connect('size-allocate', self.treeview_changed)"
    },
    "question_id": 5218948
  },
  {
    "question": {
      "en": "count number of rows in a group `key_columns` in pandas groupby object `df`"
    },
    "mr": {
      "python": "df.groupby(key_columns).size()"
    },
    "question_id": 19384532
  },
  {
    "question": {
      "en": "get keys with same value in dictionary `d`"
    },
    "mr": {
      "python": "print([key for key, value in d.items() if value == 1])"
    },
    "question_id": 24958010
  },
  {
    "question": {
      "en": "calculate the date six months from the current date"
    },
    "mr": {
      "python": "print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())"
    },
    "question_id": 546321
  },
  {
    "question": {
      "en": "convert string `x'  to dictionary splitted by `=` using list comprehension"
    },
    "mr": {
      "python": "dict([x.split('=') for x in s.split()])"
    },
    "question_id": 1246444
  },
  {
    "question": {
      "en": "sorting the lists in list of lists `data`"
    },
    "mr": {
      "python": "[sorted(item) for item in data]"
    },
    "question_id": 34197047
  },
  {
    "question": {
      "en": "assign value in `group` dynamically to class property `attr`"
    },
    "mr": {
      "python": "setattr(self, attr, group)"
    },
    "question_id": 19153328
  },
  {
    "question": {
      "en": "print multiple arguments 'name' and 'score'."
    },
    "mr": {
      "python": "print('Total score for {} is {}'.format(name, score))"
    },
    "question_id": 15286401
  },
  {
    "question": {
      "en": "split string `s` by '@' and get the first element"
    },
    "mr": {
      "python": "s.split('@')[0]"
    },
    "question_id": 15210485
  },
  {
    "question": {
      "en": "append the sum of each tuple pair in the grouped list `list1` and list `list2` elements to list `list3`"
    },
    "mr": {
      "python": "list3 = [(a + b) for a, b in zip(list1, list2)]"
    },
    "question_id": 11703064
  },
  {
    "question": {
      "en": "convert dictionary `dict` into a flat list"
    },
    "mr": {
      "python": "print([y for x in list(dict.items()) for y in x])"
    },
    "question_id": 11351874
  },
  {
    "question": {
      "en": "delete all occureces of `8` in each string `s` in list `lst`"
    },
    "mr": {
      "python": "print([s.replace('8', '') for s in lst])"
    },
    "question_id": 8282553
  },
  {
    "question": {
      "en": "sort keys of dictionary 'd' based on their values"
    },
    "mr": {
      "python": "sorted(d, key=lambda k: d[k][1])"
    },
    "question_id": 4690094
  },
  {
    "question": {
      "en": "add array of shape `(6, 9, 20)` to array `[1, 2, 3, 4, 5, 6, 7, 8, 9]`"
    },
    "mr": {
      "python": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"
    },
    "question_id": 32283692
  },
  {
    "question": {
      "en": "check whether a file `fname` exists"
    },
    "mr": {
      "python": "os.path.isfile(fname)"
    },
    "question_id": 82831
  },
  {
    "question": {
      "en": "convert scientific notation of variable `a` to decimal"
    },
    "mr": {
      "python": "\"\"\"{:.50f}\"\"\".format(float(a[0] / a[1]))"
    },
    "question_id": 16962512
  },
  {
    "question": {
      "en": "convert datetime object to date object in python"
    },
    "mr": {
      "python": "datetime.datetime.now().date()"
    },
    "question_id": 3743222
  },
  {
    "question": {
      "en": "Convert array `x` into a correlation matrix"
    },
    "mr": {
      "python": "np.corrcoef(x)"
    },
    "question_id": 18432823
  },
  {
    "question": {
      "en": "lookup an attribute in any scope by name 'range'"
    },
    "mr": {
      "python": "getattr(__builtins__, 'range')"
    },
    "question_id": 2850966
  },
  {
    "question": {
      "en": "erase the contents of a file `filename`"
    },
    "mr": {
      "python": "open('filename', 'w').close()"
    },
    "question_id": 2769061
  },
  {
    "question": {
      "en": "Get a list of all keys from dictionary `dictA` where the number of occurrences of value `duck` in that key is more than `1`"
    },
    "mr": {
      "python": "[k for k, v in dictA.items() if v.count('duck') > 1]"
    },
    "question_id": 14743454
  },
  {
    "question": {
      "en": "Save plot `plt` as svg file 'test.svg'"
    },
    "mr": {
      "python": "plt.savefig('test.svg')"
    },
    "question_id": 24525111
  },
  {
    "question": {
      "en": "list all files in a current directory"
    },
    "mr": {
      "python": "glob.glob('*')"
    },
    "question_id": 22625616
  },
  {
    "question": {
      "en": "disable abbreviation in argparse"
    },
    "mr": {
      "python": "parser = argparse.ArgumentParser(allow_abbrev=False)"
    },
    "question_id": 10750802
  },
  {
    "question": {
      "en": "Change background color in Tkinter"
    },
    "mr": {
      "python": "root.configure(background='black')"
    },
    "question_id": 2744795
  },
  {
    "question": {
      "en": "split 1d array `a` into 2d array at the last element"
    },
    "mr": {
      "python": "np.split(a, [-1])"
    },
    "question_id": 42098487
  },
  {
    "question": {
      "en": "convert a string `a` of letters embedded in squared brackets into embedded lists"
    },
    "mr": {
      "python": "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]"
    },
    "question_id": 33147992
  },
  {
    "question": {
      "en": "generate a list of consecutive integers from 0 to 8"
    },
    "mr": {
      "python": "list(range(9))"
    },
    "question_id": 29558007
  },
  {
    "question": {
      "en": "sort query set by number of characters in a field `length` in django model `MyModel`"
    },
    "mr": {
      "python": "MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')"
    },
    "question_id": 12804801
  },
  {
    "question": {
      "en": "make a 0.1 seconds time delay"
    },
    "mr": {
      "python": "sleep(0.1)"
    },
    "question_id": 510348
  },
  {
    "question": {
      "en": "add character '@' after word 'get' in string `text`"
    },
    "mr": {
      "python": "text = re.sub('(\\\\bget\\\\b)', '\\\\1@', text)"
    },
    "question_id": 20735384
  },
  {
    "question": {
      "en": "Sum of sums of each list, in a list of lists named 'lists'."
    },
    "mr": {
      "python": "sum(sum(x) for x in lists)"
    },
    "question_id": 15465204
  },
  {
    "question": {
      "en": "insert ' ' between every three digit before '.' and replace ',' with '.' in 12345678.46"
    },
    "mr": {
      "python": "format(12345678.46, ',').replace(',', ' ').replace('.', ',')"
    },
    "question_id": 17484631
  },
  {
    "question": {
      "en": "Get a list of lists with summing the values of the second element from each list of lists `data`"
    },
    "mr": {
      "python": "[[sum([x[1] for x in i])] for i in data]"
    },
    "question_id": 37619348
  },
  {
    "question": {
      "en": "match regex pattern '\\\\$[0-9]+[^\\\\$]*$' on string '$1 off delicious $5 ham.'"
    },
    "mr": {
      "python": "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"
    },
    "question_id": 3166619
  },
  {
    "question": {
      "en": "extract elements at indices (1, 2, 5) from a list `a`"
    },
    "mr": {
      "python": "[a[i] for i in (1, 2, 5)]"
    },
    "question_id": 2621674
  },
  {
    "question": {
      "en": "get os version"
    },
    "mr": {
      "python": "import platform\nplatform.release()"
    },
    "question_id": 1854
  },
  {
    "question": {
      "en": "serialize dictionary `d` as a JSON formatted string with each key formatted to pattern '%d,%d'"
    },
    "mr": {
      "python": "simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))"
    },
    "question_id": 715550
  },
  {
    "question": {
      "en": "pandas dataframe, how do i split a column 'AB' into two 'A' and 'B' on delimiter ' '"
    },
    "mr": {
      "python": "df['A'], df['B'] = df['AB'].str.split(' ', 1).str"
    },
    "question_id": 14745022
  },
  {
    "question": {
      "en": "remove identical items from list `my_list` and sort it alphabetically"
    },
    "mr": {
      "python": "sorted(set(my_list))"
    },
    "question_id": 22741068
  },
  {
    "question": {
      "en": "write a list of strings `row` to csv object `csvwriter`"
    },
    "mr": {
      "python": "csvwriter.writerow(row)"
    },
    "question_id": 6916542
  },
  {
    "question": {
      "en": "extract date from a string 'monkey 2010-07-32 love banana'"
    },
    "mr": {
      "python": "dparser.parse('monkey 2010-07-32 love banana', fuzzy=True)"
    },
    "question_id": 3276180
  },
  {
    "question": {
      "en": "print script's directory"
    },
    "mr": {
      "python": "print(os.path.dirname(os.path.realpath(__file__)))"
    },
    "question_id": 4934806
  },
  {
    "question": {
      "en": "remove whitespace in string `sentence` from beginning and end"
    },
    "mr": {
      "python": "sentence.strip()"
    },
    "question_id": 8270092
  },
  {
    "question": {
      "en": "Check if key 'key1' in `dict`"
    },
    "mr": {
      "python": "('key1' in dict)"
    },
    "question_id": 1602934
  },
  {
    "question": {
      "en": "sort a list `L` by number after second '.'"
    },
    "mr": {
      "python": "print(sorted(L, key=lambda x: int(x.split('.')[2])))"
    },
    "question_id": 21361604
  },
  {
    "question": {
      "en": "Generate random integers between 0 and 9"
    },
    "mr": {
      "python": "print((random.randint(0, 9)))"
    },
    "question_id": 3996904
  },
  {
    "question": {
      "en": "count the number of values in `d` dictionary that are predicate to function `some_condition`"
    },
    "mr": {
      "python": "sum(1 for x in list(d.values()) if some_condition(x))"
    },
    "question_id": 13462365
  },
  {
    "question": {
      "en": "get modified time of file `file`"
    },
    "mr": {
      "python": "print(('last modified: %s' % time.ctime(os.path.getmtime(file))))"
    },
    "question_id": 237079
  },
  {
    "question": {
      "en": "remove newline in string `s` on the left side"
    },
    "mr": {
      "python": "s.lstrip()"
    },
    "question_id": 275018
  },
  {
    "question": {
      "en": "remove duplicate dict in list `l`"
    },
    "mr": {
      "python": "[dict(t) for t in set([tuple(d.items()) for d in l])]"
    },
    "question_id": 9427163
  },
  {
    "question": {
      "en": "convert a binary `b8` to a float number"
    },
    "mr": {
      "python": "struct.unpack('d', b8)[0]"
    },
    "question_id": 8751653
  },
  {
    "question": {
      "en": "print two numbers `10` and `20` using string formatting"
    },
    "mr": {
      "python": "\"\"\"{0} {1}\"\"\".format(10, 20)"
    },
    "question_id": 17895835
  },
  {
    "question": {
      "en": "randomly switch letters' cases in string `s`"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(x.upper() if random.randint(0, 1) else x for x in s)"
    },
    "question_id": 8344905
  },
  {
    "question": {
      "en": "find all `owl:Class` tags by parsing xml with namespace"
    },
    "mr": {
      "python": "root.findall('{http://www.w3.org/2002/07/owl#}Class')"
    },
    "question_id": 14853243
  },
  {
    "question": {
      "en": "Copy list `old_list` and name it `new_list`"
    },
    "mr": {
      "python": "new_list = [x[:] for x in old_list]"
    },
    "question_id": 28684154
  },
  {
    "question": {
      "en": "get the directory name of `path`"
    },
    "mr": {
      "python": "os.path.dirname(path)"
    },
    "question_id": 5137497
  },
  {
    "question": {
      "en": "sort dictionary of lists `myDict` by the third item in each list"
    },
    "mr": {
      "python": "sorted(list(myDict.items()), key=lambda e: e[1][2])"
    },
    "question_id": 1217251
  },
  {
    "question": {
      "en": "sort array `arr` in ascending order by values of the 3rd column"
    },
    "mr": {
      "python": "arr[arr[:, (2)].argsort()]"
    },
    "question_id": 10078470
  },
  {
    "question": {
      "en": "destruct elements of list `[1, 2, 3]` to variables `a`, `b` and `c`"
    },
    "mr": {
      "python": "a, b, c = [1, 2, 3]"
    },
    "question_id": 19300174
  },
  {
    "question": {
      "en": "find the index of element closest to number 11.5 in list `a`"
    },
    "mr": {
      "python": "min(enumerate(a), key=lambda x: abs(x[1] - 11.5))"
    },
    "question_id": 9706041
  },
  {
    "question": {
      "en": "get current time"
    },
    "mr": {
      "python": "datetime.datetime.time(datetime.datetime.now())"
    },
    "question_id": 415511
  },
  {
    "question": {
      "en": "Split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind"
    },
    "mr": {
      "python": "re.split('(?<=[\\\\.\\\\?!]) ', text)"
    },
    "question_id": 5801945
  },
  {
    "question": {
      "en": "Create a tuple `t` containing first element of each tuple in tuple `s`"
    },
    "mr": {
      "python": "t = tuple(x[0] for x in s)"
    },
    "question_id": 2054416
  },
  {
    "question": {
      "en": "Get all indexes of a letter `e` from a string `word`"
    },
    "mr": {
      "python": "[index for index, letter in enumerate(word) if letter == 'e']"
    },
    "question_id": 7658932
  },
  {
    "question": {
      "en": "get list of n next values of a generator `it`"
    },
    "mr": {
      "python": "list(itertools.islice(it, 0, n, 1))"
    },
    "question_id": 4152376
  },
  {
    "question": {
      "en": "dropping all columns named 'a' from a multiindex 'df', across all level."
    },
    "mr": {
      "python": "df.drop('a', level=1, axis=1)"
    },
    "question_id": 22397058
  },
  {
    "question": {
      "en": "get the path of Python executable under windows"
    },
    "mr": {
      "python": "os.path.dirname(sys.executable)"
    },
    "question_id": 647515
  },
  {
    "question": {
      "en": "pandas: change all the values of a column 'Date' into \"int(str(x)[-4:])\""
    },
    "mr": {
      "python": "df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))"
    },
    "question_id": 12604909
  },
  {
    "question": {
      "en": "get the sum of values associated with the key \u2018success\u2019 for a list of dictionaries `s`"
    },
    "mr": {
      "python": "sum(d['success'] for d in s)"
    },
    "question_id": 35269374
  },
  {
    "question": {
      "en": "convert list of tuples to multiple lists in Python"
    },
    "mr": {
      "python": "zip(*[(1, 2), (3, 4), (5, 6)])"
    },
    "question_id": 8081545
  },
  {
    "question": {
      "en": "write dataframe `df` to csv file `filename` with dates formatted as yearmonthday  `%Y%m%d`"
    },
    "mr": {
      "python": "df.to_csv(filename, date_format='%Y%m%d')"
    },
    "question_id": 13999850
  },
  {
    "question": {
      "en": "get the indices of tuples in list of tuples `L` where the first value is 53"
    },
    "mr": {
      "python": "[i for i, v in enumerate(L) if v[0] == 53]"
    },
    "question_id": 2917372
  },
  {
    "question": {
      "en": "execute os command `my_cmd`"
    },
    "mr": {
      "python": "os.system(my_cmd)"
    },
    "question_id": 4965159
  },
  {
    "question": {
      "en": "get index of character 'b' in list '['a', 'b']'"
    },
    "mr": {
      "python": "['a', 'b'].index('b')"
    },
    "question_id": 3847472
  },
  {
    "question": {
      "en": "apply logical operator 'AND' to all elements in list `a_list`"
    },
    "mr": {
      "python": "all(a_list)"
    },
    "question_id": 1790520
  },
  {
    "question": {
      "en": "replace string 'in.' with ' in. ' in dataframe `df` column 'a'"
    },
    "mr": {
      "python": "df['a'] = df['a'].str.replace('in.', ' in. ')"
    },
    "question_id": 36296993
  },
  {
    "question": {
      "en": "get multiple integer values from a string 'string1'"
    },
    "mr": {
      "python": "map(int, re.findall('\\\\d+', string1))"
    },
    "question_id": 11339210
  },
  {
    "question": {
      "en": "inherit from class `Executive`"
    },
    "mr": {
      "python": "super(Executive, self).__init__(*args)"
    },
    "question_id": 16128833
  },
  {
    "question": {
      "en": "Selenium `driver` click a hyperlink with the pattern \"a[href^='javascript']\""
    },
    "mr": {
      "python": "driver.find_element_by_css_selector(\"a[href^='javascript']\").click()"
    },
    "question_id": 23931444
  },
  {
    "question": {
      "en": "run command 'command -flags arguments &' on command line tools as separate processes"
    },
    "mr": {
      "python": "subprocess.call('command -flags arguments &', shell=True)"
    },
    "question_id": 9554544
  },
  {
    "question": {
      "en": "set the current working directory to 'c:\\\\Users\\\\uname\\\\desktop\\\\python'"
    },
    "mr": {
      "python": "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"
    },
    "question_id": 1810743
  },
  {
    "question": {
      "en": "call a function with argument list `args`"
    },
    "mr": {
      "python": "func(*args)"
    },
    "question_id": 817087
  },
  {
    "question": {
      "en": "remove dictionary from list `a` if the value associated with its key 'link' is in list `b`"
    },
    "mr": {
      "python": "a = [x for x in a if x['link'] not in b]"
    },
    "question_id": 42260840
  },
  {
    "question": {
      "en": "set columns `['race_date', 'track_code', 'race_number']` as indexes in dataframe `rdata`"
    },
    "mr": {
      "python": "rdata.set_index(['race_date', 'track_code', 'race_number'])"
    },
    "question_id": 18071222
  },
  {
    "question": {
      "en": "Print a string `value` with string formatting"
    },
    "mr": {
      "python": "print('Value is \"{}\"'.format(value))"
    },
    "question_id": 28669459
  },
  {
    "question": {
      "en": "sort list of lists `L` by the second item in each list"
    },
    "mr": {
      "python": "L.sort(key=operator.itemgetter(1))"
    },
    "question_id": 5201191
  },
  {
    "question": {
      "en": "check if date `yourdatetime` is equal to today's date"
    },
    "mr": {
      "python": "yourdatetime.date() == datetime.today().date()"
    },
    "question_id": 6407362
  },
  {
    "question": {
      "en": "get indexes of the largest `2` values from a list `a` using itemgetter"
    },
    "mr": {
      "python": "zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]"
    },
    "question_id": 13070461
  },
  {
    "question": {
      "en": "remove duplicated items from list of lists `testdata`"
    },
    "mr": {
      "python": "list(map(list, set(map(lambda i: tuple(i), testdata))))"
    },
    "question_id": 3724551
  },
  {
    "question": {
      "en": "convert list `lst` of key, value pairs into a dictionary"
    },
    "mr": {
      "python": "dict([(e[0], int(e[1])) for e in lst])"
    },
    "question_id": 33824334
  },
  {
    "question": {
      "en": "update the `globals()` dictionary with the contents of the `vars(args)` dictionary"
    },
    "mr": {
      "python": "globals().update(vars(args))"
    },
    "question_id": 8306171
  },
  {
    "question": {
      "en": "get a numpy array that contains the element wise minimum of three 3x1 arrays"
    },
    "mr": {
      "python": "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"
    },
    "question_id": 39277638
  },
  {
    "question": {
      "en": "get os name"
    },
    "mr": {
      "python": "import platform\nplatform.system()"
    },
    "question_id": 1854
  },
  {
    "question": {
      "en": "sum the product of elements of two lists named `a` and `b`"
    },
    "mr": {
      "python": "sum(x * y for x, y in list(zip(a, b)))"
    },
    "question_id": 41821112
  },
  {
    "question": {
      "en": "get everything after last slash in a url stored in variable 'url'"
    },
    "mr": {
      "python": "url.rsplit('/', 1)[-1]"
    },
    "question_id": 7253803
  },
  {
    "question": {
      "en": "convert a list with string `['1', '2', '3']` into list with integers"
    },
    "mr": {
      "python": "map(int, ['1', '2', '3'])"
    },
    "question_id": 2424412
  },
  {
    "question": {
      "en": "get second array column length of array `a`"
    },
    "mr": {
      "python": "a.shape[1]"
    },
    "question_id": 7670226
  },
  {
    "question": {
      "en": "remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats"
    },
    "mr": {
      "python": "df[df.columns[1:]].replace('[\\\\$,]', '', regex=True).astype(float)"
    },
    "question_id": 32464280
  },
  {
    "question": {
      "en": "take screenshot 'screen.png' on mac os x"
    },
    "mr": {
      "python": "os.system('screencapture screen.png')"
    },
    "question_id": 4524723
  },
  {
    "question": {
      "en": "How to erase the file contents of text file in Python?"
    },
    "mr": {
      "python": "open('file.txt', 'w').close()"
    },
    "question_id": 2769061
  },
  {
    "question": {
      "en": "get logical xor of `a` and `b`"
    },
    "mr": {
      "python": "((a and (not b)) or ((not a) and b))"
    },
    "question_id": 432842
  },
  {
    "question": {
      "en": "replace string ' and ' in string `stuff` with character '/'"
    },
    "mr": {
      "python": "stuff.replace(' and ', '/')"
    },
    "question_id": 10037742
  },
  {
    "question": {
      "en": "append string `foo` to list `list`"
    },
    "mr": {
      "python": "list.append('foo')"
    },
    "question_id": 8243188
  },
  {
    "question": {
      "en": "get index of the first biggest element in list `a`"
    },
    "mr": {
      "python": "a.index(max(a))"
    },
    "question_id": 3989016
  },
  {
    "question": {
      "en": "Get absolute folder path and filename for file `existGDBPath `"
    },
    "mr": {
      "python": "os.path.split(os.path.abspath(existGDBPath))"
    },
    "question_id": 17057544
  },
  {
    "question": {
      "en": "reverse sort items in default dictionary `cityPopulation` by the third item in each key's list of values"
    },
    "mr": {
      "python": "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"
    },
    "question_id": 10194713
  },
  {
    "question": {
      "en": "substitute multiple whitespace with single whitespace in string `mystring`"
    },
    "mr": {
      "python": "\"\"\" \"\"\".join(mystring.split())"
    },
    "question_id": 2077897
  },
  {
    "question": {
      "en": "merge lists `list_a` and `list_b` into a list of tuples"
    },
    "mr": {
      "python": "zip(list_a, list_b)"
    },
    "question_id": 2407398
  },
  {
    "question": {
      "en": "find all files with extension '.c' in directory `folder`"
    },
    "mr": {
      "python": "results += [each for each in os.listdir(folder) if each.endswith('.c')]"
    },
    "question_id": 3608411
  },
  {
    "question": {
      "en": "Join pandas data frame `frame_1` and `frame_2` with left join by `county_ID` and right join by `countyid`"
    },
    "mr": {
      "python": "pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')"
    },
    "question_id": 20375561
  },
  {
    "question": {
      "en": "Get Last Day of the month `month` in year `year`"
    },
    "mr": {
      "python": "calendar.monthrange(year, month)[1]"
    },
    "question_id": 42950
  },
  {
    "question": {
      "en": "convert a list of characters `['a', 'b', 'c', 'd']` into a string"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])"
    },
    "question_id": 4481724
  },
  {
    "question": {
      "en": "getting every possible combination of two elements in a list"
    },
    "mr": {
      "python": "list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))"
    },
    "question_id": 5106228
  },
  {
    "question": {
      "en": "throw a ValueError with message 'represents a hidden bug, do not catch this'"
    },
    "mr": {
      "python": "raise ValueError('represents a hidden bug, do not catch this')"
    },
    "question_id": 2052390
  },
  {
    "question": {
      "en": "round 1123.456789 to be an integer"
    },
    "mr": {
      "python": "print(round(1123.456789, -1))"
    },
    "question_id": 3348825
  },
  {
    "question": {
      "en": "print float `a` with two decimal points"
    },
    "mr": {
      "python": "print(('{0:.2f}'.format(a)))"
    },
    "question_id": 455612
  },
  {
    "question": {
      "en": "convert a binary '-0b1110' to a float number"
    },
    "mr": {
      "python": "float(int('-0b1110', 0))"
    },
    "question_id": 8751653
  },
  {
    "question": {
      "en": "How can I split and parse a string in Python?"
    },
    "mr": {
      "python": "\"\"\"2.7.0_bf4fda703454\"\"\".split('_')"
    },
    "question_id": 5749195
  },
  {
    "question": {
      "en": "sort list `xs` based on the length of its elements"
    },
    "mr": {
      "python": "print(sorted(xs, key=len))"
    },
    "question_id": 2587402
  },
  {
    "question": {
      "en": "unpack the arguments out of list `params` to function `some_func`"
    },
    "mr": {
      "python": "some_func(*params)"
    },
    "question_id": 4979542
  },
  {
    "question": {
      "en": "Convert a string into a list"
    },
    "mr": {
      "python": "list('hello')"
    },
    "question_id": 7522533
  },
  {
    "question": {
      "en": "sort a dictionary `d` by key"
    },
    "mr": {
      "python": "OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))"
    },
    "question_id": 9001509
  },
  {
    "question": {
      "en": "Convert JSON array `array` to Python object"
    },
    "mr": {
      "python": "data = json.loads(array)"
    },
    "question_id": 10973614
  },
  {
    "question": {
      "en": "create a list `result` containing elements form list `list_a` if first element of list `list_a` is in list `list_b`"
    },
    "mr": {
      "python": "result = [x for x in list_a if x[0] in list_b]"
    },
    "question_id": 18448469
  },
  {
    "question": {
      "en": "recursively remove folder `name`"
    },
    "mr": {
      "python": "os.removedirs(name)"
    },
    "question_id": 6996603
  },
  {
    "question": {
      "en": "concatenate '-' in between characters of string `str`"
    },
    "mr": {
      "python": "re.sub('(?<=.)(?=.)', '-', str)"
    },
    "question_id": 27457970
  },
  {
    "question": {
      "en": "find the mean of elements in list `l`"
    },
    "mr": {
      "python": "sum(l) / float(len(l))"
    },
    "question_id": 9039961
  },
  {
    "question": {
      "en": "get a new string including the first two characters of string `x`"
    },
    "mr": {
      "python": "x[:2]"
    },
    "question_id": 663171
  },
  {
    "question": {
      "en": "Extract values not equal to 0 from numpy array `a`"
    },
    "mr": {
      "python": "a[a != 0]"
    },
    "question_id": 5927180
  },
  {
    "question": {
      "en": "add multiple columns `hour`, `weekday`, `weeknum` to pandas data frame `df` from lambda function `lambdafunc`"
    },
    "mr": {
      "python": "df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)"
    },
    "question_id": 30026815
  },
  {
    "question": {
      "en": "Evaluate a nested dictionary `myobject.id.number` to get `number` if `myobject` is present with getattr"
    },
    "mr": {
      "python": "getattr(getattr(myobject, 'id', None), 'number', None)"
    },
    "question_id": 14925239
  },
  {
    "question": {
      "en": "gets the `n` th-to-last element in list `some_list`"
    },
    "mr": {
      "python": "some_list[(- n)]"
    },
    "question_id": 930397
  },
  {
    "question": {
      "en": "find rows matching `(0,1)` in a 2 dimensional numpy array `vals`"
    },
    "mr": {
      "python": "np.where((vals == (0, 1)).all(axis=1))"
    },
    "question_id": 25823608
  },
  {
    "question": {
      "en": "Reset the indexes of a pandas data frame"
    },
    "mr": {
      "python": "df2 = df.reset_index()"
    },
    "question_id": 11621165
  },
  {
    "question": {
      "en": "From a list of strings `my_list`, remove the values that contains numbers."
    },
    "mr": {
      "python": "[x for x in my_list if not any(c.isdigit() for c in x)]"
    },
    "question_id": 16084642
  },
  {
    "question": {
      "en": "get a list each value `i` in the implicit tuple `range(3)`"
    },
    "mr": {
      "python": "list(i for i in range(3))"
    },
    "question_id": 41127441
  },
  {
    "question": {
      "en": "manually throw/raise a `ValueError` exception with the message 'A very specific bad thing happened'"
    },
    "mr": {
      "python": "raise ValueError('A very specific bad thing happened')"
    },
    "question_id": 2052390
  },
  {
    "question": {
      "en": "reverse a list `array`"
    },
    "mr": {
      "python": "reversed(array)"
    },
    "question_id": 3940128
  },
  {
    "question": {
      "en": "get name of primary field `name` of django model `CustomPK`"
    },
    "mr": {
      "python": "CustomPK._meta.pk.name"
    },
    "question_id": 13418405
  },
  {
    "question": {
      "en": "sum the product of each two items at the same index of list `a` and list `b`"
    },
    "mr": {
      "python": "sum(i * j for i, j in zip(a, b))"
    },
    "question_id": 41821112
  },
  {
    "question": {
      "en": "Log message 'test' on the root logger."
    },
    "mr": {
      "python": "logging.info('test')"
    },
    "question_id": 18292500
  },
  {
    "question": {
      "en": "divide the values with same keys of two dictionary `d1` and `d2`"
    },
    "mr": {
      "python": "{k: (float(d2[k]) / d1[k]) for k in d2}"
    },
    "question_id": 11840111
  },
  {
    "question": {
      "en": "Summing across rows of Pandas Dataframe"
    },
    "mr": {
      "python": "df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()"
    },
    "question_id": 17166601
  },
  {
    "question": {
      "en": "remove the element in list `a` with index 1"
    },
    "mr": {
      "python": "a.pop(1)"
    },
    "question_id": 627435
  },
  {
    "question": {
      "en": "convert binary string to numpy array"
    },
    "mr": {
      "python": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='>f4')"
    },
    "question_id": 11760095
  },
  {
    "question": {
      "en": "count the number of integers in list `a`"
    },
    "mr": {
      "python": "sum(isinstance(x, int) for x in a)"
    },
    "question_id": 25355705
  },
  {
    "question": {
      "en": "terminate the program"
    },
    "mr": {
      "python": "sys.exit()"
    },
    "question_id": 73663
  },
  {
    "question": {
      "en": "creating a list of dictionaries [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"
    },
    "mr": {
      "python": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"
    },
    "question_id": 35883459
  },
  {
    "question": {
      "en": "split string 'happy_hats_for_cats' using string '_for_'"
    },
    "mr": {
      "python": "re.split('_for_', 'happy_hats_for_cats')"
    },
    "question_id": 34410358
  },
  {
    "question": {
      "en": "find maximum with lookahead = 4 in a list `arr`"
    },
    "mr": {
      "python": "[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]"
    },
    "question_id": 34543513
  },
  {
    "question": {
      "en": "Find the greatest number in set `(1, 2, 3)`"
    },
    "mr": {
      "python": "print(max(1, 2, 3))"
    },
    "question_id": 3090175
  },
  {
    "question": {
      "en": "Create a dictionary `d` from list `iterable`"
    },
    "mr": {
      "python": "d = {key: value for (key, value) in iterable}"
    },
    "question_id": 1747817
  },
  {
    "question": {
      "en": "get line count of file `filename`"
    },
    "mr": {
      "python": "def bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines"
    },
    "question_id": 845058
  },
  {
    "question": {
      "en": "convert a list of integers into a single integer"
    },
    "mr": {
      "python": "r = int(''.join(map(str, x)))"
    },
    "question_id": 41067960
  },
  {
    "question": {
      "en": "Configure url in django properly"
    },
    "mr": {
      "python": "url('^', include('sms.urls')),"
    },
    "question_id": 32458541
  },
  {
    "question": {
      "en": "remove all words which contains number from a string `words` using regex"
    },
    "mr": {
      "python": "re.sub('\\\\w*\\\\d\\\\w*', '', words).strip()"
    },
    "question_id": 18082130
  },
  {
    "question": {
      "en": "check if type of variable `s` is a string"
    },
    "mr": {
      "python": "isinstance(s, str)"
    },
    "question_id": 4843173
  },
  {
    "question": {
      "en": "match regex pattern 'TAA(?:[ATGC]{3})+?TAA' on string `seq`"
    },
    "mr": {
      "python": "re.findall('TAA(?:[ATGC]{3})+?TAA', seq)"
    },
    "question_id": 9618050
  },
  {
    "question": {
      "en": "convert an int 65 to hex string"
    },
    "mr": {
      "python": "hex(65)"
    },
    "question_id": 2269827
  },
  {
    "question": {
      "en": "split string `s` into float values and write sum to `total`"
    },
    "mr": {
      "python": "total = sum(float(item) for item in s.split(','))"
    },
    "question_id": 21212706
  },
  {
    "question": {
      "en": "separate numbers and characters in string '20M10000N80M'"
    },
    "mr": {
      "python": "re.findall('([0-9]+|[A-Z])', '20M10000N80M')"
    },
    "question_id": 15103484
  },
  {
    "question": {
      "en": "converting byte string `c` in unicode string"
    },
    "mr": {
      "python": "c.decode('unicode_escape')"
    },
    "question_id": 13837848
  },
  {
    "question": {
      "en": "get user input using message 'Enter name here: ' and insert it to the first placeholder in string 'Hello, {0}, how do you do?'"
    },
    "mr": {
      "python": "print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))"
    },
    "question_id": 7173850
  },
  {
    "question": {
      "en": "copy list `old_list` as `new_list`"
    },
    "mr": {
      "python": "new_list = copy.copy(old_list)"
    },
    "question_id": 2612802
  },
  {
    "question": {
      "en": "convert string representation `s2` of binary string rep of integer to floating point number"
    },
    "mr": {
      "python": "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"
    },
    "question_id": 8751653
  },
  {
    "question": {
      "en": "print float `a` with two decimal points"
    },
    "mr": {
      "python": "print(('{0:.2f}'.format(round(a, 2))))"
    },
    "question_id": 455612
  },
  {
    "question": {
      "en": "convert a set of tuples `queryresult` to a string `emaillist`"
    },
    "mr": {
      "python": "emaillist = '\\n'.join(item[0] for item in queryresult)"
    },
    "question_id": 8704952
  },
  {
    "question": {
      "en": "Get all the values in key `gold` summed from a list of dictionary `myLIst`"
    },
    "mr": {
      "python": "sum(item['gold'] for item in myLIst)"
    },
    "question_id": 11692613
  },
  {
    "question": {
      "en": "upload binary file `myfile.txt` with ftplib"
    },
    "mr": {
      "python": "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))"
    },
    "question_id": 2911754
  },
  {
    "question": {
      "en": "list all files of a directory \"somedirectory\""
    },
    "mr": {
      "python": "os.listdir('somedirectory')"
    },
    "question_id": 3207219
  },
  {
    "question": {
      "en": "assign float 9.8 to variable `GRAVITY`"
    },
    "mr": {
      "python": "GRAVITY = 9.8"
    },
    "question_id": 18224991
  },
  {
    "question": {
      "en": "find the index of sub string 's' in string `str` starting from index 11"
    },
    "mr": {
      "python": "str.find('s', 11)"
    },
    "question_id": 674764
  },
  {
    "question": {
      "en": "get two random records from model 'MyModel' in Django"
    },
    "mr": {
      "python": "MyModel.objects.order_by('?')[:2]"
    },
    "question_id": 1731346
  },
  {
    "question": {
      "en": "encode string `s` to utf-8 code"
    },
    "mr": {
      "python": "s.encode('utf8')"
    },
    "question_id": 9339630
  },
  {
    "question": {
      "en": "decode url `url` from UTF-16 code to UTF-8 code"
    },
    "mr": {
      "python": "urllib.parse.unquote(url).decode('utf8')"
    },
    "question_id": 300445
  },
  {
    "question": {
      "en": "round number `value` up to `significantDigit` decimal places"
    },
    "mr": {
      "python": "round(value, significantDigit)"
    },
    "question_id": 31818050
  },
  {
    "question": {
      "en": "Move the cursor of file pointer `fh1` at the end of the file."
    },
    "mr": {
      "python": "fh1.seek(2)"
    },
    "question_id": 14332141
  },
  {
    "question": {
      "en": "get  value at index `[2, 0]` in dataframe `df`"
    },
    "mr": {
      "python": "df.iloc[2, 0]"
    },
    "question_id": 29902714
  },
  {
    "question": {
      "en": "round number 1.0005 up to 3 decimal places"
    },
    "mr": {
      "python": "round(1.0005, 3)"
    },
    "question_id": 31818050
  },
  {
    "question": {
      "en": "Filter duplicate entries w.r.t. value in 'id' from a list of dictionaries 'L'"
    },
    "mr": {
      "python": "list(dict((x['id'], x) for x in L).values())"
    },
    "question_id": 11114358
  },
  {
    "question": {
      "en": "find the index of sub string 'cc' in string 'sdfasdf'"
    },
    "mr": {
      "python": "'sdfasdf'.index('cc')"
    },
    "question_id": 674764
  },
  {
    "question": {
      "en": "remove index 2 element from a list `my_list`"
    },
    "mr": {
      "python": "my_list.pop(2)"
    },
    "question_id": 9754729
  },
  {
    "question": {
      "en": "get the last element in list `alist`"
    },
    "mr": {
      "python": "alist[(-1)]"
    },
    "question_id": 930397
  },
  {
    "question": {
      "en": "reverse a UTF-8 string 'a'"
    },
    "mr": {
      "python": "b = a.decode('utf8')[::-1].encode('utf8')"
    },
    "question_id": 34015615
  },
  {
    "question": {
      "en": "run the code contained in string \"print('Hello')\""
    },
    "mr": {
      "python": "eval(\"print('Hello')\")"
    },
    "question_id": 1015142
  },
  {
    "question": {
      "en": "create a django query for a list of values `1, 4, 7`"
    },
    "mr": {
      "python": "Blog.objects.filter(pk__in=[1, 4, 7])"
    },
    "question_id": 9304908
  },
  {
    "question": {
      "en": "delete 1st, 2nd and 4th columns from dataframe `df`"
    },
    "mr": {
      "python": "df.drop(df.columns[[0, 1, 3]], axis=1)"
    },
    "question_id": 13411544
  },
  {
    "question": {
      "en": "transform time series `df` into a pivot table aggregated by column 'Close' using column `df.index.date` as index and values of column `df.index.time` as columns"
    },
    "mr": {
      "python": "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"
    },
    "question_id": 28664103
  },
  {
    "question": {
      "en": "Find next sibling element in Python Selenium?"
    },
    "mr": {
      "python": "driver.find_element_by_xpath(\"//p[@id, 'one']/following-sibling::p\")"
    },
    "question_id": 23887592
  },
  {
    "question": {
      "en": "shutdown a computer using subprocess"
    },
    "mr": {
      "python": "subprocess.call(['shutdown', '/s'])"
    },
    "question_id": 14764126
  },
  {
    "question": {
      "en": "change the background colour of the button `pushbutton` to red"
    },
    "mr": {
      "python": "self.pushButton.setStyleSheet('background-color: red')"
    },
    "question_id": 20668060
  },
  {
    "question": {
      "en": "drop rows whose index value in list `[1, 3]` in dataframe `df`"
    },
    "mr": {
      "python": "df.drop(df.index[[1, 3]], inplace=True)"
    },
    "question_id": 14661701
  },
  {
    "question": {
      "en": "group a list of ints into a list of tuples of each 2 elements"
    },
    "mr": {
      "python": "my_new_list = zip(my_list[0::2], my_list[1::2])"
    },
    "question_id": 15852295
  },
  {
    "question": {
      "en": "parse string `a` to float"
    },
    "mr": {
      "python": "float(a)"
    },
    "question_id": 379906
  },
  {
    "question": {
      "en": "get a request parameter `a` in jinja2"
    },
    "mr": {
      "python": "{{request.args.get('a')}}"
    },
    "question_id": 9647586
  },
  {
    "question": {
      "en": "parse string '01-Jan-1995' into a datetime object using format '%d-%b-%Y'"
    },
    "mr": {
      "python": "datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')"
    },
    "question_id": 1713594
  },
  {
    "question": {
      "en": "Convert hex string `s` to integer"
    },
    "mr": {
      "python": "int(s, 16)"
    },
    "question_id": 209513
  },
  {
    "question": {
      "en": "sort list of date strings 'd'"
    },
    "mr": {
      "python": "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))"
    },
    "question_id": 17627531
  },
  {
    "question": {
      "en": "read line by line from stdin"
    },
    "mr": {
      "python": "for line in fileinput.input():\n    pass"
    },
    "question_id": 1450393
  },
  {
    "question": {
      "en": "join elements of each tuple in list `a` into one string"
    },
    "mr": {
      "python": "[''.join(x) for x in a]"
    },
    "question_id": 35015693
  },
  {
    "question": {
      "en": "convert date string `s` in format pattern '%d/%m/%Y' into a timestamp"
    },
    "mr": {
      "python": "time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())"
    },
    "question_id": 9637838
  },
  {
    "question": {
      "en": "get all characters in string 'foobar' up to the fourth index"
    },
    "mr": {
      "python": "\"\"\"foobar\"\"\"[:4]"
    },
    "question_id": 8247792
  },
  {
    "question": {
      "en": "Unpack each value in list `x` to its placeholder '%' in string '%.2f'"
    },
    "mr": {
      "python": "\"\"\", \"\"\".join(['%.2f'] * len(x))"
    },
    "question_id": 7568627
  },
  {
    "question": {
      "en": "How do I get rid of Python Tkinter root window?"
    },
    "mr": {
      "python": "root.destroy()"
    },
    "question_id": 1406145
  },
  {
    "question": {
      "en": "Write a regex statement to match 'lol' to 'lolllll'."
    },
    "mr": {
      "python": "re.sub('l+', 'l', 'lollll')"
    },
    "question_id": 3895874
  },
  {
    "question": {
      "en": "generate six unique random numbers in the range of 1 to 49."
    },
    "mr": {
      "python": "random.sample(range(1, 50), 6)"
    },
    "question_id": 13628725
  },
  {
    "question": {
      "en": "remove all non -word, -whitespace, or -apostrophe characters from string `doesn't this mean it -technically- works?`"
    },
    "mr": {
      "python": "re.sub(\"[^\\\\w' ]\", '', \"doesn't this mean it -technically- works?\")"
    },
    "question_id": 11403474
  },
  {
    "question": {
      "en": "Create numpy array of `5` numbers starting from `1` with interval of `3`"
    },
    "mr": {
      "python": "print(np.linspace(1, 3, num=5))"
    },
    "question_id": 31143732
  },
  {
    "question": {
      "en": "stack two dataframes next to each other in pandas"
    },
    "mr": {
      "python": "pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)"
    },
    "question_id": 13079852
  },
  {
    "question": {
      "en": "Filter a dictionary `d` to remove keys with value 'None' and replace other values with 'updated'"
    },
    "mr": {
      "python": "dict((k, 'updated') for k, v in d.items() if v != 'None')"
    },
    "question_id": 4484690
  },
  {
    "question": {
      "en": "drop a single subcolumn 'a' in column 'col1' from a dataframe `df`"
    },
    "mr": {
      "python": "df.drop(('col1', 'a'), axis=1)"
    },
    "question_id": 22397058
  },
  {
    "question": {
      "en": "remove all characters from string `stri` upto character 'I'"
    },
    "mr": {
      "python": "re.sub('.*I', 'I', stri)"
    },
    "question_id": 30945784
  },
  {
    "question": {
      "en": "Remove string \"1\" from string `string`"
    },
    "mr": {
      "python": "string.replace('1', '')"
    },
    "question_id": 3939361
  },
  {
    "question": {
      "en": "create datetime object from \"16sep2012\""
    },
    "mr": {
      "python": "datetime.datetime.strptime('16Sep2012', '%d%b%Y')"
    },
    "question_id": 18684397
  },
  {
    "question": {
      "en": "pass a list of parameters `((1, 2, 3),) to sql queue 'SELECT * FROM table WHERE column IN %s;'"
    },
    "mr": {
      "python": "cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))"
    },
    "question_id": 8671702
  },
  {
    "question": {
      "en": "sum the values in each row of every two adjacent columns in dataframe `df`"
    },
    "mr": {
      "python": "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"
    },
    "question_id": 40660956
  },
  {
    "question": {
      "en": "check if key 'stackoverflow' and key 'google' are presented in dictionary `sites`"
    },
    "mr": {
      "python": "set(['stackoverflow', 'google']).issubset(sites)"
    },
    "question_id": 2813806
  },
  {
    "question": {
      "en": "create a list containing digits of number 123 as its elements"
    },
    "mr": {
      "python": "list(str(123))"
    },
    "question_id": 13905936
  },
  {
    "question": {
      "en": "Delete an item with key \"key\" from `mydict`"
    },
    "mr": {
      "python": "mydict.pop('key', None)"
    },
    "question_id": 15411107
  },
  {
    "question": {
      "en": "sort list `your_list` by the `anniversary_score` attribute of each object"
    },
    "mr": {
      "python": "your_list.sort(key=lambda x: x.anniversary_score)"
    },
    "question_id": 17038639
  },
  {
    "question": {
      "en": "removing control characters from a string `s`"
    },
    "mr": {
      "python": "return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')"
    },
    "question_id": 4324790
  },
  {
    "question": {
      "en": "remove column by index `[:, 0:2]` in dataframe `df`"
    },
    "mr": {
      "python": "df = df.ix[:, 0:2]"
    },
    "question_id": 19973489
  },
  {
    "question": {
      "en": "split string 'fooxyzbar' based on case-insensitive matching using string 'XYZ'"
    },
    "mr": {
      "python": "re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')"
    },
    "question_id": 8993904
  },
  {
    "question": {
      "en": "read line by line from stdin"
    },
    "mr": {
      "python": "for line in sys.stdin:\n    pass"
    },
    "question_id": 1450393
  },
  {
    "question": {
      "en": "split a string 's' by space while ignoring spaces within square braces and quotes."
    },
    "mr": {
      "python": "re.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', s)"
    },
    "question_id": 234512
  },
  {
    "question": {
      "en": "read a binary file 'test/test.pdf'"
    },
    "mr": {
      "python": "f = open('test/test.pdf', 'rb')"
    },
    "question_id": 2497027
  },
  {
    "question": {
      "en": "do a `left` merge of dataframes `x` and `y` on the column `state` and sort by `index`"
    },
    "mr": {
      "python": "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')"
    },
    "question_id": 20206615
  },
  {
    "question": {
      "en": "django create a foreign key column `user` and link it to table 'User'"
    },
    "mr": {
      "python": "user = models.ForeignKey('User', unique=True)"
    },
    "question_id": 19433630
  },
  {
    "question": {
      "en": "input a tuple of integers from user"
    },
    "mr": {
      "python": "tuple(int(x.strip()) for x in input().split(','))"
    },
    "question_id": 2233917
  },
  {
    "question": {
      "en": "Calling an external command \"some_command with args\""
    },
    "mr": {
      "python": "stream = os.popen('some_command with args')"
    },
    "question_id": 89228
  },
  {
    "question": {
      "en": "Remove the string value `item` from a list of strings `my_sequence`"
    },
    "mr": {
      "python": "[item for item in my_sequence if item != 'item']"
    },
    "question_id": 14961014
  },
  {
    "question": {
      "en": "replace character 'a' with character 'e' and character 's' with character '3' in file `contents`"
    },
    "mr": {
      "python": "newcontents = contents.replace('a', 'e').replace('s', '3')"
    },
    "question_id": 10562778
  },
  {
    "question": {
      "en": "lowercase keys and values in dictionary `{'My Key': 'My Value'}`"
    },
    "mr": {
      "python": "{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}"
    },
    "question_id": 764235
  },
  {
    "question": {
      "en": "Change data type of data in column 'grade' of dataframe `data_df` into float and then to int"
    },
    "mr": {
      "python": "data_df['grade'] = data_df['grade'].astype(float).astype(int)"
    },
    "question_id": 40707158
  },
  {
    "question": {
      "en": "check if string `test.mp3` ends with one of the strings from a tuple `('.mp3', '.avi')`"
    },
    "mr": {
      "python": "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"
    },
    "question_id": 18351951
  },
  {
    "question": {
      "en": "round 123 to 100"
    },
    "mr": {
      "python": "int(round(123, -2))"
    },
    "question_id": 2742784
  },
  {
    "question": {
      "en": "convert a 1d `A` array to a 2d array `B`"
    },
    "mr": {
      "python": "B = np.reshape(A, (-1, 2))"
    },
    "question_id": 12575421
  },
  {
    "question": {
      "en": "How can I resize the root window in Tkinter?"
    },
    "mr": {
      "python": "root.geometry('500x500')"
    },
    "question_id": 2261011
  },
  {
    "question": {
      "en": "write pandas dataframe `df` to the file 'c:\\\\data\\\\t.csv' without row names"
    },
    "mr": {
      "python": "df.to_csv('c:\\\\data\\\\t.csv', index=False)"
    },
    "question_id": 30605909
  },
  {
    "question": {
      "en": "Get a string with string formatting from dictionary `d`"
    },
    "mr": {
      "python": "\"\"\", \"\"\".join(['{}_{}'.format(k, v) for k, v in d.items()])"
    },
    "question_id": 17462994
  },
  {
    "question": {
      "en": "replace single quote character in string \"didn't\" with empty string ''"
    },
    "mr": {
      "python": "\"\"\"didn't\"\"\".replace(\"'\", '')"
    },
    "question_id": 3151146
  },
  {
    "question": {
      "en": "sort json `ips_data` by a key 'data_two'"
    },
    "mr": {
      "python": "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])"
    },
    "question_id": 34148637
  },
  {
    "question": {
      "en": "assign values to two variables, `var1` and `var2` from user input response to `'Enter two numbers here: ` split on whitespace"
    },
    "mr": {
      "python": "var1, var2 = input('Enter two numbers here: ').split()"
    },
    "question_id": 961263
  },
  {
    "question": {
      "en": "split string `string` on whitespaces using a generator"
    },
    "mr": {
      "python": "return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", string))"
    },
    "question_id": 3862010
  },
  {
    "question": {
      "en": "clear text from textarea 'foo' with selenium"
    },
    "mr": {
      "python": "driver.find_element_by_id('foo').clear()"
    },
    "question_id": 7732125
  },
  {
    "question": {
      "en": "remove a substring `suffix` from the end of string `text`"
    },
    "mr": {
      "python": "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]"
    },
    "question_id": 1038824
  },
  {
    "question": {
      "en": "Produce a string that is suitable as Unicode literal from string 'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'"
    },
    "mr": {
      "python": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.encode().decode('unicode-escape')"
    },
    "question_id": 30747705
  },
  {
    "question": {
      "en": "Set index equal to field 'TRX_DATE' in dataframe `df`"
    },
    "mr": {
      "python": "df = df.set_index(['TRX_DATE'])"
    },
    "question_id": 33565643
  },
  {
    "question": {
      "en": "get the path of the python module `amodule`"
    },
    "mr": {
      "python": "path = os.path.abspath(amodule.__file__)"
    },
    "question_id": 247770
  },
  {
    "question": {
      "en": "fetch all elements in a dictionary 'parent_dict' where the key is between the range of 2 to 4"
    },
    "mr": {
      "python": "dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)"
    },
    "question_id": 8654637
  },
  {
    "question": {
      "en": "how to uniqify a list of dict in python"
    },
    "mr": {
      "python": "[dict(y) for y in set(tuple(x.items()) for x in d)]"
    },
    "question_id": 6280978
  },
  {
    "question": {
      "en": "Get keys from a dictionary 'd' where the value is '1'."
    },
    "mr": {
      "python": "print([key for key, value in list(d.items()) if value == 1])"
    },
    "question_id": 24958010
  },
  {
    "question": {
      "en": "Initialize a pandas series object `s` with columns `['A', 'B', 'A1R', 'B2', 'AABB4']`"
    },
    "mr": {
      "python": "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"
    },
    "question_id": 39816795
  },
  {
    "question": {
      "en": "throw an assertion error with message \"Unexpected value of 'distance'!\", distance"
    },
    "mr": {
      "python": "raise AssertionError(\"Unexpected value of 'distance'!\", distance)"
    },
    "question_id": 2052390
  },
  {
    "question": {
      "en": "extract folder path from file path"
    },
    "mr": {
      "python": "os.path.dirname(os.path.abspath(existGDBPath))"
    },
    "question_id": 17057544
  },
  {
    "question": {
      "en": "convert numpy array into python list structure"
    },
    "mr": {
      "python": "np.array([[1, 2, 3], [4, 5, 6]]).tolist()"
    },
    "question_id": 1966207
  },
  {
    "question": {
      "en": "find the current directory"
    },
    "mr": {
      "python": "os.getcwd()"
    },
    "question_id": 5137497
  },
  {
    "question": {
      "en": "find the magnitude (length) squared of a vector `vf` field"
    },
    "mr": {
      "python": "np.einsum('...j,...j->...', vf, vf)"
    },
    "question_id": 19863964
  },
  {
    "question": {
      "en": "Convert a dictionary `dict` into a list with key and values as list items."
    },
    "mr": {
      "python": "[y for x in list(dict.items()) for y in x]"
    },
    "question_id": 11351874
  },
  {
    "question": {
      "en": "get equivalent week number from a date `2010/6/16` using  isocalendar"
    },
    "mr": {
      "python": "datetime.date(2010, 6, 16).isocalendar()[1]"
    },
    "question_id": 2600775
  },
  {
    "question": {
      "en": "select a substring of `s` beginning at `beginning` of length `LENGTH`"
    },
    "mr": {
      "python": "s = s[beginning:(beginning + LENGTH)]"
    },
    "question_id": 663171
  },
  {
    "question": {
      "en": "Reverse list `x`"
    },
    "mr": {
      "python": "x[::-1]"
    },
    "question_id": 10201977
  },
  {
    "question": {
      "en": "print a floating point number 2.345e-67 without any truncation"
    },
    "mr": {
      "python": "print('{:.100f}'.format(2.345e-67))"
    },
    "question_id": 20048987
  },
  {
    "question": {
      "en": "use operations like max/min within a row to a dataframe 'd' in pandas"
    },
    "mr": {
      "python": "d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)"
    },
    "question_id": 12376863
  },
  {
    "question": {
      "en": "revers correlating bits of integer `n`"
    },
    "mr": {
      "python": "int('{:08b}'.format(n)[::-1], 2)"
    },
    "question_id": 12681945
  },
  {
    "question": {
      "en": "Merge column  'word' in dataframe `df2` with column 'word' on dataframe `df1`"
    },
    "mr": {
      "python": "df1.merge(df2, how='left', on='word')"
    },
    "question_id": 42060144
  },
  {
    "question": {
      "en": "make a window `root` jump to the front"
    },
    "mr": {
      "python": "root.lift()"
    },
    "question_id": 1892339
  },
  {
    "question": {
      "en": "How do I sort a zipped list in Python?"
    },
    "mr": {
      "python": "zipped.sort(key=lambda t: t[1])"
    },
    "question_id": 7142227
  },
  {
    "question": {
      "en": "remove the last element in list `a`"
    },
    "mr": {
      "python": "a.pop()"
    },
    "question_id": 627435
  },
  {
    "question": {
      "en": "get the name of function `func` as a string"
    },
    "mr": {
      "python": "print(func.__name__)"
    },
    "question_id": 7142062
  },
  {
    "question": {
      "en": "strip the string `.txt` from anywhere in the string `Boat.txt.txt`"
    },
    "mr": {
      "python": "\"\"\"Boat.txt.txt\"\"\".replace('.txt', '')"
    },
    "question_id": 18723580
  },
  {
    "question": {
      "en": "convert the zip of range `(1, 5)` and range `(7, 11)` into a dictionary"
    },
    "mr": {
      "python": "dict(zip(list(range(1, 5)), list(range(7, 11))))"
    },
    "question_id": 18789262
  },
  {
    "question": {
      "en": "get the union of values in list of lists `result_list`"
    },
    "mr": {
      "python": "return list(set(itertools.chain(*result_list)))"
    },
    "question_id": 2151517
  },
  {
    "question": {
      "en": "Get all indexes of a list `a` where each value is greater than `2`"
    },
    "mr": {
      "python": "[i for i in range(len(a)) if a[i] > 2]"
    },
    "question_id": 7270321
  },
  {
    "question": {
      "en": "find the minimum value in a numpy array `arr` excluding 0"
    },
    "mr": {
      "python": "arr[arr != 0].min()"
    },
    "question_id": 11764260
  },
  {
    "question": {
      "en": "normalize the dataframe `df` along the rows"
    },
    "mr": {
      "python": "np.sqrt(np.square(df).sum(axis=1))"
    },
    "question_id": 18524112
  },
  {
    "question": {
      "en": "filter `Users` by field `userprofile` with level greater than or equal to `0`"
    },
    "mr": {
      "python": "User.objects.filter(userprofile__level__gte=0)"
    },
    "question_id": 10040143
  },
  {
    "question": {
      "en": "sort dataframe `df` based on column 'a' in ascending and column 'b' in descending"
    },
    "mr": {
      "python": "df.sort_values(['a', 'b'], ascending=[True, False])"
    },
    "question_id": 17141558
  },
  {
    "question": {
      "en": "django redirect to view 'Home.views.index'"
    },
    "mr": {
      "python": "redirect('Home.views.index')"
    },
    "question_id": 7284952
  },
  {
    "question": {
      "en": "Python: Convert a string to an integer"
    },
    "mr": {
      "python": "int('  23  ')"
    },
    "question_id": 2508861
  },
  {
    "question": {
      "en": "How to delete a character from a string using python?"
    },
    "mr": {
      "python": "newstr = oldstr.replace('M', '')"
    },
    "question_id": 3559559
  },
  {
    "question": {
      "en": "match regex pattern 'a*?bc*?' on string 'aabcc' with DOTALL enabled"
    },
    "mr": {
      "python": "re.findall('a*?bc*?', 'aabcc', re.DOTALL)"
    },
    "question_id": 9507819
  },
  {
    "question": {
      "en": "counting the number of true booleans in a python list `[True, True, False, False, False, True]`"
    },
    "mr": {
      "python": "sum([True, True, False, False, False, True])"
    },
    "question_id": 12765833
  },
  {
    "question": {
      "en": "create a dataframe `d` filled with zeros with indices from 0 to length of `data` and column names from `feature_list`"
    },
    "mr": {
      "python": "d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)"
    },
    "question_id": 22963263
  },
  {
    "question": {
      "en": "pandas subtract a row from dataframe `df2` from dataframe `df`"
    },
    "mr": {
      "python": "pd.DataFrame(df.values - df2.values, columns=df.columns)"
    },
    "question_id": 22093471
  },
  {
    "question": {
      "en": "case insensitive string comparison between `string1` and `string2`"
    },
    "mr": {
      "python": "if (string1.lower() == string2.lower()):\n    pass"
    },
    "question_id": 319426
  },
  {
    "question": {
      "en": "Convert integer elements in list `wordids` to strings"
    },
    "mr": {
      "python": "[str(wi) for wi in wordids]"
    },
    "question_id": 7768859
  },
  {
    "question": {
      "en": "Define a list with string values `['a', 'c', 'b', 'obj']`"
    },
    "mr": {
      "python": "['a', 'c', 'b', 'obj']"
    },
    "question_id": 17589590
  },
  {
    "question": {
      "en": "disable the certificate check in https requests for url `https://kennethreitz.com`"
    },
    "mr": {
      "python": "requests.get('https://kennethreitz.com', verify=False)"
    },
    "question_id": 15445981
  },
  {
    "question": {
      "en": "create a list of aggregation of each element from list `l2` to all elements of list `l1`"
    },
    "mr": {
      "python": "[(x + y) for x in l2 for y in l1]"
    },
    "question_id": 16568056
  },
  {
    "question": {
      "en": "match string 'this is my string' with regex '\\\\b(this|string)\\\\b'\r\nthen replace it with regex '<markup>\\\\1</markup>'"
    },
    "mr": {
      "python": "re.sub('\\\\b(this|string)\\\\b', '<markup>\\\\1</markup>', 'this is my string')"
    },
    "question_id": 4338032
  },
  {
    "question": {
      "en": "count the number of words in a string `s`"
    },
    "mr": {
      "python": "len(s.split())"
    },
    "question_id": 19410018
  },
  {
    "question": {
      "en": "sort list of nested dictionaries `yourdata` in reverse order of 'key' and 'subkey'"
    },
    "mr": {
      "python": "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"
    },
    "question_id": 13237941
  },
  {
    "question": {
      "en": "merge dictionaries form array `dicts` in a single expression"
    },
    "mr": {
      "python": "dict((k, v) for d in dicts for k, v in list(d.items()))"
    },
    "question_id": 38987
  },
  {
    "question": {
      "en": "select rows of dataframe `df` whose value for column `A` is `foo`"
    },
    "mr": {
      "python": "print(df.loc[df['A'] == 'foo'])"
    },
    "question_id": 17071871
  },
  {
    "question": {
      "en": "remove newline in string 'Windows EOL\\r\\n' on the right side"
    },
    "mr": {
      "python": "'Windows EOL\\r\\n'.rstrip('\\r\\n')"
    },
    "question_id": 275018
  },
  {
    "question": {
      "en": "get the logical xor of two variables `str1` and `str2`"
    },
    "mr": {
      "python": "return (bool(str1) ^ bool(str2))"
    },
    "question_id": 432842
  },
  {
    "question": {
      "en": "extract data field 'bar' from json object"
    },
    "mr": {
      "python": "json.loads('{\"foo\": 42, \"bar\": \"baz\"}')['bar']"
    },
    "question_id": 6407780
  },
  {
    "question": {
      "en": "sum the length of lists in list `x` that are more than 1 item in length"
    },
    "mr": {
      "python": "sum(len(y) for y in x if len(y) > 1)"
    },
    "question_id": 35707224
  },
  {
    "question": {
      "en": "Remove anything in parenthesis from string `item` with a regex"
    },
    "mr": {
      "python": "item = re.sub(' ?\\\\([^)]+\\\\)', '', item)"
    },
    "question_id": 19794051
  },
  {
    "question": {
      "en": "reverse a list `L`"
    },
    "mr": {
      "python": "L.reverse()"
    },
    "question_id": 3940128
  },
  {
    "question": {
      "en": "split string `s` into strings of repeating elements"
    },
    "mr": {
      "python": "print([a for a, b in re.findall('((\\\\w)\\\\2*)', s)])"
    },
    "question_id": 9505526
  },
  {
    "question": {
      "en": "remove white spaces from the end of string \"    xyz     \""
    },
    "mr": {
      "python": "\"\"\"    xyz     \"\"\".rstrip()"
    },
    "question_id": 2372573
  },
  {
    "question": {
      "en": "pretty-print ordered dictionary `o`"
    },
    "mr": {
      "python": "pprint(dict(list(o.items())))"
    },
    "question_id": 4301069
  },
  {
    "question": {
      "en": "get dictionary with max value of key 'size' in list of dicts `ld`"
    },
    "mr": {
      "python": "max(ld, key=lambda d: d['size'])"
    },
    "question_id": 30546889
  },
  {
    "question": {
      "en": "search for regex pattern 'Test(.*)print' in string `testStr` including new line character '\\n'"
    },
    "mr": {
      "python": "re.search('Test(.*)print', testStr, re.DOTALL)"
    },
    "question_id": 20062565
  },
  {
    "question": {
      "en": "print list of items `myList`"
    },
    "mr": {
      "python": "print('\\n'.join(str(p) for p in myList))"
    },
    "question_id": 15769246
  },
  {
    "question": {
      "en": "list all files in directory `path`"
    },
    "mr": {
      "python": "os.listdir(path)"
    },
    "question_id": 120656
  },
  {
    "question": {
      "en": "Sort a list of strings 'words' such that items starting with 's' come first."
    },
    "mr": {
      "python": "sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)"
    },
    "question_id": 17608210
  },
  {
    "question": {
      "en": "python, format string \"{} %s {}\" to have 'foo' and 'bar' in the first and second positions"
    },
    "mr": {
      "python": "\"\"\"{} %s {}\"\"\".format('foo', 'bar')"
    },
    "question_id": 4928526
  },
  {
    "question": {
      "en": "create a slice object using string `string_slice`"
    },
    "mr": {
      "python": "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])"
    },
    "question_id": 13324554
  },
  {
    "question": {
      "en": "Delete mulitple columns `columnheading1`, `columnheading2` in pandas data frame `yourdf`"
    },
    "mr": {
      "python": "yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)"
    },
    "question_id": 28538536
  },
  {
    "question": {
      "en": "remove the punctuation '!', '.', ':' from a string `asking`"
    },
    "mr": {
      "python": "out = ''.join(c for c in asking if c not in ('!', '.', ':'))"
    },
    "question_id": 16050952
  },
  {
    "question": {
      "en": "call a Python script \"test2.py\""
    },
    "mr": {
      "python": "exec(compile(open('test2.py').read(), 'test2.py', 'exec'))"
    },
    "question_id": 1186789
  },
  {
    "question": {
      "en": "Get the first and last 3 elements of list `l`"
    },
    "mr": {
      "python": "l[:3] + l[-3:]"
    },
    "question_id": 40016359
  },
  {
    "question": {
      "en": "merge two lists `a` and `b` into a single list"
    },
    "mr": {
      "python": "[j for i in zip(a, b) for j in i]"
    },
    "question_id": 3471999
  },
  {
    "question": {
      "en": "find consecutive consonants in a word `CONCENTRATION` using regex"
    },
    "mr": {
      "python": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)"
    },
    "question_id": 27744882
  },
  {
    "question": {
      "en": "flask-sqlalchemy delete row `page`"
    },
    "mr": {
      "python": "db.session.delete(page)"
    },
    "question_id": 4921038
  },
  {
    "question": {
      "en": "retrieve the path from a Flask request"
    },
    "mr": {
      "python": "request.url"
    },
    "question_id": 15974730
  },
  {
    "question": {
      "en": "replace percent-encoded code in request `f` to their single-character equivalent"
    },
    "mr": {
      "python": "f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))"
    },
    "question_id": 12527959
  },
  {
    "question": {
      "en": "replace value 0 with 'Female' and value 1 with 'Male' in column 'sex' of dataframe `data`"
    },
    "mr": {
      "python": "data['sex'].replace([0, 1], ['Female', 'Male'], inplace=True)"
    },
    "question_id": 31888871
  },
  {
    "question": {
      "en": "extract date from a string 'monkey 20/01/1980 love banana'"
    },
    "mr": {
      "python": "dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)"
    },
    "question_id": 3276180
  },
  {
    "question": {
      "en": "Return a subplot axes positioned by the grid definition `1,1,1` using matpotlib"
    },
    "mr": {
      "python": "fig.add_subplot(1, 1, 1)"
    },
    "question_id": 1358977
  },
  {
    "question": {
      "en": "replace nans by preceding values in pandas dataframe `df`"
    },
    "mr": {
      "python": "df.fillna(method='ffill', inplace=True)"
    },
    "question_id": 27905295
  },
  {
    "question": {
      "en": "replace `0` with `2` in the list `[0, 1, 0, 3]`"
    },
    "mr": {
      "python": "[(a if a else 2) for a in [0, 1, 0, 3]]"
    },
    "question_id": 2951701
  },
  {
    "question": {
      "en": "search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(ddd)'"
    },
    "mr": {
      "python": "re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)"
    },
    "question_id": 8970524
  },
  {
    "question": {
      "en": "concatenate a list of numpy arrays `input_list` together into a flattened list of values"
    },
    "mr": {
      "python": "np.concatenate(input_list).ravel().tolist()"
    },
    "question_id": 33711985
  },
  {
    "question": {
      "en": "get first element of each tuple in list `A`"
    },
    "mr": {
      "python": "[tup[0] for tup in A]"
    },
    "question_id": 31302904
  },
  {
    "question": {
      "en": "get the platform OS name"
    },
    "mr": {
      "python": "platform.system()"
    },
    "question_id": 30015665
  },
  {
    "question": {
      "en": "divide each element in list `myList` by integer `myInt`"
    },
    "mr": {
      "python": "myList[:] = [(x / myInt) for x in myList]"
    },
    "question_id": 8244915
  },
  {
    "question": {
      "en": "get value of key `post code` associated with first index of key `places` of dictionary `data`"
    },
    "mr": {
      "python": "print(data['places'][0]['post code'])"
    },
    "question_id": 23306653
  },
  {
    "question": {
      "en": "round number 8.005 up to 2 decimal places"
    },
    "mr": {
      "python": "round(8.005, 2)"
    },
    "question_id": 31818050
  },
  {
    "question": {
      "en": "strip and split each line `line` on white spaces"
    },
    "mr": {
      "python": "line.strip().split(' ')"
    },
    "question_id": 11354544
  },
  {
    "question": {
      "en": "check if a local variable `myVar` exists"
    },
    "mr": {
      "python": "('myVar' in locals())"
    },
    "question_id": 843277
  },
  {
    "question": {
      "en": "How do I find an element that contains specific text in Selenium Webdriver (Python)?"
    },
    "mr": {
      "python": "driver.find_elements_by_xpath(\"//*[contains(text(), 'My Button')]\")"
    },
    "question_id": 12323403
  },
  {
    "question": {
      "en": "split a string `s` at line breaks `\\r\\n`"
    },
    "mr": {
      "python": "[map(int, x.split('\\t')) for x in s.rstrip().split('\\r\\n')]"
    },
    "question_id": 21205074
  },
  {
    "question": {
      "en": "Iterating over a dictionary `d` using for loops"
    },
    "mr": {
      "python": "for (key, value) in list(d.items()):\n    pass"
    },
    "question_id": 3294889
  },
  {
    "question": {
      "en": "update the dictionary `mydic` with dynamic keys `i` and values with key 'name' from dictionary `o`"
    },
    "mr": {
      "python": "mydic.update({i: o['name']})"
    },
    "question_id": 13860026
  },
  {
    "question": {
      "en": "empty a list `lst`"
    },
    "mr": {
      "python": "lst[:] = []"
    },
    "question_id": 1400608
  },
  {
    "question": {
      "en": "sort a dictionary `d` by length of its values and print as string"
    },
    "mr": {
      "python": "print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))"
    },
    "question_id": 16868457
  },
  {
    "question": {
      "en": "decode a urllib escaped url string `url` with `utf8`"
    },
    "mr": {
      "python": "url = urllib.parse.unquote(url).decode('utf8')"
    },
    "question_id": 16566069
  },
  {
    "question": {
      "en": "Print string `t` with proper unicode representations"
    },
    "mr": {
      "python": "print(t.decode('unicode_escape'))"
    },
    "question_id": 13793973
  },
  {
    "question": {
      "en": "Get all non-ascii characters in a unicode string `\\xa3100 is worth more than \\u20ac100`"
    },
    "mr": {
      "python": "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))"
    },
    "question_id": 16866261
  },
  {
    "question": {
      "en": "round number 3.0005 up to 3 decimal places"
    },
    "mr": {
      "python": "round(3.0005, 3)"
    },
    "question_id": 31818050
  },
  {
    "question": {
      "en": "Fastest way to sort each row in a pandas dataframe"
    },
    "mr": {
      "python": "df.sort(df.columns, axis=1, ascending=False)"
    },
    "question_id": 25817930
  },
  {
    "question": {
      "en": "sum the column `positions` along the  other columns `stock`, `same1`, `same2` in a pandas data frame `df`"
    },
    "mr": {
      "python": "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()"
    },
    "question_id": 17166601
  },
  {
    "question": {
      "en": "print float `a` with two decimal points"
    },
    "mr": {
      "python": "print(('%.2f' % round(a, 2)))"
    },
    "question_id": 455612
  },
  {
    "question": {
      "en": "make a list of lists in which each list `g` are the elements from list `test` which have the same characters up to the first `_` character"
    },
    "mr": {
      "python": "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"
    },
    "question_id": 27659153
  },
  {
    "question": {
      "en": "create a list `listofzeros` of `n` zeros"
    },
    "mr": {
      "python": "listofzeros = [0] * n"
    },
    "question_id": 8528178
  },
  {
    "question": {
      "en": "change current working directory to directory 'chapter3'"
    },
    "mr": {
      "python": "os.chdir('chapter3')"
    },
    "question_id": 20796355
  },
  {
    "question": {
      "en": "print a string using multiple strings `name` and `score`"
    },
    "mr": {
      "python": "print('Total score for %s is %s  ' % (name, score))"
    },
    "question_id": 15286401
  },
  {
    "question": {
      "en": "Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`"
    },
    "mr": {
      "python": "br.addheaders = [('Cookie', 'cookiename=cookie value')]"
    },
    "question_id": 15459217
  },
  {
    "question": {
      "en": "generate all possible string permutations of each two elements in list `['hel', 'lo', 'bye']`"
    },
    "mr": {
      "python": "print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])"
    },
    "question_id": 4059550
  },
  {
    "question": {
      "en": "join multiple dataframes `d1`, `d2`, and `d3` on column 'name'"
    },
    "mr": {
      "python": "df1.merge(df2, on='name').merge(df3, on='name')"
    },
    "question_id": 23668427
  },
  {
    "question": {
      "en": "convert dictionary `dict` into a string formatted object"
    },
    "mr": {
      "python": "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"
    },
    "question_id": 39268928
  },
  {
    "question": {
      "en": "format parameters 'b' and 'a' into plcaeholders in string \"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\""
    },
    "mr": {
      "python": "\"\"\"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\"\"\".format('b', 'a')"
    },
    "question_id": 18609153
  },
  {
    "question": {
      "en": "extract first column from a multi-dimensional array `a`"
    },
    "mr": {
      "python": "[row[0] for row in a]"
    },
    "question_id": 903853
  },
  {
    "question": {
      "en": "find href value that has string 'follow?page' inside it"
    },
    "mr": {
      "python": "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"
    },
    "question_id": 11066874
  },
  {
    "question": {
      "en": "find the count of a word 'Hello' in a string `input_string`"
    },
    "mr": {
      "python": "input_string.count('Hello')"
    },
    "question_id": 11300383
  },
  {
    "question": {
      "en": "create list `new_list` containing the last 10 elements of list `my_list`"
    },
    "mr": {
      "python": "new_list = my_list[-10:]"
    },
    "question_id": 8556076
  },
  {
    "question": {
      "en": "unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(['I ', '<', '3s U ', '&', ' you luvz me'])"
    },
    "question_id": 20876077
  },
  {
    "question": {
      "en": "format a string `num` using string formatting"
    },
    "mr": {
      "python": "\"\"\"{0:.3g}\"\"\".format(num)"
    },
    "question_id": 2389846
  },
  {
    "question": {
      "en": "find the index of sub string 'g' in string `str`"
    },
    "mr": {
      "python": "str.find('g')"
    },
    "question_id": 674764
  },
  {
    "question": {
      "en": "django jinja slice list `mylist` by '3:8'"
    },
    "mr": {
      "python": "{{(mylist | slice): '3:8'}}"
    },
    "question_id": 23422542
  },
  {
    "question": {
      "en": "How to convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%m/%d/%y'"
    },
    "mr": {
      "python": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')"
    },
    "question_id": 14524322
  },
  {
    "question": {
      "en": "place '\\' infront of each non-letter char in string `line`"
    },
    "mr": {
      "python": "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))"
    },
    "question_id": 26155985
  },
  {
    "question": {
      "en": "Draw node labels `labels` on networkx graph `G ` at position `pos`"
    },
    "mr": {
      "python": "networkx.draw_networkx_labels(G, pos, labels)"
    },
    "question_id": 15548506
  },
  {
    "question": {
      "en": "generate a random 12-digit number"
    },
    "mr": {
      "python": "int(''.join(str(random.randint(0, 9)) for _ in range(12)))"
    },
    "question_id": 13496087
  },
  {
    "question": {
      "en": "create a dictionary containing each string in list `my_list` split by '=' as a key/value pairs"
    },
    "mr": {
      "python": "print(dict([s.split('=') for s in my_list]))"
    },
    "question_id": 12739911
  },
  {
    "question": {
      "en": "Get all the keys from dictionary `y` whose value is `1`"
    },
    "mr": {
      "python": "[i for i in y if y[i] == 1]"
    },
    "question_id": 1920145
  },
  {
    "question": {
      "en": "Check if a given key 'key1' exists in dictionary `dict`"
    },
    "mr": {
      "python": "if ('key1' in dict):\n    pass"
    },
    "question_id": 1602934
  },
  {
    "question": {
      "en": "Get the average values from two numpy arrays `old_set` and `new_set`"
    },
    "mr": {
      "python": "np.mean(np.array([old_set, new_set]), axis=0)"
    },
    "question_id": 18461623
  },
  {
    "question": {
      "en": "Get a environment variable `DEBUSSY`"
    },
    "mr": {
      "python": "print(os.environ['DEBUSSY'])"
    },
    "question_id": 5971312
  },
  {
    "question": {
      "en": "get current requested url"
    },
    "mr": {
      "python": "self.request.url"
    },
    "question_id": 2764586
  },
  {
    "question": {
      "en": "Reverse list `s`"
    },
    "mr": {
      "python": "s[::(-1)]"
    },
    "question_id": 931092
  },
  {
    "question": {
      "en": "reverse a string `a` by 2 characters at a time"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"
    },
    "question_id": 5864271
  },
  {
    "question": {
      "en": "List of all unique characters in a string?"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(set('aaabcabccd'))"
    },
    "question_id": 13902805
  },
  {
    "question": {
      "en": "django return a QuerySet list containing the values of field 'eng_name' in model `Employees`"
    },
    "mr": {
      "python": "Employees.objects.values_list('eng_name', flat=True)"
    },
    "question_id": 7503241
  },
  {
    "question": {
      "en": "subtract elements of list `List1` from elements of list `List2`"
    },
    "mr": {
      "python": "[(x1 - x2) for x1, x2 in zip(List1, List2)]"
    },
    "question_id": 8194156
  },
  {
    "question": {
      "en": "access an arbitrary value from dictionary `dict`"
    },
    "mr": {
      "python": "next(iter(list(dict.values())))"
    },
    "question_id": 3097866
  },
  {
    "question": {
      "en": "remove all square brackets from string 'abcd[e]yth[ac]ytwec'"
    },
    "mr": {
      "python": "re.sub('\\\\[.*?\\\\]', '', 'abcd[e]yth[ac]ytwec')"
    },
    "question_id": 9470142
  },
  {
    "question": {
      "en": "filter objects month wise in django model `Sample` for year `2011`"
    },
    "mr": {
      "python": "Sample.objects.filter(date__year='2011', date__month='01')"
    },
    "question_id": 4668619
  },
  {
    "question": {
      "en": "download \"http://randomsite.com/file.gz\" from http and save as \"file.gz\""
    },
    "mr": {
      "python": "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"
    },
    "question_id": 19602931
  },
  {
    "question": {
      "en": "convert radians 1 to degrees"
    },
    "mr": {
      "python": "math.cos(math.radians(1))"
    },
    "question_id": 9875964
  },
  {
    "question": {
      "en": "divide the value for each key `k` in dict `d2` by the value for the same key `k` in dict `d1`"
    },
    "mr": {
      "python": "{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}"
    },
    "question_id": 11840111
  },
  {
    "question": {
      "en": "generate random Decimal"
    },
    "mr": {
      "python": "decimal.Decimal(random.randrange(10000)) / 100"
    },
    "question_id": 439115
  },
  {
    "question": {
      "en": "creating a 5x6 matrix filled with `None` and save it as `x`"
    },
    "mr": {
      "python": "x = [[None for _ in range(5)] for _ in range(6)]"
    },
    "question_id": 4230000
  },
  {
    "question": {
      "en": "split a `utf-8` encoded string `stru` into a list of characters"
    },
    "mr": {
      "python": "list(stru.decode('utf-8'))"
    },
    "question_id": 18711384
  },
  {
    "question": {
      "en": "generate a random string of length `x`  containing lower cased ASCII letters"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(random.choice(string.lowercase) for x in range(X))"
    },
    "question_id": 1957273
  },
  {
    "question": {
      "en": "Convert each list in list `main_list` into a tuple"
    },
    "mr": {
      "python": "map(list, zip(*main_list))"
    },
    "question_id": 31676133
  },
  {
    "question": {
      "en": "Convert array `a` to numpy array"
    },
    "mr": {
      "python": "a = np.array(a)"
    },
    "question_id": 7717380
  },
  {
    "question": {
      "en": "get the widget which has currently the focus in tkinter instance `window2`"
    },
    "mr": {
      "python": "print(('focus object class:', window2.focus_get().__class__))"
    },
    "question_id": 27867754
  },
  {
    "question": {
      "en": "trim characters ' \\t\\n\\r' in `s`"
    },
    "mr": {
      "python": "s = s.strip(' \\t\\n\\r')"
    },
    "question_id": 1185524
  },
  {
    "question": {
      "en": "Remove characters \"!@#$\" from a string `line`"
    },
    "mr": {
      "python": "line.translate(None, '!@#$')"
    },
    "question_id": 3939361
  },
  {
    "question": {
      "en": "throw an exception \"I know Python!\""
    },
    "mr": {
      "python": "raise Exception('I know Python!')"
    },
    "question_id": 2052390
  },
  {
    "question": {
      "en": "Trimming a string \" Hello \""
    },
    "mr": {
      "python": "' Hello '.strip()"
    },
    "question_id": 761804
  },
  {
    "question": {
      "en": "Set multi index on columns 'Company' and 'date' of data frame `df` in pandas."
    },
    "mr": {
      "python": "df.set_index(['Company', 'date'], inplace=True)"
    },
    "question_id": 24041436
  },
  {
    "question": {
      "en": "change legend font size with matplotlib.pyplot to 6"
    },
    "mr": {
      "python": "plot.legend(loc=2, prop={'size': 6})"
    },
    "question_id": 7125009
  },
  {
    "question": {
      "en": "Get a list of  words from a string `Hello world, my name is...James the 2nd!` removing punctuation"
    },
    "mr": {
      "python": "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')"
    },
    "question_id": 7633274
  },
  {
    "question": {
      "en": "add key value pairs 'item4' , 4 and 'item5' , 5 to dictionary `default_data`"
    },
    "mr": {
      "python": "default_data.update({'item4': 4, 'item5': 5, })"
    },
    "question_id": 6416131
  },
  {
    "question": {
      "en": "Create list `listy` containing 3 empty lists"
    },
    "mr": {
      "python": "listy = [[] for i in range(3)]"
    },
    "question_id": 7745562
  },
  {
    "question": {
      "en": "create a list of all unique characters in string 'aaabcabccd'"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"
    },
    "question_id": 13902805
  },
  {
    "question": {
      "en": "reverse list `yourdata`"
    },
    "mr": {
      "python": "sorted(yourdata, reverse=True)"
    },
    "question_id": 13237941
  },
  {
    "question": {
      "en": "add one day and three hours to the present time from datetime.now()"
    },
    "mr": {
      "python": "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"
    },
    "question_id": 6310475
  },
  {
    "question": {
      "en": "print each first value from a list of tuples `mytuple` with string formatting"
    },
    "mr": {
      "python": "print(', ,'.join([str(i[0]) for i in mytuple]))"
    },
    "question_id": 19112735
  },
  {
    "question": {
      "en": "Write a comment `# Data for Class A\\n` to a file object `f`"
    },
    "mr": {
      "python": "f.write('# Data for Class A\\n')"
    },
    "question_id": 30994370
  },
  {
    "question": {
      "en": "build a dict of key:value pairs from a string representation of a dict, `{'muffin' : 'lolz', 'foo' : 'kitty'}`"
    },
    "mr": {
      "python": "ast.literal_eval(\"{'muffin' : 'lolz', 'foo' : 'kitty'}\")"
    },
    "question_id": 988228
  },
  {
    "question": {
      "en": "remove all spaces from a string converted from dictionary `{'a': 1, 'b': 'as df'}`"
    },
    "mr": {
      "python": "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"
    },
    "question_id": 39268928
  },
  {
    "question": {
      "en": "convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%-m/%d/%y'"
    },
    "mr": {
      "python": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')"
    },
    "question_id": 14524322
  },
  {
    "question": {
      "en": "get output from process `p1`"
    },
    "mr": {
      "python": "p1.communicate()[0]"
    },
    "question_id": 748028
  },
  {
    "question": {
      "en": "delete a column `column_name` without having to reassign from pandas data frame `df`"
    },
    "mr": {
      "python": "df.drop('column_name', axis=1, inplace=True)"
    },
    "question_id": 13411544
  },
  {
    "question": {
      "en": "create list of 'size' empty strings"
    },
    "mr": {
      "python": "strs = ['' for x in range(size)]"
    },
    "question_id": 6376886
  },
  {
    "question": {
      "en": "Replace all non-alphanumeric characters in a string"
    },
    "mr": {
      "python": "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')"
    },
    "question_id": 12985456
  },
  {
    "question": {
      "en": "remove duplicate rows from dataframe `df1` and calculate their frequency"
    },
    "mr": {
      "python": "df1.groupby(['key', 'year']).size().reset_index()"
    },
    "question_id": 21558999
  },
  {
    "question": {
      "en": "adding a 1-d array `[1, 2, 3, 4, 5, 6, 7, 8, 9]` to a 3-d array `np.zeros((6, 9, 20))`"
    },
    "mr": {
      "python": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"
    },
    "question_id": 32283692
  },
  {
    "question": {
      "en": "get a dictionary with keys from one list `keys` and values from other list `data`"
    },
    "mr": {
      "python": "dict(zip(keys, zip(*data)))"
    },
    "question_id": 11613284
  },
  {
    "question": {
      "en": "Convert escaped utf string to utf string in `your string`"
    },
    "mr": {
      "python": "print('your string'.decode('string_escape'))"
    },
    "question_id": 42548362
  },
  {
    "question": {
      "en": "find all the indexes in a Numpy 2D array where the value is 1"
    },
    "mr": {
      "python": "zip(*np.where(a == 1))"
    },
    "question_id": 27175400
  },
  {
    "question": {
      "en": "remove all duplicates from a list of sets `L`"
    },
    "mr": {
      "python": "list(set(frozenset(item) for item in L))"
    },
    "question_id": 32296933
  },
  {
    "question": {
      "en": "set size of `figure` to landscape A4 i.e. `11.69, 8.27` inches"
    },
    "mr": {
      "python": "figure(figsize=(11.69, 8.27))"
    },
    "question_id": 15571267
  },
  {
    "question": {
      "en": "Calling an external command \"echo Hello World\""
    },
    "mr": {
      "python": "print(subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read())"
    },
    "question_id": 89228
  },
  {
    "question": {
      "en": "sort dictionary `tag_weight` in reverse order by values cast to integers"
    },
    "mr": {
      "python": "sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)"
    },
    "question_id": 40208429
  },
  {
    "question": {
      "en": "throw a runtime error with message 'specific message'"
    },
    "mr": {
      "python": "raise RuntimeError('specific message')"
    },
    "question_id": 2052390
  },
  {
    "question": {
      "en": "Get a list `myList` from 1 to 10"
    },
    "mr": {
      "python": "myList = [i for i in range(10)]"
    },
    "question_id": 11479392
  },
  {
    "question": {
      "en": "combine two dictionaries `d ` and `d1`, concatenate string values with identical `keys`"
    },
    "mr": {
      "python": "dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)"
    },
    "question_id": 17604837
  },
  {
    "question": {
      "en": "remove parentheses and text within it in string `filename`"
    },
    "mr": {
      "python": "re.sub('\\\\([^)]*\\\\)', '', filename)"
    },
    "question_id": 640001
  },
  {
    "question": {
      "en": "test if either of strings `a` or `b` are members of the set of strings, `['b', 'a', 'foo', 'bar']`"
    },
    "mr": {
      "python": "set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])"
    },
    "question_id": 6159313
  },
  {
    "question": {
      "en": "execute a command `command ` in the terminal from a python script"
    },
    "mr": {
      "python": "os.system(command)"
    },
    "question_id": 33065588
  },
  {
    "question": {
      "en": "Rename file from `src` to `dst`"
    },
    "mr": {
      "python": "os.rename(src, dst)"
    },
    "question_id": 2759067
  },
  {
    "question": {
      "en": "Check if a given key `key` exists in dictionary `d`"
    },
    "mr": {
      "python": "if (key in d):\n    pass"
    },
    "question_id": 1602934
  },
  {
    "question": {
      "en": "find rows with non zero values in a subset of columns where `df.dtypes` is not equal to `object` in pandas dataframe"
    },
    "mr": {
      "python": "df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]"
    },
    "question_id": 39187788
  },
  {
    "question": {
      "en": "convert pandas dataframe `df` with fields 'id', 'value' to dictionary"
    },
    "mr": {
      "python": "df.set_index('id')['value'].to_dict()"
    },
    "question_id": 18695605
  },
  {
    "question": {
      "en": "access value associated with key 'American' of key 'Apple' from dictionary `dict`"
    },
    "mr": {
      "python": "dict['Apple']['American']"
    },
    "question_id": 5404665
  },
  {
    "question": {
      "en": "append array of strings `['x', 'x', 'x']` into one string"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(['x', 'x', 'x'])"
    },
    "question_id": 25678689
  },
  {
    "question": {
      "en": "Spawn a process to run python script `myscript.py` in C++"
    },
    "mr": {
      "python": "system('python myscript.py')"
    },
    "question_id": 41246071
  },
  {
    "question": {
      "en": "django urlsafe base64 decode string `uenc` with decryption"
    },
    "mr": {
      "python": "base64.urlsafe_b64decode(uenc.encode('ascii'))"
    },
    "question_id": 2229827
  },
  {
    "question": {
      "en": "decode encodeuricomponent in GAE"
    },
    "mr": {
      "python": "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')"
    },
    "question_id": 9880173
  },
  {
    "question": {
      "en": "Print a emoji from a string `\\\\ud83d\\\\ude4f` having surrogate pairs"
    },
    "mr": {
      "python": "\"\"\"\\\\ud83d\\\\ude4f\"\"\".encode('utf-16', 'surrogatepass').decode('utf-16')"
    },
    "question_id": 38147259
  },
  {
    "question": {
      "en": "create a list containing the multiplication of each elements at the same index of list `lista` and list `listb`"
    },
    "mr": {
      "python": "[(a * b) for a, b in zip(lista, listb)]"
    },
    "question_id": 10271484
  },
  {
    "question": {
      "en": "Remove all items from a dictionary `d` where the values are less than `1`"
    },
    "mr": {
      "python": "d = dict((k, v) for k, v in d.items() if v > 0)"
    },
    "question_id": 8425046
  },
  {
    "question": {
      "en": "get the dimensions of array `a`"
    },
    "mr": {
      "python": "N.shape(a)"
    },
    "question_id": 3061761
  },
  {
    "question": {
      "en": "check if string `a` is an integer"
    },
    "mr": {
      "python": "a.isdigit()"
    },
    "question_id": 354038
  },
  {
    "question": {
      "en": "Slicing a list into a list of sub-lists"
    },
    "mr": {
      "python": "[input[i:i + n] for i in range(0, len(input), n)]"
    },
    "question_id": 2231663
  },
  {
    "question": {
      "en": "get an element at index `[1,1]`in a numpy array `arr`"
    },
    "mr": {
      "python": "print(arr[1, 1])"
    },
    "question_id": 3582601
  },
  {
    "question": {
      "en": "get count of rows in each series grouped by column 'col5' and column 'col2' of dataframe `df`"
    },
    "mr": {
      "python": "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"
    },
    "question_id": 17679089
  },
  {
    "question": {
      "en": "rearrange tuple of tuples `t`"
    },
    "mr": {
      "python": "tuple(zip(*t))"
    },
    "question_id": 16040156
  },
  {
    "question": {
      "en": "find all occurrences of a substring in a string"
    },
    "mr": {
      "python": "[m.start() for m in re.finditer('test', 'test test test test')]"
    },
    "question_id": 4664850
  },
  {
    "question": {
      "en": "insert string `string1` after each character of `string2`"
    },
    "mr": {
      "python": "string2.replace('', string1)[len(string1):-len(string1)]"
    },
    "question_id": 14431731
  },
  {
    "question": {
      "en": "in Django, select 100 random records from the database `Content.objects`"
    },
    "mr": {
      "python": "Content.objects.all().order_by('?')[:100]"
    },
    "question_id": 3506678
  },
  {
    "question": {
      "en": "generate a list of all unique pairs of integers in `range(9)`"
    },
    "mr": {
      "python": "list(permutations(list(range(9)), 2))"
    },
    "question_id": 14169122
  },
  {
    "question": {
      "en": "Flask get posted form data 'firstname'"
    },
    "mr": {
      "python": "first_name = request.form.get('firstname')"
    },
    "question_id": 13279399
  },
  {
    "question": {
      "en": "parse UTF-8 encoded HTML response `response` to BeautifulSoup object"
    },
    "mr": {
      "python": "soup = BeautifulSoup(response.read().decode('utf-8'))"
    },
    "question_id": 20205455
  },
  {
    "question": {
      "en": "Use multiple groupby and agg operations `sum`, `count`, `std` for pandas data frame `df`"
    },
    "mr": {
      "python": "df.groupby(level=0).agg(['sum', 'count', 'std'])"
    },
    "question_id": 39159475
  },
  {
    "question": {
      "en": "find the index of sub string 's' in string `str` starting from index 11 and ending at index 14"
    },
    "mr": {
      "python": "str.find('s', 11, 14)"
    },
    "question_id": 674764
  },
  {
    "question": {
      "en": "factorize all string values in dataframe `s` into floats"
    },
    "mr": {
      "python": "(s.factorize()[0] + 1).astype('float')"
    },
    "question_id": 42458734
  },
  {
    "question": {
      "en": "Generate a random integer between `a` and `b`"
    },
    "mr": {
      "python": "random.randint(a, b)"
    },
    "question_id": 3996904
  },
  {
    "question": {
      "en": "pandas split strings in column 'stats' by ',' into columns in dataframe `df`"
    },
    "mr": {
      "python": "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"
    },
    "question_id": 29370211
  },
  {
    "question": {
      "en": "merge lists `a` and `a` into a list of tuples"
    },
    "mr": {
      "python": "list(zip(a, b))"
    },
    "question_id": 2407398
  },
  {
    "question": {
      "en": "writing items in list `itemlist` to file `outfile`"
    },
    "mr": {
      "python": "outfile.write('\\n'.join(itemlist))"
    },
    "question_id": 899103
  },
  {
    "question": {
      "en": "Calling an external command \"ls -l\""
    },
    "mr": {
      "python": "from subprocess import call"
    },
    "question_id": 89228
  },
  {
    "question": {
      "en": "print a list of integers `list_of_ints` using string formatting"
    },
    "mr": {
      "python": "print(', '.join(str(x) for x in list_of_ints))"
    },
    "question_id": 3590165
  },
  {
    "question": {
      "en": "get the text of multiple elements found by xpath \"//*[@type='submit']/@value\""
    },
    "mr": {
      "python": "browser.find_elements_by_xpath(\"//*[@type='submit']/@value\").text"
    },
    "question_id": 12579061
  },
  {
    "question": {
      "en": "Remove word characters in parenthesis from string `item` with a regex"
    },
    "mr": {
      "python": "item = re.sub(' ?\\\\(\\\\w+\\\\)', '', item)"
    },
    "question_id": 19794051
  },
  {
    "question": {
      "en": "Get all indexes of boolean numpy array where boolean value `mask` is True"
    },
    "mr": {
      "python": "numpy.where(mask)"
    },
    "question_id": 8218032
  },
  {
    "question": {
      "en": "convert pandas group by object to multi-indexed dataframe with indices 'Name' and 'Destination'"
    },
    "mr": {
      "python": "df.set_index(['Name', 'Destination'])"
    },
    "question_id": 14301913
  },
  {
    "question": {
      "en": "round number 7.005 up to 2 decimal places"
    },
    "mr": {
      "python": "round(7.005, 2)"
    },
    "question_id": 31818050
  },
  {
    "question": {
      "en": "find indexes of all occurrences of a substring `tt` in a string `ttt`"
    },
    "mr": {
      "python": "[m.start() for m in re.finditer('(?=tt)', 'ttt')]"
    },
    "question_id": 4664850
  },
  {
    "question": {
      "en": "create pandas data frame `df` from txt file `filename.txt` with column `Region Name` and separator `;`"
    },
    "mr": {
      "python": "df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])"
    },
    "question_id": 41386443
  },
  {
    "question": {
      "en": "Get data from matplotlib plot"
    },
    "mr": {
      "python": "gca().get_lines()[n].get_xydata()"
    },
    "question_id": 8938449
  },
  {
    "question": {
      "en": "group dataframe `df` by columns 'Month' and 'Fruit'"
    },
    "mr": {
      "python": "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"
    },
    "question_id": 42012589
  },
  {
    "question": {
      "en": "extract all rows from dataframe `data` where the value of column 'Value' is True"
    },
    "mr": {
      "python": "data[data['Value'] == True]"
    },
    "question_id": 17424182
  },
  {
    "question": {
      "en": "Parse String `s` to Float or Int"
    },
    "mr": {
      "python": "try:\n    return int(s)\nexcept ValueError:\n    return float(s)"
    },
    "question_id": 379906
  },
  {
    "question": {
      "en": "get value of first child of xml node `name`"
    },
    "mr": {
      "python": "name[0].firstChild.nodeValue"
    },
    "question_id": 317413
  },
  {
    "question": {
      "en": "Convert CSV file `Result.csv` to Pandas dataframe using separator ' '"
    },
    "mr": {
      "python": "df.to_csv('Result.csv', index=False, sep=' ')"
    },
    "question_id": 32533944
  },
  {
    "question": {
      "en": "get index of the biggest 2 values of a list `a`"
    },
    "mr": {
      "python": "sorted(list(range(len(a))), key=lambda i: a[i])[-2:]"
    },
    "question_id": 13070461
  },
  {
    "question": {
      "en": "get a list of items from the list `some_list` that contain string 'abc'"
    },
    "mr": {
      "python": "matching = [s for s in some_list if 'abc' in s]"
    },
    "question_id": 4843158
  },
  {
    "question": {
      "en": "What is the best way to sort list with custom sorting parameters in Python?"
    },
    "mr": {
      "python": "li1.sort(key=lambda x: not x.startswith('b.'))"
    },
    "question_id": 7996940
  },
  {
    "question": {
      "en": "decode url `url` with utf8 and print it"
    },
    "mr": {
      "python": "print(urllib.parse.unquote(url).decode('utf8'))"
    },
    "question_id": 16566069
  },
  {
    "question": {
      "en": "match the pattern '[:;][)(](?![)(])' to the string `str`"
    },
    "mr": {
      "python": "re.match('[:;][)(](?![)(])', str)"
    },
    "question_id": 14571103
  },
  {
    "question": {
      "en": "Get the age of directory (or file) `/tmp` in seconds."
    },
    "mr": {
      "python": "print(os.path.getmtime('/tmp'))"
    },
    "question_id": 6879364
  },
  {
    "question": {
      "en": "create a list which indicates whether each element in `x` and `y` is identical"
    },
    "mr": {
      "python": "[(x[i] == y[i]) for i in range(len(x))]"
    },
    "question_id": 32996293
  },
  {
    "question": {
      "en": "convert decimal `8` to binary list"
    },
    "mr": {
      "python": "[int(x) for x in bin(8)[2:]]"
    },
    "question_id": 13557937
  },
  {
    "question": {
      "en": "changing permission of file `path` to `stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH`"
    },
    "mr": {
      "python": "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"
    },
    "question_id": 16249440
  },
  {
    "question": {
      "en": "randomly select an item from list `foo`"
    },
    "mr": {
      "python": "random.choice(foo)"
    },
    "question_id": 306400
  },
  {
    "question": {
      "en": "terminate the script using status value 0"
    },
    "mr": {
      "python": "sys.exit(0)"
    },
    "question_id": 179369
  },
  {
    "question": {
      "en": "Clicking a link using selenium using python"
    },
    "mr": {
      "python": "driver.find_element_by_xpath('xpath').click()"
    },
    "question_id": 17498027
  },
  {
    "question": {
      "en": "sort a list of dictionaries `a` by dictionary values in descending order"
    },
    "mr": {
      "python": "sorted(a, key=lambda i: list(i.values())[0], reverse=True)"
    },
    "question_id": 10915391
  },
  {
    "question": {
      "en": "drop duplicate indexes in a pandas data frame `df`"
    },
    "mr": {
      "python": "df[~df.index.duplicated()]"
    },
    "question_id": 22918212
  },
  {
    "question": {
      "en": "get a list of all integer points in a `dim` dimensional hypercube with coordinates from `-x` to `y` for all dimensions"
    },
    "mr": {
      "python": "list(itertools.product(list(range(-x, y)), repeat=dim))"
    },
    "question_id": 41727442
  },
  {
    "question": {
      "en": "create new column `A_perc` in dataframe `df` with row values equal to the value in column `A` divided by the value in column `sum`"
    },
    "mr": {
      "python": "df['A_perc'] = df['A'] / df['sum']"
    },
    "question_id": 18504967
  },
  {
    "question": {
      "en": "pars a string 'http://example.org/#comments' to extract hashtags into an array"
    },
    "mr": {
      "python": "re.findall('#(\\\\w+)', 'http://example.org/#comments')"
    },
    "question_id": 2527892
  },
  {
    "question": {
      "en": "get a list `y` of the first element of every tuple in list `x`"
    },
    "mr": {
      "python": "y = [i[0] for i in x]"
    },
    "question_id": 15096021
  },
  {
    "question": {
      "en": "get modification time of file `filename`"
    },
    "mr": {
      "python": "t = os.path.getmtime(filename)"
    },
    "question_id": 237079
  },
  {
    "question": {
      "en": "keep a list `dataList` of lists sorted as it is created by second element"
    },
    "mr": {
      "python": "dataList.sort(key=lambda x: x[1])"
    },
    "question_id": 12324456
  },
  {
    "question": {
      "en": "set an array of unicode characters `[u'\\xe9', u'\\xe3', u'\\xe2']` as labels in Matplotlib `ax`"
    },
    "mr": {
      "python": "ax.set_yticklabels(['\\xe9', '\\xe3', '\\xe2'])"
    },
    "question_id": 2406700
  },
  {
    "question": {
      "en": "get value of first index of each element in list `a`"
    },
    "mr": {
      "python": "[x[0] for x in a]"
    },
    "question_id": 30062429
  },
  {
    "question": {
      "en": "sort list `a` using the first dimension of the element as the key to list `b`"
    },
    "mr": {
      "python": "a.sort(key=lambda x: b.index(x[0]))"
    },
    "question_id": 12814667
  },
  {
    "question": {
      "en": "sort pandas data frame `df` using values from columns `c1` and `c2` in ascending order"
    },
    "mr": {
      "python": "df.sort(['c1', 'c2'], ascending=[True, True])"
    },
    "question_id": 17618981
  },
  {
    "question": {
      "en": "calculate the mean of columns with same name in dataframe `df`"
    },
    "mr": {
      "python": "df.groupby(by=df.columns, axis=1).mean()"
    },
    "question_id": 40311987
  },
  {
    "question": {
      "en": "make a flat list from list of lists `list2d`"
    },
    "mr": {
      "python": "list(itertools.chain(*list2d))"
    },
    "question_id": 952914
  },
  {
    "question": {
      "en": "Sort a list of integers `keys` where each value is in string format"
    },
    "mr": {
      "python": "keys.sort(key=lambda x: [int(y) for y in x.split('.')])"
    },
    "question_id": 2597099
  },
  {
    "question": {
      "en": "convert `ms` milliseconds to a datetime object"
    },
    "mr": {
      "python": "datetime.datetime.fromtimestamp(ms / 1000.0)"
    },
    "question_id": 748491
  },
  {
    "question": {
      "en": "python how to get every first element in 2 dimensional list `a`"
    },
    "mr": {
      "python": "[i[0] for i in a]"
    },
    "question_id": 30062429
  },
  {
    "question": {
      "en": "call parent class `Instructor` of child class constructor"
    },
    "mr": {
      "python": "super(Instructor, self).__init__(name, year)"
    },
    "question_id": 12557612
  },
  {
    "question": {
      "en": "extract all the values of a specific key named 'values' from a list of dictionaries"
    },
    "mr": {
      "python": "results = [item['value'] for item in test_data]"
    },
    "question_id": 25148611
  },
  {
    "question": {
      "en": "get date from dataframe `df` column 'dates' to column 'just_date'"
    },
    "mr": {
      "python": "df['just_date'] = df['dates'].dt.date"
    },
    "question_id": 16176996
  },
  {
    "question": {
      "en": "remove elements from list `centroids` the indexes of which are in array `index`"
    },
    "mr": {
      "python": "[element for i, element in enumerate(centroids) if i not in index]"
    },
    "question_id": 31267493
  },
  {
    "question": {
      "en": "get a dataframe `df2` that contains all the columns of dataframe `df` that do not end in `prefix`"
    },
    "mr": {
      "python": "df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]"
    },
    "question_id": 38426168
  },
  {
    "question": {
      "en": "Remove all items from a dictionary `myDict` whose values are `42`"
    },
    "mr": {
      "python": "{key: val for key, val in list(myDict.items()) if val != 42}"
    },
    "question_id": 29218750
  },
  {
    "question": {
      "en": "print letter that appears most frequently in string `s`"
    },
    "mr": {
      "python": "print(collections.Counter(s).most_common(1)[0])"
    },
    "question_id": 4131123
  },
  {
    "question": {
      "en": "Check if value 'one' is among the values of dictionary `d`"
    },
    "mr": {
      "python": "'one' in iter(d.values())"
    },
    "question_id": 8214932
  },
  {
    "question": {
      "en": "get a list of values for key 'key' from a list of dictionaries `l`"
    },
    "mr": {
      "python": "[d['key'] for d in l]"
    },
    "question_id": 25040875
  },
  {
    "question": {
      "en": "store the output of command 'ls' in variable `direct_output`"
    },
    "mr": {
      "python": "direct_output = subprocess.check_output('ls', shell=True)"
    },
    "question_id": 19267591
  },
  {
    "question": {
      "en": "split string `s` based on white spaces"
    },
    "mr": {
      "python": "re.findall('\\\\s+|\\\\S+', s)"
    },
    "question_id": 35005907
  },
  {
    "question": {
      "en": "set font size of axis legend of plot `plt` to 'xx-small'"
    },
    "mr": {
      "python": "plt.setp(legend.get_title(), fontsize='xx-small')"
    },
    "question_id": 12402561
  },
  {
    "question": {
      "en": "Set colorbar range from `0` to `15` for pyplot object `quadmesh` in matplotlib"
    },
    "mr": {
      "python": "quadmesh.set_clim(vmin=0, vmax=15)"
    },
    "question_id": 15282189
  },
  {
    "question": {
      "en": "sum of squares values in a list `l`"
    },
    "mr": {
      "python": "sum(i * i for i in l)"
    },
    "question_id": 26894227
  },
  {
    "question": {
      "en": "extract dictionary from list of dictionaries based on a key's value."
    },
    "mr": {
      "python": "[d for d in a if d['name'] == 'pluto']"
    },
    "question_id": 7900882
  },
  {
    "question": {
      "en": "Remove characters \"!@#$\" from a string `line`"
    },
    "mr": {
      "python": "line = re.sub('[!@#$]', '', line)"
    },
    "question_id": 3939361
  },
  {
    "question": {
      "en": "group rows of pandas dataframe `df` with same 'id'"
    },
    "mr": {
      "python": "df.groupby('id').agg(lambda x: x.tolist())"
    },
    "question_id": 34776651
  },
  {
    "question": {
      "en": "Fit Kmeans function to a one-dimensional array `x` by reshaping it to be a multidimensional array of single values"
    },
    "mr": {
      "python": "km.fit(x.reshape(-1, 1))"
    },
    "question_id": 28416408
  },
  {
    "question": {
      "en": "check if string 'x' is  in list `['x', 'd', 'a', 's', 'd', 's']`"
    },
    "mr": {
      "python": "'x' in ['x', 'd', 'a', 's', 'd', 's']"
    },
    "question_id": 4877844
  },
  {
    "question": {
      "en": "import all classes from module `some.package`"
    },
    "mr": {
      "python": "globals().update(importlib.import_module('some.package').__dict__)"
    },
    "question_id": 4116061
  },
  {
    "question": {
      "en": "download file from http url `file_url`"
    },
    "mr": {
      "python": "file_name = wget.download(file_url)"
    },
    "question_id": 19602931
  },
  {
    "question": {
      "en": "delete all digits in string `s` that are not directly attached to a word character"
    },
    "mr": {
      "python": "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', s)"
    },
    "question_id": 817122
  },
  {
    "question": {
      "en": "Matplotlib change marker size to 500"
    },
    "mr": {
      "python": "scatter(x, y, s=500, color='green', marker='h')"
    },
    "question_id": 19948732
  },
  {
    "question": {
      "en": "sorting a list of tuples `list_of_tuples` by second key"
    },
    "mr": {
      "python": "sorted(list_of_tuples, key=lambda tup: tup[1])"
    },
    "question_id": 10213994
  },
  {
    "question": {
      "en": "return the conversion of decimal `d` to hex without the '0x' prefix"
    },
    "mr": {
      "python": "hex(d).split('x')[1]"
    },
    "question_id": 5796238
  },
  {
    "question": {
      "en": "post request url `url` with parameters `payload`"
    },
    "mr": {
      "python": "r = requests.post(url, data=payload)"
    },
    "question_id": 4476373
  },
  {
    "question": {
      "en": "print float `a` with two decimal points"
    },
    "mr": {
      "python": "print(('%.2f' % a))"
    },
    "question_id": 455612
  },
  {
    "question": {
      "en": "Create a dictionary `d` from list `iterable`"
    },
    "mr": {
      "python": "d = dict(((key, value) for (key, value) in iterable))"
    },
    "question_id": 1747817
  },
  {
    "question": {
      "en": "convert the argument `date` with string formatting in logging"
    },
    "mr": {
      "python": "logging.info('date=%s', date)"
    },
    "question_id": 12843099
  },
  {
    "question": {
      "en": "convert binary string '010101' to integer"
    },
    "mr": {
      "python": "int('010101', 2)"
    },
    "question_id": 1476
  },
  {
    "question": {
      "en": "sort numpy float array `A` column by column"
    },
    "mr": {
      "python": "A = np.array(sorted(A, key=tuple))"
    },
    "question_id": 12496531
  },
  {
    "question": {
      "en": "Rename a folder `Joe Blow` to `Blow, Joe`"
    },
    "mr": {
      "python": "os.rename('Joe Blow', 'Blow, Joe')"
    },
    "question_id": 8735312
  },
  {
    "question": {
      "en": "Sort Pandas Dataframe by Date"
    },
    "mr": {
      "python": "df.sort_values(by='Date')"
    },
    "question_id": 28161356
  },
  {
    "question": {
      "en": "get a list of all the duplicate items in dataframe `df` using pandas"
    },
    "mr": {
      "python": "pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)"
    },
    "question_id": 14657241
  },
  {
    "question": {
      "en": "find all occurrences of the pattern '\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+' within `strs`"
    },
    "mr": {
      "python": "re.findall('\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+', strs)"
    },
    "question_id": 17352321
  },
  {
    "question": {
      "en": "Print a celsius symbol with matplotlib"
    },
    "mr": {
      "python": "ax.set_xlabel('Temperature ($^\\\\circ$C)')"
    },
    "question_id": 8440117
  },
  {
    "question": {
      "en": "Creating an empty list `l`"
    },
    "mr": {
      "python": "l = list()"
    },
    "question_id": 2972212
  },
  {
    "question": {
      "en": "display current time in readable format"
    },
    "mr": {
      "python": "time.strftime('%l:%M%p %z on %b %d, %Y')"
    },
    "question_id": 3961581
  },
  {
    "question": {
      "en": "sum each element `x` in list `first` with element `y` at the same index in list `second`."
    },
    "mr": {
      "python": "[(x + y) for x, y in zip(first, second)]"
    },
    "question_id": 14050824
  },
  {
    "question": {
      "en": "convert python dictionary `your_data` to json array"
    },
    "mr": {
      "python": "json.dumps(your_data, ensure_ascii=False)"
    },
    "question_id": 14661051
  },
  {
    "question": {
      "en": "Slice `url` with '&' as delimiter  to get  \"http://www.domainname.com/page?CONTENT_ITEM_ID=1234\" from url \"http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3\r\n\""
    },
    "mr": {
      "python": "url.split('&')"
    },
    "question_id": 258746
  },
  {
    "question": {
      "en": "printing numbers rounding up to third decimal place"
    },
    "mr": {
      "python": "print('%.3f' % 3.1415)"
    },
    "question_id": 3241594
  },
  {
    "question": {
      "en": "read a text file 'very_Important.txt' into a string variable `str`"
    },
    "mr": {
      "python": "str = open('very_Important.txt', 'r').read()"
    },
    "question_id": 8369219
  },
  {
    "question": {
      "en": "split dataframe `df` where the value of column `a` is equal to 'B'"
    },
    "mr": {
      "python": "df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())"
    },
    "question_id": 13353233
  },
  {
    "question": {
      "en": "get logical xor of `a` and `b`"
    },
    "mr": {
      "python": "(bool(a) != bool(b))"
    },
    "question_id": 432842
  },
  {
    "question": {
      "en": "convert csv file 'test.csv' into two-dimensional matrix"
    },
    "mr": {
      "python": "numpy.loadtxt(open('test.csv', 'rb'), delimiter=',', skiprows=1)"
    },
    "question_id": 4315506
  },
  {
    "question": {
      "en": "adding url `url` to mysql row"
    },
    "mr": {
      "python": "cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))"
    },
    "question_id": 13042013
  },
  {
    "question": {
      "en": "sort dataframe `df` based on column 'b' in ascending and column 'c' in descending"
    },
    "mr": {
      "python": "df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)"
    },
    "question_id": 17141558
  },
  {
    "question": {
      "en": "using python's datetime module, get the year that utc-11 is currently in"
    },
    "mr": {
      "python": "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"
    },
    "question_id": 14043080
  },
  {
    "question": {
      "en": "get a random key `country` and value `capital` form a dictionary `d`"
    },
    "mr": {
      "python": "country, capital = random.choice(list(d.items()))"
    },
    "question_id": 4859292
  },
  {
    "question": {
      "en": "match regex 'abc(de)fg(123)' on string 'abcdefg123 and again abcdefg123'"
    },
    "mr": {
      "python": "re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')"
    },
    "question_id": 6018340
  },
  {
    "question": {
      "en": "writing items in list `thelist` to file `thefile`"
    },
    "mr": {
      "python": "for item in thelist:\n    pass"
    },
    "question_id": 899103
  },
  {
    "question": {
      "en": "create a regular expression object with a pattern that will match nothing"
    },
    "mr": {
      "python": "re.compile('a^')"
    },
    "question_id": 940822
  },
  {
    "question": {
      "en": "a sequence of empty lists of length `n`"
    },
    "mr": {
      "python": "[[] for _ in range(n)]"
    },
    "question_id": 23612271
  },
  {
    "question": {
      "en": "Return values for column `C` after group by on column `A` and `B` in dataframe `df`"
    },
    "mr": {
      "python": "df.groupby(['A', 'B'])['C'].unique()"
    },
    "question_id": 33680914
  },
  {
    "question": {
      "en": "Check if 3 is not in a list [2, 3, 4]"
    },
    "mr": {
      "python": "(3 not in [2, 3, 4])"
    },
    "question_id": 10406130
  },
  {
    "question": {
      "en": "parse a YAML file \"example.yaml\""
    },
    "mr": {
      "python": "with open('example.yaml', 'r') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)"
    },
    "question_id": 1773805
  },
  {
    "question": {
      "en": "remove all instances of `[1, 1]` from a list `a`"
    },
    "mr": {
      "python": "[x for x in a if x != [1, 1]]"
    },
    "question_id": 2186656
  },
  {
    "question": {
      "en": "find all anchors with a hyperlink that matches the pattern '^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'"
    },
    "mr": {
      "python": "soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))"
    },
    "question_id": 15313250
  },
  {
    "question": {
      "en": "match blank lines in `s` with regular expressions"
    },
    "mr": {
      "python": "re.split('\\n\\\\s*\\n', s)"
    },
    "question_id": 1197600
  },
  {
    "question": {
      "en": "set text color as `red` and background color as `#A3C1DA` in qpushbutton"
    },
    "mr": {
      "python": "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')"
    },
    "question_id": 24659239
  },
  {
    "question": {
      "en": "get the output of a subprocess command `echo \"foo\"` in command line"
    },
    "mr": {
      "python": "subprocess.check_output('echo \"foo\"', shell=True)"
    },
    "question_id": 8217613
  },
  {
    "question": {
      "en": "print variable `value ` without spaces"
    },
    "mr": {
      "python": "print('Value is \"' + str(value) + '\"')"
    },
    "question_id": 28669459
  },
  {
    "question": {
      "en": "merge rows from dataframe `df1` with rows from dataframe `df2` and calculate the mean for rows that have the same value of axis 1"
    },
    "mr": {
      "python": "pd.concat((df1, df2), axis=1).mean(axis=1)"
    },
    "question_id": 19490064
  },
  {
    "question": {
      "en": "sort a list of objects `s` by a member variable 'resultType'"
    },
    "mr": {
      "python": "s.sort(key=operator.attrgetter('resultType'))"
    },
    "question_id": 2338531
  },
  {
    "question": {
      "en": "convert dictionary of pairs `d` to a list of tuples"
    },
    "mr": {
      "python": "[(v, k) for k, v in d.items()]"
    },
    "question_id": 674519
  },
  {
    "question": {
      "en": "sort the list of tuples `lst` by the sum of every value except the first and by the first value in reverse order"
    },
    "mr": {
      "python": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)"
    },
    "question_id": 40384599
  },
  {
    "question": {
      "en": "Check the status code of url `url`"
    },
    "mr": {
      "python": "r = requests.head(url)\nreturn (r.status_code == 200)"
    },
    "question_id": 1949318
  },
  {
    "question": {
      "en": "limit float 13.949999999999999 to two decimal points"
    },
    "mr": {
      "python": "'{0:.2f}'.format(13.95)"
    },
    "question_id": 455612
  },
  {
    "question": {
      "en": "convert dataframe `df` to list of dictionaries including the index values"
    },
    "mr": {
      "python": "df.to_dict('index')"
    },
    "question_id": 29815129
  },
  {
    "question": {
      "en": "sort a zipped list `zipped` using lambda function"
    },
    "mr": {
      "python": "sorted(zipped, key=lambda x: x[1])"
    },
    "question_id": 7142227
  },
  {
    "question": {
      "en": "replacing  '\\u200b' with '*' in a string  using regular expressions"
    },
    "mr": {
      "python": "'used\\u200b'.replace('\\u200b', '*')"
    },
    "question_id": 31522361
  },
  {
    "question": {
      "en": "append a path `/path/to/main_folder` in system path"
    },
    "mr": {
      "python": "sys.path.append('/path/to/main_folder')"
    },
    "question_id": 9153527
  },
  {
    "question": {
      "en": "apply functions `mean` and `std` to each column in dataframe `df`"
    },
    "mr": {
      "python": "df.groupby(lambda idx: 0).agg(['mean', 'std'])"
    },
    "question_id": 22128218
  },
  {
    "question": {
      "en": "generate random upper-case ascii string of 12 characters length"
    },
    "mr": {
      "python": "print(''.join(choice(ascii_uppercase) for i in range(12)))"
    },
    "question_id": 18319101
  },
  {
    "question": {
      "en": "get the indexes of the largest `2` values from a list of integers `a`"
    },
    "mr": {
      "python": "sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]"
    },
    "question_id": 13070461
  },
  {
    "question": {
      "en": "calculate the sum of the squares of each value in list `l`"
    },
    "mr": {
      "python": "sum(map(lambda x: x * x, l))"
    },
    "question_id": 26894227
  },
  {
    "question": {
      "en": "using beautifulsoup to select div blocks within html `soup`"
    },
    "mr": {
      "python": "soup.find_all('div', class_='crBlock ')"
    },
    "question_id": 19011613
  },
  {
    "question": {
      "en": "Search for string 'blabla' in txt file 'example.txt'"
    },
    "mr": {
      "python": "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"
    },
    "question_id": 4940032
  },
  {
    "question": {
      "en": "Checking if website \"http://www.stackoverflow.com\" is up"
    },
    "mr": {
      "python": "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"
    },
    "question_id": 1949318
  },
  {
    "question": {
      "en": "make a copy of list `old_list`"
    },
    "mr": {
      "python": "[i for i in old_list]"
    },
    "question_id": 2612802
  },
  {
    "question": {
      "en": "run flask application `app` in debug mode."
    },
    "mr": {
      "python": "app.run(debug=True)"
    },
    "question_id": 32722143
  },
  {
    "question": {
      "en": "remove extra white spaces & tabs from a string `s`"
    },
    "mr": {
      "python": "\"\"\" \"\"\".join(s.split())"
    },
    "question_id": 4241757
  },
  {
    "question": {
      "en": "throw an error window in python in windows"
    },
    "mr": {
      "python": "ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)"
    },
    "question_id": 3365673
  },
  {
    "question": {
      "en": "count the number of items in a generator/iterator `it`"
    },
    "mr": {
      "python": "sum(1 for i in it)"
    },
    "question_id": 5384570
  },
  {
    "question": {
      "en": "remove all values within one list `[2, 3, 7]` from another list `a`"
    },
    "mr": {
      "python": "[x for x in a if x not in [2, 3, 7]]"
    },
    "question_id": 2514961
  },
  {
    "question": {
      "en": "Find average of a nested list `a`"
    },
    "mr": {
      "python": "a = [(sum(x) / len(x)) for x in zip(*a)]"
    },
    "question_id": 2153444
  },
  {
    "question": {
      "en": "create a list containing elements of list `a` if the sum of the element is greater than 10"
    },
    "mr": {
      "python": "[item for item in a if sum(item) > 10]"
    },
    "question_id": 2655956
  },
  {
    "question": {
      "en": "get the number of values in list `j` that is greater than 5"
    },
    "mr": {
      "python": "sum(((i > 5) for i in j))"
    },
    "question_id": 10543303
  },
  {
    "question": {
      "en": "create 4 numbers in range between 1 and 3"
    },
    "mr": {
      "python": "print(np.linspace(1, 3, num=4, endpoint=False))"
    },
    "question_id": 31143732
  },
  {
    "question": {
      "en": "find all elements in a list of tuples `a` where the first element of each tuple equals 1"
    },
    "mr": {
      "python": "[item for item in a if item[0] == 1]"
    },
    "question_id": 2191699
  },
  {
    "question": {
      "en": "Sort a structured numpy array 'df' on multiple columns 'year', 'month' and 'day'."
    },
    "mr": {
      "python": "df.sort(['year', 'month', 'day'])"
    },
    "question_id": 19156472
  },
  {
    "question": {
      "en": "Iterating key and items over dictionary `d`"
    },
    "mr": {
      "python": "for (k, v) in list(d.items()):\n    pass"
    },
    "question_id": 3294889
  },
  {
    "question": {
      "en": "get biggest 3 values from each column of the pandas dataframe `data`"
    },
    "mr": {
      "python": "data.apply(lambda x: sorted(x, 3))"
    },
    "question_id": 20477190
  },
  {
    "question": {
      "en": "store data frame `df` to file `file_name` using pandas, python"
    },
    "mr": {
      "python": "df.to_pickle(file_name)"
    },
    "question_id": 17098654
  },
  {
    "question": {
      "en": "Sort items in dictionary `d`  using the first part of the key after splitting the key"
    },
    "mr": {
      "python": "sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))"
    },
    "question_id": 15795525
  },
  {
    "question": {
      "en": "output first 100 characters in a string `my_string`"
    },
    "mr": {
      "python": "print(my_string[0:100])"
    },
    "question_id": 3486384
  },
  {
    "question": {
      "en": "merge 2 dataframes `df1` and `df2` with same values in a column 'revenue' with and index 'date'"
    },
    "mr": {
      "python": "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"
    },
    "question_id": 41463763
  },
  {
    "question": {
      "en": "Find a max value of the key `count` in a nested dictionary `d`"
    },
    "mr": {
      "python": "max(d, key=lambda x: d[x]['count'])"
    },
    "question_id": 12829889
  },
  {
    "question": {
      "en": "Strip all non-ASCII characters from a unicode string, `\\xa3\\u20ac\\xa3\\u20ac`"
    },
    "mr": {
      "python": "print(set(re.sub('[\\x00-\\x7f]', '', '\\xa3\\u20ac\\xa3\\u20ac')))"
    },
    "question_id": 16866261
  },
  {
    "question": {
      "en": "remove empty strings from list `str_list`"
    },
    "mr": {
      "python": "str_list = list([_f for _f in str_list if _f])"
    },
    "question_id": 3845423
  },
  {
    "question": {
      "en": "get creation time of file `file`"
    },
    "mr": {
      "python": "time.ctime(os.path.getctime(file))"
    },
    "question_id": 237079
  },
  {
    "question": {
      "en": "Select rows whose value of the \"B\" column is \"one\" or \"three\" in the DataFrame `df`"
    },
    "mr": {
      "python": "print(df.loc[df['B'].isin(['one', 'three'])])"
    },
    "question_id": 17071871
  },
  {
    "question": {
      "en": "encode unicode string '\\xc5\\xc4\\xd6' to utf-8 code"
    },
    "mr": {
      "python": "print('\\xc5\\xc4\\xd6'.encode('UTF8'))"
    },
    "question_id": 15740236
  },
  {
    "question": {
      "en": "set the size of figure `fig` in inches to width height of `w`, `h`"
    },
    "mr": {
      "python": "fig.set_size_inches(w, h, forward=True)"
    },
    "question_id": 15882395
  },
  {
    "question": {
      "en": "regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits."
    },
    "mr": {
      "python": "re.compile('{}-\\\\d*'.format(user))"
    },
    "question_id": 5900683
  },
  {
    "question": {
      "en": "sorting list 'X' based on values from another list 'Y'"
    },
    "mr": {
      "python": "[x for y, x in sorted(zip(Y, X))]"
    },
    "question_id": 6618515
  },
  {
    "question": {
      "en": "limit float 3.14159 to two decimal points"
    },
    "mr": {
      "python": "('%.2f' % 3.14159)"
    },
    "question_id": 455612
  },
  {
    "question": {
      "en": "zip lists `[1, 2], [3, 4], [5, 6]` in a list"
    },
    "mr": {
      "python": "zip(*[[1, 2], [3, 4], [5, 6]])"
    },
    "question_id": 4112265
  },
  {
    "question": {
      "en": "Remove character `char` from a string `a`"
    },
    "mr": {
      "python": "a = a.replace(char, '')"
    },
    "question_id": 3939361
  },
  {
    "question": {
      "en": "Display maximum output data of columns in dataframe `pandas` that will fit into the screen"
    },
    "mr": {
      "python": "pandas.set_option('display.max_columns', None)"
    },
    "question_id": 11361985
  },
  {
    "question": {
      "en": "pull a value with key 'name' from a json object `item`"
    },
    "mr": {
      "python": "print(item['name'])"
    },
    "question_id": 39605640
  },
  {
    "question": {
      "en": "How to plot with x-axis at the top of the figure?"
    },
    "mr": {
      "python": "ax.xaxis.set_ticks_position('top')"
    },
    "question_id": 8639973
  },
  {
    "question": {
      "en": "selenium wait for driver `driver` 60 seconds before throwing a NoSuchElementExceptions exception"
    },
    "mr": {
      "python": "driver.implicitly_wait(60)"
    },
    "question_id": 16739319
  },
  {
    "question": {
      "en": "list all files in directory \".\""
    },
    "mr": {
      "python": "for (dirname, dirnames, filenames) in os.walk('.'):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        pass"
    },
    "question_id": 120656
  },
  {
    "question": {
      "en": "function to get the size of object"
    },
    "mr": {
      "python": "len()"
    },
    "question_id": 1712227
  },
  {
    "question": {
      "en": "concatenate a series `students` onto a dataframe `marks` with pandas"
    },
    "mr": {
      "python": "pd.concat([students, pd.DataFrame(marks)], axis=1)"
    },
    "question_id": 20512297
  },
  {
    "question": {
      "en": "Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`"
    },
    "mr": {
      "python": "np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])"
    },
    "question_id": 28253102
  },
  {
    "question": {
      "en": "read pandas data frame csv `comma.csv` with extra commas in column specifying string delimiter `'`"
    },
    "mr": {
      "python": "df = pd.read_csv('comma.csv', quotechar=\"'\")"
    },
    "question_id": 32743479
  },
  {
    "question": {
      "en": "Serialize dictionary `data` and its keys to a JSON formatted string"
    },
    "mr": {
      "python": "json.dumps({str(k): v for k, v in data.items()})"
    },
    "question_id": 12337583
  },
  {
    "question": {
      "en": "change NaN values in dataframe `df` using preceding values in the frame"
    },
    "mr": {
      "python": "df.fillna(method='ffill', inplace=True)"
    },
    "question_id": 38457059
  },
  {
    "question": {
      "en": "print a string after a specific substring ', ' in string `my_string `"
    },
    "mr": {
      "python": "print(my_string.split(', ', 1)[1])"
    },
    "question_id": 12572362
  },
  {
    "question": {
      "en": "convert string `apple` from iso-8859-1/latin1 to utf-8"
    },
    "mr": {
      "python": "apple.decode('iso-8859-1').encode('utf8')"
    },
    "question_id": 6539881
  },
  {
    "question": {
      "en": "divide the members of a list `conversions` by the corresponding members of another list `trials`"
    },
    "mr": {
      "python": "[(c / t) for c, t in zip(conversions, trials)]"
    },
    "question_id": 3731426
  },
  {
    "question": {
      "en": "trim string \" Hello \""
    },
    "mr": {
      "python": "' Hello '.strip()"
    },
    "question_id": 761804
  },
  {
    "question": {
      "en": "kill a process with id `process.pid`"
    },
    "mr": {
      "python": "os.kill(process.pid, signal.SIGKILL)"
    },
    "question_id": 1064335
  },
  {
    "question": {
      "en": "split string in column 'stats' by ',' into separate columns in dataframe `df`"
    },
    "mr": {
      "python": "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"
    },
    "question_id": 29370211
  },
  {
    "question": {
      "en": "use regex pattern '^12(?=.{4}$)' to remove digit 12 if followed by 4 other digits in column `c_contofficeID` of dataframe `df`"
    },
    "mr": {
      "python": "df.c_contofficeID.str.replace('^12(?=.{4}$)', '')"
    },
    "question_id": 40273313
  },
  {
    "question": {
      "en": "convert 3652458 to string represent a 32bit hex number"
    },
    "mr": {
      "python": "\"\"\"0x{0:08X}\"\"\".format(3652458)"
    },
    "question_id": 7253907
  },
  {
    "question": {
      "en": "split string \"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\" on the first occurrence of delimiter '='"
    },
    "mr": {
      "python": "\"\"\"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\"\"\".split('=', 1)"
    },
    "question_id": 11009155
  },
  {
    "question": {
      "en": "round number 1.005 up to 2 decimal places"
    },
    "mr": {
      "python": "round(1.005, 2)"
    },
    "question_id": 31818050
  },
  {
    "question": {
      "en": "How to split a string into integers in Python?"
    },
    "mr": {
      "python": "map(int, '42 0'.split())"
    },
    "question_id": 6429638
  },
  {
    "question": {
      "en": "converting integer `num` to list"
    },
    "mr": {
      "python": "[int(x) for x in str(num)]"
    },
    "question_id": 13905936
  },
  {
    "question": {
      "en": "Setting stacksize in a python script"
    },
    "mr": {
      "python": "os.system('ulimit -s unlimited; some_executable')"
    },
    "question_id": 5061582
  },
  {
    "question": {
      "en": "apply jinja2 filters `forceescape` and `linebreaks` on variable `my_variable`"
    },
    "mr": {
      "python": "{{my_variable | forceescape | linebreaks}}"
    },
    "question_id": 4901483
  },
  {
    "question": {
      "en": "Add row `['8/19/2014', 'Jun', 'Fly', '98765']` to dataframe `df`"
    },
    "mr": {
      "python": "df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']"
    },
    "question_id": 19365513
  },
  {
    "question": {
      "en": "get the creation time of file `path_to_file`"
    },
    "mr": {
      "python": "return os.path.getctime(path_to_file)"
    },
    "question_id": 237079
  },
  {
    "question": {
      "en": "split string `a` using new-line character '\\n' as separator"
    },
    "mr": {
      "python": "a.rstrip().split('\\n')"
    },
    "question_id": 2094176
  },
  {
    "question": {
      "en": "Get day name from a datetime object"
    },
    "mr": {
      "python": "date.today().strftime('%A')"
    },
    "question_id": 8380389
  },
  {
    "question": {
      "en": "pair each element in list `it` 3 times into a tuple"
    },
    "mr": {
      "python": "zip(it, it, it)"
    },
    "question_id": 23286254
  },
  {
    "question": {
      "en": "get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo'"
    },
    "mr": {
      "python": "df.loc[gb.groups['foo'], ('A', 'B')]"
    },
    "question_id": 14734533
  },
  {
    "question": {
      "en": "create dictionary from list of variables 'foo' and 'bar' already defined"
    },
    "mr": {
      "python": "dict((k, globals()[k]) for k in ('foo', 'bar'))"
    },
    "question_id": 9495262
  },
  {
    "question": {
      "en": "sort a dictionary `y` by value then by key"
    },
    "mr": {
      "python": "sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)"
    },
    "question_id": 7742752
  },
  {
    "question": {
      "en": "scalar multiply matrix `a` by `b`"
    },
    "mr": {
      "python": "(a.T * b).T"
    },
    "question_id": 3809265
  },
  {
    "question": {
      "en": "remove backslashes from string `result`"
    },
    "mr": {
      "python": "result.replace('\\\\', '')"
    },
    "question_id": 3160752
  },
  {
    "question": {
      "en": "SQLite get a list of column names from cursor object `cursor`"
    },
    "mr": {
      "python": "names = list(map(lambda x: x[0], cursor.description))"
    },
    "question_id": 7831371
  },
  {
    "question": {
      "en": "Normalize line ends in a string 'mixed'"
    },
    "mr": {
      "python": "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')"
    },
    "question_id": 1749466
  },
  {
    "question": {
      "en": "create a set containing all keys' names from dictionary `LoD`"
    },
    "mr": {
      "python": "{k for d in LoD for k in list(d.keys())}"
    },
    "question_id": 11399384
  },
  {
    "question": {
      "en": "get all combination of n binary values"
    },
    "mr": {
      "python": "lst = map(list, itertools.product([0, 1], repeat=n))"
    },
    "question_id": 14931769
  },
  {
    "question": {
      "en": "Find all keys from a dictionary `d` whose values are `desired_value`"
    },
    "mr": {
      "python": "[k for k, v in d.items() if v == desired_value]"
    },
    "question_id": 7657457
  },
  {
    "question": {
      "en": "Get data of dataframe `df` where the sum of column 'X' grouped by column 'User' is equal to 0"
    },
    "mr": {
      "python": "df.loc[df.groupby('User')['X'].transform(sum) == 0]"
    },
    "question_id": 27868020
  },
  {
    "question": {
      "en": "remove None value from list `L`"
    },
    "mr": {
      "python": "[x for x in L if x is not None]"
    },
    "question_id": 16096754
  },
  {
    "question": {
      "en": "print a list of floating numbers `l` using string formatting"
    },
    "mr": {
      "python": "print([('%5.3f' % val) for val in l])"
    },
    "question_id": 7351270
  },
  {
    "question": {
      "en": "split a list `l` into evenly sized chunks `n`"
    },
    "mr": {
      "python": "[l[i:i + n] for i in range(0, len(l), n)]"
    },
    "question_id": 312443
  },
  {
    "question": {
      "en": "quit program"
    },
    "mr": {
      "python": "sys.exit(0)"
    },
    "question_id": 2823472
  },
  {
    "question": {
      "en": "print \"Please enter something: \" to console, and read user input to `var`"
    },
    "mr": {
      "python": "var = input('Please enter something: ')"
    },
    "question_id": 70797
  },
  {
    "question": {
      "en": "get the next value greatest to `2` from a list of numbers `num_list`"
    },
    "mr": {
      "python": "min([x for x in num_list if x > 2])"
    },
    "question_id": 29471884
  },
  {
    "question": {
      "en": "read excel file `file_name` using pandas"
    },
    "mr": {
      "python": "dfs = pd.read_excel(file_name, sheetname=None)"
    },
    "question_id": 16888888
  },
  {
    "question": {
      "en": "extract dictionary `d` from list `a` where the value associated with the key 'name' of dictionary `d` is equal to 'pluto'"
    },
    "mr": {
      "python": "[d for d in a if d['name'] == 'pluto']"
    },
    "question_id": 7900882
  },
  {
    "question": {
      "en": "Find all records from collection `collection` without extracting mongo id `_id`"
    },
    "mr": {
      "python": "db.collection.find({}, {'_id': False})"
    },
    "question_id": 12345387
  },
  {
    "question": {
      "en": "Iterate over dictionary `d` in ascending order of values"
    },
    "mr": {
      "python": "sorted(iter(d.items()), key=lambda x: x[1])"
    },
    "question_id": 674509
  },
  {
    "question": {
      "en": "sort list `bar` by each element's attribute `attrb1` and attribute `attrb2` in reverse order"
    },
    "mr": {
      "python": "bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)"
    },
    "question_id": 4768151
  },
  {
    "question": {
      "en": "get yesterday's date as a string in `YYYY-MM-DD` format using timedelta"
    },
    "mr": {
      "python": "(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')"
    },
    "question_id": 30483977
  },
  {
    "question": {
      "en": "Get all object attributes of object `obj`"
    },
    "mr": {
      "python": "print((obj.__dict__))"
    },
    "question_id": 6886493
  },
  {
    "question": {
      "en": "create list `done` containing permutations of each element in list `[a, b, c, d]` with variable `x` as tuples"
    },
    "mr": {
      "python": "done = [(el, x) for el in [a, b, c, d]]"
    },
    "question_id": 9962293
  },
  {
    "question": {
      "en": "Filter a json from a key-value pair as `{'fixed_key_1': 'foo2'}` in Django"
    },
    "mr": {
      "python": "Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'}])"
    },
    "question_id": 34358278
  },
  {
    "question": {
      "en": "split string 'Words, words, words.' on punctuation"
    },
    "mr": {
      "python": "re.split('\\\\W+', 'Words, words, words.')"
    },
    "question_id": 19894478
  },
  {
    "question": {
      "en": "convert tuple `tst` to string `tst2`"
    },
    "mr": {
      "python": "tst2 = str(tst)"
    },
    "question_id": 3886669
  },
  {
    "question": {
      "en": "replace all the nan values with 0 in a pandas dataframe `df`"
    },
    "mr": {
      "python": "df.fillna(0)"
    },
    "question_id": 13295735
  },
  {
    "question": {
      "en": "read file 'myfile.txt' using universal newline mode 'U'"
    },
    "mr": {
      "python": "print(open('myfile.txt', 'U').read())"
    },
    "question_id": 2798627
  },
  {
    "question": {
      "en": "check if datafram `df` has any NaN vlaues"
    },
    "mr": {
      "python": "df.isnull().values.any()"
    },
    "question_id": 29530232
  },
  {
    "question": {
      "en": "calculate the md5 checksum of a file named  'filename.exe'"
    },
    "mr": {
      "python": "hashlib.md5(open('filename.exe', 'rb').read()).hexdigest()"
    },
    "question_id": 16874598
  },
  {
    "question": {
      "en": "Concatenating two one-dimensional NumPy arrays 'a' and 'b'."
    },
    "mr": {
      "python": "numpy.concatenate([a, b])"
    },
    "question_id": 9236926
  },
  {
    "question": {
      "en": "delete all columns in  DataFrame `df` that do not hold a non-zero value in its records"
    },
    "mr": {
      "python": "df.loc[:, ((df != 0).any(axis=0))]"
    },
    "question_id": 21164910
  },
  {
    "question": {
      "en": "Remove duplicates elements from list `sequences` and sort it in ascending order"
    },
    "mr": {
      "python": "sorted(set(itertools.chain.from_iterable(sequences)))"
    },
    "question_id": 7458689
  },
  {
    "question": {
      "en": "list the contents of a directory '/home/username/www/'"
    },
    "mr": {
      "python": "os.listdir('/home/username/www/')"
    },
    "question_id": 2759323
  },
  {
    "question": {
      "en": "convert list with str into list with int"
    },
    "mr": {
      "python": "list(map(int, ['1', '2', '3']))"
    },
    "question_id": 2424412
  },
  {
    "question": {
      "en": "multiply all items in a list `[1, 2, 3, 4, 5, 6]` together"
    },
    "mr": {
      "python": "from functools import reduce\nreduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])"
    },
    "question_id": 13840379
  },
  {
    "question": {
      "en": "setup a smtp mail server to `smtp.gmail.com` with port `587`"
    },
    "mr": {
      "python": "server = smtplib.SMTP('smtp.gmail.com', 587)"
    },
    "question_id": 12030179
  },
  {
    "question": {
      "en": "replace repeated instances of \"*\" with a single instance of \"*\""
    },
    "mr": {
      "python": "re.sub('\\\\*+', '*', text)"
    },
    "question_id": 3878555
  },
  {
    "question": {
      "en": "find the index of sub string 'a' in string `str`"
    },
    "mr": {
      "python": "str.find('a')"
    },
    "question_id": 674764
  },
  {
    "question": {
      "en": "Swap values in a tuple/list in list `mylist`"
    },
    "mr": {
      "python": "[(t[1], t[0]) for t in mylist]"
    },
    "question_id": 13384841
  },
  {
    "question": {
      "en": "delete every non `utf-8` characters from a string `line`"
    },
    "mr": {
      "python": "line = line.decode('utf-8', 'ignore').encode('utf-8')"
    },
    "question_id": 26541968
  },
  {
    "question": {
      "en": "get a list of keys of dictionary `things` sorted by the value of nested dictionary key 'weight'"
    },
    "mr": {
      "python": "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"
    },
    "question_id": 42352887
  },
  {
    "question": {
      "en": "create dict of squared int values in range of 100"
    },
    "mr": {
      "python": "{(x ** 2) for x in range(100)}"
    },
    "question_id": 19454970
  },
  {
    "question": {
      "en": "remove newlines and whitespace from string `yourstring`"
    },
    "mr": {
      "python": "re.sub('[\\\\ \\\\n]{2,}', '', yourstring)"
    },
    "question_id": 4270742
  },
  {
    "question": {
      "en": "create a dictionary of pairs from a list of tuples `myListOfTuples`"
    },
    "mr": {
      "python": "dict(x[1:] for x in reversed(myListOfTuples))"
    },
    "question_id": 3457673
  },
  {
    "question": {
      "en": "Collapse hierarchical column index to level 0 in dataframe `df`"
    },
    "mr": {
      "python": "df.columns = df.columns.get_level_values(0)"
    },
    "question_id": 14507794
  },
  {
    "question": {
      "en": "get tuples from lists `lst` and `lst2` using list comprehension in python 2"
    },
    "mr": {
      "python": "[(lst[i], lst2[i]) for i in range(len(lst))]"
    },
    "question_id": 18990069
  },
  {
    "question": {
      "en": "index a list `L` with another list `Idx`"
    },
    "mr": {
      "python": "T = [L[i] for i in Idx]"
    },
    "question_id": 1012185
  },
  {
    "question": {
      "en": "convert hex '\\xff' to integer"
    },
    "mr": {
      "python": "ord('\\xff')"
    },
    "question_id": 19819863
  },
  {
    "question": {
      "en": "removing vowel characters 'aeiouAEIOU' from string `text`"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(c for c in text if c not in 'aeiouAEIOU')"
    },
    "question_id": 41083229
  },
  {
    "question": {
      "en": "remove periods inbetween capital letters that aren't immediately preceeded by word character(s) in a string `s` using regular expressions"
    },
    "mr": {
      "python": "re.sub('(?<!\\\\w)([A-Z])\\\\.', '\\\\1', s)"
    },
    "question_id": 40196941
  },
  {
    "question": {
      "en": "check if string `str` is palindrome"
    },
    "mr": {
      "python": "str(n) == str(n)[::-1]"
    },
    "question_id": 17331290
  },
  {
    "question": {
      "en": "Sum numbers in a list 'your_list'"
    },
    "mr": {
      "python": "sum(your_list)"
    },
    "question_id": 11344827
  },
  {
    "question": {
      "en": "Calling an external command \"echo Hello World\""
    },
    "mr": {
      "python": "return_code = subprocess.call('echo Hello World', shell=True)"
    },
    "question_id": 89228
  },
  {
    "question": {
      "en": "Normalize string `str` from 'cp1252' code to 'utf-8' code"
    },
    "mr": {
      "python": "print(str.encode('cp1252').decode('utf-8').encode('cp1252').decode('utf-8'))"
    },
    "question_id": 10525301
  },
  {
    "question": {
      "en": "create a list containing the indices of elements greater than 4 in list `a`"
    },
    "mr": {
      "python": "[i for i, v in enumerate(a) if v > 4]"
    },
    "question_id": 13717463
  },
  {
    "question": {
      "en": "convert a list `my_list` into string with values separated by spaces"
    },
    "mr": {
      "python": "\"\"\" \"\"\".join(my_list)"
    },
    "question_id": 12309976
  },
  {
    "question": {
      "en": "get full path of current directory"
    },
    "mr": {
      "python": "os.path.dirname(os.path.abspath(__file__))"
    },
    "question_id": 3430372
  },
  {
    "question": {
      "en": "python getting a list of value from list of dict"
    },
    "mr": {
      "python": "[d['value'] for d in l if 'value' in d]"
    },
    "question_id": 7271482
  },
  {
    "question": {
      "en": "sorting a list of dictionary `a` by values in descending order"
    },
    "mr": {
      "python": "sorted(a, key=dict.values, reverse=True)"
    },
    "question_id": 10915391
  },
  {
    "question": {
      "en": "check if `x` is an integer"
    },
    "mr": {
      "python": "isinstance(x, int)"
    },
    "question_id": 3501382
  },
  {
    "question": {
      "en": "iterate over a dictionary `d` in sorted order"
    },
    "mr": {
      "python": "it = iter(sorted(d.items()))"
    },
    "question_id": 364519
  },
  {
    "question": {
      "en": "Get index of numpy array `a` with another numpy array `b`"
    },
    "mr": {
      "python": "a[tuple(b)]"
    },
    "question_id": 5508352
  },
  {
    "question": {
      "en": "get list of keys in dictionary `my_dict` whose values contain values from list `lst`"
    },
    "mr": {
      "python": "[key for item in lst for key, value in list(my_dict.items()) if item in value]"
    },
    "question_id": 32792874
  },
  {
    "question": {
      "en": "get a list of items form nested list `li` where third element of each item contains string 'ar'"
    },
    "mr": {
      "python": "[x for x in li if 'ar' in x[2]]"
    },
    "question_id": 6889785
  },
  {
    "question": {
      "en": "BeautifulSoup find tag 'div' with styling 'width=300px;' in HTML string `soup`"
    },
    "mr": {
      "python": "soup.findAll('div', style='width=300px;')"
    },
    "question_id": 3945750
  },
  {
    "question": {
      "en": "append a list [8, 7] to list `foo`"
    },
    "mr": {
      "python": "foo.append([8, 7])"
    },
    "question_id": 4641765
  },
  {
    "question": {
      "en": "Get all the second values from a list of lists `A`"
    },
    "mr": {
      "python": "[row[1] for row in A]"
    },
    "question_id": 903853
  },
  {
    "question": {
      "en": "recursively go through all subdirectories and files in `rootdir`"
    },
    "mr": {
      "python": "for (root, subFolders, files) in os.walk(rootdir):\n    pass"
    },
    "question_id": 13571134
  },
  {
    "question": {
      "en": "get the largest index of the last occurrence of characters '([{' in string `test_string`"
    },
    "mr": {
      "python": "max(test_string.rfind(i) for i in '([{')"
    },
    "question_id": 31950612
  },
  {
    "question": {
      "en": "check if file `filename` is descendant of directory '/the/dir/'"
    },
    "mr": {
      "python": "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"
    },
    "question_id": 3328012
  },
  {
    "question": {
      "en": "get a dict of variable names `['some', 'list', 'of', 'vars']` as a string and their values"
    },
    "mr": {
      "python": "dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])"
    },
    "question_id": 2553354
  },
  {
    "question": {
      "en": "check if all values of a dictionary `your_dict` are zero `0`"
    },
    "mr": {
      "python": "all(value == 0 for value in list(your_dict.values()))"
    },
    "question_id": 35253971
  },
  {
    "question": {
      "en": "insert row into mysql database with column 'column1' set to the value `value`"
    },
    "mr": {
      "python": "cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))"
    },
    "question_id": 5507948
  },
  {
    "question": {
      "en": "create a json response `response_data`"
    },
    "mr": {
      "python": "return HttpResponse(json.dumps(response_data), content_type='application/json')"
    },
    "question_id": 2428092
  },
  {
    "question": {
      "en": "reset index of series `s`"
    },
    "mr": {
      "python": "s.reset_index(0).reset_index(drop=True)"
    },
    "question_id": 18624039
  },
  {
    "question": {
      "en": "print number `value` as thousands separators"
    },
    "mr": {
      "python": "'{:,}'.format(value)"
    },
    "question_id": 1823058
  },
  {
    "question": {
      "en": "execute sql query 'INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)' with all parameters in list `tup`"
    },
    "mr": {
      "python": "cur.executemany('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)"
    },
    "question_id": 8134602
  },
  {
    "question": {
      "en": "convert `i` to string"
    },
    "mr": {
      "python": "str(i)"
    },
    "question_id": 961632
  },
  {
    "question": {
      "en": "clear the terminal screen in Linux"
    },
    "mr": {
      "python": "os.system('clear')"
    },
    "question_id": 4810537
  },
  {
    "question": {
      "en": "concatenating values in list `L` to a string"
    },
    "mr": {
      "python": "makeitastring = ''.join(map(str, L))"
    },
    "question_id": 5618878
  },
  {
    "question": {
      "en": "Resample dataframe `frame` to resolution of 1 hour `1H` for timeseries index, summing values in the column `radiation` averaging those in column `tamb`"
    },
    "mr": {
      "python": "frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})"
    },
    "question_id": 10020591
  },
  {
    "question": {
      "en": "Access environment variable \"HOME\""
    },
    "mr": {
      "python": "os.environ['HOME']"
    },
    "question_id": 4906977
  },
  {
    "question": {
      "en": "convert values in dictionary `d` into integers"
    },
    "mr": {
      "python": "{k: int(v) for k, v in d.items()}"
    },
    "question_id": 9224385
  },
  {
    "question": {
      "en": "generate the combinations of 3 from a set `{1, 2, 3, 4}`"
    },
    "mr": {
      "python": "print(list(itertools.combinations({1, 2, 3, 4}, 3)))"
    },
    "question_id": 10115967
  },
  {
    "question": {
      "en": "Get average for every three columns in `df` dataframe"
    },
    "mr": {
      "python": "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"
    },
    "question_id": 40963347
  },
  {
    "question": {
      "en": "append a pandas series `b` to the series `a` and get a continuous index"
    },
    "mr": {
      "python": "a.append(b).reset_index(drop=True)"
    },
    "question_id": 20400135
  },
  {
    "question": {
      "en": "get the last element in list `astr`"
    },
    "mr": {
      "python": "astr[(-1)]"
    },
    "question_id": 930397
  },
  {
    "question": {
      "en": "Get the difference between two lists `[1, 2, 2, 2, 3]` and `[1, 2]` that may have duplicate values"
    },
    "mr": {
      "python": "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"
    },
    "question_id": 33435418
  },
  {
    "question": {
      "en": "remove trailing newline in string \"test string\\n\""
    },
    "mr": {
      "python": "'test string\\n'.rstrip()"
    },
    "question_id": 275018
  },
  {
    "question": {
      "en": "Enable the SO_REUSEADDR socket option in socket object `s` to fix the error `only one usage of each socket address is normally permitted`"
    },
    "mr": {
      "python": "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"
    },
    "question_id": 12362542
  },
  {
    "question": {
      "en": "case insensitive comparison between strings `first` and `second`"
    },
    "mr": {
      "python": "(first.upper() == second.upper())"
    },
    "question_id": 319426
  },
  {
    "question": {
      "en": "merge a list of integers `[1, 2, 3, 4, 5]` into a single integer"
    },
    "mr": {
      "python": "from functools import reduce\nreduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])"
    },
    "question_id": 4299741
  },
  {
    "question": {
      "en": "copy a file from `src` to `dst`"
    },
    "mr": {
      "python": "copyfile(src, dst)"
    },
    "question_id": 123198
  },
  {
    "question": {
      "en": "get the average of a list values for each key in dictionary `d`)"
    },
    "mr": {
      "python": "[(i, sum(j) / len(j)) for i, j in list(d.items())]"
    },
    "question_id": 29565452
  },
  {
    "question": {
      "en": "set the value in column 'B' to NaN if the corresponding value in column 'A' is equal to 0 in pandas dataframe `df`"
    },
    "mr": {
      "python": "df.ix[df.A == 0, 'B'] = np.nan"
    },
    "question_id": 12307099
  },
  {
    "question": {
      "en": "copy file '/dir/file.ext' to '/new/dir'"
    },
    "mr": {
      "python": "shutil.copy2('/dir/file.ext', '/new/dir')"
    },
    "question_id": 123198
  },
  {
    "question": {
      "en": "get data of columns with Null values in dataframe `df`"
    },
    "mr": {
      "python": "df[pd.isnull(df).any(axis=1)]"
    },
    "question_id": 14247586
  },
  {
    "question": {
      "en": "check if `x` is an integer"
    },
    "mr": {
      "python": "(type(x) == int)"
    },
    "question_id": 3501382
  },
  {
    "question": {
      "en": "force bash interpreter '/bin/bash' to be used instead of shell"
    },
    "mr": {
      "python": "os.system('GREPDB=\"echo 123\"; /bin/bash -c \"$GREPDB\"')"
    },
    "question_id": 21822054
  },
  {
    "question": {
      "en": "Convert hex string `hexString` to int"
    },
    "mr": {
      "python": "int(hexString, 16)"
    },
    "question_id": 209513
  },
  {
    "question": {
      "en": "replace value '-' in any column of pandas dataframe to \"NaN\""
    },
    "mr": {
      "python": "df.replace('-', 'NaN')"
    },
    "question_id": 42172204
  },
  {
    "question": {
      "en": "count number of occurrences of a substring 'ab' in a string \"abcdabcva\""
    },
    "mr": {
      "python": "\"\"\"abcdabcva\"\"\".count('ab')"
    },
    "question_id": 8899905
  },
  {
    "question": {
      "en": "split string `str` with delimiter '; ' or delimiter ', '"
    },
    "mr": {
      "python": "re.split('; |, ', str)"
    },
    "question_id": 4998629
  },
  {
    "question": {
      "en": "numpy:  check if array 'a' contains all the numbers in array 'b'."
    },
    "mr": {
      "python": "numpy.array([(x in a) for x in b])"
    },
    "question_id": 10565598
  },
  {
    "question": {
      "en": "get the size of list `s`"
    },
    "mr": {
      "python": "len(s)"
    },
    "question_id": 1712227
  },
  {
    "question": {
      "en": "move an x-axis label to the top of a plot `ax` in matplotlib"
    },
    "mr": {
      "python": "ax.xaxis.set_label_position('top')"
    },
    "question_id": 14406214
  },
  {
    "question": {
      "en": "empty a list `lst`"
    },
    "mr": {
      "python": "del lst[:]"
    },
    "question_id": 1400608
  },
  {
    "question": {
      "en": "Get a minimum value from a list of tuples `list` with values of type `string` and `float` with nan"
    },
    "mr": {
      "python": "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"
    },
    "question_id": 15148684
  },
  {
    "question": {
      "en": "get a list of characters in string `x` matching regex pattern `pattern`"
    },
    "mr": {
      "python": "print(re.findall(pattern, x))"
    },
    "question_id": 40094588
  },
  {
    "question": {
      "en": "sum values in list of dictionaries `example_list` with key 'gold'"
    },
    "mr": {
      "python": "sum(item['gold'] for item in example_list)"
    },
    "question_id": 11692613
  },
  {
    "question": {
      "en": "swap each pair of characters in string `s`"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])"
    },
    "question_id": 4605439
  },
  {
    "question": {
      "en": "save numpy array `x` into text file 'test.txt'"
    },
    "mr": {
      "python": "np.savetxt('test.txt', x)"
    },
    "question_id": 3685265
  },
  {
    "question": {
      "en": "replace white spaces in string '  a\\n b\\n c\\nd  e' with empty string ''"
    },
    "mr": {
      "python": "re.sub('(?m)^[^\\\\S\\\\n]+', '', '  a\\n b\\n c\\nd  e')"
    },
    "question_id": 3984539
  },
  {
    "question": {
      "en": "get current datetime in ISO format"
    },
    "mr": {
      "python": "datetime.datetime.now().isoformat()"
    },
    "question_id": 2150739
  },
  {
    "question": {
      "en": "open the login site 'http://somesite.com/adminpanel/index.php' in the browser"
    },
    "mr": {
      "python": "webbrowser.open('http://somesite.com/adminpanel/index.php')"
    },
    "question_id": 21414159
  },
  {
    "question": {
      "en": "Sort list `keys` based on its elements' dot-seperated numbers"
    },
    "mr": {
      "python": "keys.sort(key=lambda x: map(int, x.split('.')))"
    },
    "question_id": 2597099
  },
  {
    "question": {
      "en": "create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`"
    },
    "mr": {
      "python": "dict((key, sum(d[key] for d in dictList)) for key in dictList[0])"
    },
    "question_id": 974678
  },
  {
    "question": {
      "en": "replace backslashes in string `result` with empty string ''"
    },
    "mr": {
      "python": "result = result.replace('\\\\', '')"
    },
    "question_id": 3160752
  },
  {
    "question": {
      "en": "make matplotlib plot legend put marker in legend only once"
    },
    "mr": {
      "python": "legend(numpoints=1)"
    },
    "question_id": 6146778
  },
  {
    "question": {
      "en": "append string 'str' at the beginning of each value in column 'col' of dataframe `df`"
    },
    "mr": {
      "python": "df['col'] = 'str' + df['col'].astype(str)"
    },
    "question_id": 20025882
  },
  {
    "question": {
      "en": "converting string '(1,2,3,4)' to a tuple"
    },
    "mr": {
      "python": "ast.literal_eval('(1,2,3,4)')"
    },
    "question_id": 3945856
  },
  {
    "question": {
      "en": "extract the 2nd elements from a list of tuples"
    },
    "mr": {
      "python": "[x[1] for x in elements]"
    },
    "question_id": 3308102
  },
  {
    "question": {
      "en": "open file '5_1.txt' in directory `direct`"
    },
    "mr": {
      "python": "x_file = open(os.path.join(direct, '5_1.txt'), 'r')"
    },
    "question_id": 13223737
  },
  {
    "question": {
      "en": "append 4 to list `foo`"
    },
    "mr": {
      "python": "foo.append(4)"
    },
    "question_id": 4641765
  },
  {
    "question": {
      "en": "create a 2D array of `Node` objects with dimensions `cols` columns and `rows` rows"
    },
    "mr": {
      "python": "nodes = [[Node() for j in range(cols)] for i in range(rows)]"
    },
    "question_id": 6480441
  },
  {
    "question": {
      "en": "format float `3.5e+20`  to `$3.5 \\\\times 10^{20}$` and set as title of matplotlib plot `ax`"
    },
    "mr": {
      "python": "ax.set_title('$%s \\\\times 10^{%s}$' % ('3.5', '+20'))"
    },
    "question_id": 17306755
  },
  {
    "question": {
      "en": "append 3 lists in one list"
    },
    "mr": {
      "python": "[[] for i in range(3)]"
    },
    "question_id": 11219949
  },
  {
    "question": {
      "en": "sort list `lst` in descending order based on the second item of each tuple in it"
    },
    "mr": {
      "python": "lst.sort(key=lambda x: x[2], reverse=True)"
    },
    "question_id": 11584773
  },
  {
    "question": {
      "en": "Write a string `My String` to a file `file` including new line character"
    },
    "mr": {
      "python": "file.write('My String\\n')"
    },
    "question_id": 2918362
  },
  {
    "question": {
      "en": "set the stdin of the process 'grep f' to be b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'"
    },
    "mr": {
      "python": "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"
    },
    "question_id": 163542
  },
  {
    "question": {
      "en": "convert dictionary `adict` into string"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"
    },
    "question_id": 10472907
  },
  {
    "question": {
      "en": "convert date `my_date` to datetime"
    },
    "mr": {
      "python": "datetime.datetime.combine(my_date, datetime.time.min)"
    },
    "question_id": 15661013
  },
  {
    "question": {
      "en": "call a Python script \"test1.py\""
    },
    "mr": {
      "python": "subprocess.call('test1.py', shell=True)"
    },
    "question_id": 1186789
  },
  {
    "question": {
      "en": "sort list `student_tuples` by second element of each tuple in ascending and third element of each tuple in descending"
    },
    "mr": {
      "python": "print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))"
    },
    "question_id": 16537636
  },
  {
    "question": {
      "en": "call a function `otherfunc` inside a bash script `test.sh` using subprocess"
    },
    "mr": {
      "python": "subprocess.call('test.sh otherfunc')"
    },
    "question_id": 5826427
  },
  {
    "question": {
      "en": "find the index of sub string 's' in string `str` starting from index 16"
    },
    "mr": {
      "python": "str.find('s', 16)"
    },
    "question_id": 674764
  },
  {
    "question": {
      "en": "convert pandas DataFrame `df` to a dictionary using `id` field as the key"
    },
    "mr": {
      "python": "df.set_index('id').to_dict()"
    },
    "question_id": 18695605
  },
  {
    "question": {
      "en": "insert 77 to index 2 of list `x`"
    },
    "mr": {
      "python": "x.insert(2, 77)"
    },
    "question_id": 4641765
  },
  {
    "question": {
      "en": "convert a set of tuples `queryresult` to a list of strings"
    },
    "mr": {
      "python": "[item[0] for item in queryresult]"
    },
    "question_id": 8704952
  },
  {
    "question": {
      "en": "subset numpy array `a` by column and row, returning the values from the first row, first column and the second row, second column and the third row, first column."
    },
    "mr": {
      "python": "a[np.arange(3), (0, 1, 0)]"
    },
    "question_id": 2111163
  },
  {
    "question": {
      "en": "print a rational number `3/2`"
    },
    "mr": {
      "python": "print('\\n\\x1b[4m' + '3' + '\\x1b[0m' + '\\n2')"
    },
    "question_id": 39381222
  },
  {
    "question": {
      "en": "make all keys lowercase in dictionary `d`"
    },
    "mr": {
      "python": "d = {(a.lower(), b): v for (a, b), v in list(d.items())}"
    },
    "question_id": 21833383
  },
  {
    "question": {
      "en": "save xlsxwriter file in 'app/smth1/smth2/Expenses01.xlsx' path and assign to variable `workbook`"
    },
    "mr": {
      "python": "workbook = xlsxwriter.Workbook('app/smth1/smth2/Expenses01.xlsx')"
    },
    "question_id": 22904654
  },
  {
    "question": {
      "en": "convert list of strings `str_list` into list of integers"
    },
    "mr": {
      "python": "[int(i) for i in str_list]"
    },
    "question_id": 2424412
  },
  {
    "question": {
      "en": "check whether a file \"/does/not/exist\" exists"
    },
    "mr": {
      "python": "print(os.path.isfile('/does/not/exist'))"
    },
    "question_id": 82831
  },
  {
    "question": {
      "en": "check if 'a' is in list `a`"
    },
    "mr": {
      "python": "('a' in a)"
    },
    "question_id": 7571635
  },
  {
    "question": {
      "en": "check if string `my_string` is empty"
    },
    "mr": {
      "python": "if (not my_string):\n    pass"
    },
    "question_id": 9573244
  },
  {
    "question": {
      "en": "Create a dictionary from string `e` separated by `-` and `,`"
    },
    "mr": {
      "python": "dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))"
    },
    "question_id": 4627981
  },
  {
    "question": {
      "en": "right align string `mystring` with a width of 7"
    },
    "mr": {
      "python": "\"\"\"{:>7s}\"\"\".format(mystring)"
    },
    "question_id": 16159228
  },
  {
    "question": {
      "en": "execute a command in the command prompt to list directory contents of the c drive `c:\\\\'"
    },
    "mr": {
      "python": "os.system('dir c:\\\\')"
    },
    "question_id": 5486725
  },
  {
    "question": {
      "en": "writing items in list `thelist` to file `thefile`"
    },
    "mr": {
      "python": "for item in thelist:\n    thefile.write(('%s\\n' % item))"
    },
    "question_id": 899103
  },
  {
    "question": {
      "en": "Print a string `card` with string formatting"
    },
    "mr": {
      "python": "print('I have: {0.price}'.format(card))"
    },
    "question_id": 14041791
  },
  {
    "question": {
      "en": "insert string `foo` at position `0` of list `list`"
    },
    "mr": {
      "python": "list.insert(0, 'foo')"
    },
    "question_id": 8243188
  },
  {
    "question": {
      "en": "immediately see output of print statement that doesn't end in a newline"
    },
    "mr": {
      "python": "sys.stdout.flush()"
    },
    "question_id": 5917537
  },
  {
    "question": {
      "en": "insert directory './path/to/your/modules/' to current directory"
    },
    "mr": {
      "python": "sys.path.insert(0, './path/to/your/modules/')"
    },
    "question_id": 24492327
  },
  {
    "question": {
      "en": "Delete self-contained digits from string `s`"
    },
    "mr": {
      "python": "s = re.sub('^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$', ' ', s)"
    },
    "question_id": 817122
  },
  {
    "question": {
      "en": "convert a hex string `x` to string"
    },
    "mr": {
      "python": "y = str(int(x, 16))"
    },
    "question_id": 2636755
  },
  {
    "question": {
      "en": "find the largest integer less than `x`"
    },
    "mr": {
      "python": "int(math.ceil(x)) - 1"
    },
    "question_id": 27758657
  },
  {
    "question": {
      "en": "convert a tensor with list of constants `[1, 2, 3]` into a numpy array in tensorflow"
    },
    "mr": {
      "python": "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"
    },
    "question_id": 34097281
  },
  {
    "question": {
      "en": "SQLAlchemy count the number of rows with distinct values in column `name` of table `Tag`"
    },
    "mr": {
      "python": "session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()"
    },
    "question_id": 17223174
  },
  {
    "question": {
      "en": "get logical xor of `a` and `b`"
    },
    "mr": {
      "python": "xor(bool(a), bool(b))"
    },
    "question_id": 432842
  },
  {
    "question": {
      "en": "Python / Remove special character from string"
    },
    "mr": {
      "python": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)"
    },
    "question_id": 25991612
  },
  {
    "question": {
      "en": "Iterating over a dictionary `d` using for loops"
    },
    "mr": {
      "python": "for (key, value) in d.items():\n    pass"
    },
    "question_id": 3294889
  },
  {
    "question": {
      "en": "parse string `s` to int when string contains a number"
    },
    "mr": {
      "python": "int(''.join(c for c in s if c.isdigit()))"
    },
    "question_id": 17888152
  },
  {
    "question": {
      "en": "convert a flat list into a list of tuples of every two items in the list, in order"
    },
    "mr": {
      "python": "print(zip(my_list[0::2], my_list[1::2]))"
    },
    "question_id": 15852295
  },
  {
    "question": {
      "en": "duplicate data in pandas dataframe `x` for 5 times"
    },
    "mr": {
      "python": "pd.concat([x] * 5, ignore_index=True)"
    },
    "question_id": 23887881
  },
  {
    "question": {
      "en": "Search for string `blabla` in txt file 'example.txt'"
    },
    "mr": {
      "python": "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"
    },
    "question_id": 4940032
  },
  {
    "question": {
      "en": "Sum of all values in a Python dict"
    },
    "mr": {
      "python": "sum(d.values())"
    },
    "question_id": 4880960
  },
  {
    "question": {
      "en": "check whether file `file_path` exists"
    },
    "mr": {
      "python": "os.path.exists(file_path)"
    },
    "question_id": 82831
  },
  {
    "question": {
      "en": "handle the `urlfetch_errors ` exception for imaplib request to url `url`"
    },
    "mr": {
      "python": "urlfetch.fetch(url, deadline=10 * 60)"
    },
    "question_id": 19445682
  },
  {
    "question": {
      "en": "execute file 'filename.py'"
    },
    "mr": {
      "python": "exec(compile(open('filename.py').read(), 'filename.py', 'exec'))"
    },
    "question_id": 1027714
  },
  {
    "question": {
      "en": "python get time stamp on file `file` in '%m/%d/%Y' format"
    },
    "mr": {
      "python": "time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))"
    },
    "question_id": 16994696
  },
  {
    "question": {
      "en": "generate a random number in 1 to 7 with a given distribution [0.1, 0.05, 0.05, 0.2, 0.4, 0.2]"
    },
    "mr": {
      "python": "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"
    },
    "question_id": 4265988
  },
  {
    "question": {
      "en": "convert a beautiful soup html `soup` to text"
    },
    "mr": {
      "python": "print(soup.get_text())"
    },
    "question_id": 14694482
  },
  {
    "question": {
      "en": "sort a python list of dictionaries `users` by a given list `order` of ids 'id' with the desired order"
    },
    "mr": {
      "python": "users.sort(key=lambda x: order.index(x['id']))"
    },
    "question_id": 17734779
  },
  {
    "question": {
      "en": "set environment variable 'DEBUSSY' equal to 1"
    },
    "mr": {
      "python": "os.environ['DEBUSSY'] = '1'"
    },
    "question_id": 5971312
  },
  {
    "question": {
      "en": "convert hex string '0xdeadbeef' to decimal"
    },
    "mr": {
      "python": "ast.literal_eval('0xdeadbeef')"
    },
    "question_id": 9210525
  },
  {
    "question": {
      "en": "append the first element of array `a` to array `a`"
    },
    "mr": {
      "python": "numpy.append(a, a[0])"
    },
    "question_id": 7332841
  },
  {
    "question": {
      "en": "calculate the mean of the nonzero values' indices of dataframe `df`"
    },
    "mr": {
      "python": "np.flatnonzero(x).mean()"
    },
    "question_id": 39719140
  },
  {
    "question": {
      "en": "Create a dictionary `d` from list of key value pairs `iterable`"
    },
    "mr": {
      "python": "d = {k: v for (k, v) in iterable}"
    },
    "question_id": 1747817
  },
  {
    "question": {
      "en": "sum elements at the same index of each list in list `lists`"
    },
    "mr": {
      "python": "map(sum, zip(*lists))"
    },
    "question_id": 11280536
  },
  {
    "question": {
      "en": "extract subset of key-value pairs with keys as `('l', 'm', 'n')` from dictionary object `bigdict`"
    },
    "mr": {
      "python": "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"
    },
    "question_id": 5352546
  },
  {
    "question": {
      "en": "find a tag `option` whose `value` attribute is `state` in selenium"
    },
    "mr": {
      "python": "driver.find_element_by_xpath(\"//option[@value='\" + state + \"']\").click()"
    },
    "question_id": 32874539
  },
  {
    "question": {
      "en": "Convert hex string \"a\" to integer"
    },
    "mr": {
      "python": "int('a', 16)"
    },
    "question_id": 209513
  },
  {
    "question": {
      "en": "check if 7 is in `a`"
    },
    "mr": {
      "python": "(7 in a)"
    },
    "question_id": 7571635
  },
  {
    "question": {
      "en": "python regex for hyphenated words in `text`"
    },
    "mr": {
      "python": "re.findall('\\\\w+(?:-\\\\w+)+', text)"
    },
    "question_id": 8383213
  },
  {
    "question": {
      "en": "get the max string length in list `i`"
    },
    "mr": {
      "python": "max(len(word) for word in i)"
    },
    "question_id": 39373620
  },
  {
    "question": {
      "en": "find button that is in li class `next` and assign it to variable `next`"
    },
    "mr": {
      "python": "next = driver.find_element_by_css_selector('li.next>a')"
    },
    "question_id": 20457174
  },
  {
    "question": {
      "en": "sort list `the_list` by the length of string followed by alphabetical order"
    },
    "mr": {
      "python": "the_list.sort(key=lambda item: (-len(item), item))"
    },
    "question_id": 4659524
  },
  {
    "question": {
      "en": "sort a list of strings `strings` based on regex match"
    },
    "mr": {
      "python": "strings.sort(key=lambda str: re.sub('.*%', '', str))"
    },
    "question_id": 1082413
  },
  {
    "question": {
      "en": "How to get yesterday in python"
    },
    "mr": {
      "python": "datetime.datetime.now() - datetime.timedelta(days=1)"
    },
    "question_id": 19779790
  },
  {
    "question": {
      "en": "remove a substring \".com\" from the end of string `url`"
    },
    "mr": {
      "python": "if url.endswith('.com'):\n    url = url[:(-4)]"
    },
    "question_id": 1038824
  },
  {
    "question": {
      "en": "identify duplicated rows in columns 'PplNum' and 'RoomNum' with additional column in dataframe `df`"
    },
    "mr": {
      "python": "df.groupby(['PplNum', 'RoomNum']).cumcount() + 1"
    },
    "question_id": 37497559
  },
  {
    "question": {
      "en": "get list of all unique characters in a string 'aaabcabccd'"
    },
    "mr": {
      "python": "list(set('aaabcabccd'))"
    },
    "question_id": 13902805
  },
  {
    "question": {
      "en": "Extract subset of key value pair for keys 'l', 'm', 'n' from `bigdict` in python 3"
    },
    "mr": {
      "python": "{k: bigdict[k] for k in ('l', 'm', 'n')}"
    },
    "question_id": 5352546
  },
  {
    "question": {
      "en": "remove all null values from columns 'three', 'four' and 'five' of dataframe `df2`"
    },
    "mr": {
      "python": "df2.dropna(subset=['three', 'four', 'five'], how='all')"
    },
    "question_id": 14991195
  },
  {
    "question": {
      "en": "replace extension '.txt' in basename '/home/user/somefile.txt' with extension '.jpg'"
    },
    "mr": {
      "python": "print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')"
    },
    "question_id": 3548673
  },
  {
    "question": {
      "en": "create a dataframe containing the multiplication of element-wise in dataframe `df` and dataframe `df2` using index name and column labels of dataframe `df`"
    },
    "mr": {
      "python": "pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)"
    },
    "question_id": 21022865
  },
  {
    "question": {
      "en": "python sum of ascii values of all characters in a string `string`"
    },
    "mr": {
      "python": "sum(map(ord, string))"
    },
    "question_id": 12492137
  },
  {
    "question": {
      "en": "concatenate strings in tuple `('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e')` into a single string"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))"
    },
    "question_id": 19641579
  },
  {
    "question": {
      "en": "getting the string between 2 '$' characters in '$sin (x)$ is an function of x'"
    },
    "mr": {
      "python": "re.findall('\\\\$(.*?)\\\\$', '$sin (x)$ is an function of x')"
    },
    "question_id": 15043326
  },
  {
    "question": {
      "en": "remove first and last lines of string `s`"
    },
    "mr": {
      "python": "s[s.find('\\n') + 1:s.rfind('\\n')]"
    },
    "question_id": 28134319
  },
  {
    "question": {
      "en": "delay for \"5\" seconds"
    },
    "mr": {
      "python": "time.sleep(5)"
    },
    "question_id": 510348
  },
  {
    "question": {
      "en": "create a list of tuples with the values of keys 'Name' and 'Age' from each dictionary `d` in the list `thisismylist`"
    },
    "mr": {
      "python": "[(d['Name'], d['Age']) for d in thisismylist]"
    },
    "question_id": 17117912
  },
  {
    "question": {
      "en": "Get a md5 hash from string `thecakeisalie`"
    },
    "mr": {
      "python": "k = hashlib.md5('thecakeisalie').hexdigest()"
    },
    "question_id": 4508155
  },
  {
    "question": {
      "en": "create list `randomList` with 10 random floating point numbers between 0.0 and 1.0"
    },
    "mr": {
      "python": "randomList = [random.random() for _ in range(10)]"
    },
    "question_id": 20733827
  },
  {
    "question": {
      "en": "Convert a string of numbers 'example_string' separated by comma into a list of numbers"
    },
    "mr": {
      "python": "[int(s) for s in example_string.split(',')]"
    },
    "question_id": 19334374
  },
  {
    "question": {
      "en": "terminate process `p`"
    },
    "mr": {
      "python": "p.terminate()"
    },
    "question_id": 17856928
  },
  {
    "question": {
      "en": "get http header of the key 'your-header-name' in flask"
    },
    "mr": {
      "python": "request.headers['your-header-name']"
    },
    "question_id": 29386995
  },
  {
    "question": {
      "en": "Sort dictionary `u` in ascending order based on second elements of its values"
    },
    "mr": {
      "python": "sorted(list(u.items()), key=lambda v: v[1])"
    },
    "question_id": 10194713
  },
  {
    "question": {
      "en": "regular expression \"^(.+)\\\\n((?:\\\\n.+)+)\" matching a multiline block of text"
    },
    "mr": {
      "python": "re.compile('^(.+)\\\\n((?:\\\\n.+)+)', re.MULTILINE)"
    },
    "question_id": 587345
  },
  {
    "question": {
      "en": "split column 'AB' in dataframe `df` into two columns by first whitespace ' '"
    },
    "mr": {
      "python": "df['AB'].str.split(' ', 1, expand=True)"
    },
    "question_id": 14745022
  },
  {
    "question": {
      "en": "Get a dictionary from a dictionary `hand` where the values are present"
    },
    "mr": {
      "python": "dict((k, v) for k, v in hand.items() if v)"
    },
    "question_id": 15158599
  },
  {
    "question": {
      "en": "get the number of values in list `j` that is greater than `i`"
    },
    "mr": {
      "python": "j = np.array(j)\nsum((j > i))"
    },
    "question_id": 10543303
  },
  {
    "question": {
      "en": "limit float 13.949999999999999 to two decimal points"
    },
    "mr": {
      "python": "float('{0:.2f}'.format(13.95))"
    },
    "question_id": 455612
  },
  {
    "question": {
      "en": "find element `a` that contains string \"TEXT A\" in file `root`"
    },
    "mr": {
      "python": "e = root.xpath('.//a[contains(text(),\"TEXT A\")]')"
    },
    "question_id": 14299978
  },
  {
    "question": {
      "en": "replace everything that is not an alphabet or a digit with '' in 's'."
    },
    "mr": {
      "python": "re.sub('[\\\\W_]+', '', s)"
    },
    "question_id": 6323296
  },
  {
    "question": {
      "en": "lambda function that adds two operands"
    },
    "mr": {
      "python": "lambda x, y: x + y"
    },
    "question_id": 6243460
  },
  {
    "question": {
      "en": "Format string `hello {name}, how are you {name}, welcome {name}` to be interspersed by `name` three times, specifying the value as `john` only once"
    },
    "mr": {
      "python": "\"\"\"hello {name}, how are you {name}, welcome {name}\"\"\".format(name='john')"
    },
    "question_id": 11921649
  },
  {
    "question": {
      "en": "create a list where each element is a value of the key 'Name' for each dictionary `d` in the list `thisismylist`"
    },
    "mr": {
      "python": "[d['Name'] for d in thisismylist]"
    },
    "question_id": 17117912
  },
  {
    "question": {
      "en": "set the current working directory to path `path`"
    },
    "mr": {
      "python": "os.chdir(path)"
    },
    "question_id": 1810743
  },
  {
    "question": {
      "en": "create a list of integers between 2 values `11` and `17`"
    },
    "mr": {
      "python": "list(range(11, 17))"
    },
    "question_id": 18265935
  },
  {
    "question": {
      "en": "unpack the binary data represented by the hexadecimal string '4081637ef7d0424a' to a float"
    },
    "mr": {
      "python": "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"
    },
    "question_id": 38831808
  },
  {
    "question": {
      "en": "match regex pattern '(\\\\d+(\\\\.\\\\d+)?)' with string '3434.35353'"
    },
    "mr": {
      "python": "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"
    },
    "question_id": 9891814
  },
  {
    "question": {
      "en": "List all the files that doesn't contain the name `hello`"
    },
    "mr": {
      "python": "glob.glob('[!hello]*.txt')"
    },
    "question_id": 22625616
  },
  {
    "question": {
      "en": "abort a computer shutdown using subprocess"
    },
    "mr": {
      "python": "subprocess.call(['shutdown', '/a '])"
    },
    "question_id": 14764126
  },
  {
    "question": {
      "en": "convert a list of dictionaries `listofdict into a dictionary of dictionaries"
    },
    "mr": {
      "python": "dict((d['name'], d) for d in listofdict)"
    },
    "question_id": 8303993
  },
  {
    "question": {
      "en": "select a random element from array `[1, 2, 3]`"
    },
    "mr": {
      "python": "random.choice([1, 2, 3])"
    },
    "question_id": 1058712
  },
  {
    "question": {
      "en": "create 3 by 3 matrix of random numbers"
    },
    "mr": {
      "python": "numpy.random.random((3, 3))"
    },
    "question_id": 15451958
  },
  {
    "question": {
      "en": "split a string `a` with new line character"
    },
    "mr": {
      "python": "a.split('\\n')[:-1]"
    },
    "question_id": 2094176
  },
  {
    "question": {
      "en": "convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists"
    },
    "mr": {
      "python": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))"
    },
    "question_id": 8081545
  },
  {
    "question": {
      "en": "Iterating key and items over dictionary `d`"
    },
    "mr": {
      "python": "for (k, v) in list(d.items()):\n    pass"
    },
    "question_id": 3294889
  },
  {
    "question": {
      "en": "regex for repeating words in a string `s`"
    },
    "mr": {
      "python": "re.sub('(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)', '\\\\1', s)"
    },
    "question_id": 25474338
  },
  {
    "question": {
      "en": "convert a number 2130706433 to ip string"
    },
    "mr": {
      "python": "socket.inet_ntoa(struct.pack('!L', 2130706433))"
    },
    "question_id": 9590965
  },
  {
    "question": {
      "en": "finding the index of an item 'foo' given a list `['foo', 'bar', 'baz']` containing it"
    },
    "mr": {
      "python": "[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']"
    },
    "question_id": 176918
  },
  {
    "question": {
      "en": "get set intersection between dictionaries `d1` and `d2`"
    },
    "mr": {
      "python": "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"
    },
    "question_id": 638360
  },
  {
    "question": {
      "en": "split string `text` into chunks of 16 characters each"
    },
    "mr": {
      "python": "re.findall('.{,16}\\\\b', text)"
    },
    "question_id": 18551752
  },
  {
    "question": {
      "en": "MySQL execute query 'SELECT * FROM foo WHERE bar = %s AND baz = %s' with parameters `param1` and `param2`"
    },
    "mr": {
      "python": "c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))"
    },
    "question_id": 775296
  },
  {
    "question": {
      "en": "custom sort an alphanumeric list `l`"
    },
    "mr": {
      "python": "sorted(l, key=lambda x: x.replace('0', 'Z'))"
    },
    "question_id": 41894454
  },
  {
    "question": {
      "en": "filter dataframe `df` by sub-level index '0630' in pandas"
    },
    "mr": {
      "python": "df[df.index.map(lambda x: x[1].endswith('0630'))]"
    },
    "question_id": 12224778
  },
  {
    "question": {
      "en": "Create array `a` containing integers from stdin"
    },
    "mr": {
      "python": "a.fromlist([int(val) for val in stdin.read().split()])"
    },
    "question_id": 8192379
  },
  {
    "question": {
      "en": "convert a list 'a' to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value"
    },
    "mr": {
      "python": "b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}"
    },
    "question_id": 4576115
  },
  {
    "question": {
      "en": "sort list `results` by keys value 'year'"
    },
    "mr": {
      "python": "sorted(results, key=itemgetter('year'))"
    },
    "question_id": 13438574
  },
  {
    "question": {
      "en": "converting dictionary `d` into a dataframe `pd` with keys as data for column 'Date' and the corresponding values as data for column 'DateValue'"
    },
    "mr": {
      "python": "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"
    },
    "question_id": 18837262
  },
  {
    "question": {
      "en": "map two lists `keys` and `values` into a dictionary"
    },
    "mr": {
      "python": "new_dict = {k: v for k, v in zip(keys, values)}"
    },
    "question_id": 209840
  },
  {
    "question": {
      "en": "Replace special characters in utf-8 encoded string `s` using the %xx escape"
    },
    "mr": {
      "python": "urllib.parse.quote(s.encode('utf-8'))"
    },
    "question_id": 8905864
  },
  {
    "question": {
      "en": "Get Last Day of the first month in 2002"
    },
    "mr": {
      "python": "calendar.monthrange(2002, 1)"
    },
    "question_id": 42950
  },
  {
    "question": {
      "en": "get canonical path of the filename `path`"
    },
    "mr": {
      "python": "os.path.realpath(path)"
    },
    "question_id": 3220755
  },
  {
    "question": {
      "en": "sort a multidimensional list `a` by second and third column"
    },
    "mr": {
      "python": "a.sort(key=operator.itemgetter(2, 3))"
    },
    "question_id": 1683775
  },
  {
    "question": {
      "en": "Get all matching patterns 'a.*?a' from a string 'a 1 a 2 a 3 a 4 a'."
    },
    "mr": {
      "python": "re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')"
    },
    "question_id": 17467504
  },
  {
    "question": {
      "en": "searche in HTML string for elements that have text 'Python'"
    },
    "mr": {
      "python": "soup.body.findAll(text='Python')"
    },
    "question_id": 8936030
  },
  {
    "question": {
      "en": "sort list `l` based on its elements' digits"
    },
    "mr": {
      "python": "sorted(l, key=lambda x: int(re.search('\\\\d+', x).group(0)))"
    },
    "question_id": 39129846
  },
  {
    "question": {
      "en": "extract only alphabetic characters from a string `your string`"
    },
    "mr": {
      "python": "\"\"\" \"\"\".join(re.split('[^a-zA-Z]*', 'your string'))"
    },
    "question_id": 8199398
  },
  {
    "question": {
      "en": "get current time"
    },
    "mr": {
      "python": "datetime.datetime.now().time()"
    },
    "question_id": 415511
  },
  {
    "question": {
      "en": "plot categorical data in series `df` with kind `bar` using pandas and matplotlib"
    },
    "mr": {
      "python": "df.groupby('colour').size().plot(kind='bar')"
    },
    "question_id": 31029560
  },
  {
    "question": {
      "en": "How to select element with Selenium Python xpath"
    },
    "mr": {
      "python": "driver.find_element_by_xpath(\"//div[@id='a']//a[@class='click']\")"
    },
    "question_id": 19035186
  },
  {
    "question": {
      "en": "check if any values in a list `input_list` is a list"
    },
    "mr": {
      "python": "any(isinstance(el, list) for el in input_list)"
    },
    "question_id": 5251663
  },
  {
    "question": {
      "en": "create a list of integers with duplicate values `[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]`"
    },
    "mr": {
      "python": "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]"
    },
    "question_id": 31743603
  },
  {
    "question": {
      "en": "select the last business day of the month for each month in 2014 in pandas"
    },
    "mr": {
      "python": "pd.date_range('1/1/2014', periods=12, freq='BM')"
    },
    "question_id": 27218543
  },
  {
    "question": {
      "en": "sort a set `s` by numerical value"
    },
    "mr": {
      "python": "sorted(s, key=float)"
    },
    "question_id": 17457793
  },
  {
    "question": {
      "en": "get the maximum of 'salary' and 'bonus' values in a dictionary"
    },
    "mr": {
      "python": "print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))"
    },
    "question_id": 42211584
  },
  {
    "question": {
      "en": "get the path of the current python module"
    },
    "mr": {
      "python": "print(os.getcwd())"
    },
    "question_id": 247770
  },
  {
    "question": {
      "en": "find the index of sub string 's' in string `str` starting from index 15"
    },
    "mr": {
      "python": "str.find('s', 15)"
    },
    "question_id": 674764
  },
  {
    "question": {
      "en": "Set time zone `Europe/Istanbul` in Django"
    },
    "mr": {
      "python": "TIME_ZONE = 'Europe/Istanbul'"
    },
    "question_id": 29311354
  },
  {
    "question": {
      "en": "split string 'x+13.5*10x-4e1' into tokens"
    },
    "mr": {
      "python": "print([i for i in re.split('([\\\\d.]+|\\\\W+)', 'x+13.5*10x-4e1') if i])"
    },
    "question_id": 18312447
  },
  {
    "question": {
      "en": "insert elements of list `k` into list `a` at position `n`"
    },
    "mr": {
      "python": "a = a[:n] + k + a[n:]"
    },
    "question_id": 8785554
  },
  {
    "question": {
      "en": "create a list `files` containing all files in directory '.' that starts with numbers between 0 and 9 and ends with the extension '.jpg'"
    },
    "mr": {
      "python": "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"
    },
    "question_id": 2225564
  },
  {
    "question": {
      "en": "Check if string 'a b' only contains letters and spaces"
    },
    "mr": {
      "python": "\"\"\"a b\"\"\".replace(' ', '').isalpha()"
    },
    "question_id": 29454773
  },
  {
    "question": {
      "en": "find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'"
    },
    "mr": {
      "python": "re.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', s)"
    },
    "question_id": 27589325
  },
  {
    "question": {
      "en": "get all environment variables"
    },
    "mr": {
      "python": "os.environ"
    },
    "question_id": 4906977
  },
  {
    "question": {
      "en": "convert list `x` into a flat list"
    },
    "mr": {
      "python": "y = map(operator.itemgetter(0), x)"
    },
    "question_id": 15096021
  },
  {
    "question": {
      "en": "get a new string including all but the last character of string `x`"
    },
    "mr": {
      "python": "x[:(-2)]"
    },
    "question_id": 663171
  },
  {
    "question": {
      "en": "customize the time format in python logging"
    },
    "mr": {
      "python": "formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')"
    },
    "question_id": 3220284
  },
  {
    "question": {
      "en": "sort a list of strings `list`"
    },
    "mr": {
      "python": "list.sort()"
    },
    "question_id": 36139
  },
  {
    "question": {
      "en": "split string `Word to Split` into a list of characters"
    },
    "mr": {
      "python": "list('Word to Split')"
    },
    "question_id": 113655
  },
  {
    "question": {
      "en": "iterate items in lists `listone` and `listtwo`"
    },
    "mr": {
      "python": "for item in itertools.chain(listone, listtwo):\n    pass"
    },
    "question_id": 1720421
  },
  {
    "question": {
      "en": "find the euclidean distance between two 3-d arrays `A` and `B`"
    },
    "mr": {
      "python": "np.sqrt(((A - B) ** 2).sum(-1))"
    },
    "question_id": 40319433
  },
  {
    "question": {
      "en": "How to find the index of a value in 2d array in Python?"
    },
    "mr": {
      "python": "np.where(a == 1)"
    },
    "question_id": 27175400
  },
  {
    "question": {
      "en": "convert decimal 8 to a list of its binary values"
    },
    "mr": {
      "python": "list('{0:0b}'.format(8))"
    },
    "question_id": 13557937
  },
  {
    "question": {
      "en": "get the sum of each second value from a list of tuple `structure`"
    },
    "mr": {
      "python": "sum(x[1] for x in structure)"
    },
    "question_id": 12218112
  },
  {
    "question": {
      "en": "Get a list from two strings `12345` and `ab` with values as each character concatenated"
    },
    "mr": {
      "python": "[(x + y) for x in '12345' for y in 'ab']"
    },
    "question_id": 18649884
  },
  {
    "question": {
      "en": "Get all the matches from a string `abcd` if it begins with a character `a`"
    },
    "mr": {
      "python": "re.findall('[^a]', 'abcd')"
    },
    "question_id": 12211944
  },
  {
    "question": {
      "en": "split a string `42 0` by white spaces."
    },
    "mr": {
      "python": "\"\"\"42 0\"\"\".split()"
    },
    "question_id": 6429638
  },
  {
    "question": {
      "en": "export a table dataframe `df` in pyspark to csv 'mycsv.csv'"
    },
    "mr": {
      "python": "df.toPandas().to_csv('mycsv.csv')"
    },
    "question_id": 31385363
  },
  {
    "question": {
      "en": "split a list of tuples `data` into sub-lists of the same tuple field using itertools"
    },
    "mr": {
      "python": "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"
    },
    "question_id": 8092877
  },
  {
    "question": {
      "en": "clamping floating number `my_value` to be between `min_value` and `max_value`"
    },
    "mr": {
      "python": "max(min(my_value, max_value), min_value)"
    },
    "question_id": 9775731
  },
  {
    "question": {
      "en": "convert generator object to a dictionary"
    },
    "mr": {
      "python": "{i: (i * 2) for i in range(10)}"
    },
    "question_id": 17815945
  },
  {
    "question": {
      "en": "check if any item from list `b` is in list `a`"
    },
    "mr": {
      "python": "print(any(x in a for x in b))"
    },
    "question_id": 740287
  },
  {
    "question": {
      "en": "remove colon character surrounded by vowels letters in string `word`"
    },
    "mr": {
      "python": "word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', word)"
    },
    "question_id": 33724111
  },
  {
    "question": {
      "en": "create a list containing all values associated with key 'baz' in dictionaries of list `foos` using list comprehension"
    },
    "mr": {
      "python": "[y['baz'] for x in foos for y in x['bar']]"
    },
    "question_id": 4879641
  },
  {
    "question": {
      "en": "make new column 'C' in panda dataframe by adding values from other columns 'A' and 'B'"
    },
    "mr": {
      "python": "df['C'] = df['A'] + df['B']"
    },
    "question_id": 34023918
  },
  {
    "question": {
      "en": "replace non-ascii chars from a unicode string u'm\\xfasica'"
    },
    "mr": {
      "python": "unicodedata.normalize('NFKD', 'm\\xfasica').encode('ascii', 'ignore')"
    },
    "question_id": 3704731
  },
  {
    "question": {
      "en": "Getting the second to last element of list `some_list`"
    },
    "mr": {
      "python": "some_list[(-2)]"
    },
    "question_id": 930397
  },
  {
    "question": {
      "en": "remove the fragment identifier `#something` from a url `http://www.address.com/something#something`"
    },
    "mr": {
      "python": "urlparse.urldefrag('http://www.address.com/something#something')"
    },
    "question_id": 6250046
  },
  {
    "question": {
      "en": "read csv file 'myfile.csv' into array"
    },
    "mr": {
      "python": "np.genfromtxt('myfile.csv', delimiter=',')"
    },
    "question_id": 3518778
  },
  {
    "question": {
      "en": "remove square bracket '[]' from pandas dataframe `df` column 'value'"
    },
    "mr": {
      "python": "df['value'] = df['value'].str.strip('[]')"
    },
    "question_id": 38147447
  },
  {
    "question": {
      "en": "Compare if each value in list `a` is less than respective index value in list `b`"
    },
    "mr": {
      "python": "all(i < j for i, j in zip(a, b))"
    },
    "question_id": 28767642
  },
  {
    "question": {
      "en": "remove tags from a string `mystring`"
    },
    "mr": {
      "python": "re.sub('<[^>]*>', '', mystring)"
    },
    "question_id": 3662142
  },
  {
    "question": {
      "en": "check if the string `myString` is empty"
    },
    "mr": {
      "python": "if (not myString):\n    pass"
    },
    "question_id": 9573244
  },
  {
    "question": {
      "en": "list comprehension that produces integers between 11 and 19"
    },
    "mr": {
      "python": "[i for i in range(100) if i > 10 if i < 20]"
    },
    "question_id": 15248272
  },
  {
    "question": {
      "en": "create a list containing keys of dictionary `d` and sort it alphabetically"
    },
    "mr": {
      "python": "sorted(d, key=d.get)"
    },
    "question_id": 575819
  },
  {
    "question": {
      "en": "function to check if a string is a number"
    },
    "mr": {
      "python": "isdigit()"
    },
    "question_id": 354038
  },
  {
    "question": {
      "en": "Replace comma with dot in a string `original_string` using regex"
    },
    "mr": {
      "python": "new_string = re.sub('\"(\\\\d+),(\\\\d+)\"', '\\\\1.\\\\2', original_string)"
    },
    "question_id": 8172861
  },
  {
    "question": {
      "en": "Sort dictionary `d` by value in ascending order"
    },
    "mr": {
      "python": "sorted(list(d.items()), key=(lambda x: x[1]))"
    },
    "question_id": 613183
  },
  {
    "question": {
      "en": "BeautifulSoup find a tag whose id ends with string 'para'"
    },
    "mr": {
      "python": "soup.findAll(id=re.compile('para$'))"
    },
    "question_id": 11924135
  },
  {
    "question": {
      "en": "Sort lists in the list `unsorted_list` by the element at index 3 of each list"
    },
    "mr": {
      "python": "unsorted_list.sort(key=lambda x: x[3])"
    },
    "question_id": 17555218
  },
  {
    "question": {
      "en": "Split a string `string` by multiple separators `,` and `;`"
    },
    "mr": {
      "python": "[t.strip() for s in string.split(',') for t in s.split(';')]"
    },
    "question_id": 4697006
  },
  {
    "question": {
      "en": "add variable `var` to key 'f' of first element in JSON data `data`"
    },
    "mr": {
      "python": "data[0]['f'] = var"
    },
    "question_id": 22296496
  },
  {
    "question": {
      "en": "convert keys in dictionary `thedict` into case insensitive"
    },
    "mr": {
      "python": "theset = set(k.lower() for k in thedict)"
    },
    "question_id": 3296499
  },
  {
    "question": {
      "en": "sort list `['10', '3', '2']` in ascending order based on the integer value of its elements"
    },
    "mr": {
      "python": "sorted(['10', '3', '2'], key=int)"
    },
    "question_id": 9758959
  },
  {
    "question": {
      "en": "call base class's __init__ method from the child class `ChildClass`"
    },
    "mr": {
      "python": "super(ChildClass, self).__init__(*args, **kwargs)"
    },
    "question_id": 19205916
  },
  {
    "question": {
      "en": "Delete third row in a numpy array `x`"
    },
    "mr": {
      "python": "x = numpy.delete(x, 2, axis=1)"
    },
    "question_id": 3877491
  },
  {
    "question": {
      "en": "remove parentheses only around single words in a string `s` using regex"
    },
    "mr": {
      "python": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)"
    },
    "question_id": 31405409
  },
  {
    "question": {
      "en": "subtract 5 hours from the time object `dt`"
    },
    "mr": {
      "python": "dt -= datetime.timedelta(hours=5)"
    },
    "question_id": 14043934
  },
  {
    "question": {
      "en": "set data in column 'value' of dataframe `df` equal to first element of each list"
    },
    "mr": {
      "python": "df['value'] = df['value'].str[0]"
    },
    "question_id": 38147447
  },
  {
    "question": {
      "en": "request page 'https://www.mysite.com/' with credentials of username 'username' and password 'pwd'"
    },
    "mr": {
      "python": "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"
    },
    "question_id": 3355822
  },
  {
    "question": {
      "en": "use a list of values `[3,6]` to select rows from a pandas dataframe `df`'s column 'A'"
    },
    "mr": {
      "python": "df[df['A'].isin([3, 6])]"
    },
    "question_id": 12096252
  },
  {
    "question": {
      "en": "clear terminal screen on windows"
    },
    "mr": {
      "python": "os.system('cls')"
    },
    "question_id": 4810537
  },
  {
    "question": {
      "en": "check if elements in list `my_list` are coherent in order"
    },
    "mr": {
      "python": "return my_list == list(range(my_list[0], my_list[-1] + 1))"
    },
    "question_id": 18131741
  },
  {
    "question": {
      "en": "convert a string `s` to its base-10 representation"
    },
    "mr": {
      "python": "int(s.encode('hex'), 16)"
    },
    "question_id": 10716796
  },
  {
    "question": {
      "en": "change flask security register url to `/create_account`"
    },
    "mr": {
      "python": "app.config['SECURITY_REGISTER_URL'] = '/create_account'"
    },
    "question_id": 14793098
  },
  {
    "question": {
      "en": "sort datetime objects `birthdays` by `month` and `day`"
    },
    "mr": {
      "python": "birthdays.sort(key=lambda d: (d.month, d.day))"
    },
    "question_id": 2040038
  },
  {
    "question": {
      "en": "Open image \"picture.jpg\""
    },
    "mr": {
      "python": "img = Image.open('picture.jpg')\nImg.show"
    },
    "question_id": 16387069
  },
  {
    "question": {
      "en": "get the last 10 elements from a list `my_list`"
    },
    "mr": {
      "python": "my_list[-10:]"
    },
    "question_id": 8556076
  },
  {
    "question": {
      "en": "check if dictionary `subset` is a subset of dictionary `superset`"
    },
    "mr": {
      "python": "all(item in list(superset.items()) for item in list(subset.items()))"
    },
    "question_id": 9323749
  },
  {
    "question": {
      "en": "find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1', for the columns 'A', 'B', 'C' and 'D'."
    },
    "mr": {
      "python": "pd.merge(df1, df2, on=['A', 'B', 'C', 'D'], how='inner')"
    },
    "question_id": 29464234
  },
  {
    "question": {
      "en": "sort string `s` in lexicographic order"
    },
    "mr": {
      "python": "sorted(sorted(s), key=str.upper)"
    },
    "question_id": 7371935
  },
  {
    "question": {
      "en": "divide values associated with each key in dictionary `d1` from values associated with the same key in dictionary `d2`"
    },
    "mr": {
      "python": "dict((k, float(d2[k]) / d1[k]) for k in d2)"
    },
    "question_id": 11840111
  },
  {
    "question": {
      "en": "Can a python script execute a function inside a bash script?"
    },
    "mr": {
      "python": "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"
    },
    "question_id": 5826427
  },
  {
    "question": {
      "en": "Confirm urls in Django properly"
    },
    "mr": {
      "python": "url('^$', include('sms.urls')),"
    },
    "question_id": 32458541
  },
  {
    "question": {
      "en": "create a list containing the digits values from binary string `x` as elements"
    },
    "mr": {
      "python": "[int(d) for d in str(bin(x))[2:]]"
    },
    "question_id": 13081090
  },
  {
    "question": {
      "en": "round number 6.005 up to 2 decimal places"
    },
    "mr": {
      "python": "round(6.005, 2)"
    },
    "question_id": 31818050
  },
  {
    "question": {
      "en": "delete file `filename`"
    },
    "mr": {
      "python": "os.remove(filename)"
    },
    "question_id": 39998424
  },
  {
    "question": {
      "en": "Get Last Day of the first month in year 2000"
    },
    "mr": {
      "python": "(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))"
    },
    "question_id": 42950
  },
  {
    "question": {
      "en": "assign an array of floats in range from 0 to 100 to a variable `values`"
    },
    "mr": {
      "python": "values = np.array([i for i in range(100)], dtype=np.float64)"
    },
    "question_id": 23638638
  },
  {
    "question": {
      "en": "send data 'HTTP/1.0 200 OK\\r\\n\\r\\n' to socket `connection`"
    },
    "mr": {
      "python": "connection.send('HTTP/1.0 200 OK\\r\\n\\r\\n')"
    },
    "question_id": 40851413
  },
  {
    "question": {
      "en": "Combine two Pandas dataframes with the same index"
    },
    "mr": {
      "python": "pandas.concat([df1, df2], axis=1)"
    },
    "question_id": 28773683
  },
  {
    "question": {
      "en": "sort list `strings` in alphabetical order based on the letter after percent character `%` in each element"
    },
    "mr": {
      "python": "strings.sort(key=lambda str: re.sub('.*%(.).*', '\\\\1', str))"
    },
    "question_id": 1082413
  },
  {
    "question": {
      "en": "How to get a function name as a string in Python?"
    },
    "mr": {
      "python": "my_function.__name__"
    },
    "question_id": 251464
  },
  {
    "question": {
      "en": "delete letters from string '12454v'"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(filter(str.isdigit, '12454v'))"
    },
    "question_id": 14750675
  },
  {
    "question": {
      "en": "sort list `l` by index 2 of the item"
    },
    "mr": {
      "python": "sorted(l, key=(lambda x: x[2]))"
    },
    "question_id": 4174941
  },
  {
    "question": {
      "en": "How to use the mv command in Python with subprocess"
    },
    "mr": {
      "python": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)"
    },
    "question_id": 21804935
  },
  {
    "question": {
      "en": "Load the url `http://www.google.com` in selenium webdriver `driver`"
    },
    "mr": {
      "python": "driver.get('http://www.google.com')"
    },
    "question_id": 4618373
  },
  {
    "question": {
      "en": "Add a tuple with value `another_choice` to a tuple `my_choices`"
    },
    "mr": {
      "python": "final_choices = ((another_choice,) + my_choices)"
    },
    "question_id": 3523048
  },
  {
    "question": {
      "en": "how to get month name of datetime `today`"
    },
    "mr": {
      "python": "today.strftime('%B')"
    },
    "question_id": 9621388
  },
  {
    "question": {
      "en": "Determine the byte length of a utf-8 encoded string `s`"
    },
    "mr": {
      "python": "return len(s.encode('utf-8'))"
    },
    "question_id": 6714826
  },
  {
    "question": {
      "en": "get key-value pairs in dictionary `my_dictionary` for all keys in list `my_list` in the order they appear in `my_list`"
    },
    "mr": {
      "python": "dict(zip(my_list, map(my_dictionary.get, my_list)))"
    },
    "question_id": 9932549
  },
  {
    "question": {
      "en": "subtract 1 hour and 10 minutes from time object `t`"
    },
    "mr": {
      "python": "(t - datetime.timedelta(hours=1, minutes=10))"
    },
    "question_id": 14043934
  },
  {
    "question": {
      "en": "convert dict `result` to numpy structured array"
    },
    "mr": {
      "python": "numpy.array([(key, val) for key, val in result.items()], dtype)"
    },
    "question_id": 15579649
  },
  {
    "question": {
      "en": "format print output of list of floats `l` to print only up to 3 decimal points"
    },
    "mr": {
      "python": "print('[' + ', '.join('%5.3f' % v for v in l) + ']')"
    },
    "question_id": 7351270
  },
  {
    "question": {
      "en": "Get rank of rows from highest to lowest of dataframe `df`, grouped by value in column `group`, according to value in column `value`"
    },
    "mr": {
      "python": "df.groupby('group')['value'].rank(ascending=False)"
    },
    "question_id": 26720916
  },
  {
    "question": {
      "en": "check if list `seq` is empty"
    },
    "mr": {
      "python": "if (not seq):\n    pass"
    },
    "question_id": 53513
  },
  {
    "question": {
      "en": "convert a list of tuples `queryresult` to a string from the first indexes."
    },
    "mr": {
      "python": "emaillist = '\\n'.join([item[0] for item in queryresult])"
    },
    "question_id": 8704952
  },
  {
    "question": {
      "en": "find tuple in list of tuples `a_list` with the largest second element"
    },
    "mr": {
      "python": "max(a_list, key=operator.itemgetter(1))"
    },
    "question_id": 1874194
  },
  {
    "question": {
      "en": "Convert list of dictionaries `L` into a flat dictionary"
    },
    "mr": {
      "python": "dict(pair for d in L for pair in list(d.items()))"
    },
    "question_id": 3494906
  },
  {
    "question": {
      "en": "get line count of file 'myfile.txt'"
    },
    "mr": {
      "python": "sum((1 for line in open('myfile.txt')))"
    },
    "question_id": 845058
  },
  {
    "question": {
      "en": "get modification time of file `path`"
    },
    "mr": {
      "python": "os.path.getmtime(path)"
    },
    "question_id": 237079
  },
  {
    "question": {
      "en": "get all possible combination of items from 2-dimensional list `a`"
    },
    "mr": {
      "python": "list(itertools.product(*a))"
    },
    "question_id": 8249836
  },
  {
    "question": {
      "en": "Sort a dictionary `data` by its values"
    },
    "mr": {
      "python": "sorted(data.values())"
    },
    "question_id": 16772071
  },
  {
    "question": {
      "en": "call `doSomething()` in a try-except without handling the exception"
    },
    "mr": {
      "python": "try:\n    doSomething()\nexcept Exception:\n    pass"
    },
    "question_id": 730764
  },
  {
    "question": {
      "en": "convert a list of strings `['1', '-1', '1']` to a list of numbers"
    },
    "mr": {
      "python": "map(int, ['1', '-1', '1'])"
    },
    "question_id": 5306079
  },
  {
    "question": {
      "en": "merge the elements in a list `lst` sequentially"
    },
    "mr": {
      "python": "[''.join(seq) for seq in zip(lst, lst[1:])]"
    },
    "question_id": 39646401
  },
  {
    "question": {
      "en": "replace values of dataframe `df` with True if numeric"
    },
    "mr": {
      "python": "df.applymap(lambda x: isinstance(x, (int, float)))"
    },
    "question_id": 21771133
  },
  {
    "question": {
      "en": "send cookies `cookie` in a post request to url 'http://wikipedia.org' with the python requests library"
    },
    "mr": {
      "python": "r = requests.post('http://wikipedia.org', cookies=cookie)"
    },
    "question_id": 7164679
  },
  {
    "question": {
      "en": "print the string `Total score for`, the value of the variable `name`, the string `is` and the value of the variable `score` in one print call."
    },
    "mr": {
      "python": "print(('Total score for', name, 'is', score))"
    },
    "question_id": 15286401
  },
  {
    "question": {
      "en": "summing the second item in a list of lists of lists"
    },
    "mr": {
      "python": "[sum([x[1] for x in i]) for i in data]"
    },
    "question_id": 37619348
  },
  {
    "question": {
      "en": "Check if key 'a' in `d`"
    },
    "mr": {
      "python": "('a' in d)"
    },
    "question_id": 1602934
  },
  {
    "question": {
      "en": "How do I read the first line of a string?"
    },
    "mr": {
      "python": "my_string.split('\\n', 1)[0]"
    },
    "question_id": 11833266
  },
  {
    "question": {
      "en": "extracting column `1` and `9` from array `data`"
    },
    "mr": {
      "python": "data[:, ([1, 9])]"
    },
    "question_id": 8386675
  },
  {
    "question": {
      "en": "Get a list of tuples with multiple iterators using list comprehension"
    },
    "mr": {
      "python": "[(i, j) for i in range(1, 3) for j in range(1, 5)]"
    },
    "question_id": 329886
  },
  {
    "question": {
      "en": "Check if string `strg` starts with any of the elements in list ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')"
    },
    "mr": {
      "python": "strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))"
    },
    "question_id": 5577501
  },
  {
    "question": {
      "en": "replace comma in string `s` with empty string ''"
    },
    "mr": {
      "python": "s = s.replace(',', '')"
    },
    "question_id": 16233593
  },
  {
    "question": {
      "en": "replace periods `.` that are not followed by periods or spaces with a period and a space `. `"
    },
    "mr": {
      "python": "re.sub('\\\\.(?=[^ .])', '. ', para)"
    },
    "question_id": 42731970
  },
  {
    "question": {
      "en": "remove all whitespaces in a string `sentence`"
    },
    "mr": {
      "python": "sentence = ''.join(sentence.split())"
    },
    "question_id": 8270092
  },
  {
    "question": {
      "en": "print string \"ABC\" as hex literal"
    },
    "mr": {
      "python": "\"\"\"\u0001ABC\"\"\".encode('hex')"
    },
    "question_id": 21947035
  },
  {
    "question": {
      "en": "remove decimal points in pandas data frame using round"
    },
    "mr": {
      "python": "df.round()"
    },
    "question_id": 37084812
  },
  {
    "question": {
      "en": "download file from http url \"http://randomsite.com/file.gz\" and save as \"file.gz\""
    },
    "mr": {
      "python": "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"
    },
    "question_id": 19602931
  },
  {
    "question": {
      "en": "throw a value error with message 'A very specific bad thing happened', 'foo', 'bar', 'baz'"
    },
    "mr": {
      "python": "raise ValueError('A very specific bad thing happened')"
    },
    "question_id": 2052390
  },
  {
    "question": {
      "en": "subprocess run command 'start command -flags arguments' through the shell"
    },
    "mr": {
      "python": "subprocess.call('start command -flags arguments', shell=True)"
    },
    "question_id": 9554544
  },
  {
    "question": {
      "en": "append line \"cool beans...\" to file \"foo\""
    },
    "mr": {
      "python": "with open('foo', 'a') as f:\n    f.write('cool beans...')"
    },
    "question_id": 4706499
  },
  {
    "question": {
      "en": "count the number of rows with missing values in a pandas dataframe `df`"
    },
    "mr": {
      "python": "sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)"
    },
    "question_id": 28199524
  },
  {
    "question": {
      "en": "get the canonical path of file `path`"
    },
    "mr": {
      "python": "os.path.realpath(path)"
    },
    "question_id": 5137497
  },
  {
    "question": {
      "en": "delete every 8th column in a numpy array 'a'."
    },
    "mr": {
      "python": "np.delete(a, list(range(0, a.shape[1], 8)), axis=1)"
    },
    "question_id": 28925267
  },
  {
    "question": {
      "en": "find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'"
    },
    "mr": {
      "python": "re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', s)"
    },
    "question_id": 27589325
  },
  {
    "question": {
      "en": "group dataframe `data` entries by year value of the date in column 'date'"
    },
    "mr": {
      "python": "data.groupby(data['date'].map(lambda x: x.year))"
    },
    "question_id": 11391969
  },
  {
    "question": {
      "en": "sorting a list of tuples `list_of_tuples` where each tuple is reversed"
    },
    "mr": {
      "python": "sorted(list_of_tuples, key=lambda tup: tup[::-1])"
    },
    "question_id": 10213994
  },
  {
    "question": {
      "en": "Add 100 to each element of column \"x\" in dataframe `a`"
    },
    "mr": {
      "python": "a['x'].apply(lambda x, y: x + y, args=(100,))"
    },
    "question_id": 21188504
  },
  {
    "question": {
      "en": "get current script directory"
    },
    "mr": {
      "python": "os.path.dirname(os.path.abspath(__file__))"
    },
    "question_id": 3718657
  },
  {
    "question": {
      "en": "Find the`a` tag in html `root` which starts with the text `TEXT A`  and assign it to `e`"
    },
    "mr": {
      "python": "e = root.xpath('.//a[starts-with(text(),\"TEXT A\")]')"
    },
    "question_id": 14299978
  },
  {
    "question": {
      "en": "list all files of a directory `mypath`"
    },
    "mr": {
      "python": "onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
    },
    "question_id": 3207219
  },
  {
    "question": {
      "en": "get a list of booleans `z` that shows wether the corresponding items in list `x` and `y` are equal"
    },
    "mr": {
      "python": "z = [(i == j) for i, j in zip(x, y)]"
    },
    "question_id": 32996293
  },
  {
    "question": {
      "en": "find all digits between two characters `\\xab` and `\\xbb`in a string `text`"
    },
    "mr": {
      "python": "print(re.findall('\\\\d+', '\\n'.join(re.findall('\\xab([\\\\s\\\\S]*?)\\xbb', text))))"
    },
    "question_id": 31650399
  },
  {
    "question": {
      "en": "Create list `instancelist` containing 29 objects of type MyClass"
    },
    "mr": {
      "python": "instancelist = [MyClass() for i in range(29)]"
    },
    "question_id": 348196
  },
  {
    "question": {
      "en": "removing key values pairs with key 'mykey1' from a list of dictionaries `mylist`"
    },
    "mr": {
      "python": "[{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]"
    },
    "question_id": 13254241
  },
  {
    "question": {
      "en": "check if string \"substring\" is in string"
    },
    "mr": {
      "python": "string.find('substring')"
    },
    "question_id": 3437059
  },
  {
    "question": {
      "en": "delete all elements from a list `x` if a function `fn` taking value as parameter returns `0`"
    },
    "mr": {
      "python": "[x for x in lst if fn(x) != 0]"
    },
    "question_id": 3895424
  },
  {
    "question": {
      "en": "Convert JSON array `array` to Python object"
    },
    "mr": {
      "python": "data = json.loads(array)"
    },
    "question_id": 10973614
  },
  {
    "question": {
      "en": "change the size of the sci notation to '30' above the y axis in matplotlib `plt`"
    },
    "mr": {
      "python": "plt.rc('font', **{'size': '30'})"
    },
    "question_id": 14159753
  },
  {
    "question": {
      "en": "how to write a unicode csv in Python 2.7"
    },
    "mr": {
      "python": "self.writer.writerow([str(s).encode('utf-8') for s in row])"
    },
    "question_id": 22733642
  },
  {
    "question": {
      "en": "convert hex string 'deadbeef' to decimal"
    },
    "mr": {
      "python": "int('deadbeef', 16)"
    },
    "question_id": 9210525
  },
  {
    "question": {
      "en": "run shell command 'rm -r some.file' in the background"
    },
    "mr": {
      "python": "subprocess.Popen(['rm', '-r', 'some.file'])"
    },
    "question_id": 1196074
  },
  {
    "question": {
      "en": "convert date string 'January 11, 2010'  into day of week"
    },
    "mr": {
      "python": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')"
    },
    "question_id": 16766643
  },
  {
    "question": {
      "en": "get proportion of rows in dataframe `trace_df` whose values for column `ratio` are greater than 0"
    },
    "mr": {
      "python": "(trace_df['ratio'] > 0).mean()"
    },
    "question_id": 41178532
  },
  {
    "question": {
      "en": "load a tsv file `c:/~/trainSetRel3.txt` into a pandas data frame"
    },
    "mr": {
      "python": "DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\\t')"
    },
    "question_id": 9652832
  },
  {
    "question": {
      "en": "Get all the sentences from a string `text` using regex"
    },
    "mr": {
      "python": "re.split('\\\\.\\\\s', text)"
    },
    "question_id": 27946742
  },
  {
    "question": {
      "en": "solve for the least squares' solution of matrices `a` and `b`"
    },
    "mr": {
      "python": "np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))"
    },
    "question_id": 41648246
  },
  {
    "question": {
      "en": "Return the decimal value for each hex character in data `data`"
    },
    "mr": {
      "python": "print(' '.join([str(ord(a)) for a in data]))"
    },
    "question_id": 3059301
  },
  {
    "question": {
      "en": "get a random item from list `choices`"
    },
    "mr": {
      "python": "random_choice = random.choice(choices)"
    },
    "question_id": 30651487
  },
  {
    "question": {
      "en": "right trimming \"\\n\\t\" from string `myString`"
    },
    "mr": {
      "python": "myString.rstrip('\\n\\t')"
    },
    "question_id": 761804
  },
  {
    "question": {
      "en": "remove all instances of parenthesesis containing text beginning with `as ` from string `line`"
    },
    "mr": {
      "python": "line = re.sub('\\\\(+as .*?\\\\) ', '', line)"
    },
    "question_id": 37584492
  },
  {
    "question": {
      "en": "Divide elements in list `a` from elements at the same index in list `b`"
    },
    "mr": {
      "python": "[(x / y) for x, y in zip(a, b)]"
    },
    "question_id": 16418415
  },
  {
    "question": {
      "en": "compile Visual Studio project `project.sln` from the command line through python"
    },
    "mr": {
      "python": "os.system('msbuild project.sln /p:Configuration=Debug')"
    },
    "question_id": 498106
  },
  {
    "question": {
      "en": "count the number of True values associated with key 'success' in dictionary `d`"
    },
    "mr": {
      "python": "sum(1 if d['success'] else 0 for d in s)"
    },
    "question_id": 35269374
  },
  {
    "question": {
      "en": "variable number of digits `digits` in variable `value` in format string \"{0:.{1}%}\""
    },
    "mr": {
      "python": "\"\"\"{0:.{1}%}\"\"\".format(value, digits)"
    },
    "question_id": 14932247
  },
  {
    "question": {
      "en": "match zero-or-more instances of lower case alphabet characters in a string `f233op `"
    },
    "mr": {
      "python": "re.findall('([a-z])*', 'f233op')"
    },
    "question_id": 22229255
  },
  {
    "question": {
      "en": "Find all the lists from a lists of list 'items' if third element in all sub-lists is '0'"
    },
    "mr": {
      "python": "[x for x in items if x[2] == 0]"
    },
    "question_id": 10666163
  },
  {
    "question": {
      "en": "remove elements in list `b` from list `a`"
    },
    "mr": {
      "python": "[x for x in a if x not in b]"
    },
    "question_id": 9053260
  },
  {
    "question": {
      "en": "decode a double URL encoded string \r\n'FireShot3%2B%25282%2529.png' to\r\n'FireShot3+(2).png'"
    },
    "mr": {
      "python": "urllib.parse.unquote(urllib.parse.unquote('FireShot3%2B%25282%2529.png'))"
    },
    "question_id": 28431359
  },
  {
    "question": {
      "en": "limit float 13.9499999 to two decimal points"
    },
    "mr": {
      "python": "('%.2f' % 13.9499999)"
    },
    "question_id": 455612
  },
  {
    "question": {
      "en": "check if list `a` is empty"
    },
    "mr": {
      "python": "if (not a):\n    pass"
    },
    "question_id": 53513
  },
  {
    "question": {
      "en": "multiply values of dictionary `dict` with their respective values in dictionary `dict2`"
    },
    "mr": {
      "python": "dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)"
    },
    "question_id": 15334783
  },
  {
    "question": {
      "en": "convert binary string '11111111' to integer"
    },
    "mr": {
      "python": "int('11111111', 2)"
    },
    "question_id": 1476
  },
  {
    "question": {
      "en": "Remove characters in '!@#$' from a string `line`"
    },
    "mr": {
      "python": "line = line.translate(string.maketrans('', ''), '!@#$')"
    },
    "question_id": 3939361
  },
  {
    "question": {
      "en": "get a sum of 4d array `M`"
    },
    "mr": {
      "python": "M.sum(axis=0).sum(axis=0)"
    },
    "question_id": 24841306
  },
  {
    "question": {
      "en": "create a regular expression object with the pattern '\\xe2\\x80\\x93'"
    },
    "mr": {
      "python": "re.compile('\\xe2\\x80\\x93')"
    },
    "question_id": 372102
  },
  {
    "question": {
      "en": "escaping quotes in string"
    },
    "mr": {
      "python": "replace('\"', '\\\\\"')"
    },
    "question_id": 6275762
  },
  {
    "question": {
      "en": "check if string `my_string` is empty"
    },
    "mr": {
      "python": "if some_string:\n    pass"
    },
    "question_id": 9573244
  },
  {
    "question": {
      "en": "Validate IP address using Regex"
    },
    "mr": {
      "python": "pat = re.compile('^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$')"
    },
    "question_id": 11264005
  },
  {
    "question": {
      "en": "Delete an item with key `key` from `mydict`"
    },
    "mr": {
      "python": "del mydict[key]"
    },
    "question_id": 15411107
  },
  {
    "question": {
      "en": "delete digits at the end of string `s`"
    },
    "mr": {
      "python": "re.sub('\\\\b\\\\d+\\\\b', '', s)"
    },
    "question_id": 817122
  },
  {
    "question": {
      "en": "get the first row, second column; second row, first column, and first row third column values of numpy array `arr`"
    },
    "mr": {
      "python": "arr[[0, 1, 1], [1, 0, 2]]"
    },
    "question_id": 14162026
  },
  {
    "question": {
      "en": "generate pdf file `output_filename` from markdown file `input_filename`"
    },
    "mr": {
      "python": "with open(input_filename, 'r') as f:\n    html_text = markdown(f.read(), output_format='html4')\npdfkit.from_string(html_text, output_filename)"
    },
    "question_id": 4135344
  },
  {
    "question": {
      "en": "Add a tuple with value `another_choice` to a tuple `my_choices`"
    },
    "mr": {
      "python": "final_choices = ((another_choice,) + my_choices)"
    },
    "question_id": 3523048
  },
  {
    "question": {
      "en": "get indexes of all true boolean values from a list `bool_list`"
    },
    "mr": {
      "python": "[i for i, elem in enumerate(bool_list, 1) if elem]"
    },
    "question_id": 13076560
  },
  {
    "question": {
      "en": "Convert a list of lists `lol` to a dictionary with key as second value of a list and value as list itself"
    },
    "mr": {
      "python": "{x[1]: x for x in lol}"
    },
    "question_id": 14986218
  },
  {
    "question": {
      "en": "convert list `lst` of tuples of floats to list `str_list` of tuples of strings of floats in scientific notation with eight decimal point precision"
    },
    "mr": {
      "python": "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"
    },
    "question_id": 16127862
  },
  {
    "question": {
      "en": "sum all the values in a counter variable `my_counter`"
    },
    "mr": {
      "python": "sum(my_counter.values())"
    },
    "question_id": 32511444
  },
  {
    "question": {
      "en": "lowercase string values with key 'content' in a list of dictionaries `messages`"
    },
    "mr": {
      "python": "[{'content': x['content'].lower()} for x in messages]"
    },
    "question_id": 42353686
  },
  {
    "question": {
      "en": "Return rows of data associated with the maximum value of column 'Value' in dataframe `df`"
    },
    "mr": {
      "python": "df.loc[df['Value'].idxmax()]"
    },
    "question_id": 15741759
  },
  {
    "question": {
      "en": "change the font size on plot `matplotlib` to 22"
    },
    "mr": {
      "python": "matplotlib.rcParams.update({'font.size': 22})"
    },
    "question_id": 3899980
  },
  {
    "question": {
      "en": "List comprehension with an accumulator in range of 10"
    },
    "mr": {
      "python": "list(accumulate(list(range(10))))"
    },
    "question_id": 20222485
  },
  {
    "question": {
      "en": "make a row-by-row copy `y` of array `x`"
    },
    "mr": {
      "python": "y = [row[:] for row in x]"
    },
    "question_id": 6532881
  },
  {
    "question": {
      "en": "Sort a string `s` in lexicographic order"
    },
    "mr": {
      "python": "sorted(s, key=str.upper)"
    },
    "question_id": 7371935
  },
  {
    "question": {
      "en": "Split dictionary of lists into list of dictionaries"
    },
    "mr": {
      "python": "map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))"
    },
    "question_id": 1780174
  },
  {
    "question": {
      "en": "Sort the values of the dataframe `df` and align the columns accordingly based on the obtained indices after np.argsort."
    },
    "mr": {
      "python": "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"
    },
    "question_id": 41572822
  },
  {
    "question": {
      "en": "print current date and time in a regular format"
    },
    "mr": {
      "python": "time.strftime('%Y-%m-%d %H:%M')"
    },
    "question_id": 311627
  },
  {
    "question": {
      "en": "split elements of a list `l` by '\\t'"
    },
    "mr": {
      "python": "[i.partition('\\t')[-1] for i in l if '\\t' in i]"
    },
    "question_id": 23145240
  },
  {
    "question": {
      "en": "remove frame of legend in plot `plt`"
    },
    "mr": {
      "python": "plt.legend(frameon=False)"
    },
    "question_id": 25540259
  },
  {
    "question": {
      "en": "query all data from table `Task` where the value of column `time_spent` is bigger than 3 hours"
    },
    "mr": {
      "python": "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"
    },
    "question_id": 18102109
  },
  {
    "question": {
      "en": "plot a data logarithmically in y axis"
    },
    "mr": {
      "python": "plt.yscale('log', nonposy='clip')"
    },
    "question_id": 17952279
  },
  {
    "question": {
      "en": "find all possible sequences of elements in a list `[2, 3, 4]`"
    },
    "mr": {
      "python": "map(list, permutations([2, 3, 4]))"
    },
    "question_id": 9040939
  },
  {
    "question": {
      "en": "case insensitive string comparison between `string1` and `string2`"
    },
    "mr": {
      "python": "(string1.lower() == string2.lower())"
    },
    "question_id": 319426
  },
  {
    "question": {
      "en": "check whether a file \"/etc/password.txt\" exists"
    },
    "mr": {
      "python": "print(os.path.isfile('/etc/password.txt'))"
    },
    "question_id": 82831
  },
  {
    "question": {
      "en": "request http url `url` with parameters `payload`"
    },
    "mr": {
      "python": "r = requests.get(url, params=payload)"
    },
    "question_id": 4476373
  },
  {
    "question": {
      "en": "convert JSON string '2012-05-29T19:30:03.283Z' into a DateTime object using format '%Y-%m-%dT%H:%M:%S.%fZ'"
    },
    "mr": {
      "python": "datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')"
    },
    "question_id": 10805589
  },
  {
    "question": {
      "en": "run python script 'script2.py' from another python script, passing in 1 as an argument"
    },
    "mr": {
      "python": "os.system('script2.py 1')"
    },
    "question_id": 3781851
  },
  {
    "question": {
      "en": "Escape character '}' in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function `format` with arguments `('1', '2', '3')`"
    },
    "mr": {
      "python": "print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))"
    },
    "question_id": 9079540
  },
  {
    "question": {
      "en": "get value of the environment variable 'HOME' with default value '/home/username/'"
    },
    "mr": {
      "python": "print(os.environ.get('HOME', '/home/username/'))"
    },
    "question_id": 4906977
  },
  {
    "question": {
      "en": "Delete an item with key `key` from `mydict`"
    },
    "mr": {
      "python": "try:\n    del mydict[key]\nexcept KeyError:\n    pass\ntry:\n    del mydict[key]\nexcept KeyError:\n    pass"
    },
    "question_id": 15411107
  },
  {
    "question": {
      "en": "select only specific columns 'a' and 'c' from a dataframe 'data' with multiindex columns"
    },
    "mr": {
      "python": "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"
    },
    "question_id": 18470323
  },
  {
    "question": {
      "en": "Execute a put request to the url `url`"
    },
    "mr": {
      "python": "response = requests.put(url, data=json.dumps(data), headers=headers)"
    },
    "question_id": 33127636
  },
  {
    "question": {
      "en": "get output of script `proc`"
    },
    "mr": {
      "python": "print(proc.communicate()[0])"
    },
    "question_id": 6086047
  },
  {
    "question": {
      "en": "left trimming \"\\n\\r\" from string `myString`"
    },
    "mr": {
      "python": "myString.lstrip('\\n\\r')"
    },
    "question_id": 761804
  },
  {
    "question": {
      "en": "check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`"
    },
    "mr": {
      "python": "set(['a', 'b']).issubset(['a', 'b', 'c'])"
    },
    "question_id": 3931541
  },
  {
    "question": {
      "en": "Calling an external command \"some_command with args\""
    },
    "mr": {
      "python": "os.system('some_command with args')"
    },
    "question_id": 89228
  },
  {
    "question": {
      "en": "regex matching 5-digit substrings not enclosed with digits in `s`"
    },
    "mr": {
      "python": "re.findall('(?<!\\\\d)\\\\d{5}(?!\\\\d)', s)"
    },
    "question_id": 41807864
  },
  {
    "question": {
      "en": "parse string '2015/01/01 12:12am' to DateTime object using format '%Y/%m/%d %I:%M%p'"
    },
    "mr": {
      "python": "datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')"
    },
    "question_id": 25279993
  },
  {
    "question": {
      "en": "find all substrings in `mystring` beginning and ending with square brackets"
    },
    "mr": {
      "python": "re.findall('\\\\[(.*?)\\\\]', mystring)"
    },
    "question_id": 9889635
  },
  {
    "question": {
      "en": "best way to extract subset of key-value pairs with keys matching 'l', 'm', or 'n' from python dictionary object"
    },
    "mr": {
      "python": "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"
    },
    "question_id": 5352546
  },
  {
    "question": {
      "en": "Taking the results of a bash command \"awk '{print $10, $11}' test.txt > test2.txt\""
    },
    "mr": {
      "python": "os.system(\"awk '{print $10, $11}' test.txt > test2.txt\")"
    },
    "question_id": 5744980
  },
  {
    "question": {
      "en": "join two dataframes based on values in selected columns"
    },
    "mr": {
      "python": "pd.merge(a, b, on=['A', 'B'], how='outer')"
    },
    "question_id": 40221516
  },
  {
    "question": {
      "en": "get a list of variables from module 'adfix.py' in current module."
    },
    "mr": {
      "python": "print([item for item in dir(adfix) if not item.startswith('__')])"
    },
    "question_id": 9759820
  },
  {
    "question": {
      "en": "Execute a sql statement using variables `var1`, `var2` and `var3`"
    },
    "mr": {
      "python": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))"
    },
    "question_id": 902408
  },
  {
    "question": {
      "en": "Reverse a string `s`"
    },
    "mr": {
      "python": "''.join(reversed(s))"
    },
    "question_id": 931092
  },
  {
    "question": {
      "en": "get a list of all subdirectories in the directory `directory`"
    },
    "mr": {
      "python": "[x[0] for x in os.walk(directory)]"
    },
    "question_id": 973473
  },
  {
    "question": {
      "en": "Create a default empty json object if no json is available in request parameter `mydata`"
    },
    "mr": {
      "python": "json.loads(request.POST.get('mydata', '{}'))"
    },
    "question_id": 16436133
  },
  {
    "question": {
      "en": "pads string '5' on the left with 1 zero"
    },
    "mr": {
      "python": "print('{0}'.format('5'.zfill(2)))"
    },
    "question_id": 3505831
  },
  {
    "question": {
      "en": "remove Nan values from array `x`"
    },
    "mr": {
      "python": "x = x[numpy.logical_not(numpy.isnan(x))]"
    },
    "question_id": 11620914
  },
  {
    "question": {
      "en": "split string `str1` on one or more spaces with a regular expression"
    },
    "mr": {
      "python": "re.split(' +', str1)"
    },
    "question_id": 10974932
  },
  {
    "question": {
      "en": "Construct an array with data type float32 `a` from data in binary file 'filename'"
    },
    "mr": {
      "python": "a = numpy.fromfile('filename', dtype=numpy.float32)"
    },
    "question_id": 4365964
  },
  {
    "question": {
      "en": "get the common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log'"
    },
    "mr": {
      "python": "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"
    },
    "question_id": 7287996
  },
  {
    "question": {
      "en": "check if all elements in a tuple `(1, 6)` are in another `(1, 2, 3, 4, 5)`"
    },
    "mr": {
      "python": "all(i in (1, 2, 3, 4, 5) for i in (1, 6))"
    },
    "question_id": 34468983
  },
  {
    "question": {
      "en": "webbrowser open url 'http://example.com'"
    },
    "mr": {
      "python": "webbrowser.open('http://example.com')"
    },
    "question_id": 4302027
  },
  {
    "question": {
      "en": "round number `x` to nearest integer"
    },
    "mr": {
      "python": "int(round(x))"
    },
    "question_id": 31818050
  },
  {
    "question": {
      "en": "get the dot product of two one dimensional numpy arrays"
    },
    "mr": {
      "python": "np.dot(a[:, (None)], b[(None), :])"
    },
    "question_id": 23566515
  },
  {
    "question": {
      "en": "Convert a list `['A:1', 'B:2', 'C:3', 'D:4']` to dictionary"
    },
    "mr": {
      "python": "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))"
    },
    "question_id": 16374540
  },
  {
    "question": {
      "en": "Save plot `plt` as png file 'filename.png'"
    },
    "mr": {
      "python": "plt.savefig('filename.png')"
    },
    "question_id": 39870642
  },
  {
    "question": {
      "en": "Jinja parse datetime object `car.date_of_manufacture` to use format pattern `datetime`"
    },
    "mr": {
      "python": "{{car.date_of_manufacture | datetime}}"
    },
    "question_id": 4830535
  },
  {
    "question": {
      "en": "find the index of the second occurrence of the substring `bar` in string `foo bar bar bar`"
    },
    "mr": {
      "python": "\"\"\"foo bar bar bar\"\"\".replace('bar', 'XXX', 1).find('bar')"
    },
    "question_id": 1883980
  },
  {
    "question": {
      "en": "encode a pdf file `pdf_reference.pdf` with `base64` encoding"
    },
    "mr": {
      "python": "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"
    },
    "question_id": 208894
  },
  {
    "question": {
      "en": "display a pdf  file that has been downloaded as `my_pdf.pdf`"
    },
    "mr": {
      "python": "webbrowser.open('file:///my_pdf.pdf')"
    },
    "question_id": 21684346
  },
  {
    "question": {
      "en": "How to get the concrete class name as a string?"
    },
    "mr": {
      "python": "instance.__class__.__name__"
    },
    "question_id": 521502
  },
  {
    "question": {
      "en": "Create list  by splitting string `mystring` using \",\" as delimiter"
    },
    "mr": {
      "python": "mystring.split(',')"
    },
    "question_id": 5864485
  },
  {
    "question": {
      "en": "sort two lists `list1` and `list2` together using lambda function"
    },
    "mr": {
      "python": "[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]"
    },
    "question_id": 13668393
  },
  {
    "question": {
      "en": "extract attribute `my_attr` from each object in list `my_list`"
    },
    "mr": {
      "python": "[o.my_attr for o in my_list]"
    },
    "question_id": 677656
  },
  {
    "question": {
      "en": "remove newline in string `s`"
    },
    "mr": {
      "python": "s.strip()"
    },
    "question_id": 275018
  },
  {
    "question": {
      "en": "get alpha value `alpha` of a png image `img`"
    },
    "mr": {
      "python": "alpha = img.split()[-1]"
    },
    "question_id": 1962795
  },
  {
    "question": {
      "en": "get top `3` items from a dictionary `mydict` with largest sum of values"
    },
    "mr": {
      "python": "heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))"
    },
    "question_id": 3411025
  },
  {
    "question": {
      "en": "save xlsxwriter file to 'C:/Users/Steven/Documents/demo.xlsx' path"
    },
    "mr": {
      "python": "workbook = xlsxwriter.Workbook('C:/Users/Steven/Documents/demo.xlsx')"
    },
    "question_id": 22904654
  },
  {
    "question": {
      "en": "print bold text 'Hello'"
    },
    "mr": {
      "python": "print('\\x1b[1m' + 'Hello')"
    },
    "question_id": 8924173
  },
  {
    "question": {
      "en": "get a list `cleaned` that contains all non-empty elements in list `your_list`"
    },
    "mr": {
      "python": "cleaned = [x for x in your_list if x]"
    },
    "question_id": 16099694
  },
  {
    "question": {
      "en": "Search for string 'blabla' in txt file 'example.txt'"
    },
    "mr": {
      "python": "if ('blabla' in open('example.txt').read()):\n    pass"
    },
    "question_id": 4940032
  },
  {
    "question": {
      "en": "create list `levels` containing 3 empty dictionaries"
    },
    "mr": {
      "python": "levels = [{}, {}, {}]"
    },
    "question_id": 4411811
  },
  {
    "question": {
      "en": "elementwise product of 3d arrays `A` and `B`"
    },
    "mr": {
      "python": "np.einsum('ijk,ikl->ijl', A, B)"
    },
    "question_id": 31957364
  },
  {
    "question": {
      "en": "get the first element of each tuple in a list `rows`"
    },
    "mr": {
      "python": "[x[0] for x in rows]"
    },
    "question_id": 22412258
  },
  {
    "question": {
      "en": "get the number of values in list `j` that is greater than 5"
    },
    "mr": {
      "python": "len([1 for i in j if (i > 5)])"
    },
    "question_id": 10543303
  },
  {
    "question": {
      "en": "get items from list `a` that don't appear in list `b`"
    },
    "mr": {
      "python": "[y for y in a if y not in b]"
    },
    "question_id": 15474933
  },
  {
    "question": {
      "en": "Filter queryset for all objects in Django model `MyModel` where texts length are greater than `254`"
    },
    "mr": {
      "python": "MyModel.objects.filter(text__regex='^.{254}.*')"
    },
    "question_id": 23351183
  },
  {
    "question": {
      "en": "set every two-stride far element to -1 starting from second element in array `a`"
    },
    "mr": {
      "python": "a[1::2] = -1"
    },
    "question_id": 7154739
  },
  {
    "question": {
      "en": "remove the last dot and all text beyond it in string `s`"
    },
    "mr": {
      "python": "re.sub('\\\\.[^.]+$', '', s)"
    },
    "question_id": 35118265
  },
  {
    "question": {
      "en": "print 'here is your checkmark: ' plus unicode character u'\\u2713'"
    },
    "mr": {
      "python": "print('here is your checkmark: ' + '\\u2713')"
    },
    "question_id": 10569438
  },
  {
    "question": {
      "en": "for a dictionary `a`, set default value for key `somekey` as list and append value `bob`  in that key"
    },
    "mr": {
      "python": "a.setdefault('somekey', []).append('bob')"
    },
    "question_id": 20585920
  },
  {
    "question": {
      "en": "find all the values in attribute `value` for the tags whose `type` attribute is `submit` in selenium"
    },
    "mr": {
      "python": "browser.find_elements_by_xpath(\"//*[@type='submit']\").get_attribute('value')"
    },
    "question_id": 12579061
  },
  {
    "question": {
      "en": "multiply column 'A' and column 'B' by column 'C' in datafram `df`"
    },
    "mr": {
      "python": "df[['A', 'B']].multiply(df['C'], axis='index')"
    },
    "question_id": 22702760
  },
  {
    "question": {
      "en": "get a list `slice` of array slices of the first two rows and columns from array `arr`"
    },
    "mr": {
      "python": "slice = [arr[i][0:2] for i in range(0, 2)]"
    },
    "question_id": 17277100
  },
  {
    "question": {
      "en": "return a random word from a word list 'words'"
    },
    "mr": {
      "python": "print(random.choice(words))"
    },
    "question_id": 1456617
  },
  {
    "question": {
      "en": "print line `line` from text file with 'utf-16-le' format"
    },
    "mr": {
      "python": "print(line.decode('utf-16-le').split())"
    },
    "question_id": 19328874
  },
  {
    "question": {
      "en": "get a dictionary in list `dicts` which key 'ratio' is closer to a global value 1.77672955975"
    },
    "mr": {
      "python": "min(dicts, key=lambda x: (abs(1.77672955975 - x['ratio']), -x['pixels']))"
    },
    "question_id": 42442428
  },
  {
    "question": {
      "en": "check if string `needle` is in `haystack`"
    },
    "mr": {
      "python": "if (needle in haystack):\n    pass"
    },
    "question_id": 3437059
  },
  {
    "question": {
      "en": "decode string `content` to UTF-8 code"
    },
    "mr": {
      "python": "print(content.decode('utf8'))"
    },
    "question_id": 17577727
  },
  {
    "question": {
      "en": "Check if the value of the key \"name\" is \"Test\" in a list of dictionaries `label`"
    },
    "mr": {
      "python": "any(d['name'] == 'Test' for d in label)"
    },
    "question_id": 17149561
  },
  {
    "question": {
      "en": "Convert float 24322.34 to comma-separated string"
    },
    "mr": {
      "python": "\"\"\"{0:,.2f}\"\"\".format(24322.34)"
    },
    "question_id": 10677350
  },
  {
    "question": {
      "en": "convert string '01/12/2011' to an integer timestamp"
    },
    "mr": {
      "python": "int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))"
    },
    "question_id": 9637838
  },
  {
    "question": {
      "en": "create a file 'filename' with each tuple in the list `mylist` written to a line"
    },
    "mr": {
      "python": "open('filename', 'w').write('\\n'.join('%s %s' % x for x in mylist))"
    },
    "question_id": 3820312
  },
  {
    "question": {
      "en": "Get all the items from a list of tuple 'l' where second item in tuple is '1'."
    },
    "mr": {
      "python": "[x for x in l if x[1] == 1]"
    },
    "question_id": 18131367
  },
  {
    "question": {
      "en": "Parse string '21/11/06 16:30' according to format '%d/%m/%y %H:%M'"
    },
    "mr": {
      "python": "datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')"
    },
    "question_id": 4363072
  },
  {
    "question": {
      "en": "sort a dictionary `a` by values that are list type"
    },
    "mr": {
      "python": "t = sorted(list(a.items()), key=lambda x: x[1])"
    },
    "question_id": 20230211
  },
  {
    "question": {
      "en": "separate numbers and characters in string '20M10000N80M'"
    },
    "mr": {
      "python": "re.findall('([0-9]+)([A-Z])', '20M10000N80M')"
    },
    "question_id": 15103484
  },
  {
    "question": {
      "en": "combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary"
    },
    "mr": {
      "python": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"
    },
    "question_id": 7271385
  },
  {
    "question": {
      "en": "convert list `data` into a string of its elements"
    },
    "mr": {
      "python": "print(''.join(map(str, data)))"
    },
    "question_id": 17757450
  },
  {
    "question": {
      "en": "print unicode string `ex\\xe1mple` in uppercase"
    },
    "mr": {
      "python": "print('ex\\xe1mple'.upper())"
    },
    "question_id": 727507
  },
  {
    "question": {
      "en": "convert a string of integers `x` separated by spaces to a list of integers"
    },
    "mr": {
      "python": "x = [int(i) for i in x.split()]"
    },
    "question_id": 19555472
  },
  {
    "question": {
      "en": "call `doSomething()` in a try-except without handling the exception"
    },
    "mr": {
      "python": "try:\n    doSomething()\nexcept:\n    pass"
    },
    "question_id": 730764
  },
  {
    "question": {
      "en": "slice list `[1, 2, 3, 4, 5, 6, 7]` into lists of two elements each"
    },
    "mr": {
      "python": "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"
    },
    "question_id": 2231663
  },
  {
    "question": {
      "en": "open a file 'bundled-resource.jpg' in the same directory as a python script"
    },
    "mr": {
      "python": "f = open(os.path.join(__location__, 'bundled-resource.jpg'))"
    },
    "question_id": 4060221
  },
  {
    "question": {
      "en": "Initialize a list of empty lists `a` of size 3"
    },
    "mr": {
      "python": "a = [[] for i in range(3)]"
    },
    "question_id": 11219949
  },
  {
    "question": {
      "en": "What's the best way to search for a Python dictionary value in a list of dictionaries?"
    },
    "mr": {
      "python": "any(d['site'] == 'Superuser' for d in data)"
    },
    "question_id": 1580270
  },
  {
    "question": {
      "en": "change current working directory"
    },
    "mr": {
      "python": "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"
    },
    "question_id": 20796355
  },
  {
    "question": {
      "en": "Subtract the mean of each row in dataframe `df` from the corresponding row's elements"
    },
    "mr": {
      "python": "df.sub(df.mean(axis=1), axis=0)"
    },
    "question_id": 26081300
  },
  {
    "question": {
      "en": "sum values greater than 0 in dictionary `d`"
    },
    "mr": {
      "python": "sum(v for v in list(d.values()) if v > 0)"
    },
    "question_id": 15014276
  },
  {
    "question": {
      "en": "convert python 2 dictionary `a` to a list of tuples where the value is the first tuple element and the key is the second tuple element"
    },
    "mr": {
      "python": "[(v, k) for k, v in a.items()]"
    },
    "question_id": 674519
  },
  {
    "question": {
      "en": "Initialize a list of empty lists `x` of size 3"
    },
    "mr": {
      "python": "x = [[] for i in range(3)]"
    },
    "question_id": 12791501
  },
  {
    "question": {
      "en": "disable logging while running unit tests in python django"
    },
    "mr": {
      "python": "logging.disable(logging.CRITICAL)"
    },
    "question_id": 5255657
  },
  {
    "question": {
      "en": "case insensitive comparison of strings `string1` and `string2`"
    },
    "mr": {
      "python": "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"
    },
    "question_id": 319426
  },
  {
    "question": {
      "en": "Sort list `li` in descending order based on the second element of each list inside list`li`"
    },
    "mr": {
      "python": "sorted(li, key=operator.itemgetter(1), reverse=True)"
    },
    "question_id": 18142090
  },
  {
    "question": {
      "en": "change a string of integers `x` separated by spaces to a list of int"
    },
    "mr": {
      "python": "x = map(int, x.split())"
    },
    "question_id": 19555472
  },
  {
    "question": {
      "en": "match zero-or-more instances of lower case alphabet characters in a string `f233op `"
    },
    "mr": {
      "python": "re.findall('([a-z]*)', 'f233op')"
    },
    "question_id": 22229255
  },
  {
    "question": {
      "en": "order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list"
    },
    "mr": {
      "python": "sorted([[1, 'mike'], [1, 'bob']])"
    },
    "question_id": 40744328
  },
  {
    "question": {
      "en": "find all occurrences of regex pattern '(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)' in string `x`"
    },
    "mr": {
      "python": "re.findall('(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)', x)"
    },
    "question_id": 20778951
  },
  {
    "question": {
      "en": "Delete character \"M\" from a string `s` using python"
    },
    "mr": {
      "python": "s = s.replace('M', '')"
    },
    "question_id": 3559559
  },
  {
    "question": {
      "en": "Replace repeated instances of a character '*' with a single instance in a string 'text'"
    },
    "mr": {
      "python": "re.sub('\\\\*\\\\*+', '*', text)"
    },
    "question_id": 3878555
  },
  {
    "question": {
      "en": "find the real user home directory using python"
    },
    "mr": {
      "python": "os.path.expanduser('~user')"
    },
    "question_id": 2668909
  },
  {
    "question": {
      "en": "extract dictionary values by key 'Feature3' from data frame `df`"
    },
    "mr": {
      "python": "feature3 = [d.get('Feature3') for d in df.dic]"
    },
    "question_id": 35711059
  },
  {
    "question": {
      "en": "remove newline in string \"Hello\\n\\n\\n\" on the right side"
    },
    "mr": {
      "python": "'Hello\\n\\n\\n'.rstrip('\\n')"
    },
    "question_id": 275018
  },
  {
    "question": {
      "en": "get the absolute path of a running python script"
    },
    "mr": {
      "python": "os.path.abspath(__file__)"
    },
    "question_id": 3283306
  },
  {
    "question": {
      "en": "encode string `data` using hex 'hex' encoding"
    },
    "mr": {
      "python": "print(data.encode('hex'))"
    },
    "question_id": 3059301
  },
  {
    "question": {
      "en": "Iterating key and items over dictionary `d`"
    },
    "mr": {
      "python": "for (letter, number) in list(d.items()):\n    pass"
    },
    "question_id": 3294889
  },
  {
    "question": {
      "en": "get a utf-8 string literal representation of byte string `x`"
    },
    "mr": {
      "python": "\"\"\"x = {}\"\"\".format(x.decode('utf8')).encode('utf8')"
    },
    "question_id": 15390374
  },
  {
    "question": {
      "en": "Extract first two substrings in string `phrase` that end in `.`, `?` or `!`"
    },
    "mr": {
      "python": "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"
    },
    "question_id": 3329386
  },
  {
    "question": {
      "en": "convert a list of dictionaries `d` to pandas data frame"
    },
    "mr": {
      "python": "pd.DataFrame(d)"
    },
    "question_id": 20638006
  },
  {
    "question": {
      "en": "read a single character from stdin"
    },
    "mr": {
      "python": "sys.stdin.read(1)"
    },
    "question_id": 510357
  },
  {
    "question": {
      "en": "check if object `a` has property 'property'"
    },
    "mr": {
      "python": "if hasattr(a, 'property'):\n    pass"
    },
    "question_id": 610883
  },
  {
    "question": {
      "en": "add string `-` in `4th` position of a string `s`"
    },
    "mr": {
      "python": "s[:4] + '-' + s[4:]"
    },
    "question_id": 5254445
  },
  {
    "question": {
      "en": "convert a string `s` containing hex bytes to a hex string"
    },
    "mr": {
      "python": "binascii.a2b_hex(s)"
    },
    "question_id": 10824319
  },
  {
    "question": {
      "en": "construct pandas dataframe from a list of tuples"
    },
    "mr": {
      "python": "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"
    },
    "question_id": 19961490
  },
  {
    "question": {
      "en": "sum all elements of two-dimensions list `[[1, 2, 3, 4], [2, 4, 5, 6]]]`"
    },
    "mr": {
      "python": "sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])"
    },
    "question_id": 9497290
  },
  {
    "question": {
      "en": "read a ragged csv file `D:/Temp/tt.csv` using `names` parameter in pandas"
    },
    "mr": {
      "python": "pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))"
    },
    "question_id": 20154303
  },
  {
    "question": {
      "en": "check if all elements in list `mylist` are the same"
    },
    "mr": {
      "python": "len(set(mylist)) == 1"
    },
    "question_id": 22240602
  },
  {
    "question": {
      "en": "generate a 12-digit random number"
    },
    "mr": {
      "python": "random.randint(100000000000, 999999999999)"
    },
    "question_id": 13496087
  },
  {
    "question": {
      "en": "get a sorted list of the characters of string `s` in lexicographic order, with lowercase letters first"
    },
    "mr": {
      "python": "sorted(s, key=str.lower)"
    },
    "question_id": 7371935
  },
  {
    "question": {
      "en": "rename file `dir` to `dir` + '!'"
    },
    "mr": {
      "python": "os.rename(dir, dir + '!')"
    },
    "question_id": 11816315
  },
  {
    "question": {
      "en": "add key \"item3\" and value \"3\" to dictionary `default_data `"
    },
    "mr": {
      "python": "default_data['item3'] = 3"
    },
    "question_id": 6416131
  },
  {
    "question": {
      "en": "Check if key 'c' in `d`"
    },
    "mr": {
      "python": "('c' in d)"
    },
    "question_id": 1602934
  },
  {
    "question": {
      "en": "Encode each value to 'UTF8' in the list `EmployeeList`"
    },
    "mr": {
      "python": "[x.encode('UTF8') for x in EmployeeList]"
    },
    "question_id": 18272066
  },
  {
    "question": {
      "en": "get index values of pandas dataframe `df` as list"
    },
    "mr": {
      "python": "df.index.values.tolist()"
    },
    "question_id": 18358938
  },
  {
    "question": {
      "en": "extract floating number from string 'Current Level: 13.4 db.'"
    },
    "mr": {
      "python": "re.findall('\\\\d+\\\\.\\\\d+', 'Current Level: 13.4 db.')"
    },
    "question_id": 4703390
  },
  {
    "question": {
      "en": "encode string `data` as `hex`"
    },
    "mr": {
      "python": "data.encode('hex')"
    },
    "question_id": 200738
  },
  {
    "question": {
      "en": "Delete an element `key` from a dictionary `d`"
    },
    "mr": {
      "python": "del d[key]"
    },
    "question_id": 5844672
  },
  {
    "question": {
      "en": "find element by css selector \"input[onclick*='1 Bedroom Deluxe']\""
    },
    "mr": {
      "python": "driver.find_element_by_css_selector(\"input[onclick*='1 Bedroom Deluxe']\")"
    },
    "question_id": 21691126
  },
  {
    "question": {
      "en": "parse string \"Jun 1 2005  1:33PM\" into datetime by format \"%b %d %Y %I:%M%p\""
    },
    "mr": {
      "python": "datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"
    },
    "question_id": 466345
  },
  {
    "question": {
      "en": "align values in array `b` to the order of corresponding values in array `a`"
    },
    "mr": {
      "python": "a[np.in1d(a, b)]"
    },
    "question_id": 41923906
  },
  {
    "question": {
      "en": "sort a list of tuples `a` by the sum of second and third element of each tuple"
    },
    "mr": {
      "python": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)"
    },
    "question_id": 40384599
  },
  {
    "question": {
      "en": "sort objects in `Articles` in descending order of counts of `likes`"
    },
    "mr": {
      "python": "Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')"
    },
    "question_id": 35097130
  },
  {
    "question": {
      "en": "Sorting while preserving order in python"
    },
    "mr": {
      "python": "sorted(enumerate(a), key=lambda x: x[1])"
    },
    "question_id": 3728017
  },
  {
    "question": {
      "en": "SQLAlchemy select records of columns of table `my_table` in addition to current date column"
    },
    "mr": {
      "python": "print(select([my_table, func.current_date()]).execute())"
    },
    "question_id": 4552380
  },
  {
    "question": {
      "en": "zip keys with individual values in lists `k` and `v`"
    },
    "mr": {
      "python": "[dict(zip(k, x)) for x in v]"
    },
    "question_id": 13480031
  },
  {
    "question": {
      "en": "From multiIndexed dataframe `data` select columns `a` and `c` within each higher order column `one` and `two`"
    },
    "mr": {
      "python": "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"
    },
    "question_id": 18470323
  },
  {
    "question": {
      "en": "sort list `lst` with positives coming before negatives with values sorted respectively"
    },
    "mr": {
      "python": "sorted(lst, key=lambda x: (x < 0, x))"
    },
    "question_id": 40620804
  },
  {
    "question": {
      "en": "read json `elevations` to pandas dataframe `df`"
    },
    "mr": {
      "python": "pd.read_json(elevations)"
    },
    "question_id": 21104592
  },
  {
    "question": {
      "en": "Exit script"
    },
    "mr": {
      "python": "sys.exit()"
    },
    "question_id": 3376534
  },
  {
    "question": {
      "en": "Replace `;` with `:` in a string `line`"
    },
    "mr": {
      "python": "line = line.replace(';', ':')"
    },
    "question_id": 12723751
  },
  {
    "question": {
      "en": "check if 3 is inside list `[1, 2, 3]`"
    },
    "mr": {
      "python": "3 in [1, 2, 3]"
    },
    "question_id": 9542738
  },
  {
    "question": {
      "en": "Reverse a string `string`"
    },
    "mr": {
      "python": "''.join(reversed(string))"
    },
    "question_id": 931092
  },
  {
    "question": {
      "en": "drop all columns in dataframe `df` that holds a maximum value bigger than 0"
    },
    "mr": {
      "python": "df.columns[df.max() > 0]"
    },
    "question_id": 26897536
  },
  {
    "question": {
      "en": "request URL `url` using http header `{'referer': my_referer}`"
    },
    "mr": {
      "python": "requests.get(url, headers={'referer': my_referer})"
    },
    "question_id": 20837786
  },
  {
    "question": {
      "en": "recursively delete all contents in directory `path`"
    },
    "mr": {
      "python": "shutil.rmtree(path, ignore_errors=False, onerror=None)"
    },
    "question_id": 6996603
  },
  {
    "question": {
      "en": "get a sum of all values from key `gold` in a list of dictionary `example_list`"
    },
    "mr": {
      "python": "sum([item['gold'] for item in example_list])"
    },
    "question_id": 11692613
  },
  {
    "question": {
      "en": "run function 'SudsMove' simultaneously"
    },
    "mr": {
      "python": "threading.Thread(target=SudsMove).start()"
    },
    "question_id": 2108126
  },
  {
    "question": {
      "en": "read file 'filename' line by line into a list `lines`"
    },
    "mr": {
      "python": "with open('filename') as f:\n    lines = f.readlines()"
    },
    "question_id": 3277503
  },
  {
    "question": {
      "en": "change directory to the directory of a python script"
    },
    "mr": {
      "python": "os.chdir(os.path.dirname(__file__))"
    },
    "question_id": 509742
  },
  {
    "question": {
      "en": "Python regular expression match whole word"
    },
    "mr": {
      "python": "re.search('\\\\bis\\\\b', your_string)"
    },
    "question_id": 15863066
  },
  {
    "question": {
      "en": "convert a python dictionary 'a' to a list of tuples"
    },
    "mr": {
      "python": "[(k, v) for k, v in a.items()]"
    },
    "question_id": 674519
  },
  {
    "question": {
      "en": "Get total number of values in a nested dictionary `food_colors`"
    },
    "mr": {
      "python": "sum(len(x) for x in list(food_colors.values()))"
    },
    "question_id": 4581646
  },
  {
    "question": {
      "en": "delete first row of array `x`"
    },
    "mr": {
      "python": "x = numpy.delete(x, 0, axis=0)"
    },
    "question_id": 3877491
  },
  {
    "question": {
      "en": "format string with dict `{'5': 'you'}` with integer keys"
    },
    "mr": {
      "python": "'hello there %(5)s' % {'5': 'you'}"
    },
    "question_id": 20677660
  },
  {
    "question": {
      "en": "sort list `lst` based on each element's number of occurrences"
    },
    "mr": {
      "python": "sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))"
    },
    "question_id": 42394627
  },
  {
    "question": {
      "en": "Enclose numbers in quotes in a string `This is number 1 and this is number 22`"
    },
    "mr": {
      "python": "re.sub('(\\\\d+)', '\"\\\\1\"', 'This is number 1 and this is number 22')"
    },
    "question_id": 42364992
  },
  {
    "question": {
      "en": "convert a unicode 'Andr\\xc3\\xa9' to a string"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9').decode('utf8')"
    },
    "question_id": 2783079
  },
  {
    "question": {
      "en": "output data of the first 7 columns of Pandas dataframe"
    },
    "mr": {
      "python": "pandas.set_option('display.max_columns', 7)"
    },
    "question_id": 11361985
  },
  {
    "question": {
      "en": "create a pandas dataframe `df` from elements of a dictionary `nvalues`"
    },
    "mr": {
      "python": "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"
    },
    "question_id": 37934969
  },
  {
    "question": {
      "en": "replace NaN values in array `a` with zeros"
    },
    "mr": {
      "python": "b = np.where(np.isnan(a), 0, a)"
    },
    "question_id": 1800187
  },
  {
    "question": {
      "en": "Get a list of all values in column `a` in pandas data frame `df`"
    },
    "mr": {
      "python": "df['a'].tolist()"
    },
    "question_id": 23748995
  },
  {
    "question": {
      "en": "get domain/host name from request object in Django"
    },
    "mr": {
      "python": "request.META['HTTP_HOST']"
    },
    "question_id": 29945684
  },
  {
    "question": {
      "en": "convert ndarray with shape 3x3 to array"
    },
    "mr": {
      "python": "np.zeros((3, 3)).ravel()"
    },
    "question_id": 18200052
  },
  {
    "question": {
      "en": "converting hex string `s` to its integer representations"
    },
    "mr": {
      "python": "[ord(c) for c in s.decode('hex')]"
    },
    "question_id": 7595148
  },
  {
    "question": {
      "en": "add key \"item3\" and value \"3\" to dictionary `default_data `"
    },
    "mr": {
      "python": "default_data.update({'item3': 3, })"
    },
    "question_id": 6416131
  },
  {
    "question": {
      "en": "convert unicode text from list `elems` with index 0 to normal text 'utf-8'"
    },
    "mr": {
      "python": "elems[0].getText().encode('utf-8')"
    },
    "question_id": 36623789
  },
  {
    "question": {
      "en": "match contents of an element to 'Example' in xpath (lxml)"
    },
    "mr": {
      "python": "tree.xpath(\".//a[text()='Example']\")[0].tag"
    },
    "question_id": 2637760
  },
  {
    "question": {
      "en": "convert the elements of list `L` from hex byte strings to hex integers"
    },
    "mr": {
      "python": "[int(x, 16) for x in L]"
    },
    "question_id": 2397687
  },
  {
    "question": {
      "en": "order a list of lists `l1` by the first value"
    },
    "mr": {
      "python": "l1.sort(key=lambda x: int(x[0]))"
    },
    "question_id": 40744328
  },
  {
    "question": {
      "en": "list duplicated elements in two lists `listA` and `listB`"
    },
    "mr": {
      "python": "list(set(listA) & set(listB))"
    },
    "question_id": 11697709
  },
  {
    "question": {
      "en": "write the content of file `xxx.mp4` to file `f`"
    },
    "mr": {
      "python": "f.write(open('xxx.mp4', 'rb').read())"
    },
    "question_id": 12426043
  },
  {
    "question": {
      "en": "remove all non-alphabet chars from string `s`"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join([i for i in s if i.isalpha()])"
    },
    "question_id": 22520932
  },
  {
    "question": {
      "en": "remove the element in list `a` at index `index`"
    },
    "mr": {
      "python": "del a[index]"
    },
    "question_id": 627435
  },
  {
    "question": {
      "en": "Convert hex string \"deadbeef\" to integer"
    },
    "mr": {
      "python": "int('deadbeef', 16)"
    },
    "question_id": 209513
  },
  {
    "question": {
      "en": "declare an array with element 'i'"
    },
    "mr": {
      "python": "intarray = array('i')"
    },
    "question_id": 1514553
  },
  {
    "question": {
      "en": "Save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`"
    },
    "mr": {
      "python": "plt.savefig('filename.png', dpi=300)"
    },
    "question_id": 39870642
  },
  {
    "question": {
      "en": "Parse a unicode string `M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s`"
    },
    "mr": {
      "python": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.decode('unicode-escape')"
    },
    "question_id": 30747705
  },
  {
    "question": {
      "en": "Change log level dynamically to 'DEBUG' without restarting the application"
    },
    "mr": {
      "python": "logging.getLogger().setLevel(logging.DEBUG)"
    },
    "question_id": 19617355
  },
  {
    "question": {
      "en": "Write column 'sum' of DataFrame `a` to csv file 'test.csv'"
    },
    "mr": {
      "python": "a.to_csv('test.csv', cols=['sum'])"
    },
    "question_id": 21206395
  },
  {
    "question": {
      "en": "convert all of the items in a list `lst` to float"
    },
    "mr": {
      "python": "[float(i) for i in lst]"
    },
    "question_id": 1614236
  },
  {
    "question": {
      "en": "trim whitespaces (including tabs) in string `s`"
    },
    "mr": {
      "python": "print(re.sub('[\\\\s+]', '', s))"
    },
    "question_id": 1185524
  },
  {
    "question": {
      "en": "create a symlink directory `D:\\\\testdirLink` for directory `D:\\\\testdir` with unicode support using ctypes library"
    },
    "mr": {
      "python": "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)"
    },
    "question_id": 1447575
  },
  {
    "question": {
      "en": "unpivot first 2 columns into new columns 'year' and 'value' from a pandas dataframe `x`"
    },
    "mr": {
      "python": "pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')"
    },
    "question_id": 23354124
  },
  {
    "question": {
      "en": "Replace each value in column 'prod_type' of dataframe `df` with string 'responsive'"
    },
    "mr": {
      "python": "df['prod_type'] = 'responsive'"
    },
    "question_id": 39602824
  },
  {
    "question": {
      "en": "get the ASCII value of a character 'a' as an int"
    },
    "mr": {
      "python": "ord('a')"
    },
    "question_id": 227459
  },
  {
    "question": {
      "en": "get month name from a datetime object `today`"
    },
    "mr": {
      "python": "today.strftime('%B')"
    },
    "question_id": 9621388
  },
  {
    "question": {
      "en": "replace '-' in pandas dataframe `df` with `np.nan`"
    },
    "mr": {
      "python": "df.replace('-', np.nan)"
    },
    "question_id": 17097236
  },
  {
    "question": {
      "en": "Extract only characters from a string as a list"
    },
    "mr": {
      "python": "re.split('[^a-zA-Z]*', 'your string')"
    },
    "question_id": 8199398
  },
  {
    "question": {
      "en": "scroll to the bottom of a web page using selenium webdriver"
    },
    "mr": {
      "python": "driver.execute_script('window.scrollTo(0, Y)')"
    },
    "question_id": 20986631
  },
  {
    "question": {
      "en": "sort a list of lists `l` by index 2 of the inner list"
    },
    "mr": {
      "python": "l.sort(key=(lambda x: x[2]))"
    },
    "question_id": 4174941
  },
  {
    "question": {
      "en": "convert nested list of lists `[['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]` into a list of tuples"
    },
    "mr": {
      "python": "list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))"
    },
    "question_id": 18938276
  },
  {
    "question": {
      "en": "select rows whose column value in column `column_name` does not equal `some_value` in pandas data frame"
    },
    "mr": {
      "python": "df.loc[df['column_name'] != some_value]"
    },
    "question_id": 17071871
  },
  {
    "question": {
      "en": "add field names as headers in csv constructor `writer`"
    },
    "mr": {
      "python": "writer.writeheader()"
    },
    "question_id": 20347766
  },
  {
    "question": {
      "en": "multiply array `a` and array `b`respective elements then sum each row of the new array"
    },
    "mr": {
      "python": "np.einsum('ji,i->j', a, b)"
    },
    "question_id": 21562986
  },
  {
    "question": {
      "en": "Update row values for a column `Season` using vectorized string operation in pandas"
    },
    "mr": {
      "python": "df['Season'].str.split('-').str[0].astype(int)"
    },
    "question_id": 25292838
  },
  {
    "question": {
      "en": "remove line breaks from string `textblock` using regex"
    },
    "mr": {
      "python": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', textblock)"
    },
    "question_id": 5075247
  },
  {
    "question": {
      "en": "read CSV file 'my.csv' into a dataframe `df` with datatype of float for column 'my_column' considering character 'n/a' as NaN value"
    },
    "mr": {
      "python": "df = pd.read_csv('my.csv', dtype={'my_column': np.float64}, na_values=['n/a'])"
    },
    "question_id": 30190459
  },
  {
    "question": {
      "en": "execute a jar file 'Blender.jar' using subprocess"
    },
    "mr": {
      "python": "subprocess.call(['java', '-jar', 'Blender.jar'])"
    },
    "question_id": 7372592
  },
  {
    "question": {
      "en": "get the path of module `a_module`"
    },
    "mr": {
      "python": "print(a_module.__file__)"
    },
    "question_id": 247770
  },
  {
    "question": {
      "en": "remove 20 symbols in front of '.' in string 'unique12345678901234567890.mkv'"
    },
    "mr": {
      "python": "re.sub('.{20}(.mkv)', '\\\\1', 'unique12345678901234567890.mkv')"
    },
    "question_id": 4358701
  },
  {
    "question": {
      "en": "create a list with the characters of a string `5+6`"
    },
    "mr": {
      "python": "list('5+6')"
    },
    "question_id": 5501641
  },
  {
    "question": {
      "en": "create a pandas data frame from list of nested dictionaries `my_list`"
    },
    "mr": {
      "python": "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"
    },
    "question_id": 41946927
  },
  {
    "question": {
      "en": "sort list `mylist` alphabetically"
    },
    "mr": {
      "python": "mylist.sort(key=lambda x: x.lower())"
    },
    "question_id": 36139
  },
  {
    "question": {
      "en": "Delete an element with key `key` dictionary `r`"
    },
    "mr": {
      "python": "del r[key]"
    },
    "question_id": 5844672
  },
  {
    "question": {
      "en": "How to exclude a character from a regex group?"
    },
    "mr": {
      "python": "re.compile('[^a-zA-Z0-9-]+')"
    },
    "question_id": 4108561
  },
  {
    "question": {
      "en": "execute a mv command `mv /home/somedir/subdir/* somedir/` in subprocess"
    },
    "mr": {
      "python": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)"
    },
    "question_id": 21804935
  },
  {
    "question": {
      "en": "get the dimensions of numpy array `a`"
    },
    "mr": {
      "python": "a.shape"
    },
    "question_id": 3061761
  },
  {
    "question": {
      "en": "convert hex triplet string `rgbstr` to rgb tuple"
    },
    "mr": {
      "python": "struct.unpack('BBB', rgbstr.decode('hex'))"
    },
    "question_id": 4296249
  },
  {
    "question": {
      "en": "reorder indexed rows `['Z', 'C', 'A']` based on a list in pandas data frame `df`"
    },
    "mr": {
      "python": "df.reindex(['Z', 'C', 'A'])"
    },
    "question_id": 30009948
  },
  {
    "question": {
      "en": "Get a list values of a dictionary item `pass_id` from post requests in django"
    },
    "mr": {
      "python": "request.POST.getlist('pass_id')"
    },
    "question_id": 5430470
  },
  {
    "question": {
      "en": "get all combination of 3 binary values"
    },
    "mr": {
      "python": "lst = list(itertools.product([0, 1], repeat=3))"
    },
    "question_id": 14931769
  },
  {
    "question": {
      "en": "navigate to webpage given by url `http://www.python.org` using Selenium"
    },
    "mr": {
      "python": "driver.get('http://www.google.com.br')"
    },
    "question_id": 29983106
  },
  {
    "question": {
      "en": "Get a list of pairs of key-value sorted by values in dictionary `data`"
    },
    "mr": {
      "python": "sorted(list(data.items()), key=lambda x: x[1])"
    },
    "question_id": 16772071
  },
  {
    "question": {
      "en": "apply function `log2` to the grouped values by 'type' in dataframe `df`"
    },
    "mr": {
      "python": "df.groupby('type').apply(lambda x: np.mean(np.log2(x['v'])))"
    },
    "question_id": 18137341
  },
  {
    "question": {
      "en": "Get a list of strings `split_text` with fixed chunk size `n` from a string `the_list`"
    },
    "mr": {
      "python": "split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]"
    },
    "question_id": 6372228
  },
  {
    "question": {
      "en": "sort list `['14:10:01', '03:12:08']`"
    },
    "mr": {
      "python": "sorted(['14:10:01', '03:12:08'])"
    },
    "question_id": 17713873
  },
  {
    "question": {
      "en": "Write DataFrame `df` to csv file 'mycsv.csv'"
    },
    "mr": {
      "python": "df.write.csv('mycsv.csv')"
    },
    "question_id": 31385363
  },
  {
    "question": {
      "en": "generate a random 12-digit number"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(str(random.randint(0, 9)) for _ in range(12))"
    },
    "question_id": 13496087
  },
  {
    "question": {
      "en": "get all the values from a numpy array `a` excluding index 3"
    },
    "mr": {
      "python": "a[np.arange(len(a)) != 3]"
    },
    "question_id": 7429118
  },
  {
    "question": {
      "en": "get the list with the highest sum value in list `x`"
    },
    "mr": {
      "python": "print(max(x, key=sum))"
    },
    "question_id": 29760130
  },
  {
    "question": {
      "en": "convert a column of list in series `s` to dummies"
    },
    "mr": {
      "python": "pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)"
    },
    "question_id": 29034928
  },
  {
    "question": {
      "en": "Format a date object `str_data` into iso fomrat"
    },
    "mr": {
      "python": "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()"
    },
    "question_id": 12772057
  },
  {
    "question": {
      "en": "read an excel file 'ComponentReport-DJI.xls'"
    },
    "mr": {
      "python": "open('ComponentReport-DJI.xls', 'rb').read(200)"
    },
    "question_id": 118516
  },
  {
    "question": {
      "en": "create a list with permutations of string 'abcd'"
    },
    "mr": {
      "python": "list(powerset('abcd'))"
    },
    "question_id": 1482308
  },
  {
    "question": {
      "en": "Terminating a Python script with error message \"some error message\""
    },
    "mr": {
      "python": "sys.exit('some error message')"
    },
    "question_id": 73663
  },
  {
    "question": {
      "en": "map two lists `keys` and `values` into a dictionary"
    },
    "mr": {
      "python": "dict((k, v) for k, v in zip(keys, values))"
    },
    "question_id": 209840
  },
  {
    "question": {
      "en": "add a column 'new_col' to dataframe `df` for index in range"
    },
    "mr": {
      "python": "df['new_col'] = list(range(1, len(df) + 1))"
    },
    "question_id": 12168648
  },
  {
    "question": {
      "en": "add unicode string '1' to UTF-8 decoded string '\\xc2\\xa3'"
    },
    "mr": {
      "python": "print('\\xc2\\xa3'.decode('utf8') + '1')"
    },
    "question_id": 31771758
  },
  {
    "question": {
      "en": "python getting a list of value from list of dict"
    },
    "mr": {
      "python": "[d['value'] for d in l]"
    },
    "question_id": 7271482
  },
  {
    "question": {
      "en": "print string including multiple variables `name` and `score`"
    },
    "mr": {
      "python": "print(('Total score for', name, 'is', score))"
    },
    "question_id": 15286401
  },
  {
    "question": {
      "en": "Print a dictionary `{'user': {'name': 'Markus'}}` with string formatting"
    },
    "mr": {
      "python": "\"\"\"Hello {user[name]}\"\"\".format(**{'user': {'name': 'Markus'}})"
    },
    "question_id": 29035168
  },
  {
    "question": {
      "en": "remove leading and trailing zeros in the string 'your_Strip'"
    },
    "mr": {
      "python": "your_string.strip('0')"
    },
    "question_id": 13142347
  },
  {
    "question": {
      "en": "Can I sort text by its numeric value in Python?"
    },
    "mr": {
      "python": "sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))"
    },
    "question_id": 1534542
  },
  {
    "question": {
      "en": "lowercase all keys and values in dictionary `{'My Key': 'My Value'}`"
    },
    "mr": {
      "python": "dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())"
    },
    "question_id": 764235
  },
  {
    "question": {
      "en": "merge a list of dictionaries in list `L` into a single dict"
    },
    "mr": {
      "python": "{k: v for d in L for k, v in list(d.items())}"
    },
    "question_id": 3494906
  },
  {
    "question": {
      "en": "concatenate items from list `parts` into a string starting from the second element"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(parts[1:])"
    },
    "question_id": 13655392
  },
  {
    "question": {
      "en": "convert Date object `dateobject` into a DateTime object"
    },
    "mr": {
      "python": "datetime.datetime.combine(dateobject, datetime.time())"
    },
    "question_id": 11619169
  },
  {
    "question": {
      "en": "import a module 'a.b.c' with importlib.import_module in python 2"
    },
    "mr": {
      "python": "importlib.import_module('a.b.c')"
    },
    "question_id": 10675054
  },
  {
    "question": {
      "en": "SQLAlchemy count the number of rows in table `Congress`"
    },
    "mr": {
      "python": "rows = session.query(Congress).count()"
    },
    "question_id": 10822635
  },
  {
    "question": {
      "en": "Python: Extract numbers from a string"
    },
    "mr": {
      "python": "[int(s) for s in re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")]"
    },
    "question_id": 4289331
  },
  {
    "question": {
      "en": "split unicode string \"\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438\" into words"
    },
    "mr": {
      "python": "'\\u0440\\u0430\\u0437 \\u0434\\u0432\\u0430 \\u0442\\u0440\\u0438'.split()"
    },
    "question_id": 7286879
  },
  {
    "question": {
      "en": "Manually throw an exception \"I know python!\""
    },
    "mr": {
      "python": "raise Exception('I know python!')"
    },
    "question_id": 2052390
  },
  {
    "question": {
      "en": "lookup dictionary key `key1` in Django template `json`"
    },
    "mr": {
      "python": "{{json.key1}}"
    },
    "question_id": 19745091
  },
  {
    "question": {
      "en": "grab one random item from a database `model` in django/postgresql"
    },
    "mr": {
      "python": "model.objects.all().order_by('?')[0]"
    },
    "question_id": 9354127
  },
  {
    "question": {
      "en": "sort a pandas data frame with column `a` in ascending and `b` in descending order"
    },
    "mr": {
      "python": "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)"
    },
    "question_id": 17141558
  },
  {
    "question": {
      "en": "create dataframe `males` containing data of dataframe `df` where column `Gender` is equal to 'Male' and column `Year` is equal to 2014"
    },
    "mr": {
      "python": "males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]"
    },
    "question_id": 22086116
  },
  {
    "question": {
      "en": "Convert a Unicode string `title` to a 'ascii' string"
    },
    "mr": {
      "python": "unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')"
    },
    "question_id": 1207457
  },
  {
    "question": {
      "en": "convert a string literal `s` with values `\\\\` to raw string literal"
    },
    "mr": {
      "python": "s = s.replace('\\\\', '\\\\\\\\')"
    },
    "question_id": 7262828
  },
  {
    "question": {
      "en": "Split string with comma (,) and remove whitespace from a string 'my_string'"
    },
    "mr": {
      "python": "[item.strip() for item in my_string.split(',')]"
    },
    "question_id": 21261330
  },
  {
    "question": {
      "en": "remove white spaces from all the lines using a regular expression in string 'a\\n b\\n c'"
    },
    "mr": {
      "python": "re.sub('(?m)^\\\\s+', '', 'a\\n b\\n c')"
    },
    "question_id": 3984539
  },
  {
    "question": {
      "en": "count unique index values in column 'A' in pandas dataframe `ex`"
    },
    "mr": {
      "python": "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"
    },
    "question_id": 35178812
  },
  {
    "question": {
      "en": "delete column 'column_name' from dataframe `df`"
    },
    "mr": {
      "python": "df = df.drop('column_name', 1)"
    },
    "question_id": 13411544
  },
  {
    "question": {
      "en": "argparse associate zero or more arguments with flag 'file'"
    },
    "mr": {
      "python": "parser.add_argument('file', nargs='*')"
    },
    "question_id": 26727314
  },
  {
    "question": {
      "en": "remove null columns in a dataframe `df`"
    },
    "mr": {
      "python": "df = df.dropna(axis=1, how='all')"
    },
    "question_id": 10857924
  },
  {
    "question": {
      "en": "BeautifulSoup find all 'tr' elements in HTML string `soup` at the five stride starting from the fourth element"
    },
    "mr": {
      "python": "rows = soup.findAll('tr')[4::5]"
    },
    "question_id": 8724352
  },
  {
    "question": {
      "en": "remove item `c` in list `a`"
    },
    "mr": {
      "python": "a.remove(c)"
    },
    "question_id": 2793324
  },
  {
    "question": {
      "en": "find the index of the maximum value in the array `arr` where the boolean condition in array `cond` is true"
    },
    "mr": {
      "python": "np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)"
    },
    "question_id": 31767173
  },
  {
    "question": {
      "en": "convert a DateTime string back to a DateTime object of format '%Y-%m-%d %H:%M:%S.%f'"
    },
    "mr": {
      "python": "datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')"
    },
    "question_id": 4170655
  },
  {
    "question": {
      "en": "get list of duplicated elements in range of 3"
    },
    "mr": {
      "python": "[y for x in range(3) for y in [x, x]]"
    },
    "question_id": 3925465
  },
  {
    "question": {
      "en": "split strings in list `l` on the first occurring tab `\\t` and enter only the first resulting substring in a new list"
    },
    "mr": {
      "python": "[i.split('\\t', 1)[0] for i in l]"
    },
    "question_id": 6696027
  },
  {
    "question": {
      "en": "create a set from string `s` to remove duplicate characters"
    },
    "mr": {
      "python": "print(' '.join(set(s)))"
    },
    "question_id": 29360607
  },
  {
    "question": {
      "en": "convert list `a` from being consecutive sequences of tuples into a single sequence of elements"
    },
    "mr": {
      "python": "list(itertools.chain(*a))"
    },
    "question_id": 15269161
  },
  {
    "question": {
      "en": "get a list of all items in list `j` with values greater than `5`"
    },
    "mr": {
      "python": "[x for x in j if x >= 5]"
    },
    "question_id": 4587915
  },
  {
    "question": {
      "en": "convert list of sublists `lst` of floats to a list of sublists `str_list` of strings of integers in scientific notation with 8 decimal points"
    },
    "mr": {
      "python": "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"
    },
    "question_id": 16127862
  },
  {
    "question": {
      "en": "create a NumPy array containing elements of array `A` as pointed to by index in array `B`"
    },
    "mr": {
      "python": "A[np.arange(A.shape[0])[:, (None)], B]"
    },
    "question_id": 37878946
  },
  {
    "question": {
      "en": "Convert list of booleans `walls` into a hex string"
    },
    "mr": {
      "python": "hex(int(''.join([str(int(b)) for b in walls]), 2))"
    },
    "question_id": 17731822
  },
  {
    "question": {
      "en": "map two lists `keys` and `values` into a dictionary"
    },
    "mr": {
      "python": "dict([(k, v) for k, v in zip(keys, values)])"
    },
    "question_id": 209840
  },
  {
    "question": {
      "en": "update dictionary `b`, overwriting values where keys are identical, with contents of dictionary `d`"
    },
    "mr": {
      "python": "b.update(d)"
    },
    "question_id": 12717716
  },
  {
    "question": {
      "en": "reverse all x-axis points in pyplot"
    },
    "mr": {
      "python": "plt.gca().invert_xaxis()"
    },
    "question_id": 2051744
  },
  {
    "question": {
      "en": "convert a string of date strings `date_stngs ` to datetime objects and put them in a dataframe"
    },
    "mr": {
      "python": "pd.to_datetime(pd.Series(date_stngs))"
    },
    "question_id": 17690738
  },
  {
    "question": {
      "en": "Trimming a string \"          Hello        \""
    },
    "mr": {
      "python": "'          Hello        '.strip()"
    },
    "question_id": 761804
  },
  {
    "question": {
      "en": "obtain the current day of the week in a 3 letter format from a datetime object"
    },
    "mr": {
      "python": "datetime.datetime.now().strftime('%a')"
    },
    "question_id": 15509617
  },
  {
    "question": {
      "en": "round number `h` to nearest integer"
    },
    "mr": {
      "python": "h = int(round(h))"
    },
    "question_id": 31818050
  },
  {
    "question": {
      "en": "check if all string elements in list `words` are upper-cased"
    },
    "mr": {
      "python": "print(all(word[0].isupper() for word in words))"
    },
    "question_id": 3668964
  },
  {
    "question": {
      "en": "select records of dataframe `df` where the sum of column 'X' for each value in column 'User' is 0"
    },
    "mr": {
      "python": "df.groupby('User')['X'].filter(lambda x: x.sum() == 0)"
    },
    "question_id": 27868020
  },
  {
    "question": {
      "en": "Concatenate elements of a list 'x' of multiple integers to a single integer"
    },
    "mr": {
      "python": "sum(d * 10 ** i for i, d in enumerate(x[::-1]))"
    },
    "question_id": 41067960
  },
  {
    "question": {
      "en": "Set value for key `a` in dict `count` to `0` if key `a` does not exist or if value is `none`"
    },
    "mr": {
      "python": "count.setdefault('a', 0)"
    },
    "question_id": 18663026
  },
  {
    "question": {
      "en": "Generate a random integer between 0 and 9"
    },
    "mr": {
      "python": "randint(0, 9)"
    },
    "question_id": 3996904
  },
  {
    "question": {
      "en": "convert rows in pandas data frame `df` into list"
    },
    "mr": {
      "python": "df.apply(lambda x: x.tolist(), axis=1)"
    },
    "question_id": 19585280
  },
  {
    "question": {
      "en": "combine two sequences into a dictionary"
    },
    "mr": {
      "python": "dict(zip(keys, values))"
    },
    "question_id": 579856
  },
  {
    "question": {
      "en": "Check if 3 is not in the list [4,5,6]"
    },
    "mr": {
      "python": "(3 not in [4, 5, 6])"
    },
    "question_id": 10406130
  },
  {
    "question": {
      "en": "remove the space between subplots in matplotlib.pyplot"
    },
    "mr": {
      "python": "fig.subplots_adjust(wspace=0, hspace=0)"
    },
    "question_id": 41071947
  },
  {
    "question": {
      "en": "get a new string including the last two characters of string `x`"
    },
    "mr": {
      "python": "x[(-2):]"
    },
    "question_id": 663171
  },
  {
    "question": {
      "en": "get the tuple in list `a_list` that has the largest item in the second index"
    },
    "mr": {
      "python": "max_item = max(a_list, key=operator.itemgetter(1))"
    },
    "question_id": 1874194
  },
  {
    "question": {
      "en": "get number in list `myList` closest in value to number `myNumber`"
    },
    "mr": {
      "python": "min(myList, key=lambda x: abs(x - myNumber))"
    },
    "question_id": 12141150
  },
  {
    "question": {
      "en": "make a flat list from list of lists `list2d`"
    },
    "mr": {
      "python": "list(itertools.chain.from_iterable(list2d))"
    },
    "question_id": 952914
  },
  {
    "question": {
      "en": "get a list of words `words` of a file 'myfile'"
    },
    "mr": {
      "python": "words = open('myfile').read().split()"
    },
    "question_id": 7745260
  },
  {
    "question": {
      "en": "convert dictionary `adict` into string"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"
    },
    "question_id": 10472907
  },
  {
    "question": {
      "en": "select `div` tags whose `id`s begin with `value_xxx_c_1_f_8_a_`"
    },
    "mr": {
      "python": "soup.select('div[id^=\"value_xxx_c_1_f_8_a_\"]')"
    },
    "question_id": 11924135
  },
  {
    "question": {
      "en": "make a 60 seconds time delay"
    },
    "mr": {
      "python": "time.sleep(60)"
    },
    "question_id": 510348
  },
  {
    "question": {
      "en": "set circle markers on plot for individual points  defined in list   `[1,2,3,4,5,6,7,8,9,10]` created by range(10)"
    },
    "mr": {
      "python": "plt.plot(list(range(10)), linestyle='--', marker='o', color='b')"
    },
    "question_id": 8409095
  },
  {
    "question": {
      "en": "define global variable `something` with value `bob`"
    },
    "mr": {
      "python": "globals()['something'] = 'bob'"
    },
    "question_id": 13627865
  },
  {
    "question": {
      "en": "get the attribute `x` from object `your_obj`"
    },
    "mr": {
      "python": "getattr(your_obj, x)"
    },
    "question_id": 9396706
  },
  {
    "question": {
      "en": "execute shell command 'grep -r PASSED *.log | sort -u | wc -l' with a | pipe in it"
    },
    "mr": {
      "python": "subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)"
    },
    "question_id": 18050937
  },
  {
    "question": {
      "en": "split list `l` into `n` sized lists"
    },
    "mr": {
      "python": "[l[i:i + n] for i in range(0, len(l), n)]"
    },
    "question_id": 312443
  },
  {
    "question": {
      "en": "round number 32.268907563 up to 3 decimal points"
    },
    "mr": {
      "python": "round(32.268907563, 3)"
    },
    "question_id": 31818050
  },
  {
    "question": {
      "en": "Find the list in a list of lists `alkaline_earth_values` with the max value of the second element."
    },
    "mr": {
      "python": "max(alkaline_earth_values, key=lambda x: x[1])"
    },
    "question_id": 4800419
  },
  {
    "question": {
      "en": "trim whitespace (including tabs) in `s` on the right side"
    },
    "mr": {
      "python": "s = s.rstrip()"
    },
    "question_id": 1185524
  },
  {
    "question": {
      "en": "Calling an external command \"ls -l\""
    },
    "mr": {
      "python": "call(['ls', '-l'])"
    },
    "question_id": 89228
  },
  {
    "question": {
      "en": "extract floating point numbers from a string 'Current Level: -13.2 db or 14.2 or 3'"
    },
    "mr": {
      "python": "re.findall('[-+]?\\\\d*\\\\.\\\\d+|\\\\d+', 'Current Level: -13.2 db or 14.2 or 3')"
    },
    "question_id": 4703390
  },
  {
    "question": {
      "en": "reading tab-delimited csv file `filename` with pandas on mac"
    },
    "mr": {
      "python": "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')"
    },
    "question_id": 27896214
  },
  {
    "question": {
      "en": "python selenium click on button '.button.c_button.s_button'"
    },
    "mr": {
      "python": "driver.find_element_by_css_selector('.button.c_button.s_button').click()"
    },
    "question_id": 21350605
  },
  {
    "question": {
      "en": "create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list 'myList'"
    },
    "mr": {
      "python": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]"
    },
    "question_id": 38251245
  },
  {
    "question": {
      "en": "sort a list `s` by first and second attributes"
    },
    "mr": {
      "python": "s = sorted(s, key=lambda x: (x[1], x[2]))"
    },
    "question_id": 4233476
  },
  {
    "question": {
      "en": "Iterating key and items over dictionary `d`"
    },
    "mr": {
      "python": "for (letter, number) in list(d.items()):\n    pass"
    },
    "question_id": 3294889
  },
  {
    "question": {
      "en": "sort list `mylist` in alphabetical order"
    },
    "mr": {
      "python": "mylist.sort(key=str.lower)"
    },
    "question_id": 36139
  },
  {
    "question": {
      "en": "How to find all occurrences of an element in a list?"
    },
    "mr": {
      "python": "indices = [i for i, x in enumerate(my_list) if x == 'whatever']"
    },
    "question_id": 6294179
  },
  {
    "question": {
      "en": "print list `t` into a table-like shape"
    },
    "mr": {
      "python": "print('\\n'.join('  '.join(map(str, row)) for row in t))"
    },
    "question_id": 16677816
  },
  {
    "question": {
      "en": "change current working directory"
    },
    "mr": {
      "python": "os.chdir('.\\\\chapter3')"
    },
    "question_id": 20796355
  },
  {
    "question": {
      "en": "append line \"appended text\" to file \"test.txt\""
    },
    "mr": {
      "python": "with open('test.txt', 'a') as myfile:\n    myfile.write('appended text')"
    },
    "question_id": 4706499
  },
  {
    "question": {
      "en": "trim whitespace in string `s`"
    },
    "mr": {
      "python": "s.strip()"
    },
    "question_id": 1185524
  },
  {
    "question": {
      "en": "delete the element `c` from list `a`"
    },
    "mr": {
      "python": "if (c in a):\n    a.remove(c)"
    },
    "question_id": 2793324
  },
  {
    "question": {
      "en": "flush output of python print"
    },
    "mr": {
      "python": "sys.stdout.flush()"
    },
    "question_id": 3804727
  },
  {
    "question": {
      "en": "check if object `a` has property 'property'"
    },
    "mr": {
      "python": "if hasattr(a, 'property'):\n    pass"
    },
    "question_id": 610883
  },
  {
    "question": {
      "en": "format floating point number  `TotalAmount` to be rounded off to two decimal places and have a comma thousands' seperator"
    },
    "mr": {
      "python": "print('Total cost is: ${:,.2f}'.format(TotalAmount))"
    },
    "question_id": 5180365
  },
  {
    "question": {
      "en": "rename column 'gdp' in dataframe `data` to 'log(gdp)'"
    },
    "mr": {
      "python": "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"
    },
    "question_id": 19758364
  },
  {
    "question": {
      "en": "add a colorbar to plot `plt` using image `im` on axes `ax`"
    },
    "mr": {
      "python": "plt.colorbar(im, ax=ax)"
    },
    "question_id": 42387471
  },
  {
    "question": {
      "en": "Get multiple matched strings using regex pattern `(?:review: )?(http://url.com/(\\\\d+))\\\\s?`"
    },
    "mr": {
      "python": "pattern = re.compile('(?:review: )?(http://url.com/(\\\\d+))\\\\s?', re.IGNORECASE)"
    },
    "question_id": 17407691
  },
  {
    "question": {
      "en": "Python date string formatting"
    },
    "mr": {
      "python": "\"\"\"{0.month}/{0.day}/{0.year}\"\"\".format(my_date)"
    },
    "question_id": 18724607
  },
  {
    "question": {
      "en": "find rows of 2d array in 3d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'"
    },
    "mr": {
      "python": "np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))"
    },
    "question_id": 36381230
  },
  {
    "question": {
      "en": "Change the mode of file 'my_script.sh' to permission number 484"
    },
    "mr": {
      "python": "os.chmod('my_script.sh', 484)"
    },
    "question_id": 14104778
  },
  {
    "question": {
      "en": "check whether a path \"/etc\" exists"
    },
    "mr": {
      "python": "print(os.path.exists('/etc'))"
    },
    "question_id": 82831
  },
  {
    "question": {
      "en": "read file \"file.txt\" line by line into a list `array`"
    },
    "mr": {
      "python": "with open('file.txt', 'r') as ins:\n    array = []\n    for line in ins:\n        array.append(line)"
    },
    "question_id": 3277503
  },
  {
    "question": {
      "en": "Initialize a list `a` with `10000` items and each item's value `0`"
    },
    "mr": {
      "python": "a = [0] * 10000"
    },
    "question_id": 36113747
  },
  {
    "question": {
      "en": "get a random record from model 'MyModel' using django's orm"
    },
    "mr": {
      "python": "MyModel.objects.order_by('?').first()"
    },
    "question_id": 962619
  },
  {
    "question": {
      "en": "count `True` values associated with key 'one' in dictionary `tadas`"
    },
    "mr": {
      "python": "sum(item['one'] for item in list(tadas.values()))"
    },
    "question_id": 35561743
  },
  {
    "question": {
      "en": "remove multiple spaces in a string `foo`"
    },
    "mr": {
      "python": "\"\"\" \"\"\".join(foo.split())"
    },
    "question_id": 1546226
  },
  {
    "question": {
      "en": "convert string 'a' to hex"
    },
    "mr": {
      "python": "hex(ord('a'))"
    },
    "question_id": 21669374
  },
  {
    "question": {
      "en": "get current CPU and RAM usage"
    },
    "mr": {
      "python": "psutil.cpu_percent()\npsutil.virtual_memory()"
    },
    "question_id": 276052
  },
  {
    "question": {
      "en": "get the count of each unique value in column `Country` of dataframe `df` and store in column `Sum of Accidents`"
    },
    "mr": {
      "python": "df.Country.value_counts().reset_index(name='Sum of Accidents')"
    },
    "question_id": 39607540
  },
  {
    "question": {
      "en": "get a list `res_list` of the first elements of each tuple in a list of tuples `rows`"
    },
    "mr": {
      "python": "res_list = [x[0] for x in rows]"
    },
    "question_id": 22412258
  },
  {
    "question": {
      "en": "sum the length of all strings in a list `strings`"
    },
    "mr": {
      "python": "length = sum(len(s) for s in strings)"
    },
    "question_id": 3780403
  },
  {
    "question": {
      "en": "calling a function named 'myfunction' in the module"
    },
    "mr": {
      "python": "globals()['myfunction']()"
    },
    "question_id": 3061
  },
  {
    "question": {
      "en": "get value of environment variable \"HOME\""
    },
    "mr": {
      "python": "os.environ['HOME']"
    },
    "question_id": 4906977
  },
  {
    "question": {
      "en": "determine if checkbox with id '<check_box_id>' is checked in selenium python webdriver"
    },
    "mr": {
      "python": "driver.find_element_by_id('<check_box_id>').is_selected()"
    },
    "question_id": 14442636
  },
  {
    "question": {
      "en": "get keys and items of dictionary `d` as a list"
    },
    "mr": {
      "python": "list(d.items())"
    },
    "question_id": 3294889
  },
  {
    "question": {
      "en": "get all sub-elements of an element tree `a` excluding the root element"
    },
    "mr": {
      "python": "[elem.tag for elem in a.iter() if elem is not a]"
    },
    "question_id": 10408927
  },
  {
    "question": {
      "en": "sort list `a` in ascending order based on its elements' float values"
    },
    "mr": {
      "python": "a = sorted(a, key=lambda x: float(x))"
    },
    "question_id": 17474211
  },
  {
    "question": {
      "en": "split a string `s` on last delimiter"
    },
    "mr": {
      "python": "s.rsplit(',', 1)"
    },
    "question_id": 15012228
  },
  {
    "question": {
      "en": "Make a scatter plot using unpacked values of list `li`"
    },
    "mr": {
      "python": "plt.scatter(*zip(*li))"
    },
    "question_id": 21519203
  },
  {
    "question": {
      "en": "find the element that holds string 'TEXT A' in file `root`"
    },
    "mr": {
      "python": "e = root.xpath('.//a[text()=\"TEXT A\"]')"
    },
    "question_id": 14299978
  },
  {
    "question": {
      "en": "get complete path of a module named `os`"
    },
    "mr": {
      "python": "imp.find_module('os')[1]"
    },
    "question_id": 9534608
  },
  {
    "question": {
      "en": "Trimming a string \"  Hello\\n\" by space"
    },
    "mr": {
      "python": "'  Hello\\n'.strip(' ')"
    },
    "question_id": 761804
  },
  {
    "question": {
      "en": "check if all lists in list `L` have three elements of integer 1"
    },
    "mr": {
      "python": "all(x.count(1) == 3 for x in L)"
    },
    "question_id": 12310141
  },
  {
    "question": {
      "en": "Iterating key and items over dictionary `d`"
    },
    "mr": {
      "python": "for (letter, number) in list(d.items()):\n    pass"
    },
    "question_id": 3294889
  },
  {
    "question": {
      "en": "pass dictionary items `data` as keyword arguments in function `my_function`"
    },
    "mr": {
      "python": "my_function(**data)"
    },
    "question_id": 21986194
  },
  {
    "question": {
      "en": "retrieve an element from a set `s` without removing it"
    },
    "mr": {
      "python": "e = next(iter(s))"
    },
    "question_id": 59825
  },
  {
    "question": {
      "en": "check if array `b` contains all elements of array `a`"
    },
    "mr": {
      "python": "numpy.in1d(b, a).all()"
    },
    "question_id": 10565598
  },
  {
    "question": {
      "en": "check if character '-' exists in a dataframe `df` cell 'a'"
    },
    "mr": {
      "python": "df['a'].str.contains('-')"
    },
    "question_id": 39299703
  },
  {
    "question": {
      "en": "Convert a hex string `437c2123 ` according to ascii value."
    },
    "mr": {
      "python": "\"\"\"437c2123\"\"\".decode('hex')"
    },
    "question_id": 10618586
  },
  {
    "question": {
      "en": "create list `changed_list ` containing elements of list `original_list` whilst converting strings containing digits to integers"
    },
    "mr": {
      "python": "changed_list = [(int(f) if f.isdigit() else f) for f in original_list]"
    },
    "question_id": 818949
  },
  {
    "question": {
      "en": "BeautifulSoup find all tags with attribute 'name' equal to 'description'"
    },
    "mr": {
      "python": "soup.findAll(attrs={'name': 'description'})"
    },
    "question_id": 3774571
  },
  {
    "question": {
      "en": "Get a random string of length `length`"
    },
    "mr": {
      "python": "return ''.join(random.choice(string.lowercase) for i in range(length))"
    },
    "question_id": 2030053
  },
  {
    "question": {
      "en": "get the union set from list of lists `results_list`"
    },
    "mr": {
      "python": "results_union = set().union(*results_list)"
    },
    "question_id": 2151517
  },
  {
    "question": {
      "en": "access the class variable `a_string` from a class object `test`"
    },
    "mr": {
      "python": "getattr(test, a_string)"
    },
    "question_id": 13303100
  },
  {
    "question": {
      "en": "sort list of nested dictionaries `yourdata` in reverse based on values associated with each dictionary's key 'subkey'"
    },
    "mr": {
      "python": "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"
    },
    "question_id": 13237941
  },
  {
    "question": {
      "en": "get the size of a list `[1,2,3]`"
    },
    "mr": {
      "python": "len([1, 2, 3])"
    },
    "question_id": 1712227
  },
  {
    "question": {
      "en": "create a new 2 dimensional array containing two random rows from array `A`"
    },
    "mr": {
      "python": "A[(np.random.randint(A.shape[0], size=2)), :]"
    },
    "question_id": 14262654
  },
  {
    "question": {
      "en": "generate a 12-digit random number"
    },
    "mr": {
      "python": "'%0.12d' % random.randint(0, 999999999999)"
    },
    "question_id": 13496087
  },
  {
    "question": {
      "en": "print a unicode string `text`"
    },
    "mr": {
      "python": "print(text.encode('windows-1252'))"
    },
    "question_id": 6740865
  },
  {
    "question": {
      "en": "match regex '[a-zA-Z][\\\\w-]*$' on string '!A_B'"
    },
    "mr": {
      "python": "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"
    },
    "question_id": 2317134
  },
  {
    "question": {
      "en": "make an HTTP post request with data `post_data`"
    },
    "mr": {
      "python": "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"
    },
    "question_id": 4476373
  },
  {
    "question": {
      "en": "Creating a list of dictionaries in python"
    },
    "mr": {
      "python": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"
    },
    "question_id": 35883459
  },
  {
    "question": {
      "en": "move x-axis to the top of a plot `ax`"
    },
    "mr": {
      "python": "ax.xaxis.tick_top()"
    },
    "question_id": 14406214
  },
  {
    "question": {
      "en": "list folders in zip file 'file' that ends with '/'"
    },
    "mr": {
      "python": "[x for x in file.namelist() if x.endswith('/')]"
    },
    "question_id": 6510477
  },
  {
    "question": {
      "en": "abort the execution of a python script"
    },
    "mr": {
      "python": "sys.exit()"
    },
    "question_id": 179369
  },
  {
    "question": {
      "en": "convert utf-8 string `s` to lowercase"
    },
    "mr": {
      "python": "s.decode('utf-8').lower()"
    },
    "question_id": 6797984
  },
  {
    "question": {
      "en": "convert binary string '0b0010101010' to integer"
    },
    "mr": {
      "python": "int('0b0010101010', 2)"
    },
    "question_id": 1476
  },
  {
    "question": {
      "en": "store integer 3, 4, 1 and 2 in a list"
    },
    "mr": {
      "python": "[3, 4, 1, 2]"
    },
    "question_id": 19672101
  },
  {
    "question": {
      "en": "convert the string '0,1,2' to a list of integers"
    },
    "mr": {
      "python": "[int(x) for x in '0,1,2'.split(',')]"
    },
    "question_id": 2168123
  },
  {
    "question": {
      "en": "convert the sum of list `walls` into a hex presentation"
    },
    "mr": {
      "python": "hex(sum(b << i for i, b in enumerate(reversed(walls))))"
    },
    "question_id": 17731822
  },
  {
    "question": {
      "en": "How do I create a LIST of unique random numbers?"
    },
    "mr": {
      "python": "random.sample(list(range(100)), 10)"
    },
    "question_id": 9755538
  },
  {
    "question": {
      "en": "Execute a post request to url `http://httpbin.org/post` with json data `{'test': 'cheers'}`"
    },
    "mr": {
      "python": "requests.post('http://httpbin.org/post', json={'test': 'cheers'})"
    },
    "question_id": 9733638
  },
  {
    "question": {
      "en": "execute external commands/script `your_own_script` with csh instead of bash"
    },
    "mr": {
      "python": "os.system('tcsh your_own_script')"
    },
    "question_id": 533398
  },
  {
    "question": {
      "en": "build a dictionary containing the conversion of each list in list `[['two', 2], ['one', 1]]` to a key/value pair as its items"
    },
    "mr": {
      "python": "dict([['two', 2], ['one', 1]])"
    },
    "question_id": 6900955
  },
  {
    "question": {
      "en": "Get the index value in list `p_list` using enumerate in list comprehension"
    },
    "mr": {
      "python": "{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}"
    },
    "question_id": 18816297
  },
  {
    "question": {
      "en": "loop through `mylist` with step 2"
    },
    "mr": {
      "python": "for i in mylist[::2]:\n    pass"
    },
    "question_id": 2990121
  },
  {
    "question": {
      "en": "Replace NaN values in  column 'value' with the mean of data in column 'group' of dataframe `df`"
    },
    "mr": {
      "python": "df[['value']].fillna(df.groupby('group').transform('mean'))"
    },
    "question_id": 40682209
  },
  {
    "question": {
      "en": "check if  dictionary `d` contains all keys in list `['somekey', 'someotherkey', 'somekeyggg']`"
    },
    "mr": {
      "python": "all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])"
    },
    "question_id": 7128153
  },
  {
    "question": {
      "en": "Convert a binary value '1633837924' to string"
    },
    "mr": {
      "python": "struct.pack('<I', 1633837924)"
    },
    "question_id": 33769531
  },
  {
    "question": {
      "en": "run a pivot with a multi-index `year` and `month` in a pandas data frame"
    },
    "mr": {
      "python": "df.pivot_table(values='value', index=['year', 'month'], columns='item')"
    },
    "question_id": 35414625
  },
  {
    "question": {
      "en": "check if all values in the columns of a numpy matrix `a` are same"
    },
    "mr": {
      "python": "np.all(a == a[(0), :], axis=0)"
    },
    "question_id": 14859458
  },
  {
    "question": {
      "en": "Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text'"
    },
    "mr": {
      "python": "[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]"
    },
    "question_id": 38862349
  },
  {
    "question": {
      "en": "Get Last Day of the second month in 2002"
    },
    "mr": {
      "python": "calendar.monthrange(2008, 2)"
    },
    "question_id": 42950
  },
  {
    "question": {
      "en": "convert the dataframe column 'col' from string types to datetime types"
    },
    "mr": {
      "python": "df['col'] = pd.to_datetime(df['col'])"
    },
    "question_id": 17134716
  },
  {
    "question": {
      "en": "append values `[3, 4]` to a set `a`"
    },
    "mr": {
      "python": "a.update([3, 4])"
    },
    "question_id": 3392354
  },
  {
    "question": {
      "en": "Display `1 2 3` as a list of string"
    },
    "mr": {
      "python": "print('[{0}, {1}, {2}]'.format(1, 2, 3))"
    },
    "question_id": 517355
  },
  {
    "question": {
      "en": "Save array at index 0, index 1 and index 8 of array `np` to tmp file `tmp`"
    },
    "mr": {
      "python": "np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])"
    },
    "question_id": 22712292
  },
  {
    "question": {
      "en": "request url 'https://www.reporo.com/' without verifying SSL certificates"
    },
    "mr": {
      "python": "requests.get('https://www.reporo.com/', verify=False)"
    },
    "question_id": 28667684
  },
  {
    "question": {
      "en": "pandas read comma-separated CSV file `s` and skip commented lines starting with '#'"
    },
    "mr": {
      "python": "pd.read_csv(StringIO(s), sep=',', comment='#')"
    },
    "question_id": 18366797
  },
  {
    "question": {
      "en": "read the contents of the file 'file.txt' into `txt`"
    },
    "mr": {
      "python": "txt = open('file.txt').read()"
    },
    "question_id": 3278850
  },
  {
    "question": {
      "en": "import a nested module `c.py` within `b` within `a` with importlib"
    },
    "mr": {
      "python": "importlib.import_module('.c', 'a.b')"
    },
    "question_id": 10675054
  },
  {
    "question": {
      "en": "reverse sort dictionary `d` based on its values"
    },
    "mr": {
      "python": "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"
    },
    "question_id": 10194713
  },
  {
    "question": {
      "en": "generate a string of numbers separated by comma which is divisible by `4` with remainder `1` or `2`."
    },
    "mr": {
      "python": "\"\"\",\"\"\".join(str(i) for i in range(100) if i % 4 in (1, 2))"
    },
    "question_id": 11064917
  },
  {
    "question": {
      "en": "zip list `a`, `b`, `c` into a list of tuples"
    },
    "mr": {
      "python": "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"
    },
    "question_id": 12655007
  },
  {
    "question": {
      "en": "get element at index 0 of first row and element at index 1 of second row in array `A`"
    },
    "mr": {
      "python": "A[[0, 1], [0, 1]]"
    },
    "question_id": 2111163
  },
  {
    "question": {
      "en": "Change the current directory one level up"
    },
    "mr": {
      "python": "os.chdir('..')"
    },
    "question_id": 12280143
  },
  {
    "question": {
      "en": "clear the textbox `text` in tkinter"
    },
    "mr": {
      "python": "tex.delete('1.0', END)"
    },
    "question_id": 27966626
  },
  {
    "question": {
      "en": "check if all elements in a list 'lst' are the same type 'int'"
    },
    "mr": {
      "python": "all(isinstance(x, int) for x in lst)"
    },
    "question_id": 13252333
  },
  {
    "question": {
      "en": "invoke perl script './uireplace.pl' using perl interpeter '/usr/bin/perl' and send argument `var` to it"
    },
    "mr": {
      "python": "subprocess.call(['/usr/bin/perl', './uireplace.pl', var])"
    },
    "question_id": 4682088
  },
  {
    "question": {
      "en": "check if string `foo` is UTF-8 encoded"
    },
    "mr": {
      "python": "foo.decode('utf8').encode('utf8')"
    },
    "question_id": 3487377
  },
  {
    "question": {
      "en": "Write all tuple of tuples `A` at once into csv file"
    },
    "mr": {
      "python": "writer.writerows(A)"
    },
    "question_id": 8687568
  },
  {
    "question": {
      "en": "Create a key `key` if it does not exist in dict `dic` and append element `value` to value."
    },
    "mr": {
      "python": "dic.setdefault(key, []).append(value)"
    },
    "question_id": 12905999
  },
  {
    "question": {
      "en": "sorting a defaultdict `d` by value"
    },
    "mr": {
      "python": "sorted(list(d.items()), key=lambda k_v: k_v[1])"
    },
    "question_id": 10194713
  },
  {
    "question": {
      "en": "Convert long int `myNumber` into date and time represented in the the string format '%Y-%m-%d %H:%M:%S'"
    },
    "mr": {
      "python": "datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')"
    },
    "question_id": 10664430
  },
  {
    "question": {
      "en": "Unpack column 'stats' in dataframe `df` into a series of columns"
    },
    "mr": {
      "python": "df['stats'].apply(pd.Series)"
    },
    "question_id": 29370211
  },
  {
    "question": {
      "en": "remove all whitespace in a string `sentence`"
    },
    "mr": {
      "python": "sentence.replace(' ', '')"
    },
    "question_id": 8270092
  },
  {
    "question": {
      "en": "generate list of numbers in specific format using string formatting precision."
    },
    "mr": {
      "python": "[('%.2d' % i) for i in range(16)]"
    },
    "question_id": 12030074
  },
  {
    "question": {
      "en": "find recurring patterns in a string '42344343434'"
    },
    "mr": {
      "python": "re.findall('^(.+?)((.+)\\\\3+)$', '42344343434')[0][:-1]"
    },
    "question_id": 11303238
  },
  {
    "question": {
      "en": "extract the first four rows of the column `ID` from a pandas dataframe `df`"
    },
    "mr": {
      "python": "df.groupby('ID').head(4)"
    },
    "question_id": 40987319
  },
  {
    "question": {
      "en": "Create sub matrix of a list of lists `[[2, 3, 4], [2, 3, 4], [2, 3, 4]]` (without numpy)"
    },
    "mr": {
      "python": "[[2, 3, 4], [2, 3, 4], [2, 3, 4]]"
    },
    "question_id": 15650538
  },
  {
    "question": {
      "en": "Django get first 10 records of model `User` ordered by criteria 'age' of model 'pet'"
    },
    "mr": {
      "python": "User.objects.order_by('-pet__age')[:10]"
    },
    "question_id": 40079728
  },
  {
    "question": {
      "en": "check if the third element of all the lists in a list \"items\" is equal to zero."
    },
    "mr": {
      "python": "any(item[2] == 0 for item in items)"
    },
    "question_id": 10666163
  },
  {
    "question": {
      "en": "get keys with same value in dictionary `d`"
    },
    "mr": {
      "python": "print([key for key in d if d[key] == 1])"
    },
    "question_id": 24958010
  },
  {
    "question": {
      "en": "get the size of list `items`"
    },
    "mr": {
      "python": "len(items)"
    },
    "question_id": 1712227
  },
  {
    "question": {
      "en": "sort dict by value python"
    },
    "mr": {
      "python": "sorted(list(data.items()), key=lambda x: x[1])"
    },
    "question_id": 16772071
  },
  {
    "question": {
      "en": "decode the string 'stringnamehere'  to UTF-8"
    },
    "mr": {
      "python": "stringnamehere.decode('utf-8', 'ignore')"
    },
    "question_id": 4182603
  },
  {
    "question": {
      "en": "load json file 'sample.json' with utf-8 bom header"
    },
    "mr": {
      "python": "json.loads(open('sample.json').read().decode('utf-8-sig'))"
    },
    "question_id": 13156395
  },
  {
    "question": {
      "en": "format number 1000000000.0 using latex notation"
    },
    "mr": {
      "python": "print('\\\\num{{{0:.2g}}}'.format(1000000000.0))"
    },
    "question_id": 13490292
  },
  {
    "question": {
      "en": "concatenating values in `list1` to a string"
    },
    "mr": {
      "python": "str1 = ''.join(list1)"
    },
    "question_id": 5618878
  },
  {
    "question": {
      "en": "serialize `itemlist` to file `outfile`"
    },
    "mr": {
      "python": "pickle.dump(itemlist, outfile)"
    },
    "question_id": 899103
  },
  {
    "question": {
      "en": "Convert nested list `x` into a flat list"
    },
    "mr": {
      "python": "[j for i in x for j in i]"
    },
    "question_id": 716477
  },
  {
    "question": {
      "en": "find the index of the element with the maximum value from a list 'a'."
    },
    "mr": {
      "python": "max(enumerate(a), key=lambda x: x[1])[0]"
    },
    "question_id": 11530799
  },
  {
    "question": {
      "en": "Sort list `my_list` in alphabetical order based on the values associated with key 'name' of each dictionary in the list"
    },
    "mr": {
      "python": "my_list.sort(key=operator.itemgetter('name'))"
    },
    "question_id": 5048841
  },
  {
    "question": {
      "en": "check whether elements in list `a` appear only once"
    },
    "mr": {
      "python": "len(set(a)) == len(a)"
    },
    "question_id": 3899782
  },
  {
    "question": {
      "en": "split a string `s` by ';' and convert to a dictionary"
    },
    "mr": {
      "python": "dict(item.split('=') for item in s.split(';'))"
    },
    "question_id": 186857
  },
  {
    "question": {
      "en": "sort a list of lists `list_to_sort` by indices 2,0,1 of the inner list"
    },
    "mr": {
      "python": "sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))"
    },
    "question_id": 4174941
  },
  {
    "question": {
      "en": "Open gzip-compressed file encoded as utf-8 'file.gz' in text mode"
    },
    "mr": {
      "python": "gzip.open('file.gz', 'rt', encoding='utf-8')"
    },
    "question_id": 1883604
  },
  {
    "question": {
      "en": "python pandas: apply a function with arguments to a series"
    },
    "mr": {
      "python": "my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)"
    },
    "question_id": 12182744
  },
  {
    "question": {
      "en": "None"
    },
    "mr": {
      "python": "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')"
    },
    "question_id": 969285
  },
  {
    "question": {
      "en": "Update a user's name as `Bob Marley` having id `123` in SQLAlchemy"
    },
    "mr": {
      "python": "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"
    },
    "question_id": 2631935
  },
  {
    "question": {
      "en": "Sort a data `a` in descending order based on the `modified` attribute of elements using lambda function"
    },
    "mr": {
      "python": "a = sorted(a, key=lambda x: x.modified, reverse=True)"
    },
    "question_id": 3766633
  },
  {
    "question": {
      "en": "BeautifulSoup search string 'Elsie' inside tag 'a'"
    },
    "mr": {
      "python": "soup.find_all('a', string='Elsie')"
    },
    "question_id": 31958637
  },
  {
    "question": {
      "en": "apply a list of functions named 'functions' over a list of values named 'values'"
    },
    "mr": {
      "python": "[x(y) for x, y in zip(functions, values)]"
    },
    "question_id": 4231345
  },
  {
    "question": {
      "en": "remove all duplicate items from a list `lseperatedOrblist`"
    },
    "mr": {
      "python": "woduplicates = list(set(lseperatedOrblist))"
    },
    "question_id": 6764909
  },
  {
    "question": {
      "en": "pandas dataframe `df` column 'a' to list"
    },
    "mr": {
      "python": "df['a'].values.tolist()"
    },
    "question_id": 23748995
  },
  {
    "question": {
      "en": "convert dataframe `df` into a pivot table using column 'order' as index and values of column 'sample' as columns"
    },
    "mr": {
      "python": "df.pivot(index='order', columns='sample')"
    },
    "question_id": 30406725
  },
  {
    "question": {
      "en": "upload file with Python Mechanize"
    },
    "mr": {
      "python": "br.form.add_file(open(filename), 'text/plain', filename)"
    },
    "question_id": 1299855
  },
  {
    "question": {
      "en": "convert a list of hex byte strings `['BB', 'A7', 'F6', '9E']` to a list of hex integers"
    },
    "mr": {
      "python": "[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]"
    },
    "question_id": 2397687
  },
  {
    "question": {
      "en": "control the keyboard and mouse with dogtail in linux"
    },
    "mr": {
      "python": "dogtail.rawinput.click(100, 100)"
    },
    "question_id": 1946181
  },
  {
    "question": {
      "en": "get a list of indices of non zero elements in a list `a`"
    },
    "mr": {
      "python": "[i for i, e in enumerate(a) if e != 0]"
    },
    "question_id": 4111412
  },
  {
    "question": {
      "en": "sort dictionary `dictionary` in ascending order by its values"
    },
    "mr": {
      "python": "sorted(list(dictionary.items()), key=operator.itemgetter(1))"
    },
    "question_id": 674509
  },
  {
    "question": {
      "en": "convert ascii value 'a' to int"
    },
    "mr": {
      "python": "ord('a')"
    },
    "question_id": 3673428
  },
  {
    "question": {
      "en": "remove newline in string 'Unix EOL\\n' on the right side"
    },
    "mr": {
      "python": "'Unix EOL\\n'.rstrip('\\r\\n')"
    },
    "question_id": 275018
  },
  {
    "question": {
      "en": "Convert string to boolean from defined set of strings"
    },
    "mr": {
      "python": "s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']"
    },
    "question_id": 715417
  },
  {
    "question": {
      "en": "check if all boolean values in a python dictionary `dict` are true"
    },
    "mr": {
      "python": "all(dict.values())"
    },
    "question_id": 2806611
  },
  {
    "question": {
      "en": "get modified time of file `file`"
    },
    "mr": {
      "python": "time.ctime(os.path.getmtime(file))"
    },
    "question_id": 237079
  },
  {
    "question": {
      "en": "Retrieve list of values from dictionary 'd'"
    },
    "mr": {
      "python": "list(d.values())"
    },
    "question_id": 16228248
  },
  {
    "question": {
      "en": "check if string `s` contains \"is\""
    },
    "mr": {
      "python": "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"
    },
    "question_id": 3437059
  },
  {
    "question": {
      "en": "Concat each values in a tuple `(34.2424, -64.2344, 76.3534, 45.2344)` to get a string"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))"
    },
    "question_id": 17426386
  },
  {
    "question": {
      "en": "print a digit `your_number` with exactly 2 digits after decimal"
    },
    "mr": {
      "python": "print('{0:.2f}'.format(your_number))"
    },
    "question_id": 5229425
  },
  {
    "question": {
      "en": "Find current directory"
    },
    "mr": {
      "python": "cwd = os.getcwd()"
    },
    "question_id": 5137497
  },
  {
    "question": {
      "en": "Get all texts and tags from a tag `strong` from etree tag `some_tag` using lxml"
    },
    "mr": {
      "python": "print(etree.tostring(some_tag.find('strong')))"
    },
    "question_id": 10258584
  },
  {
    "question": {
      "en": "join items of each tuple in list of tuples `a` into a list of strings"
    },
    "mr": {
      "python": "list(map(''.join, a))"
    },
    "question_id": 35015693
  },
  {
    "question": {
      "en": "open a file \"$file\" under Unix"
    },
    "mr": {
      "python": "os.system('start \"$file\"')"
    },
    "question_id": 1679798
  },
  {
    "question": {
      "en": "append to file 'test1' content 'koko'"
    },
    "mr": {
      "python": "with open('test1', 'ab') as f:\n    pass"
    },
    "question_id": 4706499
  },
  {
    "question": {
      "en": "convert generator object to a dictionary"
    },
    "mr": {
      "python": "dict((i, i * 2) for i in range(10))"
    },
    "question_id": 17815945
  },
  {
    "question": {
      "en": "shutdown and restart a computer running windows from script"
    },
    "mr": {
      "python": "subprocess.call(['shutdown', '/r'])"
    },
    "question_id": 14764126
  },
  {
    "question": {
      "en": "truncate string `s` up to character ':'"
    },
    "mr": {
      "python": "s.split(':', 1)[1]"
    },
    "question_id": 436599
  },
  {
    "question": {
      "en": "execute a file './abc.py' with arguments `arg1` and `arg2` in python shell"
    },
    "mr": {
      "python": "subprocess.call(['./abc.py', arg1, arg2])"
    },
    "question_id": 5788891
  },
  {
    "question": {
      "en": "Selecting Element \"//li/label/input\" followed by text \"polishpottery\" with Selenium WebDriver `driver`"
    },
    "mr": {
      "python": "driver.find_element_by_xpath(\"//li/label/input[contains(..,'polishpottery')]\")"
    },
    "question_id": 11406091
  },
  {
    "question": {
      "en": "Get the value of the minimum element in the second column of array `a`"
    },
    "mr": {
      "python": "a[np.argmin(a[:, (1)])]"
    },
    "question_id": 14956683
  },
  {
    "question": {
      "en": "Make function `WRITEFUNCTION` output nothing in curl `p`"
    },
    "mr": {
      "python": "p.setopt(pycurl.WRITEFUNCTION, lambda x: None)"
    },
    "question_id": 7668141
  },
  {
    "question": {
      "en": "get the ASCII value of a character as an int"
    },
    "mr": {
      "python": "ord()"
    },
    "question_id": 227459
  },
  {
    "question": {
      "en": "Check whether a numpy array `a` contains a given row `[1, 2]`"
    },
    "mr": {
      "python": "any(np.equal(a, [1, 2]).all(1))"
    },
    "question_id": 14766194
  },
  {
    "question": {
      "en": "get a list of substrings consisting of the first 5 characters of every string in list `buckets`"
    },
    "mr": {
      "python": "[s[:5] for s in buckets]"
    },
    "question_id": 38379453
  },
  {
    "question": {
      "en": "convert a string `s` containing a decimal to an integer"
    },
    "mr": {
      "python": "int(Decimal(s))"
    },
    "question_id": 1094717
  },
  {
    "question": {
      "en": "start a new thread for `myfunction` with parameters 'MyStringHere' and 1"
    },
    "mr": {
      "python": "thread.start_new_thread(myfunction, ('MyStringHere', 1))"
    },
    "question_id": 849674
  },
  {
    "question": {
      "en": "derive the week start for the given week number and year \u20182011, 4, 0\u2019"
    },
    "mr": {
      "python": "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')"
    },
    "question_id": 4793617
  },
  {
    "question": {
      "en": "Flask get value of request variable 'firstname'"
    },
    "mr": {
      "python": "first_name = request.args.get('firstname')"
    },
    "question_id": 13279399
  },
  {
    "question": {
      "en": "Get only digits from a string `strs`"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join([c for c in strs if c.isdigit()])"
    },
    "question_id": 18116235
  },
  {
    "question": {
      "en": "convert unicode string `s` into string literals"
    },
    "mr": {
      "python": "print(s.encode('unicode_escape'))"
    },
    "question_id": 20774910
  },
  {
    "question": {
      "en": "load a file `file.py` into the python console"
    },
    "mr": {
      "python": "exec(compile(open('file.py').read(), 'file.py', 'exec'))"
    },
    "question_id": 5280178
  },
  {
    "question": {
      "en": "remove false entries from a dictionary `hand`"
    },
    "mr": {
      "python": "{k: v for k, v in list(hand.items()) if v}"
    },
    "question_id": 15158599
  },
  {
    "question": {
      "en": "plot logarithmic axes with matplotlib"
    },
    "mr": {
      "python": "ax.set_yscale('log')"
    },
    "question_id": 773814
  },
  {
    "question": {
      "en": "Strip punctuation from string `s`"
    },
    "mr": {
      "python": "s.translate(None, string.punctuation)"
    },
    "question_id": 265960
  },
  {
    "question": {
      "en": "Check the status code of url \"http://www.stackoverflow.com\""
    },
    "mr": {
      "python": "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"
    },
    "question_id": 1949318
  },
  {
    "question": {
      "en": "reset index of dataframe `df`so that existing index values are transferred into `df`as columns"
    },
    "mr": {
      "python": "df.reset_index(inplace=True)"
    },
    "question_id": 20110170
  },
  {
    "question": {
      "en": "Django check if an object with criteria `name` equal to 'name' and criteria `title` equal to 'title' exists in model `Entry`"
    },
    "mr": {
      "python": "Entry.objects.filter(name='name', title='title').exists()"
    },
    "question_id": 9561243
  },
  {
    "question": {
      "en": "django get the value of key 'title' from POST request `request` if exists, else return empty string ''"
    },
    "mr": {
      "python": "request.POST.get('title', '')"
    },
    "question_id": 11336548
  },
  {
    "question": {
      "en": "get the maximum string length in nested list `i`"
    },
    "mr": {
      "python": "len(max(i, key=len))"
    },
    "question_id": 39373620
  },
  {
    "question": {
      "en": "print current date and time in a regular format"
    },
    "mr": {
      "python": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M')"
    },
    "question_id": 311627
  },
  {
    "question": {
      "en": "fill missing value in one column 'Cat1' with the value of another column 'Cat2'"
    },
    "mr": {
      "python": "df['Cat1'].fillna(df['Cat2'])"
    },
    "question_id": 30357276
  },
  {
    "question": {
      "en": "decode escape sequences in string `myString`"
    },
    "mr": {
      "python": "myString.decode('string_escape')"
    },
    "question_id": 4020539
  },
  {
    "question": {
      "en": "replace a string `Abc` in case sensitive way using maketrans"
    },
    "mr": {
      "python": "\"\"\"Abc\"\"\".translate(maketrans('abcABC', 'defDEF'))"
    },
    "question_id": 3008992
  },
  {
    "question": {
      "en": "Get data from dataframe `df` where column 'X' is equal to 0"
    },
    "mr": {
      "python": "df.groupby('User')['X'].transform(sum) == 0"
    },
    "question_id": 27868020
  },
  {
    "question": {
      "en": "get mean of columns `2, 5, 6, 7, 8` for all rows in dataframe `df`"
    },
    "mr": {
      "python": "df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)"
    },
    "question_id": 36454494
  },
  {
    "question": {
      "en": "replace only first occurence of string `TEST` from a string `longlongTESTstringTEST`"
    },
    "mr": {
      "python": "'longlongTESTstringTEST'.replace('TEST', '?', 1)"
    },
    "question_id": 4628618
  },
  {
    "question": {
      "en": "How do I convert datetime to date (in Python)?"
    },
    "mr": {
      "python": "datetime.datetime.now().date()"
    },
    "question_id": 3743222
  },
  {
    "question": {
      "en": "Reverse a string `a_string`"
    },
    "mr": {
      "python": "def reversed_string(a_string):\n    return a_string[::(-1)]"
    },
    "question_id": 931092
  },
  {
    "question": {
      "en": "convert list of tuples to multiple lists in Python"
    },
    "mr": {
      "python": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))"
    },
    "question_id": 8081545
  },
  {
    "question": {
      "en": "writing string 'text to write\\n' to file `f`"
    },
    "mr": {
      "python": "f.write('text to write\\n')"
    },
    "question_id": 2918362
  },
  {
    "question": {
      "en": "serialise SqlAlchemy RowProxy object `row` to a json object"
    },
    "mr": {
      "python": "json.dumps([dict(list(row.items())) for row in rs])"
    },
    "question_id": 5022066
  },
  {
    "question": {
      "en": "Get only first element in each of the innermost of the multidimensional list `listD`"
    },
    "mr": {
      "python": "[[[x[0]] for x in listD[i]] for i in range(len(listD))]"
    },
    "question_id": 40852575
  },
  {
    "question": {
      "en": "create a set containing all keys names from list of dictionaries `LoD`"
    },
    "mr": {
      "python": "set([i for s in [list(d.keys()) for d in LoD] for i in s])"
    },
    "question_id": 11399384
  },
  {
    "question": {
      "en": "Convert string '03:55' into datetime.time object"
    },
    "mr": {
      "python": "datetime.datetime.strptime('03:55', '%H:%M').time()"
    },
    "question_id": 14295673
  },
  {
    "question": {
      "en": "get count of values in numpy array `a` that are between values `25` and `100`"
    },
    "mr": {
      "python": "((25 < a) & (a < 100)).sum()"
    },
    "question_id": 9560207
  },
  {
    "question": {
      "en": "generate a list containing values associated with the key 'value' of each dictionary inside list `list_of_dicts`"
    },
    "mr": {
      "python": "[x['value'] for x in list_of_dicts]"
    },
    "question_id": 7271482
  },
  {
    "question": {
      "en": "sort a list of lists `s` by second and third element in each list."
    },
    "mr": {
      "python": "s.sort(key=operator.itemgetter(1, 2))"
    },
    "question_id": 4233476
  },
  {
    "question": {
      "en": "convert hex string \"FFFF\" to decimal"
    },
    "mr": {
      "python": "int('FFFF', 16)"
    },
    "question_id": 9210525
  },
  {
    "question": {
      "en": "print number 1255000 as thousands separators"
    },
    "mr": {
      "python": "locale.setlocale(locale.LC_ALL, 'en_US')\nlocale.format('%d', 1255000, grouping=True)"
    },
    "question_id": 1823058
  },
  {
    "question": {
      "en": "get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string `s`"
    },
    "mr": {
      "python": "[s.strip() for s in input().split(',')]"
    },
    "question_id": 1397827
  },
  {
    "question": {
      "en": "Jinja join elements of array `tags` with space string ' '"
    },
    "mr": {
      "python": "{{tags | join(' ')}}"
    },
    "question_id": 13002848
  },
  {
    "question": {
      "en": "sort list `a` in ascending order based on the addition of the second and third elements of each tuple in it"
    },
    "mr": {
      "python": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]))"
    },
    "question_id": 40384599
  },
  {
    "question": {
      "en": "read a file from redirected stdin and save to variable `result`"
    },
    "mr": {
      "python": "result = sys.stdin.read()"
    },
    "question_id": 27318022
  },
  {
    "question": {
      "en": "Get all object attributes of an object"
    },
    "mr": {
      "python": "dir()"
    },
    "question_id": 6886493
  },
  {
    "question": {
      "en": "set labels `[1, 2, 3, 4, 5]` on axis X in plot `plt`"
    },
    "mr": {
      "python": "plt.xticks([1, 2, 3, 4, 5])"
    },
    "question_id": 10839719
  },
  {
    "question": {
      "en": "create a list containing the subtraction of each item in list `L` from the item prior to it"
    },
    "mr": {
      "python": "[(y - x) for x, y in zip(L, L[1:])]"
    },
    "question_id": 4029436
  },
  {
    "question": {
      "en": "encode value of key `City` in dictionary `data` as `ascii`, ignoring non-ascii characters"
    },
    "mr": {
      "python": "data['City'].encode('ascii', 'ignore')"
    },
    "question_id": 10264618
  },
  {
    "question": {
      "en": "add a path `/path/to/2014_07_13_test` to system path"
    },
    "mr": {
      "python": "sys.path.append('/path/to/2014_07_13_test')"
    },
    "question_id": 24722212
  },
  {
    "question": {
      "en": "generate all permutations of list `[1, 2, 3]` and list `[4, 5, 6]`"
    },
    "mr": {
      "python": "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"
    },
    "question_id": 104420
  },
  {
    "question": {
      "en": "add dictionary `{'class': {'section': 5}}` to key 'Test' of dictionary `dic`"
    },
    "mr": {
      "python": "dic['Test'].update({'class': {'section': 5}})"
    },
    "question_id": 37855490
  },
  {
    "question": {
      "en": "selenium webdriver switch to frame 'frameName'"
    },
    "mr": {
      "python": "driver.switch_to_frame('frameName')"
    },
    "question_id": 16739319
  },
  {
    "question": {
      "en": "read csv file 'my_file.csv' into numpy array"
    },
    "mr": {
      "python": "my_data = genfromtxt('my_file.csv', delimiter=',')"
    },
    "question_id": 3518778
  },
  {
    "question": {
      "en": "Run a command `echo hello world` in bash instead of shell"
    },
    "mr": {
      "python": "os.system('/bin/bash -c \"echo hello world\"')"
    },
    "question_id": 21822054
  },
  {
    "question": {
      "en": "replacing 'ABC' and 'AB' values in column 'BrandName' of dataframe `df` with 'A'"
    },
    "mr": {
      "python": "df['BrandName'].replace(['ABC', 'AB'], 'A')"
    },
    "question_id": 27060098
  },
  {
    "question": {
      "en": "convert hex string \"0xff\" to decimal"
    },
    "mr": {
      "python": "int('0xff', 16)"
    },
    "question_id": 9210525
  },
  {
    "question": {
      "en": "Parsing webpage 'http://www.google.com/' using BeautifulSoup"
    },
    "mr": {
      "python": "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"
    },
    "question_id": 11709079
  },
  {
    "question": {
      "en": "change legend size to 'x-small' in upper-left location"
    },
    "mr": {
      "python": "pyplot.legend(loc=2, fontsize='x-small')"
    },
    "question_id": 7125009
  },
  {
    "question": {
      "en": "Sum elements of tuple `b` to their respective elements of each tuple in list `a`"
    },
    "mr": {
      "python": "c = [[(i + j) for i, j in zip(e, b)] for e in a]"
    },
    "question_id": 40313203
  },
  {
    "question": {
      "en": "move dictionaries in list `lst` to the end of the list if value of key 'language' in each dictionary is not equal to 'en'"
    },
    "mr": {
      "python": "sorted(lst, key=lambda x: x['language'] != 'en')"
    },
    "question_id": 42364593
  },
  {
    "question": {
      "en": "replace each occurrence of the pattern '(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)' within `a` with ''"
    },
    "mr": {
      "python": "re.sub('(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)', '', a)"
    },
    "question_id": 4695143
  },
  {
    "question": {
      "en": "delete items from list `my_list` if the item exist in list `to_dell`"
    },
    "mr": {
      "python": "my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]"
    },
    "question_id": 41313232
  },
  {
    "question": {
      "en": "convert list `myintegers` into a unicode string"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(chr(i) for i in myintegers)"
    },
    "question_id": 3855093
  },
  {
    "question": {
      "en": "remove all instances of [1, 1] from list `a`"
    },
    "mr": {
      "python": "a[:] = [x for x in a if x != [1, 1]]"
    },
    "question_id": 2186656
  },
  {
    "question": {
      "en": "count all elements in a nested dictionary `food_colors`"
    },
    "mr": {
      "python": "sum(len(v) for v in food_colors.values())"
    },
    "question_id": 4581646
  },
  {
    "question": {
      "en": "substitute occurrences of unicode regex pattern u'\\\\p{P}+' with empty string '' in string `text`"
    },
    "mr": {
      "python": "return re.sub('\\\\p{P}+', '', text)"
    },
    "question_id": 11066400
  },
  {
    "question": {
      "en": "create a list by appending components from list `a` and reversed list `b` interchangeably"
    },
    "mr": {
      "python": "[value for pair in zip(a, b[::-1]) for value in pair]"
    },
    "question_id": 35797523
  },
  {
    "question": {
      "en": "copy file \"/dir/file.ext\" to \"/new/dir/newname.ext\""
    },
    "mr": {
      "python": "shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')"
    },
    "question_id": 123198
  },
  {
    "question": {
      "en": "sort list `mylist` of tuples by arbitrary key from list `order`"
    },
    "mr": {
      "python": "sorted(mylist, key=lambda x: order.index(x[1]))"
    },
    "question_id": 13408919
  },
  {
    "question": {
      "en": "Merge all columns in dataframe `df` into one column"
    },
    "mr": {
      "python": "df.apply(' '.join, axis=0)"
    },
    "question_id": 38549915
  },
  {
    "question": {
      "en": "print the truth value of `a`"
    },
    "mr": {
      "python": "print(bool(a))"
    },
    "question_id": 39604780
  },
  {
    "question": {
      "en": "extract unique dates from time series 'Date' in dataframe `df`"
    },
    "mr": {
      "python": "df['Date'].map(lambda t: t.date()).unique()"
    },
    "question_id": 14673394
  },
  {
    "question": {
      "en": "convert a list of objects `list_name` to json string `json_string`"
    },
    "mr": {
      "python": "json_string = json.dumps([ob.__dict__ for ob in list_name])"
    },
    "question_id": 26033239
  },
  {
    "question": {
      "en": "get a list of the keys in each dictionary in a dictionary of dictionaries `foo`"
    },
    "mr": {
      "python": "[k for d in list(foo.values()) for k in d]"
    },
    "question_id": 41251391
  },
  {
    "question": {
      "en": "cut a string by delimiter '&'"
    },
    "mr": {
      "python": "s.rfind('&')"
    },
    "question_id": 8247792
  },
  {
    "question": {
      "en": "run app `app` on host '192.168.0.58' and port 9000 in Flask"
    },
    "mr": {
      "python": "app.run(host='192.168.0.58', port=9000, debug=False)"
    },
    "question_id": 30241279
  },
  {
    "question": {
      "en": "Delete an element 0 from a dictionary `a`"
    },
    "mr": {
      "python": "{i: a[i] for i in a if (i != 0)}"
    },
    "question_id": 5844672
  },
  {
    "question": {
      "en": "make a list of integers from 0 to `5` where each second element is a duplicate of the previous element"
    },
    "mr": {
      "python": "print([u for v in [[i, i] for i in range(5)] for u in v])"
    },
    "question_id": 31743603
  },
  {
    "question": {
      "en": "calculate ratio of sparsity in a numpy array `a`"
    },
    "mr": {
      "python": "np.isnan(a).sum() / np.prod(a.shape)"
    },
    "question_id": 38708621
  },
  {
    "question": {
      "en": "create a dictionary `{'spam': 5, 'ham': 6}` into another dictionary `d` field 'dict3'"
    },
    "mr": {
      "python": "d['dict3'] = {'spam': 5, 'ham': 6}"
    },
    "question_id": 3817529
  },
  {
    "question": {
      "en": "convert string of bytes `y\\xcc\\xa6\\xbb` into an int"
    },
    "mr": {
      "python": "struct.unpack('<L', 'y\\xcc\\xa6\\xbb')[0]"
    },
    "question_id": 444591
  },
  {
    "question": {
      "en": "split string `s` to list conversion by ','"
    },
    "mr": {
      "python": "[x.strip() for x in s.split(',')]"
    },
    "question_id": 9905471
  },
  {
    "question": {
      "en": "loop through 0 to 10 with step 2"
    },
    "mr": {
      "python": "for i in range(0, 10, 2):\n    pass"
    },
    "question_id": 2990121
  },
  {
    "question": {
      "en": "iterate over a dictionary `d` in sorted order"
    },
    "mr": {
      "python": "for (key, value) in sorted(d.items()):\n    pass"
    },
    "question_id": 364519
  },
  {
    "question": {
      "en": "get the context of a search by keyword 'My keywords' in beautifulsoup `soup`"
    },
    "mr": {
      "python": "k = soup.find(text=re.compile('My keywords')).parent.text"
    },
    "question_id": 28780956
  },
  {
    "question": {
      "en": "get digits in string `my_string`"
    },
    "mr": {
      "python": "\"\"\"\"\"\".join(c for c in my_string if c.isdigit())"
    },
    "question_id": 12005558
  },
  {
    "question": {
      "en": "regular expression match nothing"
    },
    "mr": {
      "python": "re.compile('$^')"
    },
    "question_id": 940822
  },
  {
    "question": {
      "en": "sort a nested list by the inverse of element 2, then by element 1"
    },
    "mr": {
      "python": "sorted(l, key=lambda x: (-int(x[1]), x[0]))"
    },
    "question_id": 34705205
  },
  {
    "question": {
      "en": "Sort a list of dictionaries `mylist` by keys \"weight\" and \"factor\""
    },
    "mr": {
      "python": "mylist.sort(key=operator.itemgetter('weight', 'factor'))"
    },
    "question_id": 861190
  },
  {
    "question": {
      "en": "merge a pandas data frame `distancesDF` and column `dates` in pandas data frame `datesDF` into single"
    },
    "mr": {
      "python": "pd.concat([distancesDF, datesDF.dates], axis=1)"
    },
    "question_id": 40076861
  },
  {
    "question": {
      "en": "wait for shell command `p` evoked by  subprocess.Popen to complete"
    },
    "mr": {
      "python": "p.wait()"
    },
    "question_id": 16196712
  },
  {
    "question": {
      "en": "add header 'WWWAuthenticate' in a flask app with value 'Basic realm=\"test\"'"
    },
    "mr": {
      "python": "response.headers['WWW-Authenticate'] = 'Basic realm=\"test\"'"
    },
    "question_id": 19410585
  },
  {
    "question": {
      "en": "Filter dictionary `d` to have items with value greater than 0"
    },
    "mr": {
      "python": "d = {k: v for k, v in list(d.items()) if v > 0}"
    },
    "question_id": 8425046
  },
  {
    "question": {
      "en": "create a dictionary using two lists`x` and `y`"
    },
    "mr": {
      "python": "dict(zip(x, y))"
    },
    "question_id": 15183084
  },
  {
    "question": {
      "en": "un-escape a backslash-escaped string in `Hello,\\\\nworld!`"
    },
    "mr": {
      "python": "print('\"Hello,\\\\nworld!\"'.decode('string_escape'))"
    },
    "question_id": 1885181
  }
]