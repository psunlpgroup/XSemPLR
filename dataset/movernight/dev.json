[
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )"
        },
        "question": {
            "en": "what kind of cuisine offers lunch",
            "zh": "哪些 菜系 有 提供 午餐 服务",
            "de": "Welche Art von Küche bietet Mittagessen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "restaurant with two locations",
            "zh": "有 两个 分店 的 餐厅",
            "de": "Ein Restaurant mit zwei Standorten."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "meal that the most number of restaurant serves",
            "zh": "最 多 餐厅 提供 的 餐食",
            "de": "Gericht, das die größte Anzahl an Restaurants anbietet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )"
        },
        "question": {
            "en": "restaurants with a price rating larger than thai cafe",
            "zh": "价格 等级 大于 泰国 咖啡馆 的 餐厅",
            "de": "Restaurants mit einer höheren Preisbewertung als der eines Thai-Cafes."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "find a restaurant that has delivery as well as waiter service",
            "zh": "找 一家 有 送货 和 服务员 服务 的 餐厅",
            "de": "Finde ein Restaurant das Lieferservice und Bedienungsservice anbietet."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant in the midtown west neighborhood",
            "zh": "位于 市中心 西区 的 餐厅",
            "de": "Restaurant im Stadtteil Midtown West"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "which restaurant has waiters and a star rating of three stars",
            "zh": "哪家 餐厅 有 服务员 和 三星 评级",
            "de": "Welches Restaurant hat Kellner und eine Sternebewertung von drei Sternen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurants with waiters that are good for groups",
            "zh": "有 服务员 并 适合 团体 的 餐厅",
            "de": "Restaurants mit Kellnern, die für Gruppen geeignet sind."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )"
        },
        "question": {
            "en": "cuisine that is cuisine of restaurant whose star rating is 3 stars",
            "zh": "三星 餐厅 的 美食",
            "de": "Küche, die die Küche des Restaurants ist, dessen Sternebewertung 3 Sterne ist."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "which restaurants are good for groups",
            "zh": "哪些 餐厅 适合 团体 用餐",
            "de": "Welche Restaurants sind für Gruppen geeignet?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )"
        },
        "question": {
            "en": "what restaurant has at least a 2 or 3 dollar sign rating",
            "zh": "什么 餐馆 有 至少 两个 或 三个 价钱 符号 评级",
            "de": "Welches Restaurant hat mindestens eine Bewertung von zwei oder drei Dollar-Zeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )"
        },
        "question": {
            "en": "which restaurant has fewer than 3 or 5 stars",
            "zh": "哪家 餐厅 有 少于 3 颗星 或 5 颗星 的",
            "de": "Welches Restaurant hat weniger als 3 oder 5 Sterne"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurants that have outdoor seating and that offer takeout",
            "zh": "有 户外 座位 及 提供 外卖 的 餐馆",
            "de": "Restaurants die Außensitze haben und die Mitnahme anbieten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurant that has delivery and that takes reservations",
            "zh": "提供 送餐 及 预约 的 餐馆",
            "de": "Restaurant das Lieferung hat und das Reservierungen annimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ) )"
        },
        "question": {
            "en": "meals at restaurants that have waiters",
            "zh": "在 有 服务员 的 餐厅 用餐",
            "de": "Speisen in Restaurants, die Kellner haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )"
        },
        "question": {
            "en": "list all restaurants that are worse than 3 or 5 star rated restaurants",
            "zh": "列出 所有 低于 三星 或 五星 评级 的 餐馆",
            "de": "Liste alle Restaurants auf, die schlechter als mit drei oder fünf Sternen bewertete Restaurants sind."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurants that are not open for lunch",
            "zh": "不 营业 午餐 的 餐馆",
            "de": "Restaurants, die nicht zum Mittagessen geöffnet haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )"
        },
        "question": {
            "en": "what neighborhood has a thai cafe or pizzeria juno",
            "zh": "附近 那裹 有 泰国 餐厅 或 juno 比萨 店",
            "de": "in welcher nachbarschaft gibt es ein thailändisches cafe oder eine pizzeria juno"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "what restaurant is good for groups and takes credit card",
            "zh": "哪個 餐廳 適合團 體聚 廳還 可以 刷卡",
            "de": "Welches Restaurant ist geeignet für Gruppen und akzeptiert Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ) )"
        },
        "question": {
            "en": "what neighborhood contains the most restaurants that offer reservations",
            "zh": "附近 那个 地方 拥有 最 多 提供 预约 的 餐馆",
            "de": "In welchem Viertel sind die meisten Restaurants, in denen man reservieren kann?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( string min ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "meal that the least number of restaurants serves",
            "zh": "哪 道菜 没有 几个 饭馆 能 提供 ？",
            "de": "Gericht, das von den wenigsten Restaurants serviert wird."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )"
        },
        "question": {
            "en": "restaurants that have a rating below 3 stars",
            "zh": "评级 低于 3 星级 的 餐厅",
            "de": "Restaurants mit einer Bewertung unter 3 Sternen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "restaurant whose price rating is 2 dollar signs or 3 dollar signs",
            "zh": "价格 为 2 美元 符号 或 3 美元 符号 的 餐厅",
            "de": "Restaurant, das eine Preisbewertung von 2 Dollarzeichen oder 3 Dollarzeichen hat."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ) )"
        },
        "question": {
            "en": "what neighborhood contains restaurants that offer takeout",
            "zh": "哪个 街区 有 外卖 的 餐厅",
            "de": "In welchem Viertel gibt es Restaurants, in denen man Essen abholen kann?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )"
        },
        "question": {
            "en": "what restaurant takes credit card and is open for lunch",
            "zh": "哪家 餐馆 有收 信用卡 和 提供 午餐 的 ？",
            "de": "Welches Restaurant nimmt Kreditkarten und ist zum Mittagessen offen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )"
        },
        "question": {
            "en": "restaurants rated 3 stars or higher",
            "zh": "三星 评价 以上 的 餐厅",
            "de": "Restaurants, die mit 3 Sternen oder mehr bewertet sind."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )"
        },
        "question": {
            "en": "what meals do lunch serving restaurants serve",
            "zh": "提供 午饭 的 餐厅 提供 什么 餐",
            "de": "welches Essen bieten Restaurants an, die einen Mittagstisch haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "what restaurant offers outdoor seating",
            "zh": "什么 餐厅 提供 户外 座位",
            "de": "welche Restaurants bieten einen Außenbereich"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "hotel that can be booked in advance and which has a price rating of 2 dollar signs",
            "zh": "能够 提供 提前 预约 并 价钱 评级 是 两星 的 餐厅",
            "de": "Hotel das im Vorhinein gebucht werden kann und eine Preisbewertung von 2 Dollarzeichen hat"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ) )"
        },
        "question": {
            "en": "a restaurant in a kid friendly neighborhood",
            "zh": "对 儿童 友好 街区 里 的 餐厅",
            "de": "ein Restaurant in einer kinderfreundlichen Nachbarschaft"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "thai restaurants that kids enjoy",
            "zh": "孩子 们 喜欢 的 泰国 餐馆",
            "de": "Thai Restaurants die von Kindern gemocht werden"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "what 3 star restaurant is good for kids",
            "zh": "哪家 三星级 餐厅 适合 小孩 ？",
            "de": "Welches 3-Sterne_Restaurant ist für Kinder geeignet?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what restaurants serves more than just one meal",
            "zh": "哪些 餐厅 不仅仅 供应 一餐 ？",
            "de": "Welches Restaurant serviert mehr als ein Gericht?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurant whose cuisine is thai and that is good for groups",
            "zh": "哪个 饭馆 是 泰国 风味 并且 适合 聚餐 ？",
            "de": "Restaurant, dessen Küche thailändisch ist und das für Gruppen geeignet ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )"
        },
        "question": {
            "en": "restaurants with the same or higher star rating as thai cafe",
            "zh": "与 泰国 咖啡馆 具有 相同 或 更 高 星级 的 餐厅",
            "de": "Restaurants mit gleicher oder höherer Sternebewertung wie das Thai-Café"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "find a good kids restaurant with waiter service",
            "zh": "能 找到 一个 适合 小孩 并且 有点 菜 服务 的 饭馆 吗 ？",
            "de": "Finden Sie ein gutes Kinderrestaurant mit Bedienung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "restaurant that takes reservations and that is good for kids",
            "zh": "可以 预约 并 适合 小孩 的 餐厅",
            "de": "Restaurant, das Reservierungen entgegennimmt und für Kinder geeignet ist."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "which restaurants have a price rating of two dollar signs",
            "zh": "哪家 餐厅 有 两个 美金 价格 标签 的",
            "de": "welche Restaurants haben eine Preisbewertung von zwei Dollarzeichen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "which thai restaurants offer takeout",
            "zh": "哪些 泰国 饭馆 提供 外卖 ？",
            "de": "welche thailändischen Restaurants bieten Mitnahme an"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "which hotel is entertaining for kids",
            "zh": "哪家 旅馆 小孩 觉得 好玩 ？",
            "de": "Welches Hotel ist unterhaltsam für Kinder?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "which restaurants in midtown west have a price rating of 2 dollar signs",
            "zh": "哪些 餐厅 在 中 城西区 的 并且 价格 是 两个 美金 标签 的",
            "de": "Welche Restaurants in midtown west haben eine Preisbewertung von 2 Dollarzeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurants that take credit cards",
            "zh": "可以 刷卡 的 餐厅",
            "de": "Restaurants, die Kreditkarten akzeptieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )"
        },
        "question": {
            "en": "what thai restaurant offers takeout",
            "zh": "哪家 泰国 饭馆 有 外卖 服务 ？",
            "de": "Welches Thailändische Restaurant bietet Mitnahme an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )"
        },
        "question": {
            "en": "list all restaurants that have the same or better price rating than thai cafe",
            "zh": "列出 所有 与 泰国 咖啡馆 相同 或 更好 的 价格 评级 的 餐馆",
            "de": "liste alle restaurants auf, die die gleiche oder eine bessere preisbewertung haben als das thailändische cafe"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )"
        },
        "question": {
            "en": "which restaurants have a price less than or equal to thai cafe",
            "zh": "哪些 餐馆 的 价格 低于 或 等于 泰国 咖啡馆",
            "de": "Welches Restaurants haben eine niedrige oder vergleichbare Preiskategorie wie das Thailändische cafe?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurants that have waiters and take credit cards",
            "zh": "哪个 餐馆 有 服务生 服务 并且 收 信用卡 ？",
            "de": "Welche Restaurants haben eine Kellnerservice und akzeptieren Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )"
        },
        "question": {
            "en": "thai restaurant cuisine",
            "zh": "泰国 餐厅 美食",
            "de": "thailändische Restaurantküche"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )"
        },
        "question": {
            "en": "what restaurant has the highest price rating",
            "zh": "什么 餐厅 的 价格 评级 最高",
            "de": "Welches Restaurant hat die höchste Preisbewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )"
        },
        "question": {
            "en": "a thai restaurant for kids",
            "zh": "哪个 泰国 餐馆 适合 小朋友 ？",
            "de": "ein thailändisches Restaurant für Kinder"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has the most restaurants",
            "zh": "哪个 社区 拥有 最多 的 餐馆",
            "de": "Welches Viertel hat die meisten Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "restaurants with a 2 dollar sign rating that take credit cards",
            "zh": "兩個 美元 符號 評級 及 接受 信用卡 的 餐廳",
            "de": "Restaurants mit einem Zwei Dollar Bewertung welche Kreditkarten annehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "what meal can you get at the thai cafe",
            "zh": "這泰國 小 餐館 提供 些 什麼樣 的 餐",
            "de": "Welches Gericht kriegt man beim Thai Café?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )"
        },
        "question": {
            "en": "restaurant whose cuisine is cuisine of thai cafe",
            "zh": "提供 和 泰国 咖啡馆 一样 菜系 的 餐厅",
            "de": "Restaurants die die gleiche Küche haben wie die eines Thai Cafes"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )"
        },
        "question": {
            "en": "a restaurant as good as thai cafe",
            "zh": "和 泰国 咖啡馆 一样 好 的 餐厅",
            "de": "ein Restaurant, das so gut ist wie das Thai Café"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurants with outdoor seating",
            "zh": "备有 户外 座位 的 餐馆",
            "de": "Restaurants mit einem Außensitzbereich"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "restaurant that has delivery and that has delivery",
            "zh": "提供 送餐 的 餐厅",
            "de": "Restaurant, das Lieferung hat und das Lieferung hat"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( string min ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "meals that few restaurants serve",
            "zh": "很少 餐厅 停供 的 餐",
            "de": "Gerichte, die nur wenige Restaurants servieren."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ) )"
        },
        "question": {
            "en": "what cuisine is good for groups at a restaurant",
            "zh": "在 餐厅 ， 哪个 菜系 是 适合 集体 用餐 的",
            "de": "Welche Küche eignet sich gut für Gruppen bei einem Restaurant?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ) )"
        },
        "question": {
            "en": "what is a good meal served by a restaurant that accommodates children",
            "zh": "哪一種 餐館 適合 与 小孩 一起 享受 一頓 飯",
            "de": "Was ist ein gutes Gericht, das von einem kinderfreundlichen Restaurant serviert wird?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "restaurant that has delivery and that has takeout",
            "zh": "提供 送餐 和 外卖 的 餐厅",
            "de": "Welches Restaurant bietet Lieferdienst und Mitnahmeservice?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurant that takes credit cards and that takes reservations",
            "zh": "接受 信用卡 和 预定 的 餐厅",
            "de": "Restaurant, das Kreditkarten akzeptiert und Reservierungen entgegennimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "restaurants with dollar ratings less than 2",
            "zh": "价格 评级 小于 2 的 餐馆 。",
            "de": "Restaurants mit Preisbewertung unter 2"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "thai restaurants that take credit cards",
            "zh": "接受 信用卡 的 泰国 餐厅",
            "de": "Thailändische Restaurants, die Kreditkarten akzeptieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "restaurants that take credit cards and have waiter service",
            "zh": "接受 信用卡 并且 有 服务员 服务 的 餐厅",
            "de": "Restaurants, die Kreditkarten akzeptieren und einen Kellnerservice haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )"
        },
        "question": {
            "en": "restaurants with between 30 and 40 reviews",
            "zh": "有 三十 到 四十个 评价 的 餐厅",
            "de": "Welche Restaurants haben zwischen 30 und 40 Bewertungen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )"
        },
        "question": {
            "en": "which restaurant that welcomes kids offers lunch",
            "zh": "哪些 欢迎 儿童 的 餐厅 提供 午餐 ?",
            "de": "Welches kinderfreundliche Restaurant bietet Mittagessen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "3 star restaurants which have waiters",
            "zh": "有 服务员 的 三星 餐厅",
            "de": "3-Sterne-Restaurants, die Kellner haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "a midtown west restaurant that takes reservations",
            "zh": "城中心 偏西 的 一家 提供 预订 服务 的 餐馆 。",
            "de": "Ein Restaurant in Midtown West, das Reservierungen entgegen nimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "which restaurants have outdoor seating",
            "zh": "哪些 餐厅 有 室外 座位 ?",
            "de": "welche Restaurants haben Aussensitzplätze"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "what good kids restaurant has a 2 dollar price rating",
            "zh": "哪些 适合 儿童 的 餐厅 是 价格 评分 两星 的 ？",
            "de": "Welche guten Restaurants für Kinder haben eine Preisbewertung mit 2 Dollar-Zeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ) )"
        },
        "question": {
            "en": "restaurant with takeout",
            "zh": "有 外卖 的 餐厅",
            "de": "Ein Restaurant, das Essen zum Mitnehmen anbietet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "what cuisine does a 2 dollar sign price rating restaurant have",
            "zh": "2 美元 标志 价格 评级 餐厅 有 什么 美食",
            "de": "Welche Küche hat ein Restaurant mit einer Preisbewertung von 2 Dollar-Zeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "which restaurants are group friendly and have waiters",
            "zh": "哪家 餐厅 接受 团体 并 有 服务生",
            "de": "Welche Restaurants sind für Gruppen geeignet und haben Kellner"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )"
        },
        "question": {
            "en": "restaurants with price ratings between 2 and 3",
            "zh": "价钱 评价 2 至 3 星 的 餐厅",
            "de": "restaurants die eine preis bewertung zwischen 2 und 3 haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )"
        },
        "question": {
            "en": "restaurants whose price rating is similar to that of thai cafe",
            "zh": "和 那家 泰国 咖啡店 价格 价格 等级 差不多 的 餐厅",
            "de": "Restaurants, deren Preisklasse der des thailändischen Cafés ähnelt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurant that has outdoor seating and that is good for groups",
            "zh": "有 外座 并 欢迎 团体 的 餐厅",
            "de": "Restaurant mit Sitzgelegenheiten im Freien, das sich gut für Gruppen eignet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string groups ) ) )"
        },
        "question": {
            "en": "a good thai restaurant with room for groups",
            "zh": "有 团体 座位 的 好 的 泰国 餐厅",
            "de": "ein gutes thailändisches restaurant mit platz für gruppen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )"
        },
        "question": {
            "en": "restaurants that are in midtown west",
            "zh": "位于 市中心 西部 的 餐馆",
            "de": "Restaurants, die in Midtown West sind"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurants that serve lunch and have a price rating of 2",
            "zh": "价格 评价 2 星 并 提供 午餐 的 餐厅",
            "de": "Welche Restaurants haben eine Preisbewertung von 2 und servieren Mittagessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )"
        },
        "question": {
            "en": "what is the cuisine of thai cafe",
            "zh": "那个 泰 咖啡馆 是 什么 风味 ？",
            "de": "Welche Küche bietet das Thai-Café an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )"
        },
        "question": {
            "en": "what restaurant does not offer lunch",
            "zh": "什么 餐厅 不 提供 午餐",
            "de": "Welches Restaurant bietet kein Mittagessen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhoods contain more than 2 restaurants",
            "zh": "什么 社区 拥有 两个 以上 的 餐厅",
            "de": "In welchen Stadtteilen gibt es mehr als 2 Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "restaurant whose price rating is smaller than 2 dollar signs",
            "zh": "价格 评级 低于 两 美元 标志 的 餐厅",
            "de": "Welches Restaurant hat eine Preisbewertung, die niedriger als 2 Dollarzeichen ist?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which neighborhoods have more than two restaurants",
            "zh": "哪些 社区 有 两个 以上 的 餐厅",
            "de": "In welchen Stadtteilen gibt es mehr als zwei Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "what restaurant has delivery",
            "zh": "哪家 餐厅 有外 送 的",
            "de": "Welches Restaurant hat einen Lieferservice?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "what restaurant offers lunch and is good for groups",
            "zh": "什么 餐厅 有 供应 午餐 并且 可以 团体 用餐",
            "de": "Welches Restaurant ist für Gruppen geeignet und bietet Mittagessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ) )"
        },
        "question": {
            "en": "meal served by a restaurant that delivers",
            "zh": "送餐 的 餐厅 供应 的 餐点",
            "de": "Welche Mahlzeit wird von Lieferrestaurants serviert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "a three star restaurant that's mid priced",
            "zh": "中等 价位 的 三星级 餐厅",
            "de": "Welches 3-Sterne-Restaurant ist in der mittleren Preisklasse?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "what 3 star restaurants have a price rating of 2 dollar signs",
            "zh": "什么 三星级 餐厅 有 两 美元 标志 的 价格 评级",
            "de": "Welche 3 Sterne Restaurants haben eine Preisbewertung von 2 Dollarzeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "restaurant that has delivery and that has takeout",
            "zh": "提供 送餐 和 外卖 的 餐厅",
            "de": "Welches Restaurant bietet Lieferservice und Mitnahme an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )"
        },
        "question": {
            "en": "restaurant that serves lunch and that has takeout",
            "zh": "提供 午餐 并且 有 外带 的 餐厅",
            "de": "Welches Restaurant serviert Mittagessen und bietet Mitnahme an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurants with 2 price rating that accept credit cards",
            "zh": "有 两颗 星 价钱 评分 并且 接受 信用卡 的 餐厅",
            "de": "Welche Restaurants die eine Preisbewertung von 2 haben akzeptieren Kreditkarte?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "a reservation restaurant that is kid friendly",
            "zh": "一家 可 接受 订座 并 适合 儿童 的 餐馆",
            "de": "Welches Restaurant bietet Reservierungen an  und ist kinderfreundlich?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "3 star rated restaurants for kids",
            "zh": "适合 儿童 的 三星 餐厅",
            "de": "3 Sterne Restaurants für Kinder"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "find a thai restaurant in the midtown west area",
            "zh": "在 市中心 西区 找 一家 泰国 餐馆",
            "de": "Finde ein Thai Restaurant in der Midtown West Gegend"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "restaurants that are in two neighborhoods at least",
            "zh": "至少 在 两个 社区 都 有 的 餐厅",
            "de": "Restaurants, die sich mindestens in zwei Stadtteilen befinden"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "what is the neighborhood of thai cafe",
            "zh": "泰国 咖啡店 在 哪个 街区",
            "de": "in welchem Stadtteil ist das Thai Cafe"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "family friendly restaurants with takeout",
            "zh": "适合 家庭 并且 提供 外带 的 餐厅",
            "de": "familienfreundliche Restaurants mit Mitnahme"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "what restaurant in midtown west contains outdoor seating",
            "zh": "中 西城 哪家 餐馆 有 露天 座位 ？",
            "de": "Welches Restaurant in Midtown West verfügt über Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "restaurant that takes credit cards and that is good for kids",
            "zh": "接受 信用卡 并且 适合 儿童 的 餐厅",
            "de": "Restaurant, das Kreditkarten akzeptiert und kinderfreundlich ist."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )"
        },
        "question": {
            "en": "restaurant with lunch menu",
            "zh": "哪家 餐馆 有 午餐 菜单 ？",
            "de": "Restaurant mit Mittagsmenü"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "restaurant whose star rating is 3 stars and that has takeout",
            "zh": "三星 以上 并 有 外带 服务 的 餐厅 。",
            "de": "Restaurant mit einer Sternbewertung von 3 Sternen, das Essen zum Mitnehmen bietet."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "name a restaurant serving more than two types of cuisine",
            "zh": "能 指出 一家 提供 两种 风味 以上 的 饭馆 吗 ？",
            "de": "Benennen Sie ein Restaurant, das mehr als zwei Arten von Küche anbietet."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "what restaurant is kid friendly and takes reservations",
            "zh": "哪个 餐馆 适合 小朋友 就餐 并且 可以 预定 ？",
            "de": "Welches Restaurant ist kinderfreundlich und nimmt Reservierungen entgegen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what restaurant has two neighborhoods",
            "zh": "哪个 餐馆 坐落于 两个 小区 ？",
            "de": "Welches Restaurant hat zwei Nachbarschaften?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "restaurants with delivery for kids",
            "zh": "哪个 儿童 餐馆 可以 送餐 ？",
            "de": "Restaurants mit Lieferservice für Kinder"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )"
        },
        "question": {
            "en": "restaurant that can deliver and is open for lunch",
            "zh": "哪个 餐馆 可以 送餐 并且 提供 午餐 ？",
            "de": "Restaurant, das liefern kann und zum Mittagessen geöffnet ist."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "group friendly restaurants rated 3 stars",
            "zh": "三星 以上 并且 适合 团体 用餐 的 餐厅 。",
            "de": "Gruppenfreundliche Restaurants mit 3 Sterne Bewertung."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )"
        },
        "question": {
            "en": "what is a meal served in a thai restaurant",
            "zh": "泰国 餐厅 提供 什么 菜 ？",
            "de": "Was ist eine Mahlzeit, die in einem Thai-Restaurant serviert wird?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "which restaurants are good for groups and accept credit cards",
            "zh": "哪个 餐厅 是 适合 团体 用餐 并且 接受 信用卡 的 ？",
            "de": "Welche Restaurants sind für Gruppen geeignet und akzeptieren Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurants that accept credit cards and reservations",
            "zh": "接受 信用卡 和 预订 的 餐厅",
            "de": "Restaurants, die Kreditkarten und Reservierungen akzeptieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has the most restaurants that are good for groups",
            "zh": "哪片 区域 适合 群体 消费 的 餐厅 最 多 ？",
            "de": "Welches Viertel hat die meisten Restaurants, die sich für Gruppen eignen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "name a meal served in a restaurant with a price rating of two dollar signs",
            "zh": "给 一个 有 两星 价格 评分 的 餐馆 的 名字",
            "de": "Nenne eine Mahlzeit, die in einem Restaurant mit einer Preiswertung von zwei Dollarzeichen serviert wird"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )"
        },
        "question": {
            "en": "restaurant whose star rating is at most 3 stars or 5 stars",
            "zh": "星级 评分 最多 是 三 或者 是 五 的 餐馆",
            "de": "Restaurant, dessen Sternebewertung höchstens 3 Sterne oder 5 Sterne beträgt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ) ) )"
        },
        "question": {
            "en": "what is the price rating",
            "zh": "价格 评分 是 多少",
            "de": "Was ist das Preisniveau?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "take out restaurant in midtown west",
            "zh": "城中 西部 可以 外带 的 餐厅",
            "de": "Mitnahmerestaurant in Midtown West"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "what are some 3 star rated restaurants in midtown west",
            "zh": "在 中城 西面 评分 为 3 星 的 餐馆",
            "de": "Was sind einige 3-Sterne-Restaurants in Midtown West"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )"
        },
        "question": {
            "en": "list all restaurants that are cheaper than 2 dollar signs or 3 star dollar signs",
            "zh": "列出 所有 比 两个 或者 三个 美金 符号 还 便宜 的 餐馆",
            "de": "Liste alle Restaurants auf, die günstiger sind als 2 Dollarzeichen oder 3 Sterne Dollarzeichen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )"
        },
        "question": {
            "en": "restaurant whose star rating is at least star rating of thai cafe",
            "zh": "星级 评分 至少 是 泰国 餐馆 评分 的 餐馆",
            "de": "Restaurant, dessen Sternebewertung mindestens der Sternebewertung des thailändischen Cafés entspricht"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "restaurant whose cuisine is thai and whose star rating is 3 stars",
            "zh": "拥有 3 星 评分 的 泰国 餐馆",
            "de": "Restaurant, dessen Küche thailändisch ist und dessen Sternebewertung 3 Sterne sind."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurants that serve lunch and have waiter service",
            "zh": "提供 午餐 并且 有 服务员 服务 的 餐厅",
            "de": "Restaurants, die Mittagessen servieren und Kellnerservice anbieten."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )"
        },
        "question": {
            "en": "restaurants that are in the neighborhood of midtown west",
            "zh": "在 中城 西面 社区 的 餐馆",
            "de": "Welche Restaurants liegen in der Nachbarschaft von Midtown West?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )"
        },
        "question": {
            "en": "what kind of cuisine is thai cafe",
            "zh": "泰 咖啡馆 有 什么 菜系 ？",
            "de": "Welche Art von Küche bietet das Thai-Café?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )"
        },
        "question": {
            "en": "restaurants with 3 or lower price rating",
            "zh": "有 3 或者 以下 的 价格 评分 的 餐馆",
            "de": "Welche Restaurants haben eine Preisklassifizierung von drei oder weniger?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is a meal served by two different restaurants",
            "zh": "哪些 食物 是 两家 不同 的 饭店 都 供应 的 ？",
            "de": "Was ist eine Mahlzeit, die von zwei verschiedenen Restaurants serviert wird"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "which restaurants accept reservation and have outdoor seating",
            "zh": "哪些 餐厅 接受 预订 并 设有 户外 座位",
            "de": "Welche Restaurants akzeptieren Kreditkarten und haben einen Außensitzbereich?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "a restaurant with a 2 dollar sign rating for kids",
            "zh": "一个 有 2 星 评分 适合 孩子 们 的 餐馆",
            "de": "Welches Restaurant für Kinder hat eine Bewertung von zwei Dollarzeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "which restaurants have takeout and serve lunch",
            "zh": "哪些 餐馆 可以 外食 并且 提供 午餐",
            "de": "Welche Restaurants haben Mitnahme und servieren Mittagessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "what restaurant has a price rating smaller than two dollar signs",
            "zh": "价格 评分 在 两个 美金 符号 以下 的 餐馆",
            "de": "welches Restaurant hat eine Preisbewertung von weniger als 2 Dollarzeichen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurants that serve lunch that are good for large parties",
            "zh": "适合 大 集体 并且 提供 午餐 的 餐厅",
            "de": "Restaurants, die Mittagessen servieren und sich für große Gruppen eignen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )"
        },
        "question": {
            "en": "restaurant that serves lunch and that has delivery",
            "zh": "提供 午餐 和 送餐 服务 的 餐厅",
            "de": "Welches Restaurant serviert Mittagessen und liefert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what meals do 2 restaurants serve",
            "zh": "那 两个 饭馆 有 什么样 的 饭菜 呀 ？",
            "de": "Welche Mahlzeiten werden von 2 Restaurants serviert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurants that have waiters and are good for groups",
            "zh": "有 服务生 并且 适合 集体 聚餐 的 餐厅",
            "de": "Welche Restaurants haben einen Kellner Service und sind gut für Gruppen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "hotel that offers lunch and has outdoor seating facilities",
            "zh": "提供 午餐 并且 有 室外 座位 设施 的 酒店",
            "de": "Hotel, das Mittagessen anbietet und über Sitzgelegenheiten im Freien verfügt."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "what restaurant offers lunch and takes reservations",
            "zh": "什么 餐馆 有 提供 午餐 而且 接受 预定",
            "de": "welches Restaurant bietet Mittagessen an und nimmt Reservierungen entgegen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "a restaurant with thai cuisine",
            "zh": "一家 有 泰国 料理 的 餐馆",
            "de": "ein restaurant mit thailändischer küche"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )"
        },
        "question": {
            "en": "what is the cuisine of restaurants that serve lunch",
            "zh": "提供 午餐 的 餐厅 有 什么 菜系 ?",
            "de": "Welche Küchen besitzen die Restaurants die Mittagessen servieren?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )"
        },
        "question": {
            "en": "list all restaurants in the neighborhood of midtown west or chelsea",
            "zh": "列出 所有 邻近 西 市中心 或者 切尔西 的 餐馆",
            "de": "Liste alle Restaurants in der Nachbarschaft von midtown west oder chelsea"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ) )"
        },
        "question": {
            "en": "restaurant that serves food for kids",
            "zh": "提供 儿童 餐 的 餐馆",
            "de": "Restaurant, das Essen für Kinder serviert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has more than two restaurants",
            "zh": "什么 邻近地区 有 多于 两家 的 餐馆",
            "de": "In welchem Bezirk gibt es mehr als zwei Restaurants"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )"
        },
        "question": {
            "en": "hotel which has a price rating of less than 2 dollar signs or 3 dollar signs",
            "zh": "哪些 酒店 的 价格 评分 是 少于 两颗 或 三颗 星 的 ？",
            "de": "Welches Hotel hat eine Preis-Bewertung von weniger als 2 oder 3 Dollar-Zeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )"
        },
        "question": {
            "en": "what kind of meals do thai cafe and pizzeria juno serve",
            "zh": "泰国 咖啡馆 和 朱诺 披萨 提供 哪种 餐 ？",
            "de": "Welche Gerichte bieten das Thai Café und die Pizzeria Juno an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )"
        },
        "question": {
            "en": "what restaurants are in the neighborhood of thai cafe",
            "zh": "什么 餐馆 在 泰国 咖啡馆 附近",
            "de": "Welche Restaurants sind in der Nachbarschaft des Thai Cafés?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurant whose cuisine is thai and that has outdoor seating",
            "zh": "哪个 餐馆 提供 泰国 餐 并且 有 室外 就餐 环境 ？",
            "de": "Restaurant mit thailändischer Küche und Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )"
        },
        "question": {
            "en": "restaurant whose star rating is smaller than 3 stars or 5 stars",
            "zh": "星级 评分 小于 3 星级 或 5 星级 的 餐厅",
            "de": "Welche Restaurants haben eine Sterne-Wertung von weniger als 3 oder 5 Sternen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurant that takes reservations and that takes credit cards",
            "zh": "接受 预订 并且 接受 信用卡 的 餐厅 ?",
            "de": "Welche Restaurants nehmen Reservierungen entgegen und akzeptieren Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )"
        },
        "question": {
            "en": "restaurants that cheaper than thai cafe",
            "zh": "比 泰国 咖啡馆 便宜 的 餐厅",
            "de": "Welche Restaurants sind billiger als das Thai Café?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ) )"
        },
        "question": {
            "en": "what meals do credit card taking restaurants serve",
            "zh": "接受 信用卡 的 餐厅 提供 哪些 餐 ?",
            "de": "Welche Gerichte werden von Restaurants serviert, die Kreditkarten akzeptieren?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "what restaurant can i eat lunch outdoors at",
            "zh": "哪些 餐厅 提供 午餐 和 室外 座位 ？",
            "de": "In welchem Restaurant kann ich draußen zu Mittag essen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "restaurant whose star rating is 3 stars and that has delivery",
            "zh": "整体 评分 三颗 星 并且 提供 送餐 的 餐厅",
            "de": "Restaurant mit 3 Sternebewertung das liefert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "affordable restaurant with outdoor seating",
            "zh": "价格 实惠 的 餐厅 设有 户外 座",
            "de": "günstiges Restaurant mit Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurants that are group friendly",
            "zh": "这 餐馆 对 团体 聚餐 很 友好",
            "de": "Restaurants, die gruppenfreundlich sind"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what restaurant serves two different types of cuisines",
            "zh": "什么 餐厅 供应 两种 不同 类型 的 美食",
            "de": "Welches Restaurant serviert zwei verschiedene Arten von Küchen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "what restaurants are good for groups and kids",
            "zh": "什么 饭馆 适合 聚餐 且 对 小孩 好 ？",
            "de": "welche Restaurants sind für Gruppen und Kinder geeignet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ) )"
        },
        "question": {
            "en": "what is a meal served at a restaurant that has waiters",
            "zh": "有 服务员 点菜 的 饭馆 会 有 什么 菜 呢 ？",
            "de": "Was ist eine Mahlzeit, die in einem Restaurant mit Kellnern serviert wird?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) ) )"
        },
        "question": {
            "en": "restaurant who shares a neighborhood with the thai cafe",
            "zh": "这 餐馆 和 泰国 咖啡厅 同享 一个 区",
            "de": "Welches Restaurant teilt sich die Nachbarschaft mit den Thai cafe?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurant that has delivery and that has outdoor seating",
            "zh": "餐廳 有 外 送 跟 提供 戶外 座位",
            "de": "Welches Lieferrestaurant hat draußen Sitzplätze?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "what 2 dollar price rating restaurant takes credit cards",
            "zh": "哪个 两 美元 价 的 饭馆 接受 信用卡 ？",
            "de": "welches mit 2 Dollar Zeichen bewerteten Restaurants nimmt Kreditkarten an"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ) )"
        },
        "question": {
            "en": "what kind of meals does takeout restaurants serve",
            "zh": "外卖 餐厅 供应 什么样 的 饭菜",
            "de": "Welche Art von Gerichten bieten Restaurants mit Essen zum Mitnehmen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )"
        },
        "question": {
            "en": "what is the price range for the thai restaurant",
            "zh": "那个 泰国 饭馆 的 价格 范围 是 多少 ？",
            "de": "Was ist das Preisniveau des Thai-Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "what restaurant takes reservations and is good for kids",
            "zh": "哪些 餐馆 接受 预定 并且 适合 孩子",
            "de": "Welches Restaurant akzeptiert Reservierungen und ist kinderfreundlich?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )"
        },
        "question": {
            "en": "list restaurants that are at or less than 2 or 3 dollar signs",
            "zh": "列出 符合 或 低于 2 或 3 美元 符号 的 餐馆",
            "de": "Liste Restaurants, die eine Preisbewertung von mindestens 2 oder 3 Dollarzeichen haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string reserve ) ) )"
        },
        "question": {
            "en": "a reservation thai restaurant",
            "zh": "一个 泰国 餐馆 的 定位",
            "de": "Ein Thai-Restaurant, das Reservierungen annimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurants that take credit and deliver",
            "zh": "接受 信用卡 并且 提供 外卖 的 餐馆",
            "de": "Restaurants, die Kreditkarten akzeptieren und liefern"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant in the midtown west area",
            "zh": "位于 市中心 西区 的 餐厅",
            "de": "Restaurant im Stadtteil Midtown West"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "what2 dollar sign restaurant has outdoor seating",
            "zh": "哪些 两个 美金 符号 的 餐馆 有 室外 座位",
            "de": "Welches Restaurant mit 2-Dollar-Zeichen-Bewertung has Sitzplätze draußen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what restaurants offer more than two cuisines",
            "zh": "哪些 餐馆 提供 多于 两类 菜系",
            "de": "Welche Restaurants bieten mehr als zwei Küchen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "list all restaurants that have a price rating of 2 dollar signs or 3 dollar signs",
            "zh": "可以 列出 所有 价格 评分 在 两颗 到 三颗 的 餐厅 吗 ？",
            "de": "zähle alle Restaurants auf, die eine Preisbewertung von 2 Dollar-Schildern oder 3 Dollar-Schildern haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "what cuisine does the thai cafe have",
            "zh": "泰国 菜馆 有 哪些 菜",
            "de": "Welche Küche bietet dieses Thai Cafe an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ) ) )"
        },
        "question": {
            "en": "what is the average restaurant star rating",
            "zh": "餐馆 平均 评分 是 多少",
            "de": "Wie viele Sterne hat dieses Restaurant im Durchschnitt?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "what restaurants are good for groups that have waiter service",
            "zh": "哪些 餐厅 适合 集体 聚餐 并且 有 服务员 服务 ？",
            "de": "Welche Restaurants mit Bedienung sind gut für Gruppen geeignet?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ) )"
        },
        "question": {
            "en": "restaurants that offer takeout",
            "zh": "提供 外带 的 餐厅",
            "de": "Restaurants die Essen zum mitnehmen anbieten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "restaurants who have a price rating lower than 2 dollar signs",
            "zh": "价格 评分 少于 两颗 星 的 餐厅",
            "de": "Restaurants deren Preisdurchschnitt unter 2 Dollarzeichen liegt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "list all restaurants that are at least 2 dollar signs",
            "zh": "列出 所有 价格 评分 至少 有 两颗 的 餐厅",
            "de": "Zeige alle Restaurants, die mindestens ein 2 Dollar Zeichen haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "what restaurants have at least a 3 star rating",
            "zh": "什么 餐厅 至少 有 3 星 评级",
            "de": "Welche Restaurants haben mindestens eine 3 Sterne Bewertung?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( string min ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what cuisine has the least amount of restaurants",
            "zh": "哪个 菜系 餐厅 最少",
            "de": "Welche Küche hat die wenigsten Restaurants"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )"
        },
        "question": {
            "en": "which hotel has the least price rating",
            "zh": "哪个 酒店 有 最少 的 价格 评分 ？",
            "de": "Welches Hotel hat die niedrigste Preisbewertung?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "restaurants rated 3 stars that accept reservations",
            "zh": "三颗 星 并且 接受 预订 的 餐厅",
            "de": "Restaurants mit 3 Sternen, die Reservierungen annehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )"
        },
        "question": {
            "en": "what restaurant has a higher price rating than the thai cafe",
            "zh": "哪个 餐厅 的 价格 评分 高于 泰国 咖啡馆 ?",
            "de": "Welches Restaurant hat eine höhere Preiskategorie als das Thai Cafe"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "what meals don't the thai cafe serve",
            "zh": "什么 食物 是 哪家 泰国 小厨 没有 的",
            "de": "Welche Speisen sind im Thai Café nicht erhältlich?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurant has seating outside",
            "zh": "餐館 有戶 外 座位",
            "de": "Restaurant verfügt über Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "which neighborhoods have restaurants with a 2 dollar sign price rating",
            "zh": "哪些 社区 的 餐厅 有 2 美元 的 标志 价格 评级",
            "de": "welche Stadtteile haben Restaurants mit einer Preisbewertung von 2 Dollarzeichen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has the most restaurants that take reservations",
            "zh": "哪一個 社區 有 最 多 的 餐館 會 接受 訂位",
            "de": "welcher Stadtteil hat die meisten Restaurants die Reservierungen annehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.food.lunch en.food.dinner ) )"
        },
        "question": {
            "en": "a restaurant for lunch or dinner",
            "zh": "提供 午餐 和 晚餐 的 餐廳",
            "de": "Ein Restaurant für Mittag- oder Abendessen oder Abendessen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurants that take reservations and are good for groups",
            "zh": "可以 预约 和 适合 团体 用餐 的 餐厅",
            "de": "Restaurants, die Reservierungen annehmen und für Gruppen geeignet sind"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string reserve ) ) )"
        },
        "question": {
            "en": "what thai restaurants takes reservations",
            "zh": "哪些 泰 餐馆 接受 订位 ？",
            "de": "Welche Thai-Restaurants nehmen Reservierungen entgegen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "restaurants that serves more than two cuisines",
            "zh": "提供 多國 兩種 的 美食 的 餐館",
            "de": "Restaurants, die mehr als zwei Küchen servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ) )"
        },
        "question": {
            "en": "what neighborhoods have restaurants that accept reservations",
            "zh": "哪些 社区 有 餐厅 接受 预订",
            "de": "welche Stadtteile haben Restaurants die Reservierungen vornehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string waiter ) ) )"
        },
        "question": {
            "en": "what restaurant can i get lunch at that has waiter service",
            "zh": "哪个 饭馆 我能 去 吃 午餐 并且 有 服务员 ？",
            "de": "In welchem Restaurant das Kellnerservice hat, bekomme ich Mittagessen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string waiter ) ) )"
        },
        "question": {
            "en": "restaurant whose neighborhood is midtown west and that has waiter service",
            "zh": "附近 是 市中心 西区 ， 有 服务员 服务 的 餐厅",
            "de": "Restaurant im Stadteil Midtown West mit Bedienung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )"
        },
        "question": {
            "en": "thai restaurants that have takeout",
            "zh": "有 外卖 的 泰国 餐馆",
            "de": "Thai-Restaurant mit Takeout-Service"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "restaurants with 3 stars and 2 price rating",
            "zh": "有 三星 评价 和 二星 价位 的 餐厅",
            "de": "Restaurants mit drei Sternen und einem Preisniveau von zwei"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )"
        },
        "question": {
            "en": "list all restaurants in midtown west or chelsea",
            "zh": "列出 位于 市中心 西部 或 切尔西 的 所有 餐厅",
            "de": "Liste alle Restaurants in Midtown West oder Chelsea auf"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurants that are better for takeout",
            "zh": "外卖 适合 的 餐厅",
            "de": "Restaurants, die sich besser für Takeout eignen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurants that accept credit cards and have waiters",
            "zh": "有 服务员 和 收 信用卡 的 餐厅",
            "de": "Restaurants, die Kreditkarten akzeptieren und Kellner haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the restaurants number",
            "zh": "餐廳 電話 多少",
            "de": "Wie lautet die Telefonnummer des Restaurants"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "which restaurant is good for kids",
            "zh": "哪个 餐厅 适合 带 小孩子 去 的",
            "de": "Welche Restaurants sind gut für Kinder geeignet?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ) )"
        },
        "question": {
            "en": "what cuisines are offered by restaurants accepting reservations",
            "zh": "可訂 位 的 餐廳 有 提供 哪個 菜式",
            "de": "Welche Küchen werden von Restaurants angeboten, die Reservierungen annehmen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ) )"
        },
        "question": {
            "en": "which restaurant has a cuisine that offers delivery services",
            "zh": "哪家 餐厅 有 提供 外送",
            "de": "Welches Restaurant hat eine Küche, die einen Lieferservice anbietet?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ) )"
        },
        "question": {
            "en": "restaurants that can be booked in advance",
            "zh": "可以 提前 预订 的 餐厅",
            "de": "Restaurants, die im Voraus gebucht werden können"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "what are some 3 star restaurants that accept credit cards",
            "zh": "哪些 餐厅 有 三颗 星 并且 可以 刷卡",
            "de": "was sind einige 3-Sterne-Restaurants, die Kreditkarten akzeptieren?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "offers take out and delivers",
            "zh": "提供 外带 和 送餐",
            "de": "bietet Mitnahme und Lieferung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )"
        },
        "question": {
            "en": "list all restaurants that have lower stars than 3 star or 5 star",
            "zh": "列出 所有 低于 3 星 或 5 星 的 星级 餐厅",
            "de": "Liste aller Restaurants die eine niedrigere Bewertung als 3 Sterne oder 5 Sterne haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "which restaurants have outdoor seating and offer takeout",
            "zh": "哪些 餐厅 有 室外 座位 并且 提供 外带 ？",
            "de": "Welche Restaurants haben Sitzgelegenheiten im Freien und bieten Mitnahmen an"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "what restaurant is good for groups and offers outdoor seating",
            "zh": "哪个 餐厅 适合 集体 聚餐 并且 提供 室外 座位 ?",
            "de": "Welches Restaurant ist gut für Gruppen und bietet Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ) )"
        },
        "question": {
            "en": "what is the cuisine of restaurants that have delivery",
            "zh": "提供 外卖 的 餐厅 有 什么 菜系 ?",
            "de": "Was ist die Küche von Restaurants, die Lieferung anbieten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "cuisine unlike thai cafe",
            "zh": "和 泰国 咖啡馆 不 一样 的 菜系",
            "de": "Andere Küche als das Thai Cafe"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "restaurant that has delivery and whose star rating is 3 stars",
            "zh": "提供 送餐 并且 整体 评分 三星 的 餐厅",
            "de": "Restaurant mit Lieferservice und einer Sternebewertung von 3 Sternen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string waiter ) ) )"
        },
        "question": {
            "en": "what thai restaurant offers waiter service",
            "zh": "什么 泰国 餐厅 提供 服务员 服务",
            "de": "Welches thai Restaurant bietet einen Kellnerservice an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "what restaurant offers outdoor seating and delivery",
            "zh": "哪个 餐厅 提供 室外 座位 和 送餐 服务 ？",
            "de": "Welches Restaurant liefert und hat einen Sitzbereich im freien?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "what restaurant offers lunch and takes credit cards",
            "zh": "哪家 餐厅 有 午餐 并 接受 信用卡",
            "de": "Welches Restaurant bietet Mittagessen an und akzeptiert Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurants with price rating of 2 in midtown west",
            "zh": "在 中城 西部 价格 两颗 星 的 餐厅",
            "de": "Welche Restaurants haben eine Preisbewertung von 2 in midtown west?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )"
        },
        "question": {
            "en": "this restaurant had the largest rating in price",
            "zh": "这家 餐厅 的 价格 评分 最高",
            "de": "Dieses Restaurant hatte die höchste Preisbewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "what restaurant does not have a 3 star rating",
            "zh": "哪些 餐馆 没有 三颗 星 的 评价 ？",
            "de": "Welches Restaurant hat kein 3 Sternerating?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "hotel which has a price rating of 2 dollar signs and offers delivery services",
            "zh": "哪些 酒店 的 价位 评级 有 两颗 星 而且 提供 快递 服务 ？",
            "de": "Hotel mit einem Preis von 2-Dollar-Zeichen und Lieferservice"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )"
        },
        "question": {
            "en": "what are some restaurants that are rated between 3 and 5 stars",
            "zh": "哪些 餐馆 的 评价 在 三颗 星到 五颗星 ？",
            "de": "Welche Restaurants haben eine Sternebewertung zwischen 3 und 5 Sternen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )"
        },
        "question": {
            "en": "what is a kid friendly restaurant that serves lunch",
            "zh": "哪个 餐馆 适合 小孩 去 并且 提供 午餐 ？",
            "de": "Was ist ein kinderfreundliches Restaurant das Mittagessen anbietet?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what restaurant serves less than two meals",
            "zh": "什么 餐厅 供应 少于 两餐",
            "de": "Welches Restaurant serviert weniger als zwei Mahlzeiten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "which restaurants serve lunch and have delivery",
            "zh": "哪家 餐厅 提供 午餐 并 有 外 送 的",
            "de": "Welche Restaurants liefern und servieren Mittagessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "a thai restaurant with medium pricing",
            "zh": "一家 价格 适中 的 泰餐",
            "de": "Ein Thai Restaurant in der mittleren Preisklasse"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "what good kids restaurant serves lunch",
            "zh": "什么 好孩子 餐厅 供应 午餐",
            "de": "Welche kinderfreundlichen Restaurants bieten ein Mittagessen an"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "what restaurants take credit cards and deliver",
            "zh": "什么样 的 饭馆 接受 信用卡 并且 送 外卖 ？",
            "de": "welches Restaurant akzeptiert Kreditkarten und liefert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurant that delivers and accepts credit cards",
            "zh": "提供 送餐 服务 并且 接受 信用卡 的 餐厅",
            "de": "Restaurant das liefert und Kreditkarten akzeptiert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurants that serves lunch and is large",
            "zh": "提供 午餐 并且 比较 宽敞 的 餐厅",
            "de": "Ein großes Restaurant das Mittagessen anbietet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has at least two restaurants",
            "zh": "哪个 社区 有 至少 两家 餐厅",
            "de": "welche Nachbarschaft hat zumindest zwei Restaurants"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ) )"
        },
        "question": {
            "en": "what is the cuisine of the restaurant with waiter service",
            "zh": "有 服务生 服务 的 餐厅 有 哪些 菜系",
            "de": "welche Küche hat das Restaurant mit Tischservice"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which restaurant offers fewer than two types of cuisine",
            "zh": "哪家 餐厅 提供 的 菜肴 少于 两种",
            "de": "Welches Restaurant bietet weniger als zwei typen von Küchen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )"
        },
        "question": {
            "en": "restaurants with similar food to thai cafe or pizzeria juno",
            "zh": "与 泰国 咖啡馆 或 比萨 店 juno 有 类似 食物 的 餐馆",
            "de": "Restaurants mit ähnlichen Speisen wie Thai Cafe oder Pizzeria Juno"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "what are some 2 dollar rated restaurants good for groups",
            "zh": "哪些 餐厅 有 两个 价格 标签 的 并 适合 团体",
            "de": "Welche Restaurants mit zwei Dollarzeichen sind für Gruppen geeignet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "an outdoor setting restaurant that takes credit cards",
            "zh": "一个 有 室外 座位 并且 接受 信用卡 的 餐厅",
            "de": "Ein Restaurant mit Sitzplätzen im Freien, das Kreditkarten akzeptiert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhoods have at least two restaurants",
            "zh": "哪些 街坊 有 至少 两间 餐馆 ？",
            "de": "Welche Stadtteile haben zumindest zwei Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string kids ) ) )"
        },
        "question": {
            "en": "a restaurant for kids in midtown west",
            "zh": "市中心 西部 一间 适合 小孩 食用 的 餐馆",
            "de": "ein Kinderrestaurant in Midtown West"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "what meals do the thai cafe serve",
            "zh": "那 家 泰国 小厨 提供 什么 餐饮",
            "de": "Welche Gerichte serviert das thailändische Café?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )"
        },
        "question": {
            "en": "what restaurant has a 3 star rating",
            "zh": "什么 餐厅 有 3 星 评级",
            "de": "Welches Restaurant hat eine 3-Sterne-Bewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "which kid friendly restaurants accept credit cards",
            "zh": "哪些 儿童 友好 的 餐馆 接受 信用卡",
            "de": "Welche kinderfreundlichen Restaurants akzeptieren Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "what restaurants use waiters",
            "zh": "什么样 的 饭馆 有 服务员 点菜 ？",
            "de": "Welche Restaurants haben Kellner?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )"
        },
        "question": {
            "en": "restaurants with star ratings of 3 or 5",
            "zh": "星级 评分 为 3 或 5 的 餐厅",
            "de": "Restaurants mit einer Bewertung von 3 oder 5 Sternen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ) )"
        },
        "question": {
            "en": "restaurant in the neighborhood that has takeout facilities",
            "zh": "在 社区 里 并 有 外卖 的 餐厅",
            "de": "Restaurant in der Gegend, das Essen zum Mitnehmen anbietet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurants for groups and is in midtown west",
            "zh": "在 中 城西区 的 适合 团体 的 餐厅",
            "de": "Restaurants für Gruppen, die in Midtown West sind"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "3 star restaurants that offer takeout",
            "zh": "有 外卖 的 3 颗星 餐厅",
            "de": "3-Sterne-Restaurants, die Essen zum Mitnehmen anbieten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "which restaurant has outdoor seats as well as delivery",
            "zh": "哪个 餐馆 有 室外 座位 并且 提供 外卖 服务",
            "de": "Welche Restaurants haben Sitzplätze draußen und liefern auch?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )"
        },
        "question": {
            "en": "what is the neighborhood of thai cafe or pizzeria juno",
            "zh": "那个 有 泰国 咖啡馆 或者 朱诺 披萨 的 区域 是 哪个 ？",
            "de": "in welcher Nachbarschaft sind das Thai Cafe oder die Pizzeria juno"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ) )"
        },
        "question": {
            "en": "what neighborhoods have restaurants that deliver",
            "zh": "哪些 社区 有 提供 外送 的 餐馆",
            "de": "In welchen Wohngegenden gibt es Restaurants, die liefern?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what restaurant is available in less than two neighborhoods",
            "zh": "哪个 餐馆 在 两个 社区 以内 提供 服务",
            "de": "Welches Restaurant gibt es in weniger als zwei Stadtteilen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )"
        },
        "question": {
            "en": "thai cafe in the neighborhood",
            "zh": "在 附近 区域 的 泰国 咖啡馆",
            "de": "Thai Cafe in der Nachbarschaft"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "what 2 dollar signs restaurant is good for groups",
            "zh": "哪些 价格 两星 的 餐厅 是 适合 集体 用餐 的 ？",
            "de": "welche 2 Dollarzeichen Restaurants sind für Gruppen geeignet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "hotel that has a price rating of 2 dollar signs",
            "zh": "有 两个 价格 符号 的 酒店",
            "de": "Hotel mit einer 2 Dollarzeichen Bewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "3 star restaurants that have outdoor seating",
            "zh": "有 室外 座位 的 三星 餐厅",
            "de": "3-Sterne-Restaurants mit Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has the largest number of restaurants",
            "zh": "哪个 社区 拥有 最多 的 餐馆",
            "de": "Welche Wohngegend hat die meisten Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurants with takeout that are group friendly",
            "zh": "既 可以 外带 又 可以 集体 聚餐 的 餐厅",
            "de": "Restaurants mit Essen zum Mitnehmen, das gruppenfreundlich ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurants for two",
            "zh": "适合 两人 进餐 的 餐馆",
            "de": "Restaurants für zwei Personen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurant that has delivery and that takes credit cards",
            "zh": "有 外卖 并且 可以 刷卡 的 餐厅",
            "de": "Restaurant das Lieferung anbietet und Kreditkarten nimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "a thai restaurant",
            "zh": "一家 泰国 餐厅",
            "de": "Ein Thai-Restaurant"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurant that is good for kids and that takes reservations",
            "zh": "可以 提前 预订 的 餐厅",
            "de": "Restaurant, das gut für Kinder ist und Reservierungen annimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurant that has takeout with credit cards",
            "zh": "有 外卖 并且 可以 刷卡 的 餐厅",
            "de": "Ein Restaurant, das Essen zum Mitnehmen anbietet und Kreditkarten akzeptiert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ) )"
        },
        "question": {
            "en": "what restaurant serves meals and accepts credit cards",
            "zh": "什么 餐厅 供应 餐点 和 接受 信用卡",
            "de": "Welches Restaurant serviert Mahlzeiten und akzeptiert Kreditkarten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurants that accept credit cards",
            "zh": "接受 信用卡 的 餐馆",
            "de": "Restaurants, die Kreditkarten akzeptieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurants which have delivery and take credit cards",
            "zh": "可以 外送 并 收卡 的 餐厅",
            "de": "Restaurants, die liefern und Kreditkarten akzeptieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )"
        },
        "question": {
            "en": "which restaurants have star ratings lower than the thai cafe",
            "zh": "哪些 餐厅 是 比 那家 泰国 小厨 评价 低 的",
            "de": "Welche Restaurants haben eine niedrigere Sternebewertung als das Thai-Café?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ) ) )"
        },
        "question": {
            "en": "what is the average price ratings of restaurants",
            "zh": "饭馆 的 平均价格 等级 是 多少 ？",
            "de": "Was ist die durchschnittliche Preisbewertung der Restaurants"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurants that can be booked in advance and that offers delivery services",
            "zh": "可以 提前 预约 并 有 外 送 的 餐厅 ·",
            "de": "Restaurants, die im Voraus gebucht werden können und einen Lieferservice anbieten."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "restaurant that takes reservations and that has delivery",
            "zh": "接受 提前 预约 还 可以 送餐 的 餐厅",
            "de": "Restaurant das Reservierungen akzeptiert und einen Lieferdienst hat"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "three star restaurants that deliver",
            "zh": "可以 送餐 的 三星级 餐厅",
            "de": "Drei Sterne Restaurants mit Lieferservice"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "what restaurant has waiter service and a 2 dollar sign rating",
            "zh": "哪家 餐厅 有 服务员 并 有 两个 美金 价格 标签 的",
            "de": "Welches Restaurant hat einen Kellnerservice und eine 2-Dollarzeichen Bewertung?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "find a thai restaurant that serves lunch",
            "zh": "找 一家 供应 午餐 的 泰国 餐厅",
            "de": "Suche ein Thai Restaurant das Mittagessen serviert"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )"
        },
        "question": {
            "en": "for which meal is rice pudding or quiche had",
            "zh": "米 布丁 或 软蛋 饼 是 给 哪种 餐种 的 ？",
            "de": "Zu welcher Mahlzeit gibt es Milchreis oder Quiche?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( string cuisine ) ) )"
        },
        "question": {
            "en": "show recipes with one cuisine",
            "zh": "哪些 菜谱 有 一样 菜 ？",
            "de": "Zeige Rezepte mit einer Küche"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "what recipe posted in 2004 calls for milk",
            "zh": "哪个 2004 年 发布 的 食谱 是 用到 牛奶 的 ？",
            "de": "Welches Rezept aus dem Jahr 2004 verlangt nach Milch?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )"
        },
        "question": {
            "en": "list the ingredients of rice pudding",
            "zh": "列出 米饭 布丁 的 成分",
            "de": "Listen Sie die Zutaten für Milchreis auf"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "which recipe was posted first",
            "zh": "哪个 食谱 是 最先 发布 的",
            "de": "Welches Rezept wurde zuerst veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe is for two meals",
            "zh": "哪个 食谱 拥有 两道 美食",
            "de": "Welches Rezept ist für zwei Mahlzeiten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "what recipes posting date is no greater than that of rice pudding",
            "zh": "哪个 食谱 的 发布 日期 没有 在 米糕 之后",
            "de": "Das Veröffentlichungsdatum von welchem Rezept ist nicht größer als das von Reispudding?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "show me recipes with a cooking time equal to the preparation time for rice pudding",
            "zh": "给 我 看看 烹饪 时间 等于 大米 布丁 准备 时间 的 食谱",
            "de": "Zeigen Sie mir Rezepte mit einer Garzeit, die der Vorbereitungszeit für Milchreis entspricht"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe requires more prep time than rice pudding",
            "zh": "什么 食谱 需要 比 米饭 布丁 更 多 的 准备 时间",
            "de": "Welches Rezept benötigt mehr Zubereitungszeit als Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipes take less or as long to prepare as rice pudding",
            "zh": "哪些 食谱 会 花费 小于 或者 等于 大米 布丁 准备 的 时长 ？",
            "de": "Welche Rezepte brauchen weniger oder gleich viel Zubereitungszeit wie Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe is for less than two people",
            "zh": "哪个 食谱 是 给 小于 2 个人 的",
            "de": "welche Rezepte sind für weniger als zwei Personen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "show recipes that requires at most the preparation time of rice pudding",
            "zh": "显示 最 多 需要 米饭 布丁 准备 时间 的 食谱",
            "de": "Zeige Rezepte, die höchstens die Zubereitungszeit von Milchreis erfordern"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "recipe with posting date 2004",
            "zh": "2004 年 发布 的 食谱",
            "de": "Rezept mit Buchungsdatum 2004"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "a recipe with milk posted in 2004",
            "zh": "有 牛奶 的 在 2004 年 发布 的 食谱",
            "de": "Ein Rezept mit Milch aus dem Jahr 2004"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "which recipes are not for lunch",
            "zh": "哪个 不是 午膳 的 食谱",
            "de": "Welche Rezepte sind nicht für Mittagessen geeignet?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many total recipes are there",
            "zh": "一共 有 多少 个 食谱",
            "de": "Wie viele Rezepte gibt es insgesamt?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string cuisine ) ) )"
        },
        "question": {
            "en": "what recipe has the most types of cuisine",
            "zh": "哪个 食谱 的 菜品 种类 最 多",
            "de": "Welches Rezept hat die meisten Arten von Küchen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipes take the same amount of time or less to cook as rice pudding",
            "zh": "什么 食谱 花费 的 时间 与 做 米糕 布丁 用 的 时间 相等 或 更少",
            "de": "Welche Rezepte brauchen die gleiche Zeit oder weniger zum Kochen als Reispudding?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which meal has least number of recipes",
            "zh": "哪 一餐 的 食谱 数量 最少",
            "de": "welche Mahlzeit hat die geringste Anzahl von Rezepten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "which lunch recipe requires milk for its preparation",
            "zh": "哪个 午餐 食谱 在 准备 时 需要 用到 牛奶",
            "de": "welches mittagsrezept benötigt milch zur zubereitung"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "what recipe is not for a lunch meal",
            "zh": "什么 食谱 不是 用于 午膳 的",
            "de": "Welches Rezept ist nicht für ein Mittagessen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find recipes that need two ingredients",
            "zh": "找到 需要 两种 食材 的 菜谱",
            "de": "Finde Rezepte, die zwei Zutaten benötigen."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipe has the shortest ingredient list",
            "zh": "哪个 菜谱 的 食材 清单 最短",
            "de": "Welches Rezept hat die kürzeste Zutatenliste"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "show me recipes that need milk and were posted in 2004",
            "zh": "给 我 看 在 2004 年 出版 的 且 需要 用到 牛奶 的 菜谱",
            "de": "Zeig mir Rezepte die Milch brauchen und in 2004 gepostet wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )"
        },
        "question": {
            "en": "what is a cuisine of rice pudding",
            "zh": "米 布丁 是 一道 什么 菜",
            "de": "Welche Kochkunst hat Milchreis als ein Gericht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes with a cooking time greater or equal to the preparation time for rice pudding",
            "zh": "给 我 展示 烹饪 时间 大于 或者 等于 米饭 布丁 的 准备 时间 的 食谱",
            "de": "Zeig mir Rezepte mit einer Kochzeit die genauso lang oder länger ist als die von Milchreis."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me a meal that has more than two recipes",
            "zh": "给 我 展示 有 超过 两个 食谱 的 餐食",
            "de": "Zeig mir ein Gericht, das mehr als zwei Rezepte hat."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "name lunch recipes",
            "zh": "给 午餐 食谱 命名",
            "de": "Nenne Mittagessen-Rezepte."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes posted before rice pudding",
            "zh": "给 我 展示 在 米饭 布丁 之前 发布 的 食谱",
            "de": "Zeig mir Rezepte die vor Reispudding gepostet wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which recipe is found in only one cuisine",
            "zh": "哪个 菜谱 是 只 在 一道 菜里 出现 过",
            "de": "Welches Rezept gibt es in nur einer Küche?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "show me recipes with fewer than two cuisines",
            "zh": "给 我 展示 少于 两个 美食 的 食谱",
            "de": "Zeige mir Rezepte mit weniger als zwei Küchen."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )"
        },
        "question": {
            "en": "ingredients not required to prepare rice pudding",
            "zh": "米 布丁 不 需要 的 食材",
            "de": "Zutaten, die nicht zur Zubereitung von Reispudding benötigt werden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what is a recipe from no more than two different cuisines",
            "zh": "什么 是 一个 来自 不多过 两种 风味 的 菜谱 ？",
            "de": "Was ist ein Rezept aus nicht mehr als zwei verschiedenen Küchen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe is for two or fewer meals",
            "zh": "什么样 的 菜谱 是 适合 两餐 或者 少于 两餐 的",
            "de": "Welches Rezept ist für Zwei oder weniger Mahlzeiten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "recipes posted before rice pudding",
            "zh": "在 米 布丁 之前 发布 的 食谱",
            "de": "Rezepte, die vor dem Reispudding eingestellt wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe can make the most meals",
            "zh": "什么 食谱 可以 做 最 多 的 饭菜",
            "de": "Welches Rezept kann die meisten Mahlzeiten machen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe can you prep in the same or more time as it takes to cook rice pudding",
            "zh": "哪 种 食谱 的 准备 时间 是 跟 米 布丁 的 烹饪 时间 是 一样 或 更长 的 ？",
            "de": "Welches Rezept kann in der gleichen oder mehr Zeit zubereitet werden, die zum Kochen von Reispudding benötigt wird?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "list the lunch recipes contains milk",
            "zh": "列出 带有 牛奶 的 午餐 食谱",
            "de": "Liste der Mittagsrezepte mit Milch"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe can you prep in the same or longer amount of time as rice pudding",
            "zh": "哪个 食谱 是 可以 在 米 布丁 的 准备 时间 或 更长 的 时间 内 准备 好 的 ？",
            "de": "Welches Rezept können Sie in der gleichen oder einer längeren Zeit wie Milchreis zubereiten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )"
        },
        "question": {
            "en": "what recipes are for the same meal as rice pudding",
            "zh": "什么 食谱 与 米饭 布丁 同 一餐",
            "de": "welche Rezepte sind für die gleiche Mahlzeit wie Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "recipes posted after 2004",
            "zh": "2004 年 后 发布 的 食谱",
            "de": "Rezepte, die nach 2004 veröffentlicht wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which meal has the least number of recipes",
            "zh": "哪 一餐 的 食谱 数量 最少",
            "de": "Welche Mahlzeit hat die geringste Anzahl an Rezepten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me meal with less than two recipes",
            "zh": "给 我 看 有 少于 两道 菜谱 的 餐食",
            "de": "Zeige mir Essen mit weniger als zwei Rezepten."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find a lunch recipe that was posted in 2004",
            "zh": "找到 2004 年 发布 的 午餐 食谱",
            "de": "Finden Sie ein Mittagsrezept, das 2004 veröffentlicht wurde."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "show recipes posted on the same date as rice pudding",
            "zh": "列出 和 米 布丁 同一天 发布 的 食谱",
            "de": "Rezepte anzeigen, die am selben Datum wie Milchreis veröffentlicht wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "what recipe posted in 2004 can make a lunch meal",
            "zh": "在 2004 年 发布 的 什么 食谱 可以 做 一顿 午餐",
            "de": "Welches Rezept das in 2004 veröffentlicht wurde eignet sich als Mittagessen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "show me recipes posted on the same day as rice pudding",
            "zh": "给 我 看 和 米 布丁 同一天 发布 的 菜谱",
            "de": "Zeige mir Rezepte, die am selben Tag wie Milchreis veröffentlicht wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipes require two or more ingredients",
            "zh": "哪些 菜谱 需要 两种 或者 更 多 的 食材 ？",
            "de": "Welche Rezepte erfordern zwei oder mehr Zutaten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "show recipes that has milk as its ingredient",
            "zh": "列出 有 牛奶 作为 材料 的 食谱",
            "de": "Zeig mir Rezepte welche Milch als Zutat haben"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "which recipes were posted before 2004",
            "zh": "哪些 食谱 是 在 2004 年 之前 发布 的",
            "de": "Welche Rezepte wurden vor 2004 veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe can be prepped in equal or less time than rice pudding",
            "zh": "哪个 菜谱 可以 用 和 米 布丁 相同 或者 更少 的 时间 来 准备 ？",
            "de": "Welches Rezept kann in gleicher oder kürzerer Zeit als Milchreis zubereitet werden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the number of ingredients for that recipe",
            "zh": "那个 食谱 有 几种 食材",
            "de": "Was ist die Anzahl der Zutaten für dieses Rezept?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )"
        },
        "question": {
            "en": "what is a meal with rice pudding as a dish",
            "zh": "米 布丁 作为 一道 菜 的 是 哪 一餐",
            "de": "Was ist eine Mahlzeit mit Milchreis als Gericht"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "what recipes require milk",
            "zh": "什么 食谱 需要 牛奶",
            "de": "Welche Rezepte benötigen Milch?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is an ingredient required by the most recipes",
            "zh": "什么 是 最 多 菜谱 中 需要 的 食材 ？",
            "de": "Welche Zutat wird für die meisten Rezepte gebraucht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipe needs longer preparation time than that of rice pudding",
            "zh": "哪个 菜谱 需要 比 米饭 布丁 长 的 准备 时间 ？",
            "de": "Welches Rezept braucht eine längere Vorbereitungszeit als die von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "average cooking time",
            "zh": "平均 烹饪 时间",
            "de": "durchschnittliche Garzeit"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipes have the same or less preparation time as rice pudding",
            "zh": "哪些 食谱 是 的 准备 时间 跟 米 布丁 是 一样 或者 更 短 的 ？",
            "de": "Welche Rezepte haben die gleiche oder eine geringere Vorbereitungszeit als Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes posted the same day as rice pudding or after",
            "zh": "给 我 看 和 米 布丁 同一天 或 之后 发布 的 菜谱",
            "de": "Welche Rezepte wurden nach oder am selben Tag wie Milchreis veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "name a recipe with a prep time no longer than the cook time for rice pudding",
            "zh": "找 一个 准备 时间 不比米 布丁 烹饪 时间 长 的 食谱",
            "de": "Nenne ein Rezept mit einer Vorbereitungszeit die nicht länger ist als die Kochzeit von Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )"
        },
        "question": {
            "en": "when is rice pudding recipe posted",
            "zh": "米 布丁 的 食谱 是 什么 时候 发布 的 ？",
            "de": "Wann wurde das Reispudding Rezept gepostet?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "a recipe which posted before 2004",
            "zh": "2004 年 之前 发布 的 食谱",
            "de": "Ein Rezept, das vor 2004 gepostet wurde"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "how long does the recipe take to cook",
            "zh": "这个 菜谱 的 烹饪 时间 有 多长 ？",
            "de": "Wie lange ist die Kochzeit dieses Rezeptes?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "find recipes that can be prepared sooner than rice pudding",
            "zh": "找到 准备 时间 比米 布丁 快 的 食谱",
            "de": "Finde Rezepte die schneller vorbereitet werden können als Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "recipes that have cooking time less than cooking time of rice pudding",
            "zh": "烹饪 时间 比 米糕 短 的 食谱",
            "de": "Rezepte, deren Garzeit kürzer ist als die von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe makes the fewest meals",
            "zh": "哪个 菜谱 做出 得 菜 最少 ？",
            "de": "Welches Rezept ergibt die wenigsten Mahlzeiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "show me recipes that require milk",
            "zh": "告诉 我 需要 牛奶 的 食谱",
            "de": "zeig mir rezepte die milch benötigen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )"
        },
        "question": {
            "en": "what recipes require the same ingredients as rice pudding",
            "zh": "什么 菜谱 需要 和 米 布丁 相同 的 食材 ？",
            "de": "Welche Rezepte benötigen die gleichen Zutaten wie Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "recipes posted in 2004 and later",
            "zh": "在 2004 年 或 之后 发布 的 菜谱",
            "de": "Rezepte aus dem Jahr 2004 und später"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "which is the recipe that was posted last",
            "zh": "哪个 是 最后 推出 的 菜谱 ？",
            "de": "Welches Rezept wurde zuletzt veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "what lunch recipes posting date is 2004",
            "zh": "哪个 午餐 食谱 是 2004 年 发布 的",
            "de": "Das Veröffentlichungsdatum von welchem Rezept wurde 2004 veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what recipes were posted before 2004",
            "zh": "哪个 食谱 是 2004 年 之前 发布 的",
            "de": "Welche Rezepte wurden vor 2004 veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "what recipes were posted after rice pudding",
            "zh": "什么 菜谱 是 在 米 布丁 之后 发布 的 ？",
            "de": "Welche Rezepte wurden nach Milchreis veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me ingredients required for fewer than two recipes",
            "zh": "哪个 原材料 被 小于 2 个 食谱 所 需要",
            "de": "zeig mir Zutaten, die für weniger als zwei Rezepte benötigt werden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipe requires two ingredients",
            "zh": "哪 种 食谱 需要 两种 食材 ？",
            "de": "Welches Rezept erfordert zwei Zutaten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is a meal with no more than two recipes",
            "zh": "哪种 餐种 是 有 两种 以下 食谱 的 ？",
            "de": "Was ist eine Mahlzeit mit nicht mehr als zwei Rezepten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipe has the least number of meals",
            "zh": "什么 食谱 是 有 最少 数量 的 餐种 的 ？",
            "de": "Welches Rezept hat die geringste Anzahl von Mahlzeiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what recipe was posted before 2004",
            "zh": "哪个 菜谱 是 在 2004 年 之前 发布 的 ？",
            "de": "Welches Rezept wurde vor 2004 veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "show me recipes posted in or before 2004",
            "zh": "给 我 看 在 2004 年 或者 之前 发布 的 菜谱",
            "de": "zeige mir Rezepte, die in oder vor 2004 veröffentlicht wurden."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many ingredients are there",
            "zh": "那里 有 多少 种食材 ？",
            "de": "Wie viele Zutaten gibt es?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( string cuisine ) ) )"
        },
        "question": {
            "en": "recipe in least cuisines",
            "zh": "在 最少 的 菜系 里 出现 的 食谱",
            "de": "Rezept in den wenigsten Küchen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )"
        },
        "question": {
            "en": "what are the ingredients of rice pudding or quiche",
            "zh": "米 布丁 和 乳蛋 饼 的 食材 是 什么 ？",
            "de": "Was sind die Zutaten für Milchreis oder Quiche"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "find a recipe that is not suitable for lunch",
            "zh": "找 一个 不 适合 午餐 的 食谱",
            "de": "Finde ein Rezept, das nicht zum Mittagessen geeignet ist"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string cuisine ) ) )"
        },
        "question": {
            "en": "which recipe falls under the most kinds of cuisine",
            "zh": "什么 食谱 是 在 最 多 的 菜系 里面 出现 的 ？",
            "de": "Welches Rezept fällt unter die meisten Arten von Küche"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "find a recipe for lunch",
            "zh": "找个 午餐 食谱",
            "de": "Finde ein Rezept für das Mittagessen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "show me recipes not posted in 2004",
            "zh": "给 我 看 不是 在 2004 年 发布 的 菜谱",
            "de": "Zeige mir Rezepte, die nicht 2004 gepostet wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "which recipe posted in 2004 needs milk for preparation",
            "zh": "哪 一个 在 2004 年 发布 的 菜谱 需要 有 牛奶 做 准备 ？",
            "de": "Welches Rezept, das 2004 gepostet wurde, braucht Milch für die Zubereitung?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "for what meals require less than two recipes",
            "zh": "什么 饭菜 需要 少于 两个 食谱",
            "de": "Für welche Mahlzeiten sind weniger als zwei Rezepte erforderlich?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "show me recipes with cooking times equal to cooking time of rice pudding",
            "zh": "给 我 看 一些 烹饪 时间 等于 米饭 布丁 烹饪 时间 的 食谱",
            "de": "Zeig mir die Rezepte mit Kochzeiten gleich zu der Kochzeit von Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "single ingredient recipe",
            "zh": "單一 材料 食譜",
            "de": "Ein-Zutat-Rezept"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what recipe was posted in either 2004 or 2010",
            "zh": "在 2004 年 或 2010 年 发布 了 什么 食谱",
            "de": "Welches Rezept wurde entweder in 2004 oder 2010 veröffentlicht"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes requiring the fewest ingredients",
            "zh": "给 我 看 需要 最少 食材 的 菜谱 。",
            "de": "Zeig mir Rezepte die die wenigsten Zutaten benötigen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe has the fewest amount of ingredients",
            "zh": "哪个 菜谱 是 有 最少 的 食材 ？",
            "de": "Welches Rezept hat die geringste Anzahl an Zutaten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me meals with two recipes",
            "zh": "给 我 看 有 两个 菜谱 的 餐点 。",
            "de": "Zeige mir Gerichte mit zwei Rezepten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "which recipe was posted the earliest",
            "zh": "哪个 食谱 是 最早 发布 的 ？",
            "de": "Welches Rezept wurde als erstes veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe is for two",
            "zh": "什么 食谱 适合 两个 人",
            "de": "Welches Rezept ist für Zwei?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )"
        },
        "question": {
            "en": "which ingredient is needed by rice pudding or quiche",
            "zh": "米 布丁 或者 乳蛋 饼 所 需要 的 食材 是 哪个 ？",
            "de": "Welche Zutat wird für Milchreis oder Quiche benötigt?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "recipe whose cooking time is not more than rice pudding",
            "zh": "烹饪 时间 不 长于 米 布丁 的 食谱",
            "de": "Welches Rezept hat eine Zubereitungsdauer, die nicht länger als die von Reispudding ist?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe prepare in less or same time to cook rice pudding",
            "zh": "哪个 食谱 的 准备 时间 是 跟 米 布丁 烹饪 时间 相同 或 更 短 的 ？",
            "de": "Welches Rezept hat weniger oder gleichviel Vorbereitungszeit wie die Kochzeit von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )"
        },
        "question": {
            "en": "what ingredients are not in the rice pudding recipe",
            "zh": "什么 食材 不 在 米 布丁 的 菜谱 里 ？",
            "de": "welche Zutaten sind nicht im Rezept für Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )"
        },
        "question": {
            "en": "tell me ingredients of rice pudding",
            "zh": "告诉 我 米饭 布丁 的 食材",
            "de": "Was sind die Zutaten von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which meal had two recipes or more",
            "zh": "哪 一餐 有 两个 食谱 或者 更 多",
            "de": "Für welche Speise wurden zwei oder mehr Rezepte verwendet?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe is found in two different meals",
            "zh": "哪 种 食谱 是 被 两种 不同 的 餐种 用到 的 ？",
            "de": "Welches Rezept findet man in Zwei unterschiedlichen Mahlzeiten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )"
        },
        "question": {
            "en": "what ingredients are in rice pudding",
            "zh": "什么 食材 在 米 布丁 里 ？",
            "de": "Welche Zutaten sind in Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "show me recipes that need milk",
            "zh": "告诉 我 需要 牛奶 的 食谱",
            "de": "zeig mir Rezepte die Milche benötigen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )"
        },
        "question": {
            "en": "what meal is rice pudding not used for",
            "zh": "什么 餐是 不用 米 布丁 的",
            "de": "Für welche Mahlzeit wird Reispudding nicht verwendet?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe takes more time to prepare than rice pudding",
            "zh": "什么 食谱 比 米饭 布丁 需要 更 多 时间 准备",
            "de": "Welches Rezept braucht mehr Zeit für die Zubereitung als Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )"
        },
        "question": {
            "en": "what ingredients does quiche or rice pudding require",
            "zh": "哪些 食材 是 做 乳蛋饼 或者 米 布丁 需要 的",
            "de": "Welche Zutaten benötigt Quiche oder Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many total recipes are listed",
            "zh": "总共 有 多少 食谱 被 列出 了",
            "de": "Wie viele Rezepte sind insgesamt aufgelistet?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "what recipe was posted after or on the same day as rice pudding",
            "zh": "什么 食谱 是 在 米饭 布丁 之后 或 同一天 发布 的",
            "de": "Welches Rezept wurde nach oder am selben Tag wie Milchreis veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes that take the same amount of time or more to cook as rice pudding",
            "zh": "告诉 我 与 做 米 布丁 需要 花费 相同 或 更 多 时间 的 食谱",
            "de": "Zeig mir Rezepte deren Zubereitungszeit mindestens genauso lange dauert wie die von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "which recipes were posted before 2004 or 2010",
            "zh": "哪些 食谱 在 2004 年 或 2010 年 之前 发布",
            "de": "Welche Rezepte wurden vor 2004 oder 2010 veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "find the recipes for lunch",
            "zh": "找到 午餐 食谱",
            "de": "Finde die Rezepte für das Mittagessen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes that use less than two ingredients",
            "zh": "展示 给 我 用到 的 原料 少于 两种 的 食谱",
            "de": "Zeige mir Rezepte, die weniger als zwei Zutaten enthalten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes that require two ingredients",
            "zh": "给 我 看 需要 两种 食材 的 菜谱",
            "de": "Zeig mir Rezepte die Zwei Zutaten benötigen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )"
        },
        "question": {
            "en": "what ingredients do lunch recipes need",
            "zh": "午餐 菜谱 需要 什么 食材 ？",
            "de": "Welche Zutaten brauchen Mittagsrezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes that involve two or more ingredients",
            "zh": "给 我 看 包括 了 两种 或 更 多 食材 的 菜谱",
            "de": "Zeig mir rezepte mit zwei oder mehr Zutaten."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )"
        },
        "question": {
            "en": "show me recipes requiring milk or spinach",
            "zh": "给 我 看 需要 牛奶 或者 菠菜 的 菜谱",
            "de": "Zeige mir Rezepte, die Milch oder Spinat benötigen."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.meal.lunch en.meal.dinner ) )"
        },
        "question": {
            "en": "either lunch or dinner",
            "zh": "午餐 或 晚餐",
            "de": "entweder Mittag- oder Abendessen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )"
        },
        "question": {
            "en": "which recipe requires milk or spinach",
            "zh": "哪个 菜谱 需要 牛奶 或者 菠菜 ？",
            "de": "Welches Rezept erfordert Milch oder Spinat"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many recipes are there",
            "zh": "那里 有 多少 个 菜谱 ？",
            "de": "Wie viele Rezepte gibt es?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is a meal for which there are fewer than two recipes",
            "zh": "有 两种 或 更少 菜谱 的 餐食 是 什么 ？",
            "de": "Was ist eine Mahlzeit, für die es weniger als zwei Rezepte gibt"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe cooks in more or the same time as rice pudding takes to prep",
            "zh": "哪 一种 做法 烹制 的 时间 多于 或 等于 大米 布丁 的 准备 时间 ？",
            "de": "Welches Rezept kocht so lange oder länger als Reispudding in der Zubereitung?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )"
        },
        "question": {
            "en": "what is a meal that incorporates rice pudding",
            "zh": "什么 餐食 结合 了 米 布丁 ？",
            "de": "Was ist eine Mahlzeit, die Milchreis enthält"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "what recipe makes a non lunch meal",
            "zh": "什么 菜谱 可以 做 一道 非 午餐 餐食 ？",
            "de": "Welches Rezept bereitet eine Mahlzeit vor die keine Mittagsmahlzeit ist"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "name a recipe which was posted on or later than the posting date of the rice pudding recipe",
            "zh": "给 我 说 一个 发布 日期 和 米 布丁 菜谱 的 发布 日期 相同 或者 更晚 的 菜谱",
            "de": "Nenne ein Rezept, das am selben oder an einem späteren Tag als das Veröffentlichungsdatum von Milchreis veröffentlicht wurde"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "which recipe has the least preparation time",
            "zh": "哪个 食谱 的 准备 时间 是 最 短 的 ？",
            "de": "Welches Rezept hat die geringste Vorbereitungszeit"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "recipe cooked in less time than rice pudding preparation",
            "zh": "一个 烹饪 时间 比 米饭 布丁 准备 时间 更 短 的 食谱",
            "de": "Rezept, das in weniger Zeit als der Zubereitungszeit von Reispudding gekocht wird"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "show me recipes posted in 2004",
            "zh": "给 我 看 在 2004 年 发布 的 菜谱",
            "de": "zeige mir Rezepte aus dem Jahr 2004"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )"
        },
        "question": {
            "en": "recipe of cuisine of rice pudding",
            "zh": "米 布丁 菜肴 的 菜谱",
            "de": "Rezept der Küche von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "which meals are recipes posted in 2004 for",
            "zh": "2004 年 发布 的 食谱 是 给 哪些 餐种 的 ？",
            "de": "Für welche Mahlzeiten sind Rezepte die in 2004 eingestellt wurden?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes designed for two meals",
            "zh": "给 我 看 为了 两顿 餐食 而 设计 的 菜谱",
            "de": "Welche Rezepte wurden für Zwei Mahlzeiten entworfen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "show me recipes that requires the most time to prepare the dish",
            "zh": "给 我 展示 需要 准备 时间 最长 的 食谱",
            "de": "Zeige mir Rezepte, die die meiste Zeit zum Zubereiten der Speise benötigen."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find recipes for all kinds of meals",
            "zh": "找出 可以 用 在 所有 餐种 的 食谱",
            "de": "Finde Rezepte für alle Arten von Mahlzeiten."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes that take less time to cook than it takes to prepare rice pudding",
            "zh": "给 我 展示 烹饪 时间 少于 米饭 布丁 准备 时间 的 食谱",
            "de": "Zeige mir Rezepte, die weniger Zeit zum Kochen benötigen als es dauert, um Reispudding zuzubereiten."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "show me recipes that were not posted in 2004",
            "zh": "给 我 展示 不是 在 2004 年 发布 的 食谱",
            "de": "zeige mir Rezepte, die im Jahr 2004 nicht gepostet wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipes can be used for most number of meals",
            "zh": "哪些 食谱 可 用于 大多数 餐食",
            "de": "Welche Rezepte kann man in den meisten Mahlzeiten benutzen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "a recipe for a meal other than lunch",
            "zh": "给 除了 午餐 之外 的 餐种 用 的 一个 食谱",
            "de": "ein Rezept für eine andere Mahlzeit als das Mittagessen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipes preparation time is no more than the preparation time of rice pudding",
            "zh": "什么 食谱 准备 时间 不 超过 米饭 布丁 的 准备 时间",
            "de": "Welches Rezept benötigt nicht mehr Vorbereitungszeit als Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me meals with two or fewer recipes",
            "zh": "给 我 看 有 两道 或 更少 菜谱 的 餐食",
            "de": "zeig mir Mahlzeiten mit zwei oder weniger Rezepten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what is a recipe from fewer than two cuisines",
            "zh": "少于 两种 菜肴 的 食谱 是 什么 ？",
            "de": "Was ist ein Rezept aus weniger als zwei Küchen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "show me recipes that fall under two cuisines or less",
            "zh": "给 我 看 少于 两种 菜肴 的 食谱 ？",
            "de": "Zeige mir Rezepte welche unter zwei oder weniger Küchen fallen."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipes require more than two ingredients",
            "zh": "哪些 菜谱 需要 两种 以上 的 食材 ？",
            "de": "Welche Rezepte erfordern mehr als zwei Zutaten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "recipe with only one ingredient",
            "zh": "只有 一种 食材 的 菜谱",
            "de": "Rezept mit nur einer Zutat"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )"
        },
        "question": {
            "en": "which recipes require milk or spinach",
            "zh": "哪些 食谱 需要 牛奶 或 菠菜",
            "de": "Welche Rezepte benötigen Milch oder Spinat"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the most commonly used ingredient",
            "zh": "什么 是 最 常用 的 配料",
            "de": "Was ist die am häufigsten verwendete Zutat"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what recipes posting date is in 2004",
            "zh": "哪些 菜谱 是 2004 年 发布 的",
            "de": "welches Rezept wurde vor 2004 veröffentlicht"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipes cooking time is longer than that of rice pudding",
            "zh": "哪个 食谱 的 烹饪 时间 是 比米 布丁 长 的 ？",
            "de": "Welches Rezept hat eine längere Kochzeit als die von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "for what meals share two or more recipes",
            "zh": "什么 餐点 分享 两个 或 更 多 的 菜谱 ？",
            "de": "für welche Mahlzeiten teilen sich zwei oder mehr Rezepte"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what meal has at least two recipes for it",
            "zh": "什么 餐点 包含 有 至少 两个 菜谱 ？",
            "de": "Welche Mahlzeit hat mindestens Zwei Rezepte enthalten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which food item is needed in two recipes or more",
            "zh": "哪种 食材 在 两个 或 以上 菜谱 中 需要 用到",
            "de": "Welche Essenzutat wird in zwei oder mehr Rezepten gebraucht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )"
        },
        "question": {
            "en": "show recipes for the meal as the same for rice pudding",
            "zh": "列出 跟 米 布丁 用 在 同 一种 餐种 的 食谱 。",
            "de": "zeige Rezepte für die gleiche Mahlzeit wie Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes with cooking time equal to or greater than cooking time for rice pudding",
            "zh": "给 我 指出 烹饪 时间 跟 米 布丁 一样 或 更长 的 食谱 。",
            "de": "Zeig mir Rezepte mit einer Kochzeit gleich oder größer als die Kochzeit für Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "what recipe has the latest date posted",
            "zh": "哪个 菜谱 是 最新 发布 的",
            "de": "Welches Rezept wurde zuletzt veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipe needs a minimum of two ingredients",
            "zh": "哪个 食谱 至少 需要 两种 食材 ？",
            "de": "Welches Rezept benötigt mindestens zwei Zutaten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes that can be used for two meals",
            "zh": "展示 给 我 可以 做 两顿 饭 的 食谱",
            "de": "Zeig mir Rezepte die für zwei Gerichte genutzt werden können?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "what recipe was posted last",
            "zh": "最后 发布 了 什么 食谱",
            "de": "Welches Rezept wurde zuletzt veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes posted after 2004",
            "zh": "给 我 看看 2004 之后 推出 的 菜谱 吧 ？",
            "de": "Zeig mir Rezepte die nach 2004 gepostet wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "which recipe takes as much time to prepare as rice pudding",
            "zh": "哪个 菜谱 需要 和 米饭 布丁 一样 的 准备 时间 ？",
            "de": "Welches Rezept braucht genauso viel Zeit zur Vorbereitung wie Reispudding?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.meal.lunch en.meal.dinner ) )"
        },
        "question": {
            "en": "show me recipes for lunch or dinner",
            "zh": "给 我 看 午餐 或 晚餐 的 食谱",
            "de": "Zeig mir Rezepte für Mittagessen oder Abendessen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )"
        },
        "question": {
            "en": "what is the preparation of rice pudding",
            "zh": "米 布丁 的 准备 步骤 是 什么",
            "de": "Was ist die Zubereitung von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "what is the cooking time of recipe",
            "zh": "食谱 的 烹饪 时长 是 多少",
            "de": "Was ist die Kochzeit des Rezepts"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )"
        },
        "question": {
            "en": "ingredient in rice pudding and quiche",
            "zh": "乳蛋 饼 和 米 布丁 的 原材料",
            "de": "Zutat in Milchreis und Quiche"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what is a recipe posted later than 2004",
            "zh": "晚于 2004 推出 的 菜谱 是 什么 ？",
            "de": "was ist ein rezept das nach 2004 geposted wurde"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what meal has less than two recipes for it",
            "zh": "哪餐 有 少于 两个 食谱",
            "de": "Für welche Mahlzeit gibt es weniger als zwei Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )"
        },
        "question": {
            "en": "when was the rice pudding recipe posted",
            "zh": "米 布丁 的 食谱 时 什么 时候 发布 的",
            "de": "Wann wurde das Milchreis-Rezept veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "show me a recipe that has a posting date of at least 2004",
            "zh": "展示 给 我 至少 在 2004 年 发布 的 一个 食谱",
            "de": "Zeig mir ein Rezept mit einem Veröffentlichungsdatum von mindestens 2004"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes good for at least two meals",
            "zh": "展示 给 我 至少 适合 两餐 的 食谱",
            "de": "Zeig mir Rezepte, die für mindestens zwei Mahlzeiten gut sind"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "show me recipes posted in 2004",
            "zh": "给 我 看看 那些 在 2004 推出 的 菜谱 吧 ？",
            "de": "Zeig mir Rezepte, die 2004 gepostet wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what recipe has at the most no more than two cuisines",
            "zh": "哪个 菜谱 最多 有 不 超过 两种 风味 ？",
            "de": "welches rezept hat höchstens zwei küchen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe calls for two or less ingredients",
            "zh": "那个 菜谱 需要 两种 或 更 少些 用料 ？",
            "de": "Welches Rezept braucht zwei oder weniger Zutaten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me the recipes need more than one ingredient",
            "zh": "帮 我 找到 需要 多于 一种 食材 的 食谱",
            "de": "Finde Rezepte, die mehr als eine Zutat brauchen."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "show me recipes not posted in 2004",
            "zh": "展示 给 我 不 在 2004 年 发布 的 食谱",
            "de": "Zeig mir Rezepte, die nicht 2004 gepostet werden"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) )"
        },
        "question": {
            "en": "Kobe Bryant playing position",
            "zh": "科比 布莱恩特 打 的 位置",
            "de": "Kobe Bryant spielt Position"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls does Kobe Bryant average when he's played at least 3 games in a season",
            "zh": "科比 布莱恩特 在 至少 出赛 三场 的 赛季 平均 有 多少 犯规",
            "de": "Wie viele Fouls macht Kobe Bryant im Durchschnitt wenn er mindestens 3 Spiele in einer Saison gespielt hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name of a player with no more rebounds each season than Kobe Bryant",
            "zh": "说出 在 每个 赛季 篮板球 不比 科比 布莱恩特 多 的 一个 球员",
            "de": "Name eines Spielers, der nicht mehr Rebounds pro Saison hat als Kobe Bryant."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has a maximum of 3 fouls",
            "zh": "哪个 球员 最多 有 3 次 犯规",
            "de": "Welcher Spieler hat ein Maximum von 3 Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "for season 2004 note the number of total assists of Kobe Bryant",
            "zh": "记录 科比 布莱恩 2004 年 的 总共 助攻 数",
            "de": "Für die Saison 2004 ist die Anzahl der Assists von Kobe Bryant anzugeben"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds does Kobe Bryant make per season",
            "zh": "科比 布莱恩特 每 赛季 有 多少 篮板球",
            "de": "Wie viele Rebounds macht Kobe Bryant pro Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player scored 3 or less points during a season",
            "zh": "哪个 球员 在 一个 赛季 中得 了 三分 或者 更 少",
            "de": "Welcher Spieler erzielte 3 oder weniger Punkte während einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "Who's got the least turnovers so far this season",
            "zh": "本赛季 迄今为止 谁 失误 最少",
            "de": "Wer hat bisher die wenigsten Ballverluste diese Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "note the players whose total number of rebounds in any one given season is more than 3",
            "zh": "记录 在 任何 赛季 总 篮板球 次数 多于 3 次 的 球员",
            "de": "Beachten Sie die Spieler, deren Gesamtzahl der Rebounds in einer bestimmten Saison mehr als 3 beträgt."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many turnovers has Kobe Bryant had",
            "zh": "科比 布莱恩特 有 多少 失误",
            "de": "Wie viele Ballverluste hatte Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks does Kobe Bryant average in a season with 3 points",
            "zh": "科比 布莱恩特 在 得 了 三分 的 赛季 里 有 几个 盖帽",
            "de": "Wie viele Blocks macht Kobe Bryant im Schnitt in einer Saison mit drei Punkten?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players have the points same as Kobe Bryant's highest points",
            "zh": "哪个 球员 跟 科比 布莱恩 有 一样 的 最高 得分 ？",
            "de": "Welche Spieler haben die gleichen Punkte wie Kobe Bryants höchste Punktzahl?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has fewer turnovers than Kobe Bryant in a season",
            "zh": "哪个 球员 在 一个 赛季 有 比 科比 布莱恩特 更少 的 失误",
            "de": "Welcher Spieler hat weniger Ballverluste als Kobe Bryant in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds does Kobe Bryant have each season as a Laker",
            "zh": "科比 布莱恩 为 湖人 效力 的 时候 平均 每个 赛季 有 多少 个 篮板球 ？",
            "de": "Wie viele Rebounds hat Kobe Bryant jede Saison als Spieler der Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player who has had fewer steals this season than Kobe Bryant",
            "zh": "说出 一个 比 科比 布莱恩特 抢断 次数 少 的 球员",
            "de": "Nenne einen Spieler, der in dieser Saison weniger Steals hatte als Kobe Bryant."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has had the fewest fouls",
            "zh": "哪个 球员 的 犯规 次数 最少",
            "de": "Welcher Spieler beging die wenigsten Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name the other players in Kobe Bryant's team",
            "zh": "说出 在 科比 布莱恩特 队伍 中 的 其他 球员",
            "de": "Nenne die anderen Spieler in Kobe Bryants Mannschaft."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position is Kobe Bryant",
            "zh": "科比 布莱恩特 打 什么 位置",
            "de": "Auf welcher Position spielt Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points does Kobe Bryant get per season",
            "zh": "科比 布莱恩特 每 赛季 得 多少 分",
            "de": "Wie viele Punkte erzielt Kobe Bryant pro Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who has maximum number of teams",
            "zh": "有 （ 效力 过 ） 最 多 球队 的 球员 。",
            "de": "Ein Spieler, der die höchste Anzahl an Teams hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists were made by Kobe Bryant over a season in which he made 3 fouls",
            "zh": "科比 布莱恩特 在 有 3 个 犯规 的 赛季 有 多少 个 助攻",
            "de": "Wie viele Vorlagen machte Kobe Bryant in jener Saison, in der er drei Fouls beging?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "does Kobe Bryant have more fouls or rebounds per season",
            "zh": "科比 布莱恩特 场均 犯规 多 还是 篮板 多",
            "de": "Macht Kobe Bryant mehr Fouls oder Rebounds pro Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "Kobe Bryant had 3 rebounds",
            "zh": "科比 布莱恩特 有 3 个 篮板",
            "de": "Kobe Bryant hatte drei Rebounds"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the number of the player in this position",
            "zh": "这个 位置 的 球员 号码 是 多少 ？",
            "de": "Wie lautet die Nummer des Spielers in dieser Position?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has more rebounds than Kobe Bryant",
            "zh": "谁 比 科比 布莱恩特 的 篮板 多",
            "de": "Wer hat mehr Rebounds als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "in the season in which he had 3 turnovers find the number of point for which Kobe Bryant was responsible",
            "zh": "在 他 有 三次 失误 的 赛季 中 找到 科比 布莱恩特 贡献 的 分数",
            "de": "in der Saison, in der er 3 Umsätze hatte, finden Sie die Anzahl der Punkte, für die Kobe Bryant verantwortlich war."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who else plays the same position as Kobe Bryant",
            "zh": "谁 跟 科比 布莱恩特 打球 的 位置 一样",
            "de": "wer spielte sonst noch in der gleichen Position wie Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had the fewest blocks in a season",
            "zh": "哪个 球员 在 一个 赛季 的 盖帽 数 最少",
            "de": "welcher Spieler hatte die wenigsten Blöcke in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who played the fewest games in a season",
            "zh": "谁 在 一个 赛季 里 打 了 最少 的 比赛 ？",
            "de": "Wer hat die wenigsten Spiele in einer Saison gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had at least three points during the season",
            "zh": "哪个 球员 在 这个 赛季 得 了 至少 三分",
            "de": "welcher Spieler hatte während der Saison mindestens drei Punkte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find the player responsible for the biggest number of steals in any one season",
            "zh": "找到 那个 在 任意 赛季 贡献 了 最 多 抢断 的 球员 。",
            "de": "Finde den Spieler verantwortlich für die höchste Anzahl von steals in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks Kobe Bryant made over a season",
            "zh": "科比 布莱恩特 在 一个 赛季 中 打出 了 多少 盖帽",
            "de": "wie viele Block hatte Kobe Bryant im laufe einer Season"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "during the season in which Kobe Bryant had 3 turnovers how many blocks was responsible for",
            "zh": "在 这个 赛季 中 科比 布莱恩特 有 3 次 失误 的 比赛 中 完成 了 多少 次 盖帽",
            "de": "In der Saison in der Kobe 3 turnovers hatte, für wie viele blocks war er auch verantwortlich?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant make in an all season total of 3 games",
            "zh": "科比 - 布莱恩特 在 整个 赛季 的 总共 3 场 比赛 中有 多少 失误",
            "de": "Wie viele Umsätze erzielte Kobe Bryant in der gesamten Saison in insgesamt 3 Spielen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player that scored three or more points per game last season",
            "zh": "上赛季 每场 比赛 得分 超过 三分 的 球员",
            "de": "Welcher Spieler hat 3 oder mehr Punkte pro Spiel letzte Saison gemacht?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with least number of blocks over a season",
            "zh": "整个 赛季 盖帽 最少 的 球员",
            "de": "Spieler mit den wenigsten Blocks in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had less than 3 fouls",
            "zh": "什么 球员 犯规 少于 3 次",
            "de": "Welcher Spieler hatte weniger als 3 Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "Who's got the fewest points in a year",
            "zh": "一年 中 谁 获得 的 分数 最少",
            "de": "Wer hat die wenigsten Punkte in einem Jahr?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "number of played games over a season of player Kobe Bryant who has 3 steals over a season",
            "zh": "在 一个 赛季 中有 3 次 抢断 的 球员 科比 · 布莱恩特 上场比赛 的 数量",
            "de": "Anzahl der gespielten Spiele in einer Saison des Spielers Kobe Bryant, der in einer Saison drei Diebstähle getätigt hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points has Kobe Bryant scored this season",
            "zh": "科比 本赛季 得分 多少 分",
            "de": "Wie viele Punkte hat Kobe Bryant in dieser Saison erzielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players who made less than 4 steals",
            "zh": "取得 四个 以下 抢断 的 球员",
            "de": "Spieler, die weniger als 4 Steals gemacht haben"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )"
        },
        "question": {
            "en": "how many seasons has Kobe Bryant been starting point guard",
            "zh": "多少 个 赛季 科比 布莱恩特 一直 是 控球 后卫",
            "de": "wie viele Saisons hat Kobe Bryant als Point Guard von Beginn an gespielt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )"
        },
        "question": {
            "en": "during the season in which he scored 3 assists what position was Kobe Bryant playing",
            "zh": "在 他 得 了 三次 助攻 的 赛季 中 科比 布莱恩特 打 的 是 什么 位置",
            "de": "während der Saison in der er 3 Assists hatte, auf welcher Position spielte Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls does Kobe Bryant over all seasons",
            "zh": "科比 布莱恩特 在 整个 赛季 犯规 多少 次",
            "de": "Wie viele Fouls macht Kobe Bryant über die ganze Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has played as any fouls as Kobe Bryant",
            "zh": "哪个 球员 和 科比 布莱恩特 有 同样 次数 的 犯规",
            "de": "Welcher Spieler hat so viele Fouls wie Kobe Bryant begangen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe have this season",
            "zh": "本赛季 科比 有 多少 次 助攻",
            "de": "wie viele Assists hatte Kobe in dieser Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position does Kobe Bryant play who had three fouls in the season",
            "zh": "在 这个 赛季 中有 三次 犯规 的 科比 布莱恩特 打 什么 位置",
            "de": "Auf welcher Position spielt Kobe Bryant, der in dieser Saison drei Fouls hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with more than three played games",
            "zh": "说出 一个 出赛 多于 三场 的 球员",
            "de": "Nennen Sie einen Spieler mit mehr als drei gespielten Spielen"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has less rebounds than Kobe Bryant",
            "zh": "哪个 球员 是 比 科比 布莱恩 取得 更少 的 篮板球 的 ？",
            "de": "Welcher Spieler hat weniger Rebounds als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "during season 2004 note the total number of points scored by Kobe Bryant",
            "zh": "记录 2004 年 赛季 科比 布莱恩 取得 的 分数",
            "de": "Notiere alle gemachten Punkte von Kobe Bryant während der Saison 2004"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant have when his all season steals equalled 3",
            "zh": "科比 布莱恩 在 全 赛季 拿到 三个 抢断 的 时候 他 的 失误 次数 是 多少",
            "de": "Wie viele Turnovers hatte Kobe Bryant als seine Gesamtsaison Steals 3 betrugen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had did not have 3 turnovers",
            "zh": "有 哪个 球员 是 没有 三个 失误 的 ？",
            "de": "Welcher Spieler hatte keine 3 Turnovers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player played less than three games",
            "zh": "哪位 球员 打 了 不到 三场 比赛",
            "de": "Welcher Spieler hat weniger als drei Spiele gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games in a season did Kobe Bryant play where he had 3 fouls",
            "zh": "科比 布莱恩 拿 了 三次 犯规 的 时候 ， 他 在 那个 赛季 打 了 多少 场球 ？",
            "de": "Wie viele Spiele in einer Saison hat Kobe Bryant mit 3 Fouls gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player scored more than 3 points",
            "zh": "那个 球员 得 了 不止 三分 ？",
            "de": "Welcher Spieler erzielte mehr als drei Punkte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe Bryant have in 2004",
            "zh": "科比 布莱恩特 在 2004 年 有 多少 个 抢断 ？",
            "de": "Wie viele Steals hatte Kobe Bryant im Jahr 2004?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has less than 3 assists",
            "zh": "哪个 球员 有 少于 三个 助攻 ？",
            "de": "Welcher Spieler hat weniger als 3 Vorlagen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had less than 3 fouls",
            "zh": "谁 的 犯规 少于 3 次",
            "de": "Wer hatte weniger als drei Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players have more than 3 turnovers over all seasons",
            "zh": "哪个 球员 在 所有 赛季 中有 过 三次 以上 的 失误 。",
            "de": "Welche Spieler haben über alle Saisons hinweg mehr als drei Turnover?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player does not have 3 assists",
            "zh": "哪位 球员 没有 3 次 助攻",
            "de": "Welcher Spieler hat nicht drei Vorlagen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had played more fouls than Kobe Bryant",
            "zh": "哪个 球员 的 犯规 比 科比 布莱恩特 多",
            "de": "Welcher Spieler hat mehr Fouls begangen als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players have no more than three assists over a season",
            "zh": "哪些 球员 在 一个 赛季 有 不 多于 三次 的 助攻",
            "de": "Welche Spieler haben nicht mehr als drei Vorlagen in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has not played 3 fouls",
            "zh": "哪个 球员 的 犯规 不到 3 个",
            "de": "Welcher Spieler hat keine drei Fouls begangen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals does Kobe Bryant get in a season",
            "zh": "科比 布莱恩特 一个 赛季 有 多少 抢断",
            "de": "Wie viele Steals bekommt Kobe Bryant in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players score at least 3 points per season",
            "zh": "哪个 球员 每个 赛季 至少 得 3 分",
            "de": "Welche Spieler machen mindestens 3 Punkte pro Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "in how many games has Kobe Bryant made 3 blocks",
            "zh": "科比 布莱恩特 有 3 个 盖帽 的 比赛 有 多少 场",
            "de": "In wie vielen Spielen hat Kobe Bryant drei Blocks gemacht?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "fouls by Kobe Bryant over all seasons with 3 games played",
            "zh": "科比 布莱恩特 打 过 超过 3 场 比赛 的 所有 赛季 有 多少 犯规",
            "de": "Fauls von Kobe Bryant in allen Saisons bei drei gespielten Spielen"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )"
        },
        "question": {
            "en": "which was the season Kobe Bryant made 3 steals",
            "zh": "科比 布莱恩特 在 哪个 赛季 有 3 个 抢断",
            "de": "In welcher Saison macht Kobe Bryant drei Steals?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "a player that has played for no more than two teams",
            "zh": "为 不 超过 两个 球队 效力 过 的 球员",
            "de": "Ein Spieler, der fuer nicht mehr als zwei Mannschaften gespielt hat."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games did Kobe Bryant play as point guart during a season",
            "zh": "科比 布莱恩特 在 一个 赛季 中 作为 控球 后卫 打 了 多少 场 比赛",
            "de": "Wie viele Spiele hat Kobe Bryant als point guard in einer Saison gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team did Kobe Bryant have 3 fouls for",
            "zh": "Kobe Bryant 在 哪个 队有 过 三次 犯规 ？",
            "de": "Bei welcher Mannschaft hatte Kobe Bryant 3 fouls gemacht?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has the record for fewest steals in a season",
            "zh": "谁 有 在 一个 赛季 里 取得 最少 抢断 的 记录 ？",
            "de": "Wer hält den Rekord für die wenigstens Steals in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has most all season points",
            "zh": "哪个 球员 有 最 多 的 全 赛季 得分 ？",
            "de": "Welcher Spieler hat die meisten Saison Punkte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player equal or more assists than Kobe Bryant",
            "zh": "哪个 球员 取得 了 跟 科比 布莱恩 一样 或 更 多 的 助攻 ？",
            "de": "Welcher Spieler hat genauso viele oder mehr Vorlagen als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had more than 3 turnovers",
            "zh": "谁 已有 超过 三个 丢球 ？",
            "de": "Wer hatte mehr als 3 Turnovers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games did Kobe Bryant get 3 fouls in",
            "zh": "科比 布莱恩 在 多少 个 比赛 里面 出现 了 三次 犯规 ？",
            "de": "In wie vielen Spielen bekam Kobe Bryant 3 Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists does Kobe Bryant usually make in a season after he's made at least 3",
            "zh": "当有 过 三个 助攻 后 ， Kobe Bryant 通常 在 一个 赛季 里 能 有 多少 个 助攻 ？",
            "de": "Wie viele Vorlagen macht Kobe Bryant üblicherweise in einer Saison nachdem er wenigstens drei gemacht hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has made the least number of blocks",
            "zh": "哪个 球员 的 盖帽 数量 最少",
            "de": "Welcher Spieler machte die niedrigste Nummer an Blocks?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find players with assist scores over any given season that tally more than 3",
            "zh": "在 任何 特定 赛季 中 找到 助攻 分数 超过 3 分 的 球员",
            "de": "Finden Sie die Spieler, deren Anzahl an Assists ueber egal welche Saison mehr als drei betrug."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had at least 3 turnovers in a season",
            "zh": "哪个 球员 在 一个 赛季 中 至少 有 3 次 失误",
            "de": "welcher Spieler hatte mindestens 3 Umsätze in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers in the season did Kobe Bryant have for the Lakers",
            "zh": "在 科比 布莱恩特 为 湖人队 效力 的 赛季 有 多少 次 失误 ？",
            "de": "wie viele Umsätze in der Saison hatte Kobe Bryant für die Lakers"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position did Kobe Bryant play when he had 3 fouls",
            "zh": "科比 布莱恩 取得 三次 犯规 的 时候 他 在 打 哪个 位置 ？",
            "de": "welche Position spielte Kobe Bryant, als er 3 Fouls hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "number of turnovers over a season of player Kobe Bryant who has assists over a season",
            "zh": "科比 布莱恩 有 助攻 的 赛季 里面 有 多少 次 失误 ？",
            "de": "Anzahl der Umsätze in einer Saison des Spielers Kobe Bryant, der in einer Saison Vorlagen abgegeben hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant have when he had 3 blocks",
            "zh": "科比 布莱恩特 有 3 次 盖帽 时 ， 有 多少 次 失误 ？",
            "de": "Wie viele Ballverluste hatte Kobe Bryant, als er drei Blocks hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe Bryant make in 2004",
            "zh": "科比 布莱恩 在 2004 年 取得 了 多少 分 ？",
            "de": "Wie viele Punkte erzielte Kobe Bryant 2004?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players played less games than Kobe Bryant over a season",
            "zh": "哪个 球员 在 一个 赛季 里 打 的 比赛 少于 Kobe Bryant 的 ？",
            "de": "Welche Spieler spielten weniger Spiele als Kobe Bryant innerhalb einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players all season blocks were no less than 3",
            "zh": "所有 赛季 盖帽 次数 不少 于 3 次 的 运动员 。",
            "de": "Welche Spieler hatte weniger als drei Blocks während der gesamten Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has more or less than 3 all season rebounds",
            "zh": "所有 赛季 篮板 次数 少于 或 多于 3 次 的 运动员 。",
            "de": "Welcher Spieler hatte mehr oder weniger als drei Rebounds in der gesamten Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players played in 2004 or 2010",
            "zh": "哪个 球员 是 在 2004 年 或 2010 年 比赛 的 ？",
            "de": "Welche Spieler spielten 2004 oder 2010?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who has played minimum 3 games over a season",
            "zh": "整个 赛季 至少 上场 3 次 的 运动员 。",
            "de": "Ein Spieler, der minimum drei Spiele in einer Saison spielte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has been a part of the most teams",
            "zh": "哪个 球员 为 最 多 球队 效力 过 ？",
            "de": "Welcher Spieler gehörte zu den meisten Teams?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "find the number of points acquired by Kobe Bryant over the entire season in which his number of fouls was 3",
            "zh": "找到 科比 布莱恩 出现 三次 犯规 的 赛季 里 取得 的 得分",
            "de": "Finden Sie die Anzahl der Punkte, die Kobe Bryant während der gesamten Saison, in der er 3 Fouls begangen hat, gesammelt hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has the same number of rebounds as Kobe Bryant",
            "zh": "谁 跟 科比 布莱恩 取得 了 同样 数量 的 篮板球 ？",
            "de": "Wer hat die gleiche Anzahl an Rebounds wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games Kobe Bryant played in the season in which he made 3 assists",
            "zh": "科比 布莱恩 在 他 取得 了 三次 助攻 的 赛季 里 打 了 多少 场 比赛 ？",
            "de": "Wie viele Spiele hat Kobe Bryant in der Saison gespielt, in der er drei Vorlagen abgegeben hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )"
        },
        "question": {
            "en": "what teams did Kobe Bryant play on as point guard",
            "zh": "科比 布莱恩 在 哪个 队伍 里 打 控球 后卫 ？",
            "de": "In welchen Mannschaften spielte Kobe Bryant als Point Guard?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has the minimum number of fouls of Kobe Bryant",
            "zh": "哪个 球员 有 跟 科比 布莱恩特 一样 最少 次数 的 犯规",
            "de": "Welcher Spieler hat die wenigsten Fouls von Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds did Kobe Bryant who had three steals have",
            "zh": "有 三次 抢断 的 科比 - 布莱恩特 有 多少 篮板球",
            "de": "Wie viele Rebounds machte Kobe Bryant, der drei Steals hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )"
        },
        "question": {
            "en": "what season did Kobe Bryant have 3 steals",
            "zh": "什么 赛季 科比 有 3 次 抢断",
            "de": "In welcher Saison hatte Kobe Bryant drei Steals?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "number of assists over a season of player Kobe Bryant with 3 rebounds over a season",
            "zh": "科比 布莱恩特 在 有 三个 篮板球 的 赛季 总共 助攻 了 多少 次",
            "de": "Anzahl der Assists in einer Saison von Kobe Bryant mit 3 Rebounds in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who has less than 3 blocks over a season",
            "zh": "一个 赛季 少于 3 个 盖帽 的 球员",
            "de": "Spieler, der weniger als drei Blocks innerhalb einer Saison hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had the least assists",
            "zh": "谁 有 最少 的 助攻 数",
            "de": "Wer hatte die wenigsten Vorlagen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has no less than 3 all season steals",
            "zh": "哪个 球员 全 赛季 至少 有 3 个 抢断",
            "de": "Welcher Spieler hatte nicht weniger als drei Steals in der ganzen Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points Kobe Bryant made over a season in which he made 3 rebounds",
            "zh": "科比 布莱恩 在 他 取得 3 个 篮板球 的 赛季 里 取得 了 多少 分 ？",
            "de": "Wie viele Punkte machte Kobe Bryant innerhalb einer Saison, in der er drei Rebounds machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )"
        },
        "question": {
            "en": "in which season did Kobe Bryant play in point guard position",
            "zh": "科比 布莱恩 在 哪个 赛季 是 打 控球 后卫 的 ？",
            "de": "In welcher Saison spielte Kobe Bryant in der Point Guard Position?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that have more and less than 3 fouls over all seasons",
            "zh": "全 赛季 有 超过 或者 小于 3 个 犯规 的 球员",
            "de": "Spieler, die mehr oder weniger als 3 Fouls in der gesamten Saison haben"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant have when he made three assists",
            "zh": "科比 布莱恩特 在 有 3 个 助攻 的 时候 有 多少 失误",
            "de": "Wie viele Turnovers hatte Kobe Bryant als er drei Assists gemacht hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that never made 3 blocks in a season",
            "zh": "从来 没 在 一个 赛季 有 3 个 盖帽 的 球员",
            "de": "Spieler, die in einer Saison nie 3 Blocks geschafft haben"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has the most assists over a season other than Kobe Bryant",
            "zh": "除了 科比 · 布莱恩特 之外 ， 哪个 球员 在 赛季 中 的 助攻 最 多",
            "de": "Welcher Spieler mit Ausnahme von Kobe Bryant hat die meisten Assists in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team does Kobe Bryant play on",
            "zh": "科比 布莱恩特 为 哪个 球队 效力",
            "de": "in welchem Team spielt Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) )"
        },
        "question": {
            "en": "Kobe Bryant position",
            "zh": "科比 布莱恩特 的 位置",
            "de": "Position von Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe Bryant get in 3 games",
            "zh": "科比 布莱恩特 在 三场 比赛 中有 几次 抢断",
            "de": "Wie viele Steals bekam Kobe Bryant in 3 Spielen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe get after scoring 3 points",
            "zh": "科比 在 得到 3 分后 有 多少 失误",
            "de": "Wie viele Turnovers bekam Kobe nachdem er 3 Punkte erzielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had 3 or less steals this season",
            "zh": "哪个 球员 在 这个 赛季 有 三次 或者 更少 的 抢断",
            "de": "Welcher Spieler hatte 3 oder weniger Steals in dieser Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that have the same number of points in a season as Kobe Bryant's lowest amount",
            "zh": "在 一个 赛季 的 得分 和 科比 布莱恩特 的 最低 分 相同 的 球员",
            "de": "Spieler, die die gleiche Anzahl von Punkten in einer Saison hatten wie Kobe Bryants niedrigste Anzahl."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has the lowest amount of rebounds in a season",
            "zh": "哪个 球员 在 一个 赛季 有 最少 的 篮板球",
            "de": "Welcher Spieler hat die niedrigste Anzahl von Rebounds in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds did Kobe Bryant make in 2004",
            "zh": "科比 布莱恩特 在 2004 年 有 几次 篮板球",
            "de": "Wie viele Rebounds erzielte Kobe Bryant im Jahr 2004?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players scored at least three points over a season",
            "zh": "哪些 球员 在 一个 赛季 中有 至少 三分",
            "de": "Welche Spieler erzielten mindestens 3 Punkte innerhalb einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "in the same season in which Kobe Bryant had 3 rebounds what was the number of turnovers that he had",
            "zh": "在 科比 布莱恩特 有 三个 篮板球 的 赛季 他 有 多少 次 失误",
            "de": "In derselben Saison in welcher Kobe Bryant 3 Rebounds hatte, was war die Anzahl der Turnovers die er hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who has played largest number games over a season",
            "zh": "在 一个 赛季 中 打过 最 多场 比赛 的 球员",
            "de": "Spieler, der in einer Saison die meisten Spiele gespielt hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant have all season when he had 3 turnovers",
            "zh": "科比 布莱恩特 3 次 失误 的 赛季 有 多少 盖帽",
            "de": "Wie viele Blocks hatte Kobe Bryant in der gesamten Saison wenn er 3 Turnovers hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has less than two positions",
            "zh": "哪个 球员 打 小于 2 个 位置",
            "de": "Welcher Spieler hatte weniger als 2 Positionen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players has the most points over all seasons",
            "zh": "哪个 球员 在 全 赛季 的 得分 最 多",
            "de": "Welche Spieler hatten die meisten Punkte über alle Saisons?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name the player who has played at most 3 games over this season",
            "zh": "说出 这个 赛季 最多 打 了 3 场 比赛 球员 的 名字",
            "de": "Name des Spielers, der in maximal 3 Spielen innerhalb dieser Saison gespielt hatte."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant make over the season where he made 3 steals",
            "zh": "科比 布莱恩特 在 他 有 3 个 抢断 的 赛季 有 多少 失误",
            "de": "Wie viele Turnover machte Kobe Bryant in der Saison, in der er drei Steals erzielte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has played the fewest games in a season",
            "zh": "谁 在 一个 赛季 里 打 了 最少 的 比赛 ？",
            "de": "Wer spielte die wenigsten Spiele in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has the highest number of assists",
            "zh": "哪个 球员 的 助攻 数最多",
            "de": "Welcher Spieler hat die höchste Anzahl an Vorlagen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals does Kobe Bryant have over all seasons",
            "zh": "科比 在 整个 赛季 都 有 多少 次 抢断",
            "de": "Wie viele Steals hat Kobe Bryant über alle Saisons hinweg?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that had three or fewer assists over the season",
            "zh": "本赛季 有 三次 或 更少 助攻 的 球员",
            "de": "Spieler, die im Laufe der Saison drei oder weniger Vorlagen hatten"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "number of assists over a season of player Kobe Bryant with 3 fouls over a season",
            "zh": "运动员 科比 布莱恩特 在 有 3 次 犯规 的 赛季 助攻 次数 是 多少 ？",
            "de": "Anzahl an Vorlagen des Spielers Kobe Bryant in einer Saison mit drei Fouls in der Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that have no more than 3 fouls over all seasons",
            "zh": "在 所有 赛季 犯规 次数 不 多于 3 次 的 运动员 。",
            "de": "Spieler, die nicht mehr als drei Fouls in allen Saisons haben"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )"
        },
        "question": {
            "en": "how many seasons has Kobe Bryant broken 3 turnovers",
            "zh": "科比 布莱恩特 在 几个 赛季 有 了 超过 三次 失误",
            "de": "In wie vielen Saisons hat Kobe Bryant mehr als drei Turnover erzielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant make after playing 3 fouls",
            "zh": "科比 布莱恩 在 犯 了 3 次规 之后 取得 了 多少 次 封阻 ？",
            "de": "Wie viele Blocks machte Bryant, nachdem er drei Fouls beging?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )"
        },
        "question": {
            "en": "for which team did Kobe Bryant make three rebounds",
            "zh": "科比 布莱恩 为 哪 一队 取得 了 三个 篮板球 ？",
            "de": "Für welches Team hat Kobe Bryant drei Rebounds gemacht?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has the fewest assists per season",
            "zh": "谁 每个 赛季 取得 了 最少 的 助攻 ？",
            "de": "Wer hat die wenigsten Assists pro Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks does Kobe Bryant have in a season with at least 3 turnovers",
            "zh": "科比 布莱恩 在 失误 超过 3 次 的 赛季 有 多少 个 封阻 ？",
            "de": "Wie viele Blocks hatte Kobe Bryant in einer Saison mit mindestens 3 Turnovers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find those players with point totals in any one season equalling at least 3",
            "zh": "在 任何 一个 赛季 ， 有 哪些 球员 总得分 至少 三分",
            "de": "Finde diese Spieler mit Gesamtpunkten in irgendeiner Saison die mindestens 3 entspricht"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had equal or fewer assists than Kobe Bryant",
            "zh": "哪个 球员 有 比 科比 布莱恩特 少 或者 相同 的 助攻 次数",
            "de": "Welcher Spieler hatte gleich viele oder weniger Assists als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players all season assists totalled at least as many as Kobe Bryant",
            "zh": "哪个 球员 在 全部 赛季 助攻 次数 和 科比 一样 甚至 更 多",
            "de": "Die Summe der Saisonvorlagen welches Spielers ist wenigstens genauso groß wie die Kobe Bryants?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "how many games has Kobe Bryant played and hasn't scored a 3",
            "zh": "有 多少 场 比赛 科比 布莱恩特 出场 并 没有 拿下 3 分",
            "de": "In wie vielen Spielen, in denen Kobe Bryant spielte, hat er keine 3 erzielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has less than 3 fouls total in a season",
            "zh": "哪个 球员 在 一个 赛季 的 总 犯规 次数 少于 3 次",
            "de": "Welcher Spieler hat weniger als drei Fouls in der gesamten Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with most points over a season",
            "zh": "一个 赛季 得分 最多 的 球员",
            "de": "Spieler mit den meisten Punkten über eine Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player played most number of games over a season",
            "zh": "哪个 球员 一个 赛季 里 打 了 最 多 的 比赛 ？",
            "de": "Welcher Spieler absolvierte die meisten Spiele innerhalb einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player who played at least as many games as Kobe Bryant",
            "zh": "说出 一名 至少 和 科比 一样 多场 比赛 的 球员",
            "de": "Nennen Sie einen Spieler, der mindestens so viele Spiele gespielt hat wie Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "during the season Kobe Bryant committed 3 steals how many fouls did he have",
            "zh": "在 科比 布莱恩特 得到 了 3 次 抢断 的 赛季 中 他 有 多少 次 犯规",
            "de": "Während der Saison in der Kobe Bryant 3 Steals verübte, wie viele Fouls hatte er?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists can Kobe Bryant make in seasons with only 3 games played",
            "zh": "在 只 打 三场 比赛 的 赛季 里 ， Kobe Bryant 能 有 多少 助攻 ？",
            "de": "Wie viele Vorlagen kann Kobe Bryant in einer Saison mit nur 3 gespielten Spielen machen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players have played for fewer than two teams",
            "zh": "哪个 球员 效力 过 少于 两个 球队",
            "de": "Welche Spieler haben für weniger als zwei Mannschaften gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find the player with the highest score of assists performed in any one given season",
            "zh": "找到 一个 在 任何 一个 赛季 中 助攻 数量 最多 的 球员",
            "de": "finde den Spieler mit der höchsten Anzahl an Assists in jedweder Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name the player who did not have three fouls in the season",
            "zh": "说出 本赛季 没有 三次 犯规 的 球员",
            "de": "Nenne den Spieler, der keine drei Fouls innerhab der Saison hatte."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )"
        },
        "question": {
            "en": "team of player Kobe Bryant who has 3 rebounds over a season",
            "zh": "科比 布莱恩特 整个 赛季 有 3 个 篮板 的 球队",
            "de": "Das Team des Spielers Kobe Bryant, welcher drei Rebounds innerhalb einer Saison hatte."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that have more than three steals over a season",
            "zh": "整个 赛季 有 超过 3 次 抢断 的 球员",
            "de": "Spieler, die mehr als drei Steals innerhalb einer Saison haben."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )"
        },
        "question": {
            "en": "in which position did Kobe Bryant get 3 steals",
            "zh": "科比 布莱恩特 有 三次 抢断 大 的 位置 是 什么",
            "de": "In welcher Position bekam Kobe Bryant 3 Steals?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds did Kobe Bryant make when his total blocks over a season was 3",
            "zh": "科比 布莱恩特 在 一个 总 阻拦 次数 为 三 的 赛季 中有 多少 次 篮板球",
            "de": "Wie viele Rebounds hat Kobe Bryant geschafft, wenn seine Gesamtanzahl an Blockaden innerhalb der Saison drei waren?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who has played same number of games over a season as by player Kobe Bryant over a season",
            "zh": "在 一个 赛季 中 和 科比 布莱恩特 打 了 一样 多 的 比赛 的 球员",
            "de": "Spieler, der in einer Saison die gleiche Anzahl an Spielen absolviert hat wie Spieler Kobe Bryant in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "how many players have had more turnovers in a season than Kobe Bryant",
            "zh": "多少 个 球员 在 一个 赛季 中有 比 科比 布莱恩特 更 多 的 失误 次数",
            "de": "Wie viele Spieler haben mehr Turnovers gehabt in einer Saison als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant have all season",
            "zh": "科比 布莱恩特 在 全 赛季 中有 多少 次 犯规",
            "de": "Wie viele Fouls machte Kobe Bryant in der gesamten Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "number of played games over a season of player Kobe Bryant with 3 turnovers over a season",
            "zh": "在 一个 有 三次 失误 的 赛季 中 打 了 多少 场 比赛",
            "de": "Anzahl an gespielten Spielen über eine Saison von Spieler Kobe Bryant mit 3 Turnovers über eine Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant make all season playing 3 games",
            "zh": "科比 布莱恩特 在 打 了 三场 比赛 的 赛季 中有 几次 犯规",
            "de": "Wie viele Fouls machte Kobe Bryant in der gesamten Saison gespielt 3 Spiele?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe Bryant score during the season",
            "zh": "科比 布莱恩特 在 这 赛季 中得 了 多少 分",
            "de": "wie viele Punkte hat Kobe Bryant in der Saison erzielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with not more than 3 blocks over a season",
            "zh": "在 一个 赛季 中 不 多于 三次 阻拦 的 球员",
            "de": "Spieler mit nicht mehr als 3 Blocks über eine Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls were played by Kobe Bryant after 3 turnovers",
            "zh": "科比 布莱恩特 在 三次 失误 后 有 几次 犯规",
            "de": "Wie viele Fouls wurden von Kobe Bryant nach drei Wechseln gemacht"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that played in the most games during a season",
            "zh": "一个 赛季 中 打 了 最 多 比赛 的 球员",
            "de": "Spieler, die die meisten Spiele in einer Saison gespielt haben"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "number of blocks over a season of player Kobe Bryant who is at point guard",
            "zh": "控球 后卫 科比 布莱恩特 在 一个 赛季 中 的 阻挡 次数",
            "de": "Anzahl an Blocks über eine Saison von Spieler Kobe Bryant der Point Guard ist"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has a similar per season rebound average as Kobe Bryant",
            "zh": "哪个 球员 的 每 赛季 平均 篮板球 数 和 科比 布莱恩特 相似",
            "de": "Welcher Spieler hat einen ähnlichen Rebound-Durchschnitt pro Saison wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals has Kobe Bryant had",
            "zh": "科比 布莱恩特 有 多少 次 抢断",
            "de": "Wie viele Steals hat Kobe Bryant gehabt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe Bryant score all season when his steals equalled 3",
            "zh": "科比 布莱恩 在 得到 3 个 抢断 的 赛季 获得 了 多少 分 ？",
            "de": "Wie viele Punkte machte Kobe Bryant in der ganzen Saison, als er drei Steals hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had at least three steals",
            "zh": "哪位 球员 至少 有 三次 抢断",
            "de": "Welcher Spieler hatte mindestens drei Steals?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team did Kobe Bryant play 3 games for all season",
            "zh": "科比 布莱恩特 整个 赛季 打 了 三场 球 效力 的 球队 是 哪支",
            "de": "Für welche Mannschaft hat Kobe 3 Spiele in der ganzen Saison gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "number of points over a season of player Kobe Bryant who has 3 fouls over a season",
            "zh": "在 一个 赛季 中有 三次 犯规 的 球员 科比 布莱恩特 在 该 赛季 得 了 多少 分",
            "de": "Anzahl an Punkten in einer Saison des Spielers Kobe Bryant, der 3 Fauls in der Saison hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many did Kobe Bryant play so far this year",
            "zh": "今年 到 目前为止 科比 布莱恩特 打 了 几场 球",
            "de": "Wie viele Spiele hat Kobe dieses Jahr gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has played less games than Kobe Bryant",
            "zh": "哪位 球员 参加 比赛 的 场数 是 比 科比 布莱恩 少 的 ？",
            "de": "Welcher Spieler hat weniger Spiele als Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points in a season did Kobe Bryant have when he had only three assists",
            "zh": "科比 布莱恩特 在 只有 3 个 助攻 赛季 得 了 多少 分",
            "de": "Wie viele Punkte hatte Kobe Bryant in einer Saison, in der er nur drei Assists hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with most number of fouls over a season",
            "zh": "在 一个 赛季 犯规 最多 的 球员",
            "de": "Ein Spieler mit der höchsten Anzahl an Fauls in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player played the fewest games",
            "zh": "哪个 球员 参加 比赛 最少 ？",
            "de": "Welcher Spieler hat die wenigsten Spiele gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players did not play in 2004",
            "zh": "哪些 球员 在 2004 年 没 参加 比赛",
            "de": "Welche Spieler spielten nicht in 2004?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player who did not have exactly three assists in any given season",
            "zh": "列出 在 任意 赛季 都 没有 刚好 3 个 助攻 的 球员",
            "de": "bennene einen Spieler, der nicht exakt drei assists geben hat in irgendeiner Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who had at least as many fouls as Kobe Bryant in a season",
            "zh": "谁 在 同一个 赛季 至少 跟 科比 布莱恩 有 相同 次数 的 犯规 ？",
            "de": "Wer hatte mindestens so viele Fouls wie Kobe Bryant in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant have when he had 3 blocks",
            "zh": "当 科比 布莱恩特 有 3 个 盖帽 的 时候 有 多少 个 犯规",
            "de": "Wie viele Fouls machte Kobe Bryant als er 3 Blocks hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant have this season",
            "zh": "科比 本赛季 有 多少 盖帽",
            "de": "Wie viele Blocks hatte Kobe Bryant diese Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many total points did Kobe Bryant have in the 2004 season",
            "zh": "科比 在 2004 赛季 的 总得分 是 多少",
            "de": "Wie viele Punkte erzielte Kobe Bryant in der Saison 2004 insgesamt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe Bryant have in the games where he had three fouls",
            "zh": "科比 布莱恩 犯规 了 3 次 的 那场 比赛 里 他 助攻 了 多少 次 ？",
            "de": "Wie viele Vorlagen lieferte Kobe Bryant in den Spielen, in denen er drei Fouls hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player played less than 3 games",
            "zh": "哪 一个 球员 打 了 不到 3 场 比赛",
            "de": "Welcher Spieler spielte weniger als drei Spiele?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "during the season in which Kobe Bryant had 3 turnovers how many assists were attributable to him",
            "zh": "在 科比 布莱恩特 有 3 次 失误 的 赛季 中 ， 有 多少 次 助攻 归于 他",
            "de": "wie viele Assists konnte man Kobe Bryant zuordnen in der Saison, in welcher er drei Turnover hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe get after making 3 blocks",
            "zh": "科比 完成 了 3 次 盖帽 后 他 送 出 了 多少 次 助攻",
            "de": "Wie viele Assists hatte Kobe Bryant nachdem er drei Blocks machte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position is Kobe Bryant",
            "zh": "科比 是 打 哪个 位置 的",
            "de": "welche Position ist Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players who had more than three assists in a season",
            "zh": "一个 赛季 有 超过 三次 助攻 的 球员",
            "de": "Spieler, die in einer Saison mehr als drei Assists hatten."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had 3 or more turnovers",
            "zh": "哪个 球员 有 两次 以上 失误",
            "de": "Welcher Spieler hatte 3 oder mehr Umsätze"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what seasons did Kobe Bryant play in",
            "zh": "科比 布莱恩特 在 哪些 赛季 打过 球",
            "de": "In welcher Saison spiele Kobe Bryant mit?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who has less than 3 assists over a season",
            "zh": "整个 赛季 助攻 数 少于 3 个 的 球员",
            "de": "Spieler mit weniger als 3 Vorlagen in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with more than 3 rebounds over a season",
            "zh": "整个 赛季 篮板 数 超过 3 个 的 球员",
            "de": "Spieler mit mehr als 3 Rebounds über eine Saison hinweg"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls in a season did Kobe Bryant have",
            "zh": "科比 布莱恩特 在 一个 赛季 中有 多少 次 犯规",
            "de": "Wie viele Fouls hatte Kobe Bryant in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with not more turnovers over a season than player Kobe Bryant over a season",
            "zh": "赛季 失误 不别 科比 布莱恩特 多 的 球员",
            "de": "Spieler mit nicht mehr Umsätzen in einer Saison als Spieler Kobe Bryant in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with more than three turnovers in the season",
            "zh": "说出 本赛季 有 超过 三次 失误 的 球员",
            "de": "Benennen Sie einen Spieler mit mehr als drei Umsätzen in der Saison."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has played for the least number of teams",
            "zh": "谁 效力 过 的 球队 最少",
            "de": "Wer hat für die niedrigste anzahl an Teams gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "are there players who have a games participated in tally equalling that of Kobe Bryant in any one specific season",
            "zh": "在 任何 一个 赛季 比赛 场次 数量 跟 科比 布莱恩特 一样 的 球员",
            "de": "Existieren Spieler, die in irgendeiner Saison an der gleichen Anzahl an Spielen teilgenommen haben wie Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )"
        },
        "question": {
            "en": "what team has Kobe Bryant played point guard for",
            "zh": "科比 布莱恩特 为 哪个 球队 打 过 控球 后卫",
            "de": "Für welches Team hat Kobe Bryant als Point Guard gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks has Kobe Bryant had as an la Laker",
            "zh": "科比 布莱恩特 在 洛杉矶 湖人 有 多少 个 盖帽",
            "de": "Wie viele Blocks hatte Kobe Bryant als ein LA Laker?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant have after 3 games",
            "zh": "3 场 比赛 后 科比 布莱恩特 有 多少 盖帽",
            "de": "Wie viele Blocks hatte Kobe Bryant nach 3 Spielen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players has less than 3 all season fouls",
            "zh": "哪个 运动员 在 整个 赛季 里面 只有 三次 以下 犯规 的 ？",
            "de": "Welche Spieler hatten weniger als 3 Gesamtsaison Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "while he was point guard find the number of games played by Kobe Bryant in the same season",
            "zh": "在 科比 布莱恩特 打 控球 后卫 的 赛季 打 了 多少 场 比赛",
            "de": "Finde die Anzahl an Spielen, die Kobe Bryant in derselben Saison spielte, während er Point Guard war"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players had fewer than 3 turnovers in a season",
            "zh": "哪个 球员 在 一个 赛季 中 失误 少于 3 次",
            "de": "Welche Spieler hatten weniger als 3 Turnovers in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has as many blocks as Kobe Bryant",
            "zh": "哪个 球员 跟 科比 布莱恩特 的 盖帽 一样 多",
            "de": "Welcher Spieler hat genauso viele Blocks wie Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe have in the season he played point guard",
            "zh": "科比 在 当 控球 后卫 的 赛季 有 多少 犯规",
            "de": "Wie viele Fouls hatte Kobe in der Saison, als er Point Guard spielte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player whose number of rebounds over a season are not more than rebounds over a season of player Kobe Bryant",
            "zh": "在 一个 赛季 中 的 总 篮板球 次数 不 多于 球员 科比 布莱恩特 的 球员",
            "de": "Spieler, dessen Anzahl der Rebounds in einer Saison nicht höher ist als die des Spielers Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has been in fewer games than Kobe Bryant",
            "zh": "哪个 球员 打 的 比赛 数比 科比 布莱恩特 少",
            "de": "Welcher Spieler war in weniger Spielen als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that have the least amount of fouls in a season",
            "zh": "一个 赛季 犯规 次数 最少 的 球员",
            "de": "Spieler, die die geringste Anzahl von Fouls in einer Saison haben."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player whose number of assists over a season is more than that of player Kobe Bryant over a season",
            "zh": "在 一个 赛季 中 助攻 的 总 次数 比 球员 科比 布莱恩特 多 的 球员",
            "de": "Spieler mit mehr Vorlagen als Kobe Bryant in einer Saison."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "mention the number of turnovers of player Kobe Bryant in 3 games played over this season",
            "zh": "在 本赛季 的 3 场 比赛 中 ， 球员 科比 布莱恩特 的 失误 次数 是 多少 ？",
            "de": "Erwähnen Sie die Anzahl der Umsätze von Spieler Kobe Bryant in 3 Spielen in dieser Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "number of fouls over a season of player Kobe Bryant who has 3 steals over a season",
            "zh": "科比 布莱恩特 在 有 3 个 抢断 的 赛季 有 多少 犯规",
            "de": "Anzahl an Fouls über eine Saison von Spieler Kobe Bryant der 3 Steals über eine Saison hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team did Kobe Bryant play when he made 3 rebounds over the season",
            "zh": "科比 布莱恩特 在 这 赛季 中有 三次 篮板球 时 他 为 哪个 队 效力",
            "de": "In welcher Mannschaft spielte Kobe Bryant, als er im Laufe der Saison drei Rebounds erzielte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players whose total number of points in a season is not 3",
            "zh": "在 一个 赛季 中 总得分 不是 三 的 球员",
            "de": "Spieler, deren Gesamtpunktzahl in einer Saison nicht 3 beträgt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had more blocks all season than Kobe Bryant",
            "zh": "哪个 球员 全 赛季 的 盖帽 比 科比 布莱恩特 多",
            "de": "Welchem Spieler gelangen mehrere Blocks als Kobe Bryant während der gesamten Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists does Kobe Bryant manage in seasons limited to 3 fouls",
            "zh": "在 少于 3 次 犯规 的 赛季 科比 布莱恩特 有 多少 助攻",
            "de": "Wie viele Vorlagen schafft Kobe Bryant in einer auf 3 Fouls beschränkten Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has a maximum of 3 all season turnovers",
            "zh": "哪个 球员 在 全 赛季 最多 有 3 个 失误",
            "de": "Welcher Spieler hat ein Maximum von 3 Gesamtsaison Turnovers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players made less turnovers than Kobe Bryant over a season",
            "zh": "哪一位 球员 在 一个 球季 中 比 科比 布莱恩特 的 失误 要少",
            "de": "Welche Spieler haben weniger Turnovers als Kobe Bryant über eine Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "number of assists over a season of player Kobe Bryant from season 2004",
            "zh": "从 2004 赛季 开始 科比 布莱恩特 一个 赛季 的 助攻 数",
            "de": "Anzahl von Assists in einer Saison von Spieler Kobe Bryant seit der Saison 2004"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had 3 or more assists",
            "zh": "谁 有 超过 3 次 助攻",
            "de": "Wer hatte 3 oder mehr Assists?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players with a total number of rebounds in a season greater than three",
            "zh": "一个 赛季 有 超过 3 次 篮板 的 球员",
            "de": "Spieler mit einer Gesamtzahl von Rebounds in einer Saison von mehr als drei."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player got lesser number of assists than Kobe Bryant",
            "zh": "哪个 球员 得到 的 助攻 数比 科比 布莱恩特 少",
            "de": "Welcher Spieler hat weniger Vorlagen als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant get after the 3 rebounds",
            "zh": "在 有 3 次 篮板 后 科比 布莱恩特 有 多少 次 失误",
            "de": "Wie viele Turnovers bekam Kobe Bryant nach den 3 Rebounds?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "Who's a player with less points per season than Kobe Bryant",
            "zh": "哪个 球员 赛季 得分 比 科比 布莱恩特 少",
            "de": "Wer ist ein Spieler mit weniger Punkten pro Saison als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players had more 3 or more turnovers in a game",
            "zh": "哪个 球员 在 一场 比赛 中有 超过 3 次 失误",
            "de": "Welche Spieler hatten 3 oder mehr Turnovers in einem Spiel?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players played most games over a season same as Kobe Bryant",
            "zh": "哪 一个 球员 像 科比 一样 一个 赛季 打 了 最 多 比赛",
            "de": "Welche Spieler haben die meisten Spiele in der gleichen Saison gespielt wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players have been on the most teams",
            "zh": "哪 一个 球员 效力 过 的 球队 最 多",
            "de": "Welche Spieler waren in den meisten Teams?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "is there a player with the same number of turnovers in a specific season as Kobe Bryant has in a specific season as well",
            "zh": "是否 有 一名 球员 在 特定 赛季 中 的 失误 次数 与 科比 失误 次数 相同",
            "de": "Gibt es einen Spieler mit der gleichen Anzahl von Umsätzen in einer bestimmten Saison wie Kobe Bryant in einer bestimmten Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players are associated with one or no team",
            "zh": "哪 一个 球员 与 球队 无关 或 与 一个 球队 有关",
            "de": "Welche Spieler sind mit einer oder keiner Mannschaft verbunden?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players have the same number of turnovers over all their seasons equal to or worse than that of Kobe Bryant",
            "zh": "哪 一名 球员 在 他们 的 赛季 中 失误 次数 跟 科比 相同 或者 更 多",
            "de": "Welche Spieler haben die selbe Anzahl an Turnovers über ihre gesamte Saison gleich oder schlechter als die von Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who had the least rebounds this season",
            "zh": "谁 这个 赛季 抢下 的 篮板 最少",
            "de": "Wer hatte die wenigsten Rebounds diese Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds Kobe Bryant made in the season he made 3 turnovers",
            "zh": "在 他 有 三个 失球 的 赛季 里 ， Kobe Bryant 有 多少 个 蓝 板球 ？",
            "de": "Wie viele Rebounds hatte Kobe Bryant in der Saison in der er 3 Turnovers machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has more or less than 3 blocks",
            "zh": "谁 的 盖帽 超过 或者 少于 3 个",
            "de": "Wer hat mehr oder weniger als 3 Blocks?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player is on either the Los Angeles Lakers or the Cleveland cavaliers",
            "zh": "谁 在 洛杉矶 湖人队 或者 克里夫兰 骑士队 效力 过",
            "de": "Welcher Spieler ist entweder bei den Los Angeles Lakers oder den Cleveland Cavaliers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )"
        },
        "question": {
            "en": "which season did Kobe Bryant have only 3 rebounds in",
            "zh": "当 科比 布莱恩 只有 3 个 篮板 的 是 在 哪个 球季",
            "de": "In welcher Saison hatte Kobe Bryant nur 3 Rebounds?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string team ) ) )"
        },
        "question": {
            "en": "Los Angeles Lakers roster",
            "zh": "洛杉矶 湖人队 名单",
            "de": "Los Angeles Lakers Kader"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had no more rebounds than Kobe Bryant",
            "zh": "哪个 球员 没有 比 科比 布莱恩特 更 多 的 篮板球",
            "de": "Welcher Spieler hatte nicht mehr Rebounds als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games has Kobe Bryant played",
            "zh": "科比 布莱恩特 已经 打 了 多少 场 比赛 ？",
            "de": "Wie viele Spiele hat Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )"
        },
        "question": {
            "en": "in which season did Kobe Bryant play 3 fouls",
            "zh": "哪 一个 赛季 科比 布莱恩特 有 3 次 犯规 ？",
            "de": "In welcher Saison beging Kobe Bryant drei Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "how many points does Kobe Bryant average over a season",
            "zh": "科比 布莱恩 在 赛季 里 的 平均 得分 是 多少",
            "de": "Wie viele Punkte macht Kobe Bryant durchschnittlich pro Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "during Kobe Bryant's time with the Lakers how many assists has he averaged per season",
            "zh": "在 为 湖人队 效力 期间 ， 科比 布莱恩特 平均 一个 赛季 的 助攻 是 多少 次",
            "de": "Wie viele Torvorlagen lieferte Kobe Bryant durchschnittlich pro Saison während seiner Zeit mit den Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name those players with blocks to their credit that tally less than 3 or more than 3",
            "zh": "说出 盖帽 数 少于 或 多于 3 个 的 那些 运动员 。",
            "de": "Nenne diejenigen Spieler, die weniger als oder mehr als drei Blocks verbuchen können."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name the player with fewer than three points",
            "zh": "说出 得分 少于 3 分 的 运动员 。",
            "de": "Nennen Sie den Spieler mit weniger als drei Punkten"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who plays on the same team as Kobe Bryant",
            "zh": "谁 和 科比 布莱恩特 在 同一 只 球队 效力 ？",
            "de": "Wer spielt im gleichen Team wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that play the same position as Kobe Bryant",
            "zh": "和 科比 布莱恩特 打 同一 位置 的 球员",
            "de": "Spieler die auf der gleichen Position spielen wie Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find players responsible for the same amount of assists in any one specific season as Kobe Bryant",
            "zh": "找到 在 任何 一个 特定 赛季 里 和 Kobe Bryant 有 一样 的 助攻 次数 的 那些 球员",
            "de": "Finde Spieler, die für die gleiche Anzahl an Vorlagen in einer spezifischen Saison verantwortlich waren wie Kobe Bryant."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team did Kobe Bryant play for when he had three blocks during a single season",
            "zh": "当 科比 布赖恩 特 单个 赛季 取得 3 次 盖帽 时 效力 的 是 哪支 球队 ？",
            "de": "Für welche Mannschaft spielte Kobe Bryant, als er in einer einzigen Saison drei Blocks hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )"
        },
        "question": {
            "en": "What's the position of Kobe Bryant",
            "zh": "科比 布赖恩 特打 哪个 位置 ？",
            "de": "Auf welcher Position spielt Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who had less than or equal to 3 points",
            "zh": "谁 得分 不 多于 3 分 ？",
            "de": "Wer hatte genau oder wenger als 3 Punkte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with the most played games over all seasons",
            "zh": "在 所有 赛季 中 参与 最 多 球赛 的 球员",
            "de": "Wer ist der Spieler mit den meisten Spielen über alle Saisons?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position does Kobe Bryant who has three steals play",
            "zh": "科比 布赖恩 特 取得 三次 盗球 时 打 的 是 哪个 位置 ？",
            "de": "Auf welcher Position spielt Kobe Bryant, der drei steals hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals has Kobe Bryant had",
            "zh": "科比 有 多少 次 抢断",
            "de": "Wie viele Steals hat Kobe Bryant gehabt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe Bryant have as point guard",
            "zh": "作为 控球 后卫 的 科比 布莱恩特 有 几次 助攻",
            "de": "Wie viele Assists hatte Kobe Bryant als Point Guard gehabt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )"
        },
        "question": {
            "en": "position of player Kobe Bryant who has 3 points over a season",
            "zh": "在 一 赛季 有 三分 的 科比 布莱恩特 打 的 位置",
            "de": "Position des Spielers Kobe Bryant der 3 Punkte über eine Saison hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with at least 3 rebounds over a season",
            "zh": "整个 赛季 有 至少 3 个 篮板 的 球员",
            "de": "Spieler mit mindestens 3 Rebounds in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had the most turnovers",
            "zh": "哪个 有 球员 有 最 多 失误 数",
            "de": "Welche Spieler hat die meisten Turnovers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers were got by Kobe Bryant who belonged to the Los Angeles Lakers team",
            "zh": "洛杉矶 湖人队 的 科比 布莱恩特 一共 有 多少 失误",
            "de": "Wie viele Umsätze erzielte Kobe Bryant, der zum Team der Los Angeles Lakers gehörte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "in how many seasons has Kobe Bryant given up exactly 3 turnovers",
            "zh": "科比 布莱恩特 有 多少 个 赛季 正好 有 3 次 失误 ？",
            "de": "In wie vielen Saisons hatte Kobe Bryant genau drei Ballverluste?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "number of fouls over a season of player Kobe Bryant from Los Angeles Lakers team",
            "zh": "洛杉矶 湖人队 的 科比 布莱恩特 一个 赛季 的 犯规 次数 。",
            "de": "Anzahl an Fauls in einer Saison des Spielers Kobe Bryant aus dem Team der Los Angeles Lakers"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had the same or more assists than Kobe Bryant",
            "zh": "和 科比 布莱恩特 的 助攻 次数 相同 或 更 多 的 运动员 。",
            "de": "Wer hatte genauso viel oder mehr Vorlagen als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had more assists than Kobe Bryant this season",
            "zh": "哪个 球员 的 助攻 数 这个 赛季 比 科比 布莱恩特 多",
            "de": "Welcher Spieler hatte mehr Assists als Kobe Bryant in dieser Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with more than three assists during the season",
            "zh": "说出 赛季 中 助攻 次数 多于 3 次 的 一个 运动员 。",
            "de": "Nennen Sie einen Spieler mit mehr als drei Vorlagen während der Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games will Kobe Bryant play this coming season",
            "zh": "下个 赛季 科比 布莱恩特 会 打 多少 比赛",
            "de": "Wie viele Spiele wird Kobe Bryant in der kommenden Saison spielen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds did Kobe Bryant have over a season",
            "zh": "科比 在 一个 赛季 中有 多少 篮板球",
            "de": "Wie viele Rebounds hatte Kobe Bryant in der Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player whose number of points over a season is not less than that of player Kobe Bryant over a season",
            "zh": "在 一个 赛季 中 的 得分 不少 于 球员 科比 布莱恩特 的 球员",
            "de": "Ein Spieler, dessen Anzahl an Punkten in einer Saison nicht weniger als die des Spielers Kobe Bryant in einer Saison ist"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name someone with more games per season played than Kobe Bryant",
            "zh": "说出 比 科比 布莱恩特 出赛 更 多场 的 人",
            "de": "Nennen Sie jemanden mit mehr Spielen pro Saison als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did la Laker Kobe Bryant score",
            "zh": "洛杉矶 湖人队 的 科比 布莱恩特 得 了 多少 分",
            "de": "wie viele Punkte hat La Laker Kobe Bryant erzielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "What's Kobe Bryants average steals per season",
            "zh": "什么 是 科比 · 布莱恩 斯 每个 赛季 的 平均 抢断 数",
            "de": "wie viele Steals hatte Kobe Bryant im Schnitte pro Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had the same or more number of blocks as Kobe Bryant",
            "zh": "什么 球员 拥有 与 科比 · 布莱恩特 相同 或 更 多 数量 的 盖帽",
            "de": "welcher Spieler hatte die gleiche oder mehr Blockanzahl wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that have at least 3 blocks a season",
            "zh": "每个 赛季 至少 有 3 个 盖帽 的 球员",
            "de": "Spieler die mindestens 3 Blocks pro Saison hatten"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had the same number of turnovers as Kobe Bryant",
            "zh": "谁 与 科比 布莱恩特 有 同样 数量 的 失误",
            "de": "Wer hatte dieselbe Anzahl an Turnovers wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "what was the total number of games played by Kobe Bryant in a season",
            "zh": "科比 布莱恩特 在 一个 赛季 中 总共 参加 了 几场 比赛",
            "de": "Wie viele Spiele hat Kobe Bryant in einer Saison insgesamt gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers has Kobe Bryant had",
            "zh": "科比 布莱恩特 有 多少 失误",
            "de": "Wie viele Turnovers hatte Kobe Bryant gehabt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds did Kobe Bryant have this season",
            "zh": "科比 本赛季 有 多少 篮板球",
            "de": "Wie viele Rebounds hatte Kobe Bryant diese Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player played in the same or less games as Kobe Bryant",
            "zh": "哪个 球员 比 科比 布莱恩特 打 的 比赛 一样 多 或 更少",
            "de": "Welcher Spieler spielte in den gleichen oder weniger Spielen wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player having not less than 3 blocks over a season",
            "zh": "一个 赛季 有 不少 于 3 个 盖帽 的 球员",
            "de": "Spieler der nicht weniger als 3 Blocks über eine Saison hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has at least as many points in a season as Kobe Bryant",
            "zh": "哪个 球员 一个 赛季 的 得分 至少 和 科比 布莱恩特 一样 ？",
            "de": "Welcher Spieler hat mindestens so viele Punkte in einer Saison wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position was Kobe Bryant playing when he has 3 rebounds over a full season",
            "zh": "科比 布莱恩特 有 3 个 篮板 的 赛季 打 的 是 什么 位置",
            "de": "In welcher Position spielte Kobe Bryant, als er 3 Rebounds in einer ganzen Saison hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had over 3 fouls",
            "zh": "哪个 球员 有 超过 3 个 犯规",
            "de": "Welcher Spieler hatte mehr als 3 Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with no more than three fouls",
            "zh": "说出 一个 有 不 多于 三个 犯规 的 球员 吧 ？",
            "de": "Benenne ein Spieler mit höchsten 3 fouls"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player gets more assists every season than Kobe Bryant",
            "zh": "哪个 球员 每个 赛季 的 助攻 都 比 科比 布莱恩特 多",
            "de": "Welcher Spieler bekommt jede Saison mehr Assists als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player scored less than 3 points in a full season",
            "zh": "哪个 球员 在 一 整个 赛季 得分 小于 3 分",
            "de": "Welcher Spieler hat in einer ganzen Saison weniger als 3 Punkte erzielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe Bryant make in a season of 3 turnovers",
            "zh": "科比 在 3 个 失误 的 赛季 中有 多少 助攻",
            "de": "Wie viele Assists machte Kobe Bryant in einer Saison, in der er 3 Ballverluste hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )"
        },
        "question": {
            "en": "in what year did Kobe Bryant have three fouls",
            "zh": "科比 在 哪一年 有 三次 犯规",
            "de": "In welchem Jahr hatte Kobe Bryant drei Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "are there players who have participated in more than 3 games in a season",
            "zh": "有没有 球员 在 一个 赛季 参加 了 多于 三场 比赛 的",
            "de": "Gibt es Spieler, die an mehr als 3 Spielen in einer Saison teilgenommen haben?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find players who have committed a higher amount of fouls in a given season than Kobe Bryant",
            "zh": "找到 在 一个 特定 赛季 比 科比 布莱克 特有 更 多 犯规 的 球员",
            "de": "Finden Sie Spieler, die in einer bestimmten Saison mehr Fouls begangen haben als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe Bryant who had three fouls have",
            "zh": "有过 三个 犯规 的 Kobe Bryant 得 了 多少 分 ？",
            "de": "Wie viele Punkte hatte Kobe Bryant, der drei Fouls hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant have in a game where he had three fouls",
            "zh": "科比 布莱恩 在 犯规 了 3 次 那场 比赛 失误 了 多少 次 ？",
            "de": "Wie viele Turnovers machte Kobe Bryant in einem Spiel in dem er drei Fouls hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls were committed by Kobe Bryant over a season in which he made 3 steals",
            "zh": "科比 布莱恩 在 取得 3 次 抢断 那个 赛季 里 犯规 了 多少 次 ？",
            "de": "Wie viele Fauls wurden von Kobe Bryant in einer Saison begangen, in der er drei Steals machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team does Kobe Bryant play for",
            "zh": "科比 布莱恩 为 哪支 球队 效力 ？",
            "de": "Für welches Team spielt Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had less than 3 points",
            "zh": "哪个 球员 得分 少于 3 分 ？",
            "de": "Welcher Spieler hatte weniger als drei Punkte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )"
        },
        "question": {
            "en": "how many seasons has Kobe Bryant played",
            "zh": "科比 布莱恩 打 了 多少 个 赛季 ？",
            "de": "Wie viele Saisons hat Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe Bryant score as the point guard",
            "zh": "科比 布莱恩 作为 控球 后卫 得 了 多少 分 ？",
            "de": "Wie viele Punkte erzielte Kobe Bryant als Point Guard?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with more played games in a season than Kobe Bryant",
            "zh": "在 一个 赛季 里 比 科比 布莱恩 参加 了 更 多 比赛 的 球员",
            "de": "Spieler mir mehr gespielten Spielen in einer Saison als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has at least as many assists as Kobe Bryant over a season",
            "zh": "在 一个 赛季 中 ， 他 的 助攻 数量 至少 与 科比 一样 多",
            "de": "Wer hat mindestens so viele Assists wie Kobe Bryant über eine Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "number of turnovers of Kobe Bryant who has 3 rebounds",
            "zh": "有 3 个 篮板 的 科比 - 布莱恩特 的 失误 次数",
            "de": "Die Anzahl an Ballverlusten von Kobe Bryant, der drei Rebounds hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with less than 3 turnovers over a season",
            "zh": "一个 赛季 失误 少于 3 次 的 球员",
            "de": "Spieler mit weniger als drei Turnovers innerhalb einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )"
        },
        "question": {
            "en": "position of player Kobe Bryant from Los Angeles Lakers team",
            "zh": "科比 布莱恩 在 洛杉矶 湖人 打 的 位置",
            "de": "Die Position des Spielers Kobe Bryant aus dem Team der Los Angeles Lakers"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many 3point games did Kobe Bryant play all season",
            "zh": "这个 赛季 科比 布莱恩特 投了 多少 个 三分",
            "de": "Wie viele 3-Punkte-Spiele hat Kobe Bryant die ganze Saison über gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )"
        },
        "question": {
            "en": "position of player Kobe Bryant with 3 steals over a season",
            "zh": "科比 布莱恩 在 一个 赛季 有 3 次 抢断 的 时候 打 的 位置",
            "de": "Die Position des Spielers Kobe Bryant mit drei Steals in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe have in 2004",
            "zh": "2004 年 科比 有 多少 次 盖帽",
            "de": "Wie viele Blocks hatte Kobe in 2004?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player matches the season average steal rate of Kobe Bryant",
            "zh": "哪个 球员 在 赛季 里 是 达到 跟 科比 布莱恩 一样 的 抢断 率 的 ？",
            "de": "welcher Spieler entspricht der durchschnittlichen Stealrate von Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had the most blocks this season",
            "zh": "哪个 球员 这个 赛季 盖帽 最 多",
            "de": "Welcher Spieler hatte in dieser Saison die meisten Blocks?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games did Kobe Bryant get 3 points in",
            "zh": "有 多少 场 比赛 科比 投中 了 3 分",
            "de": "In wie vielen Spielen holte Kobe Bryant drei Punkte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games has Kobe Bryant played",
            "zh": "科比 布莱恩特 参加 了 几场 比赛",
            "de": "Wie viele Spiele hat Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players have the same position as Kobe Bryant",
            "zh": "哪些 球员 跟 科比 布莱恩特 打 相同 的 位置",
            "de": "Welche Spieler haben die gleiche Position wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls does Kobe Bryant take in an average season",
            "zh": "科比 布莱恩特 在 一个 普通 赛季 中 平均 有 多少 次 犯规",
            "de": "Wie viele Fouls begeht Kobe Bryant in einer durchschnittlichen Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "number of steals of point guard Kobe Bryant",
            "zh": "控球 后卫 科比 布莱恩 的 抢断 次数",
            "de": "Anzahl an Steals des Point Guards Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many players are there total",
            "zh": "总共 有 多少 球员",
            "de": "Wie viele Spieler gibt es insgesamt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players have been on two or less teams",
            "zh": "哪些 球员 有 在 两个 或者 更少 的 球队 效力 过",
            "de": "Welche Spieler waren in 2 oder weniger Teams?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "during the season in which he had 3 steals how many rebounds was Kobe Bryant responsible for",
            "zh": "在 那个 他 抢断 三次 的 赛季 ， 科比 布莱恩特 负责 了 几个 篮板球",
            "de": "Für wie viele Rebounds war Kobe Bryant während der Saison verantwortlich, in der er drei Steals hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant have during the season",
            "zh": "在 赛季 中 科比 布莱恩特 有 几次 犯规",
            "de": "Wie viele Fouls hatte Kobe Bryant während der Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string team ) ) )"
        },
        "question": {
            "en": "what team does Kobe Bryant play for",
            "zh": "科比 布莱恩特 为 哪 支队 效力",
            "de": "Für welches Team spielt Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players made blocks same as maximum blocks by Kobe Bryant over a season",
            "zh": "哪些 球员 在 一个 赛季 中 做 的 阻拦 次数 和 科比 布莱恩特 最多 的 阻拦 次数 相同",
            "de": "Welche Spieler machten so viele Blocks wie das Maximum an Blocks von Kobe Bryant über eine Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "number of rebounds over a season of player Kobe Bryant who has played 3 games over a season",
            "zh": "科比 布莱恩 在 他 打 了 三场 比赛 的 那个 赛季 的 篮板球 数",
            "de": "Anzahl der Rebounds in einer Saison von Spieler Kobe Bryant, der in einer Saison 3 Spiele bestritten hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team did Kobe Bryant play for in 2004",
            "zh": "科比 布莱恩 在 2004 年 为 哪个 球队 效力 ？",
            "de": "Für welche Mannschaft spielte Kobe Bryant 2004?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "what meeting has a date after Jan 2",
            "zh": "什么 会议 在 1 月 2 日 之后 ?",
            "de": "Welches Meeting hat ein Datum nach dem 2. Januar?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )"
        },
        "question": {
            "en": "show me where the weekly stand-up and annual review is happening",
            "zh": "告诉 我周 例会 和 年终 会 在 哪里 举行",
            "de": "Zeig mir wo das wöchentliche stand-up und der jährliche Rückblick stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )"
        },
        "question": {
            "en": "person attending three hour meeting",
            "zh": "参加 三 小时 会议 的 人",
            "de": "Personen die an der drei Stunden Besprechung teilnehmen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "what meeting has a date of Jan 2 at Greenberg cafe",
            "zh": "哪个 在 greenberg 咖啡厅 的 会议 是 在 1 月 2 号 举行",
            "de": "Welche Besprechungen sind am 2. Januar um Greenberg cafe?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )"
        },
        "question": {
            "en": "which meetings will be longer than weekly stand-up",
            "zh": "哪个 会议 比周 例会 时间 长",
            "de": "Welche Meetings sind länger als die wöchentliche Stand-up-Sitzung?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "show me all meetings on January 2nd at the Greenberg cafe",
            "zh": "告诉 我 所有 1 月 2 号 在 greenberg 咖啡厅 举行 的 会议",
            "de": "zeige mir alle Meetings am 2. Januar im Greenberg Cafe."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )"
        },
        "question": {
            "en": "shortest meeting",
            "zh": "最短 的 会议",
            "de": "kürzestes Meeting"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )"
        },
        "question": {
            "en": "meetings held in the same place as the weekly stand-up meeting",
            "zh": "跟 周 例会 在 一个 地方 举行 的 会议",
            "de": "Besprechungen, die an der gleichen Stelle wie das wöchentliche Stehmeeting abgehalten werden."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "what meeting did Alice attend at the Greenberg cafe",
            "zh": "爱丽丝 在 Greenberg 咖啡厅 参加 了 什么 会议 ？",
            "de": "An welchem Treffen nahm Alice im Greenberg-Café teil?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "what meeting has a location at Greenberg cafe on Jan 2",
            "zh": "一月 二号 地点 在 Greenberg 咖啡厅 的 会议 是 什么 ？",
            "de": "Welche Besprechung findet im Greenberg cafe am 2. Januar statt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )"
        },
        "question": {
            "en": "show me the meetings which have lasted the longest",
            "zh": "给 我 列出 历时 最长 的 会议",
            "de": "zeige mir die Meetings, die am längsten gedauert haben."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "show me all meetings that end by 10am",
            "zh": "给 我 列出 所有 早上 10 点前 结束 的 会议",
            "de": "Zeigen Sie mir alle Besprechungen, die um 10 Uhr enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) )"
        },
        "question": {
            "en": "what meetings have the same duration as the weekly stand up meeting",
            "zh": "哪些 会议 的 持续时间 与 每周 的 站立 会议 相同",
            "de": "Welche Besprechungen haben die gleiche Dauer wie die wöchentliche Stand-up-Besprechung?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )"
        },
        "question": {
            "en": "meeting share attendee with weekly stand-up",
            "zh": "跟 每周 站会 有 同样 参会者 的 会议",
            "de": "Welches Meeting teilen sich die Teilnehmer des wöchentlichen Stand-Up Meetings?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )"
        },
        "question": {
            "en": "weekly stand-up date",
            "zh": "每周 站会 的 日期",
            "de": "wöchentlicher Stand-up-Termin"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )"
        },
        "question": {
            "en": "what meetings are scheduled to run for 3 hours",
            "zh": "哪个 会议 计划 持续 3 个 小时",
            "de": "Welche Meetings sind für 3 Stunden geplant?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings at least one hour or three hours long",
            "zh": "给 我 列出 所有 至少 一 小时 或 三 小时 长 的 会议",
            "de": "Zeigen Sie mir alle Besprechungen, die mindestens eine oder drei Stunden dauern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "what three hour meeting is on Jan 2",
            "zh": "哪个 三 小时 的 会议 是 在 一月 二号 ？",
            "de": "Welche drei Stunden Besprechung ist am 2. Januar?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )"
        },
        "question": {
            "en": "what location does not hold the weekly stand-up meeting",
            "zh": "哪个 地点 没有 举行 周 例会",
            "de": "an welchem Standort findet das wöchentliche Stand-up-Meeting nicht statt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "meeting that starts at 10am and ends at 1pm",
            "zh": "在 早上 10 点 开始 下午 1 点 结束 的 会议",
            "de": "Meeting, das um 10 Uhr beginnt und um 13 Uhr endet."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many attendees are there for this meeting",
            "zh": "本次 会议 的 与会者 有 多少 人",
            "de": "Wie viele Teilnehmer sind bei dieser Sitzung dabei?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "what is the meeting that starts at 10 am in Greenberg cafe",
            "zh": "在 格林 堡 咖啡店 上午 10 点 开始 的 是 什么 会议",
            "de": "Welche Besprechung startet um 10 Uhr im Greenberg cafe?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "meetings that end at or after 10 am or at or after 3pm",
            "zh": "在 上午 10 点及 之后 结束 或者 下午 3 点及 之后 结束 的 会议",
            "de": "Besprechungen, die um oder nach 10 Uhr oder um oder nach 15 Uhr enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )"
        },
        "question": {
            "en": "what meeting is at the same location as weekly stand-up",
            "zh": "什么 会议 和 周 例会 是 同一个 地点",
            "de": "Welche Besprechung ist am gleichen Ort wie die wöchentliche Stehbesprechung?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )"
        },
        "question": {
            "en": "meeting which has shortest start time",
            "zh": "开始 时间 最短 的 会议",
            "de": "Meeting mit kürzester Startzeit"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )"
        },
        "question": {
            "en": "what meeting is on Jan 2 or 3rd",
            "zh": "什么 会议 在 1 月 2 号 或者 3 号 举行",
            "de": "Welches Treffen ist am 2. oder 3. Januar"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "meetings that end earlier than the weekly stand-up meeting",
            "zh": "在 周 例会 之前 结束 的 会议",
            "de": "Besprechungen, die früher als die wöchentliche Stand-Up-Besprechung enden."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )"
        },
        "question": {
            "en": "show me all meetings ending at 10 am or 3 pm",
            "zh": "给 我 展示 所有 在 上午 10 点 或者 下午 3 点 结束 的 会议",
            "de": "Zeig mir alle Treffen, die um 10 oder 15 Uhr enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )"
        },
        "question": {
            "en": "show me all of the people who did not attend the weekly stand-up meeting",
            "zh": "展示 给 我 所有 没有 参加 周 例会 的 人",
            "de": "Zeige mir alle Leute, die nicht an der wöchentlichen Stehbesprechung teilnahmen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )"
        },
        "question": {
            "en": "meetings that are the same length as or longer than the weekly stand-up meeting",
            "zh": "时长 与 周 例会 一样 长 或者 更长 的 会议",
            "de": "Besprechungen, die mindestens genauso lang sind wie die wöchentliche Stand-up-Besprechung"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) )"
        },
        "question": {
            "en": "show me all meetings which are exactly one hour or exactly three hours long",
            "zh": "给 我 列出 所有 刚好 1 小时 或 刚好 3 小时 的 会议",
            "de": "Zeige mir alle Besprechungen, die genau eine Stunde oder genau drei Stunden lang sind."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ) )"
        },
        "question": {
            "en": "what is the location of the important meeting",
            "zh": "那个 重要 会议 的 举办 地点 在 哪 ？",
            "de": "Wo findet das wichtige Treffen statt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "which meetings end later in the day than weekly stand-up",
            "zh": "哪些 会议 比 周会 更 晚 结束",
            "de": "Welche Meetings enden später am Tag des wöchentlichen Stand-Ups"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )"
        },
        "question": {
            "en": "show me all meetings which end at the same time as the weekly stand-up ends",
            "zh": "告诉 我 所有 和 周会 同时 结束 的 会议",
            "de": "Welche Besprechungen enden am gleichen Tag wie die der wöchentlichen stand-ups?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what location are the fewest meetings held",
            "zh": "哪些 地点 举行 的 会议 最少",
            "de": "Wo finden die wenigsten Meetings statt"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings happening after January 2nd or January 3rd",
            "zh": "告诉 我 1 月 2 日 或 1 月 3 日 之后 发生 的 所有 会议",
            "de": "zeige mir alle Meetings, die nach dem 2. Januar oder 3. Januar stattfinden."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "meetings that end later than 10am or later than 3pm",
            "zh": "在 上午 10 点 或 下午 3 点 之后 结束 的 会议",
            "de": "Meetings die später als 10 Uhr morgens oder 3 Uhr Nachmittags enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "meetings that start before the weekly stand-up meeting ends",
            "zh": "在 周会 结束 之前 开始 的 会议",
            "de": "Meetings die anfangen bevor das wöchentliche Start-up Meeting endet"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings with two attendees",
            "zh": "告诉 我 所有 两人 出席 的 会议",
            "de": "Zeigen Sie mir alle Besprechungen mit zwei Teilnehmern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string is_important ) ) )"
        },
        "question": {
            "en": "which meetings are important",
            "zh": "哪些 会议 很 重要",
            "de": "Welche meetings sind wichtig"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) )"
        },
        "question": {
            "en": "who is attending weekly stand-up",
            "zh": "谁 会 参加 每周 站会 ？",
            "de": "Wer nimmt am wöchentlichen Stand-up teil"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "show me meetings ending at 10am in Greenberg cafe",
            "zh": "给 我 看 在 Greenberg 咖啡店 早上 十点 结束 的 会议",
            "de": "Zeig mir Treffen, die um 10 Uhr im Greenberg Cafe enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me all important meetings that end at 10am",
            "zh": "给 我 看 所有 在 早上 十点 结束 的 重要 会议",
            "de": "Zeige mir alle wichtigen Meetings die um 10 Uhr morgens enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "location is same as location of meeting ends at 10 am",
            "zh": "地点 和 在 十点 结束 的 会议 的 地点 是 一样 的",
            "de": "Der Ort ist derselbe wie der Ort, an dem die Besprechung um 10 Uhr endet"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "meetings attended by Alice or bob",
            "zh": "爱丽丝 或 鲍勃 参加 的 会议",
            "de": "Treffen, an denen Alice oder Bob teilnahmen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "show me meetings for Jan 2",
            "zh": "告诉 我 1 月 2 日 的 会议",
            "de": "zeige mir Treffen für den 2. Januar"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( string location ) ) )"
        },
        "question": {
            "en": "show me the meeting which has happened at the most locations",
            "zh": "给 我 看 在 最 多 地点 发生 的 会议",
            "de": "Zeig mir das Meeting das an den meisten Orten stattfand"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "show me meeting locations with Alice",
            "zh": "告诉 我 与 Alice 的 会面 地点",
            "de": "Zeig mir Orte für Meetings mit Alice"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )"
        },
        "question": {
            "en": "show me all three hour meetings that are important",
            "zh": "告诉 我 所有 重要 的 三 小时 会议",
            "de": "Zeige mir alle 3-Stunden-Meetings, die wichtig sind"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( string attendee ) ) )"
        },
        "question": {
            "en": "meeting with least attendees",
            "zh": "出席 人数 最少 的 会议",
            "de": "Meeting mit den wenigsten Teilnehmern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me all meetings attended by Alice which are three hours long",
            "zh": "给 我 列出 所有 爱丽丝 参加 过 的 时 长三 小时 的 会议",
            "de": "zeig mir alle besprechung an denen Alice teilgenommen hat die drei stunden lang sind"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "what person is attending the meeting that starts at 10am",
            "zh": "什么 人 参加 了 上午 10 点 开始 的 会议",
            "de": "Welche Person nimmt an der Besprechung die um 10 Uhr beginnt teil"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "what three hour meeting starts at 10am",
            "zh": "哪个 三 小时 会议 在 上午 十点 开始 ？",
            "de": "Welches 3-Stunden-Meeting beginnt um 10:00 Uhr?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) )"
        },
        "question": {
            "en": "when is weekly stand-up or annual review",
            "zh": "每周 站会 或者 年度 总结会 在 什么 时候 举行 ？",
            "de": "Wann ist das wöchentliche Stand-Up oder das jährliche Review Meeting"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "who is attending the same meeting as Alice",
            "zh": "谁 在 参加 那个 阿丽丝 也 在 的 会议 呢 ？",
            "de": "Wer nimmt an der gleichen Besprechung teil wie Alice?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string is_important ) ) )"
        },
        "question": {
            "en": "show me important meetings",
            "zh": "给 我 列出 重要 的 会议",
            "de": "Zeige mir wichtige Besprechungen."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "meeting ends no later than 10am or 3pm",
            "zh": "在 不 晚于 早上 十点 或 下午 三点 结束 的 会议",
            "de": "Das Meeting endet nicht später als 10.00 oder 15.00 Uhr."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( string location ) ) )"
        },
        "question": {
            "en": "show me meetings with the most locations",
            "zh": "给 我 列出 有 最 多 （ 举行 ） 地点 的 会议",
            "de": "zeige mir Meetings mit den meisten Standorten"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "meeting that has maximum 2 attendees",
            "zh": "會議 最 多 參 與 人數 為 兩名",
            "de": "Meeting mit maximal 2 Teilnehmern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "person attending at least two meetings",
            "zh": "参加 至少 两个 会议 的 人",
            "de": "Person, die mindestens an zwei Besprechungen teilnimmt"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "what important meeting has a length of three hours",
            "zh": "哪 一个 重要 会议 是 时长 3 小时 的 ？",
            "de": "Was für ein wichtiges Treffen hat eine Länge von drei Stunden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me all meetings that start at 10am and last three hours",
            "zh": "告诉 我 有 所有 早上 10 点 开始 持续 3 个 小时 的 会议",
            "de": "zeige mir alle Meetings, die um 10 Uhr beginnen und drei Stunden dauern."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "where is my Jan 2 meeting",
            "zh": "我 1 月 2 号 的 会议 在 哪里 举行",
            "de": "Wo ist mein Treffen am 2. Januar?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "meeting starts at 10am or 3pm at the earliest",
            "zh": "会议 最早 在 上午 10 点 或 下午 3 点 开始",
            "de": "Die Besprechung beginnt frühestens um 10 oder 15 Uhr"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )"
        },
        "question": {
            "en": "what time does the weekly stand-up meeting end",
            "zh": "周 例会 几点 结束",
            "de": "Zu welcher Zeit endet das wöchentliche Stand-up Meeting?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "Jan 2nd meeting with Alice as attendee",
            "zh": "1 月 2 号 爱丽丝 参加 的 会议",
            "de": "2. Januar Meeting mit Alice als Teilnehmerin"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who has attended the least meetings",
            "zh": "谁 参加 的 会议 最少",
            "de": "Wer hat an den wenigsten Meetings teilgenommen?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "show me all meetings that start no earlier than 10am",
            "zh": "给 我 列出 所有 不早 于 早上 10 点 开始 的 会议",
            "de": "Zeig mir alle Meetings die nicht früher als 10 Uhr morgens starten"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the location of the meeting that will have two or more attendees",
            "zh": "那个 有 两个 或 更 多 的 参与 人 的 会议 的 地点 是 在 哪里 ？",
            "de": "Wo findet das Meeting statt, an dem zwei oder mehr Teilnehmer teilnehmen werden?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings on January 2nd happening at the Greenberg cafe",
            "zh": "告诉 我 1 月 2 日 在 格林 伯格 咖啡馆 发生 的 所有 会议",
            "de": "zeig mir alle Treffen am 2. Januar im Greenberg Cafe"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( string location ) ) )"
        },
        "question": {
            "en": "meeting held in the fewest number of locations",
            "zh": "在 最少 地点 举办 的 会议",
            "de": "Meeting, das an den wenigsten Orten abgehalten wurde"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )"
        },
        "question": {
            "en": "meeting in Greenberg cafe or central office",
            "zh": "在 格林 伯格 咖啡馆 或者 中央 办公室 的 会议",
            "de": "Meeting im Greenberg Cafe oder Zentralbüro"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "meeting featuring Alice as attendee starting at 10am",
            "zh": "爱丽斯 是 参会者 并且 在 早上 10 点 开始 的 会议",
            "de": "Meeting mit Alice als Teilnehmer/in, welches um 10 Uhr anfängt"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )"
        },
        "question": {
            "en": "show me any meetings scheduled to be longer than one hour or three hours",
            "zh": "列出 任何 计划 长于 一 小时 或 三 小时 的 会议",
            "de": "Zeigen Sie mir alle Besprechungen, die länger als eine oder drei Stunden dauern sollen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.person.alice en.person.bob ) )"
        },
        "question": {
            "en": "show me any meetings that Alice or bob have attended",
            "zh": "告诉 我 Alice 或 bob 参加 过 的 任何 会议",
            "de": "Zeig mir alle Meetings an denen Alice oder bob teilgenommen haben"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )"
        },
        "question": {
            "en": "what meeting is as long or longer than weekly stand-up",
            "zh": "哪个 会议 和 周 例会 一样 长 或者 更长",
            "de": "Welches Meeting ist so lang oder länger als das wöchentliche Stand-up?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( string attendee ) ) )"
        },
        "question": {
            "en": "meeting with largest number of attendees",
            "zh": "参会者 最多 的 会议",
            "de": "Meeting mit der größten Teilnehmerzahl"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )"
        },
        "question": {
            "en": "what meeting has the same date as weekly startup",
            "zh": "哪个 会议 和 周 例会 的 日期 相同",
            "de": "Welches Meeting hat das gleiche Datum wie das wöchentliche Startup?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )"
        },
        "question": {
            "en": "meeting later than January 2nd or 3rd",
            "zh": "晚于 一月 2 号 或 1 月 3 号 举行 的 会议",
            "de": "Treffen nach dem 2. oder 3. Januar"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )"
        },
        "question": {
            "en": "meeting that ends at start time of weekly stand-up",
            "zh": "在 周 例会 开始 的 时候 结束 的 会议",
            "de": "Meeting das zur Startzeit des wöchentlichen Stand-up endet"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings that end at 10am on Jan 2",
            "zh": "告诉 我 1 月 2 日 上午 10 点 结束 的 所有 会议",
            "de": "zeige mir alle Meetings, die am 2. Januar um 10 Uhr enden."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "what meeting did Alice not attend",
            "zh": "爱丽丝 没有 参加 哪个 会议",
            "de": "An welchem Treffen nahm Alice nicht teil?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "what meeting is not located at Greenberg cafe",
            "zh": "哪个 会议 是 不 在 格林 伯格 咖啡厅 举行 的",
            "de": "Welche Sitzung findet nicht im Greenberg cafe statt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings beginning later than the weekly stand-up",
            "zh": "告诉 我 所有 周 例会 之后 开始 的 会议",
            "de": "zeig mir alle Besprechungen die Später beginnen als das wöchentliche Stand-Up"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "what meeting does not start at 10am",
            "zh": "哪个 会议 不是 在 早上 10 点 开始 的",
            "de": "Welche Besprechung beginnt nicht um 10:00 Uhr morgens?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) )"
        },
        "question": {
            "en": "important meetings",
            "zh": "重要 会议",
            "de": "Wichtige Besprechungen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show all meetings that end at 10am on Jan 2",
            "zh": "显示 1 月 2 日 上午 10 点 结束 的 所有 会议",
            "de": "Zeige alle Meetings, die am 2. Januar um 10 Uhr enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )"
        },
        "question": {
            "en": "meetings that start later than or at the same time as the weekly stand-up meeting",
            "zh": "比周 例会 迟 开始 或者 同时 开始 的 会议",
            "de": "Besprechungen, die später oder zur selben Zeit wie die wöchentliche Stand-up-Besprechung beginnen."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me all meetings ending at 10 am which are scheduled to be three hours long",
            "zh": "告诉 我 所有 预计 3 个 小时 长 而且 早上 10 点 结束 的 会议",
            "de": "Zeige alle besprechungen, die um 10:00 Uhr morgens enden und mit einer Dauer von drei Stunden angesetzt sind"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )"
        },
        "question": {
            "en": "meeting starts before weekly stand-up",
            "zh": "在 周 例会 之前 开始 的 会议",
            "de": "Eine Besprechung, die vor der wöchentlichen Stehbesprechung beginnt"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "what meeting has a date no later than Jan 2",
            "zh": "什么 会议 的 日期 不迟于 1 月 2 日",
            "de": "Welche besprechung ist mit Datum nicht später als 2. Januar eingetragen?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )"
        },
        "question": {
            "en": "which meeting is the shortest",
            "zh": "哪 次 会议 是 最 短 的",
            "de": "welches Treffen ist das kürzeste"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )"
        },
        "question": {
            "en": "where is the three hour long meeting",
            "zh": "三 小时 长 的 会议 在 哪里 ?",
            "de": "Wo findet das dreistündige Meeting statt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "show me meetings starting later than 10am",
            "zh": "给 我 看 在 早上 十点 之后 开始 的 会议",
            "de": "Zeig mir Meetings die später als 10 Uhr morgens starten"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) )"
        },
        "question": {
            "en": "show me all meetings the same length of the weekly stand-up",
            "zh": "告诉 我 跟 周 例会 时间 一样 长 的 会议",
            "de": "Zeige mir alle Besprechungen mit derselben Länge wie der wöchtenliche Stand-Up."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )"
        },
        "question": {
            "en": "show me meeting which end before weekly stand-up",
            "zh": "列出 在 周 例会 之前 结束 的 会议",
            "de": "Zeige mir alle Besprechungen die vor dem wöchentlichen Stand-Up enden."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "meetings attended by Alice that start at 10am",
            "zh": "爱丽丝 参加 的 早上 10 点 开始 的 会议",
            "de": "Meetings um 10 Uhr an denen Alice teilgenommen hat"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )"
        },
        "question": {
            "en": "what meetings end at 10am or 3pm",
            "zh": "哪些 会议 在 早上 十点 或者 下午 三点 结束",
            "de": "Welche Besprechungen enden um 10 Uhr oder 15 Uhr?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me all locations that are used for more than two meetings",
            "zh": "告诉 我 所有 用于 两次 以上 会议 的 地点",
            "de": "Zeig mir alle Orte die für mehr als zwei Meetings genutzt werden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me all meetings Alice has attended which have ended at 10 am",
            "zh": "列出 所有 爱丽丝 参加 并且 早上 十点 结束 的 会议",
            "de": "Zeige mir alle Meetings an denen Alice teilgenommen hat welche um 10 Uhr morgens endeten"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )"
        },
        "question": {
            "en": "show me all meetings less than three hours long",
            "zh": "给 看 所有 时 长 少于 3 小时 的 会议",
            "de": "zeig mir alle Besprechungen, die kürzer als drei Stunden sind"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "show the meeting on Jan 2",
            "zh": "显示 一月 二号 的 会议",
            "de": "Zeige das Meeting am 2 Jan"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "show me all 3 hour meetings with Alice",
            "zh": "给 我 看 所有 时长 为 3 小时 且 爱丽丝 在场 的 会议",
            "de": "Zeig mir alle 3 Stunden-Meetings mit Alice"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )"
        },
        "question": {
            "en": "show me all meetings starting at the same time as the weekly stand-up",
            "zh": "给 我 展示 所有 开始 时间 与 每周 例会 一样 的 会议",
            "de": "zeig mir alle Besprechungen die um die selbe zeit anfangen wie das wöchentliche Stand-Up"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings the same length or longer than the weekly stand-up",
            "zh": "给 我 看 所有 和 周 站立 会 时间 相同 或者 更长 的 会议",
            "de": "Zeige mir alle Besprechungen, die dieselbe Länger haben wie die wöchentliche Stehbesprechung oder länger sind"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )"
        },
        "question": {
            "en": "show me the locations of all meetings three hours in length",
            "zh": "给 我 展示 所有 时长 是 3 个 小时 的 会议 的 地点",
            "de": "Zeige mir die Orte aller Besprechungen mit einer Dauer von drei Stunden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )"
        },
        "question": {
            "en": "who are the attendees for the meetings in Greenberg cafe",
            "zh": "谁 是 格林 伯格 咖啡馆 会议 的 参加者",
            "de": "Wer sind die Teilnehmer der Besprechungen im Greenberg-Cafe?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings with two or more people attending",
            "zh": "给 我 看 所有 多于 两个 人 参加 的 会议",
            "de": "zeig mir alle Besprechungen mit zwei oder mehr Teilnehmern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "what meeting starts earlier than the end time of weekly stand-up",
            "zh": "哪个 会议 是 在 每周 小汇报 结束 前 开始 的",
            "de": "Welches Metting beginnt früher als das wöchentliche Stand-Up endet"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )"
        },
        "question": {
            "en": "meetings that end the earliest",
            "zh": "结束 最早 的 会议",
            "de": "Besprechungen, die am frühesten enden."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings Alice attended on January 2nd",
            "zh": "告诉 我 爱丽丝 1 月 2 日 参加 的 所有 会议",
            "de": "zeige mir alle Treffen, an denen Alice am 2. Januar teilgenommen hat"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "meetings on January 2",
            "zh": "1 月 2 日 的 会议",
            "de": "Treffen am 2. Januar"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which people will attend two or more meetings",
            "zh": "哪些 人 将 参加 两次 或 更 多次 会议",
            "de": "Welche Personen werden an zwei oder mehr Meetings teilnehmen?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )"
        },
        "question": {
            "en": "show meetings that end at 10am or 3pm",
            "zh": "列出 在 早上 10 点 或 下午 3 点 结束 的 会议",
            "de": "Zeigen Sie Besprechungen, die um 10 oder 15 Uhr enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )"
        },
        "question": {
            "en": "show me all meetings happening on January 2nd or January 3rd",
            "zh": "给 我 列出 所有 在 1 月 2 号 或 1 月 3 号 举行 的 会议",
            "de": "Zeig mir alle Treffen, die am 2. oder 3. Januar stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings beginning on or after January 2nd",
            "zh": "给 我 看 所有 在 一月 二号 或 之后 开始 的 会议",
            "de": "Zeige mir alle Meetings, die entweder am oder nach dem 2. Januar beginnen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )"
        },
        "question": {
            "en": "meeting whose location is same as the location of weekly stand-up",
            "zh": "地点 与 每周 例会 地点 相同 的 会议",
            "de": "Welche Besprechungen haben die gleiche Location wie die des wöchentlichen stand-ups?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string date ) ) ) )"
        },
        "question": {
            "en": "show me the meetings scheduled earliest in the month",
            "zh": "给 我 列出 在 这个 月 安排 最早 的 会议",
            "de": "Zeige mir Besprechungen, die am frühsten diesen Monat angesetzt sind"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )"
        },
        "question": {
            "en": "who is not an attendee of weekly stand-up",
            "zh": "谁 没 去 每周 例会",
            "de": "Wer nimmt nicht an den wöchentlichen stand-ups teil?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "what meeting is on Jan 2 or earlier",
            "zh": "哪个 会议 是 在 1 月 2 号 或 更 早 （ 举行 ） 的 ？",
            "de": "Welches Meeting ist am 2. Januar oder früher?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "what location is the meeting that starts at 10am",
            "zh": "早上 10 点 开始 的 会议 在 哪里 举行",
            "de": "Wo findet die Besprechung statt, die um 10:00 Uhr morgens beginnt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )"
        },
        "question": {
            "en": "locations of the weekly stand-up meeting or annual review meeting",
            "zh": "每周 小汇报 或 年度 回顾 会议 的 地方",
            "de": "Standorte des wöchentlichen Stand-Up meetings oder des Jahresabschluss meeting"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "meetings attended by Alice that are three hours long",
            "zh": "爱丽丝 参加 的 三个 小时 长 的 会议",
            "de": "Dreistündige Meetings, an denen Alice teilgenommen hat"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what are the areas where two or more meetings take place",
            "zh": "举办 了 有 两个 或者 更 多 会议 的 区域 是 什么",
            "de": "An welchen Orten finden zwei oder mehr Besprechungen statt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings that fall before or after Jan 2",
            "zh": "告诉 我 1 月 2 日 之前 或 之后 的 所有 会议",
            "de": "Zeig mir alle meetings die vor oder nach dem 2. Januar stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )"
        },
        "question": {
            "en": "show me all meetings at the same location as the weekly stand-up",
            "zh": "告诉 我 所有 跟 每周 小汇报 的 场地 一样 的 会议",
            "de": "Zeig mir alle Meetings mit der gleichen Location wie das wöchentliche Stand-up"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me meetings that last three hours",
            "zh": "告诉 我 3 个 小时 长 的 会议",
            "de": "Zeig mir Meetings die drei Stunden dauern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "show me meeting locations that start at 10am",
            "zh": "告诉 我 所有 在 早上 10 开始 的 会议",
            "de": "Zeige mir die Orte der Meetings die um 10 Uhr morgens beginnen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me locations with the fewest meetings",
            "zh": "告诉 我 举办 最少 会议 的 地点",
            "de": "Zeigen Sie mir Standorte mit den wenigsten Besprechungen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many people attended meetings",
            "zh": "有 多少 人 参加 了 会议",
            "de": "Wie viele Leute nahmen an Meetings teil?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "show me meetings with Alice or bob",
            "zh": "跟 爱丽丝 或者 鲍勃 一起 参加 的 会议",
            "de": "Zeig mir Meetings mit Alice oder bob"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings happening on days other than January 2nd",
            "zh": "告诉 我 除了 在 1 月 2 号 举行 的 所有 会议",
            "de": "Zeig mir alle Meetings die an anderen Tagen als dem 2. Januar stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me all people who have attended at least two meetings",
            "zh": "告诉 我 所有 至少 参加 了 2 个 会议 的 人",
            "de": "Zeigen Sie mir alle Personen, die an mindestens zwei Besprechungen teilgenommen haben"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "meetings that end at or after the weekly stand-up meeting ends",
            "zh": "在 周 例会 或者 之后 结束 的 会议",
            "de": "Treffen, die während oder nach der wöchentlichen Stad-Up Besprechung enden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "what housing unit in the same neighborhood as 123 sesame street was posted on jan 2",
            "zh": "和 123sesame 街 处于 同一个 小区 并且 是 在 一月 2 日 发布 的 房子 是 哪 一间",
            "de": "Welche Wohneinheit in derselben Nachbarschaft wie die Sesamstraße 123 wurde am 2. Januar gepostet?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "which housing posted jan 2nd rents for 1500",
            "zh": "哪 一个 在 一月 2 号 发布 的 房子 月租 是 1500 元 ？",
            "de": "Welche Unterkunft wurde am 2. Januar mit einer Miete von 1500 veröffentlicht?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "800 square feet housing that allows dogs",
            "zh": "800 平方英尺 的 房子 并且 允许 养狗 。",
            "de": "Eine 800 Quadratfuß große Wohnung die Hunde erlaubt"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )"
        },
        "question": {
            "en": "find 800 square feet housing units of the type apartment",
            "zh": "找到 那 一个 户型 有 800 平方英尺 的 公寓",
            "de": "finden Sie 800 Quadratfuß Wohneinheiten des Typs Wohnung"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "housing with 1500 dollars rent that has a private bath",
            "zh": "租金 1500 并且 有 一个 私人 卫浴 的 的 房子",
            "de": "Wohnungen mit 1500 Dollar Miete, die ein privates Bad haben."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "what neighborhood is 123 sesame street in",
            "zh": "123 芝麻街 在 什么 居民区",
            "de": "In welchem Bezirk liegt 123 Sesamstraße?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "what kind of housing is the housing unit posted on jan 2",
            "zh": "一月 二号 发布 的 住房 单元 是 什么 类型 的 房子",
            "de": "Was für eine Art von Immobilie ist die Immobilie, die am zweiten Januar veröffentlicht wurde?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( string neighborhood ) ) )"
        },
        "question": {
            "en": "find housing units with the most number of neighborhoods",
            "zh": "找到 有 最 多 居民区 的 住房 单元",
            "de": "Finde Wohneinheiten mit der größten Anzahl von Nachbarschaften"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "what housing unit contains a private bath",
            "zh": "什么 住房 单位 包含 私人 浴室",
            "de": "Welche Wohneinheit verfügt über ein privates Badezimmer?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "housing unit that costs 1500 dollars rent and allows dogs",
            "zh": "租金 是 1500 并且 允许 养狗 的 住房 单元",
            "de": "Wohneinheit, die 1500 Dollar Miete kostet und Hunde erlaubt."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many neighborhoods are in the city",
            "zh": "这个 城市 有 多少 个 社区",
            "de": "Wie viele Stadtteile gibt es in der Stadt?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ) )"
        },
        "question": {
            "en": "which kind of housing permits cats inside it",
            "zh": "哪 种 住房 允许 猫 在 里面",
            "de": "Welche Art von Wohneinheiten erlaubt Katzen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "housing that is either an apartment or townhouse",
            "zh": "是 公寓 或者 是 联排 别墅 的 房子",
            "de": "Wohnraum welcher entweder eine Wohnung oder ein Stadthaus ist"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "which housing unit is posted lately",
            "zh": "哪个 住房 单元 是 最近 发布 的",
            "de": "Welche Wohneinheit wurde zuletzt gepostet"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "housing that isnt in midtown west",
            "zh": "不 处于 城中 西部 的 房子",
            "de": "Wohnraum der nicht in Midtown West ist."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "housing that allows cats and is 1500 a month",
            "zh": "允许 养猫 并且 月租 是 1500 元 的 房子",
            "de": "Wohnraum der Katzen erlaubt und 1500 pro Monat kostet"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "which housing unit was not posted on jan 2",
            "zh": "哪个 住房 单元 不是 在 一月 二号 发布 的",
            "de": "Welche Wohneinheit wurde nicht am 2. Jan gepostet"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )"
        },
        "question": {
            "en": "list all housing units that are apartments",
            "zh": "列出 所有 是 公寓 的 房屋 单元",
            "de": "liste alle Wohnungen auf die Apartments sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "what housing has been posted lately",
            "zh": "那个 房子 是 最近 发布 的",
            "de": "Welcher Wohnraum wurde kürzlich ausgeschrieben?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )"
        },
        "question": {
            "en": "apartments that are cat friendly",
            "zh": "允许 养猫 的 公寓",
            "de": "Appartements, die katzenfreundlich sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )"
        },
        "question": {
            "en": "find housing units with less than or equal to the rent of 123 sesame street",
            "zh": "找到 少于 或 等于 123 芝麻街 房租 的 房子 单元",
            "de": "Finden Sie Wohneinheiten mit weniger als oder gleich der Miete von 123 Sesamstraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) )"
        },
        "question": {
            "en": "list all housing that have the size of 800 or 1000 square feet",
            "zh": "列出 所有 面积 是 800 或 1000 平方尺 的 房子",
            "de": "liste alle Immobilien mit einer Größe von 800 oder 1000 Quadratfuss"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )"
        },
        "question": {
            "en": "what are the neighborhoods of 123 sesame street and 900 mission avenue",
            "zh": "123 芝麻街 和 900mission 街 的 所在 社区 是 什么 ？",
            "de": "Was sind die Nachbarschaften von 123 Sesamstraße und 900 Mission Avenue"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "which housing unit has 1500 dollars as monthly rent",
            "zh": "哪个 住房 单位 的 月租金 为 1500 美元",
            "de": "welche Wohneinheit hat eine Monatmiete von 1500 Dollar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "housing with with largest posting date",
            "zh": "最新 发布 的 房子",
            "de": "Wohneinheiten mit dem größten Postingdatum"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "housing units who have a posting date of january 2nd and on 123 sesame street",
            "zh": "发布 日期 是 一月 二号 并且 在 123 芝麻街 上 的 房屋 单元",
            "de": "Immobilien die am 2. Januar in der 123 Sesame Street gelistet wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )"
        },
        "question": {
            "en": "smallest housing units",
            "zh": "最小 的 住房 单位",
            "de": "Kleinste Wohneinheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "find housing units with a private room and is dog friendly",
            "zh": "找到 有 私人 房间 并且 允许 养狗 的 房子",
            "de": "finde Wohneinheiten mit einem Privatraum die Hundefreundlich sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ) )"
        },
        "question": {
            "en": "what is the neighborhood of the apartment that is pet friendly",
            "zh": "哪个 街区 的 公寓 是 允许 养 宠物 的",
            "de": "Was ist die Nachbarschaft der Wohnung die tierfreundlich ist?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "housing that is more than 1500month",
            "zh": "房租 超过 1500 的 房子",
            "de": "Immobilie die teurer als 1500 pro Monat ist"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "apartments with a private room in midtown west",
            "zh": "在 市中心 西区 提供 私人 房间 的 公寓",
            "de": "Apartments mit eigenem Zimmer in Midtown West"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me housing that is the same type as at least two others",
            "zh": "跟 至少 另外 两种 房子 类型 一样 的 房子",
            "de": "zeig mir Wohnraum vom selben Typ wie mindestens zwei andere"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )"
        },
        "question": {
            "en": "apartment or condo",
            "zh": "公寓 或者 集合 式 住宅 （ 康斗 ）",
            "de": "Apartment oder Eigentumswohnung?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "a unit with a private bath that posted on january 2",
            "zh": "在 1 月 2 号 发布 的 提供 私人 浴室 的 房子",
            "de": "eine Einheit mit einem privaten Bad, die am 2. Januar veröffentlicht wurde."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "which housing unit with a rent of 1500 dollars per month permits cats in it",
            "zh": "哪 一个 月租 是 1500 块 的 单元房 允许 在 房里 养猫 ？",
            "de": "Welche Wohneinheit mit einer Miete von 1500 Dollar pro Monat erlaubt Katzen darin"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ) ) )"
        },
        "question": {
            "en": "what is units monthly rental",
            "zh": "单元房 的 月租费 是 多少 ？",
            "de": "was ist die monatliche Miete der Einheit"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "housing with any monthly rent posted on january 2",
            "zh": "在 一月 2 号 发布 的 任意 房租 的 房子",
            "de": "Immobilien mit jeglicher Miete die am 2 Januar gepostet wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( string housing_type ) ) )"
        },
        "question": {
            "en": "building with the least number of housing types",
            "zh": "用 最少 的 住房 种类 建造",
            "de": "Gebäude mit der geringsten Anzahl von Wohnungstypen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )"
        },
        "question": {
            "en": "what is the monthly rent for 123 sesame street",
            "zh": "123 芝麻街 的 月租金 是 多少 ？",
            "de": "Was ist die monatliche Miete für 123 Sesamstraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "apartment with a master bathroom in midtown west neighborhood",
            "zh": "在 市中心 西区 带主卫 的 公寓",
            "de": "Wohnung mit einem Master-Bad in Midtown West Nachbarschaft"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "what is the monthly rent of housing units posted on january 2nd",
            "zh": "在 1 月 2 号 发布 的 房子 月 房租 是 多少",
            "de": "Was ist die monatliche Miete der Wohneinheiten die am 2. Januar gepostet wurden?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( string neighborhood ) ) )"
        },
        "question": {
            "en": "find housing units with the least number of neighborhoods",
            "zh": "找到 邻居 数量 最少 的 房子",
            "de": "Finde Wohneinheiten mit der niedrigsten Anzahl an Nachbarschaften"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "apartment with a private bath that also accepts cats",
            "zh": "有 独立 卫生间 且 可以 养猫 的 公寓",
            "de": "Apartment mit eigenem Bad, in dem auch Katzen gestattet sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )"
        },
        "question": {
            "en": "housing unit sizes on 123 sesame street",
            "zh": "123 芝麻街 的 住房 单元 大小",
            "de": "Größe der Wohneinheiten in 123 Sesamstraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "neighborhood with the most available housing",
            "zh": "有 最 多 房源 的 居住区",
            "de": "Nachbarschaft mit den meisten verfügbaren Wohnungen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.housing.apartment en.housing.condo ) )"
        },
        "question": {
            "en": "condomonium or flat",
            "zh": "共管 或 普通 公寓",
            "de": "Eigentumswohnung oder Wohnung"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ) )"
        },
        "question": {
            "en": "what is the housing type that allows cats",
            "zh": "哪 种 房型 允许 养猫",
            "de": "Was ist der Haustyp, der Katzen erlaubt?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )"
        },
        "question": {
            "en": "what is the neighborhood of 123 sesame street",
            "zh": "芝麻街 123 号 的 居民区 是 什么 ？",
            "de": "Was ist die Nachbarschaft von 123 Sesamstraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )"
        },
        "question": {
            "en": "which housing unit is available for the least rent",
            "zh": "哪个 空闲 的 房屋 单元 有 最少 的 租金 ？",
            "de": "welche Wohneinheit ist für die geringste Miete verfügbar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "apartments that rent for at least 1500",
            "zh": "房租 至少 是 1500 的 公寓",
            "de": "Wohnungen die für mindestens 1500 vermietet werden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find housing units that satisfies two housing types",
            "zh": "找出 满足 两种 房屋 类型 的 房屋 单元",
            "de": "Finde Wohneinheiten die zwei Wohntypen erfüllt"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "which housing unit was posted before jan 2",
            "zh": "哪个 房屋 单元 是 在 一月 二号 发布 的 ？",
            "de": "Welche Wohnungen wurden vor dem 2. Januar gepostet?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "find housing that allows dogs and cats",
            "zh": "找出 允许 养狗 或 养猫 的 房子",
            "de": "Finde Wohnungen in denen Hunde und Katzen erlaubt sind."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "what is the neighborhood of 123 sesame street called as",
            "zh": "芝麻街 123 号 的 小区 的 名字 叫 什么",
            "de": "wie wird die Nachbarstraße der 123 Sesame street genannt"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )"
        },
        "question": {
            "en": "what housing unit was posted on jan 2 or feb 3",
            "zh": "哪个 房屋 单元 是 在 一月 二号 或 二月 三号 发布 的 ？",
            "de": "Welche Hauseinheit wurde am 2. Januar oder 3. Februar gepostet"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "800 square food housing units that have private baths",
            "zh": "800 平方尺 有 私人 浴室 的 房屋 单元",
            "de": "800 sq ft große Wohnungen mit separaten Bädern."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) ) )"
        },
        "question": {
            "en": "apartments in the same neighborhood at 123 sesame street",
            "zh": "和 123 芝麻街 在 同一个 社区 的 公寓",
            "de": "Wohnungen in der selben Nachbarschaft wie 123 Sesame street"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "housing with a private room that is 800 square feet total",
            "zh": "带 独立 房间 并且 是 800 平方尺 的 房子",
            "de": "Wohneinheit mit einem privaten Raum das insgesamt 800 Quadratfuß groß ist"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "apartment with a private bath for rent at 1500",
            "zh": "有 私人 浴室 并且 租金 是 1500 的 公寓",
            "de": "Appartment mit einem separaten Bad zum Preis von 1500."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "find housing that has a private room and bath",
            "zh": "找到 有 私人 房间 和 浴室 的 房屋",
            "de": "Finde Wohnungen mit separaten Zimmer und Bad."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "housing that allows cats and includes a private bath",
            "zh": "允许 养猫 并且 有 私人 浴室 的 房子",
            "de": "Wohnungen welche Katzen erlauben und ein privates Badezimmer besitzen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )"
        },
        "question": {
            "en": "which housing unit is smaller than 800 square feet or 1000 square feet by area",
            "zh": "哪个 住房 单元 面积 小于 800 平方英尺 或 1000 平方英尺",
            "de": "Welche Wohneinheit ist kleiner als 800 Quadratfuß oder 1000 Quadratfuß pro Fläche"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )"
        },
        "question": {
            "en": "neighborhood with apartments",
            "zh": "有 公寓 的 居民区",
            "de": "Nachbarschaft mit Apartments"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )"
        },
        "question": {
            "en": "apartment with rent between 1500 and 2000",
            "zh": "租金 在 1500 到 2000 之间 的 公寓",
            "de": "Wohnungen mit einer Miete zwischen 1500 und 200"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "apartments with less than 2 units",
            "zh": "有 少于 两个 单元 的 公寓",
            "de": "Wohnungen mit weniger als 2 Einheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "what kind of housing was posted on january 2",
            "zh": "那种 房屋 是 在 一月 二号 发表 的",
            "de": "Welche Art von Wohnungen wurde am 2.Januar gepostet?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "neighborhood of housing unit whose monthly rent is 1500 dollars",
            "zh": "月租金 是 1500 美元 的 房子 所在 的 社区",
            "de": "Nachbarschaft der Wohneinheit, deren monatliche Miete 1500 Dollar beträgt"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show housing types for three or more units",
            "zh": "列出 有 三个 或 更 多 单元 的 房型",
            "de": "Zeige Wohnungstypen mit drei oder mehr Einheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) )"
        },
        "question": {
            "en": "january 2 to february 3",
            "zh": "1 月 2 日至 2 月 3 日",
            "de": "2. Januar bis 3. Februar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_room ) ) ) )"
        },
        "question": {
            "en": "what kinds of housing include a private room",
            "zh": "什么样 的 住房 包括 私人 房间",
            "de": "Welche Art von Wohnungen enthält einen privaten Raum"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )"
        },
        "question": {
            "en": "unit with rent between 1500 and 2000 dollars",
            "zh": "房租 在 1500 到 2000 美金 之间 的 房子",
            "de": "Einheit mit einer Miete zwischen 1500 und 2000 Dollar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "neighborhood with more than two housing units",
            "zh": "有 多于 两个 住房 单元 的 居民区",
            "de": "Wohngegend mit mehr als zwei Wohneinheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "what housing is cat friendly and costs 1500 dollars",
            "zh": "哪个 房子 可以 养猫 并且 房租 是 1500 美金",
            "de": "Welche Wohnung ist katzenfreundlich und kostet 1500 Dollar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "housing posted before january 2",
            "zh": "在 一月 二号 之前 发布 的 房子",
            "de": "Wohnung, die vor dem 2. Januar gepostet wurde"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ) ) )"
        },
        "question": {
            "en": "what is the average size of housing",
            "zh": "住房 的 平均 面积 是 多少",
            "de": "Wie groß sind die Wohnungen im Durchschnitt?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )"
        },
        "question": {
            "en": "where is midtown west",
            "zh": "市中心 西区 在 哪",
            "de": "Wo ist Midtown West?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what housing unit has 2 or more types",
            "zh": "哪个 房子 有 2 种 或者 更 多 房型",
            "de": "Welche Wohneinheit hat 2 oder mehr Arten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "cat friendly apartments in midtown west",
            "zh": "在 中心 城西 能 养猫 的 公寓",
            "de": "Katzenfreundliche Apartments in Midtown West"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "neighborhood with at most two housing",
            "zh": "最多 有 两个 房子 的 社区",
            "de": "Nachbarschaft mit höchstens zwei Wohnungen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )"
        },
        "question": {
            "en": "what kind of housing is 900 mission ave and 123 sesame street",
            "zh": "900mission 大街 和 123 芝麻街 的 房子 类型 是 什么 ？",
            "de": "Welcher Wohnungstyp ist 900 Mission Ave und 123 Sesame Street"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "800 square foot apartment with a private bath",
            "zh": "800 平方尺 且 有 私人 浴室 的 公寓",
            "de": "800 Quadratfuß Appartement mit Privatbadezimmer"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "housing that is 1500month and includes a private room",
            "zh": "1500 元 每月 并且 包括 私人 房间 的 房子",
            "de": "Wohnung, die 1500/Monat kostet und ein Privatzimmer beinhaltet"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( string neighborhood ) ) )"
        },
        "question": {
            "en": "apartment in a quiet neighborhood",
            "zh": "在 一个 安静 的 社区 的 公寓",
            "de": "Wohnung in einer ruhigen Gegend"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "posting with at least two types of housing",
            "zh": "有 至少 两种 类型 房子 的 发布 启事",
            "de": "Angebot mit mindestens zwei Wohnungsarten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has less than two housing units",
            "zh": "什么 社区 有 少于 两个 的 房屋 单元 ？",
            "de": "Welche Nachbarschaft hat weniger als zwei Wohneinheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ) ) )"
        },
        "question": {
            "en": "what is the average price of apartments",
            "zh": "公寓 的 平均价格 是 多少 ？",
            "de": "Was ist der durchschnittliche Preis eines Apartments?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )"
        },
        "question": {
            "en": "housing that is 800 square feet or less or 1000 square feet or less",
            "zh": "小于 800 平方尺 或者 小于 1000 平方尺 的 房子",
            "de": "Welche Häuser sind 800 oder weniger als 1000 Quadratfuß groß?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "find all housing units posted on january 2",
            "zh": "找到 1 月 2 日 发布 的 所有 住房 单位",
            "de": "Hier finden Sie alle Wohneinheiten, die am 2. Januar veröffentlicht wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "housing that is at least 1500month",
            "zh": "至少 是 每月 1500 元 的 房子",
            "de": "Wohnungen, die mindestens 1500/Monat kosten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ) ) )"
        },
        "question": {
            "en": "how large is the housing unit",
            "zh": "这个 房屋 单元 有 多 大 ？",
            "de": "Wie groß ist die Wohneinheit?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "list all housing types that are not the same as those in 123 sesame street",
            "zh": "列出 所有 不 和 芝麻街 123 号 一样 的 住房 类型",
            "de": "Liste alle Wohnungen auf, die sich von 123 Sesame Street unterscheiden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "show me apartments with a private room",
            "zh": "给 我 看 有 私人 房间 的 公寓",
            "de": "Zeige Wohnungen mit Einzelzimmer"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "what housing unit in midtown west was posted on jan 2",
            "zh": "中心 城西 什么 房屋 单元 是 在 一月 二号 发布 的 ？",
            "de": "Welche Wohneinheit in Midtown West wurde am 2. Januar veröffentlicht"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )"
        },
        "question": {
            "en": "find housing units with rental charges between 1500 to 2000 dollars",
            "zh": "找到 租金 为 1500 至 2000 美元 的 住房 单位",
            "de": "Wohnungssuche mit Mietpreisen zwischen 1500 und 2000 Dollar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )"
        },
        "question": {
            "en": "what housing units are at least 800 or 1000 square feet",
            "zh": "什么 房屋 住所 是 至少 800 或 1000 平方英尺 ？",
            "de": "Suche Wohneinheiten, die mindestens 800 oder 1000 Quadratfuß groß sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "housing unit posted on january 2",
            "zh": "在 一月 二号 发布 的 的 房屋 单元",
            "de": "Wohneinheit gepostet am 2. Januar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "private bath with 800 square feet",
            "zh": "800 平方英尺 的 私人 浴室",
            "de": "privates Bad mit 800 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ) )"
        },
        "question": {
            "en": "unit with private bath",
            "zh": "有 私人 浴室 的 单元",
            "de": "Einheit mit eigenem Bad"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ) )"
        },
        "question": {
            "en": "neighborhoods with dog friendly apartments",
            "zh": "有 可以 养狗 的 公寓 的 社区",
            "de": "Nachbarschaften mit hundefreundlichen Wohnungen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )"
        },
        "question": {
            "en": "find housing units less than 1000  square feet",
            "zh": "找到 面积 小于 1000 平方英尺 的 住房 单元",
            "de": "Finde Hauseinheiten mit weniger als 1000 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which area has less than two housing units",
            "zh": "哪个 区域 有 少于 两个 住房 单元",
            "de": "Welche Gegend hat weniger als zwei Wohneinheiten?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string ! = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "housing unit that is not 800 square feet",
            "zh": "面积 不是 800 平方英尺 的 住房 单元",
            "de": "Wohneinheit, die nicht 800 Quadratfuß groß ist"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "apartments at 800 square feet",
            "zh": "面积 800 平方英尺 的 公寓",
            "de": "Appartements auf 800 Quadratmetern"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "housing with monthly rent of 1500 dollars that was posted on january 2",
            "zh": "1 月 2 日 发布 的 月租金 为 1500 美元 的 住房",
            "de": "Welche Wohnung hat eine monatliche Miete von 1500 Dollar und wurde am 2. Januar veröffentlicht?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )"
        },
        "question": {
            "en": "smallest apartments",
            "zh": "最小 的 公寓",
            "de": "kleinste Wohnungen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "apartments are 1500",
            "zh": "公寓 是 1500",
            "de": "Apartments sind 1500"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "in which area is 123 sesame street",
            "zh": "芝麻街 123 号 是 在 哪个 区域 的 ？",
            "de": "in welcher Gegend ist 123 Sesamstraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "housing that accepts dogs",
            "zh": "允许 养狗 的 房子",
            "de": "Wohnung, in der Hunde erlaubt sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "what housing has the latest posting date",
            "zh": "哪个 房子 是 最近 发布 的",
            "de": "Welche Wohnung wurde zuletzt veröffentlicht?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )"
        },
        "question": {
            "en": "housing that posted after january 2 or february 3",
            "zh": "在 一月 二号 或者 二月 三号 之后 发布 的 房子",
            "de": "Welche Wohnung wurde nach dem 2. Januar oder 3. Februar veröffentlicht?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "apartments that were posted on january 2",
            "zh": "在 一月 二号 发布 的 公寓",
            "de": "Wohnungen, die am 2 Januar gepostet wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "apartments with a private bath that allow dogs",
            "zh": "公寓 设有 可供 狗 入住 的 私人 浴室",
            "de": "Wohnungen mit einem privaten Badezimmer, die Hunde erlauben"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "housing with posting date of january 2",
            "zh": "在 一月 二号 发布 的 房子",
            "de": "Wohnungen, die am 2. Januar gepostet wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "800 square foot dog friendly apartment",
            "zh": "800 平方尺 ， 并且 可以 养狗 的 公寓 。",
            "de": "800 Quadratfuß große hundefreundliche Wohnung"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) )"
        },
        "question": {
            "en": "what kind of housing is 123 sesame street",
            "zh": "芝麻街 123 号 是 什 类型 的 房子 ？",
            "de": "Welche Art Wohnung ist Sesame Street 123?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )"
        },
        "question": {
            "en": "which housing unit resembles the size of 123 sesame street",
            "zh": "哪个 房屋 单元 的 面积 和 芝麻街 123 号 的 类似 ？",
            "de": "welche Wohneinheit hat die gleiche Größe wie Sesamstraße 123"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "find an 800 sq ft housing unit posted on january 2",
            "zh": "找到 一家 1 月 2 号 发布 的 800 平方尺 的 房子 。",
            "de": "Finde eine 800 quadratfuß große Wohnung gepostet am 2 Januar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "housing that includes two units",
            "zh": "包括 两个 单元 的 房子",
            "de": "Wohnung mit zwei Einheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "apartments with a private bathroom that allow cats",
            "zh": "有 私人 浴室 并且 允许 养猫 的 公寓",
            "de": "Wohnung mit eigenem Badezimmer, in der Katzen erlaubt sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "housing that allows dogs that posted on january 2",
            "zh": "在 一月 二号 发布 的 允许 养狗 的 房子",
            "de": "Hundefreundliche Wohnung gepostet am 2. Januar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )"
        },
        "question": {
            "en": "housing unit with a cheaper rent than 123 sesame street",
            "zh": "房租 比 芝麻街 123 号 便宜 的 房子",
            "de": "Wohnung mit einer günstigeren Miete als 123 Sesame Street"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )"
        },
        "question": {
            "en": "apartments that permit cats",
            "zh": "允许 养猫 的 公寓",
            "de": "Wohnungen, in denen Katzen erlaubt sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )"
        },
        "question": {
            "en": "housing that was posted on january 2",
            "zh": "一月 二号 发布 的 房子",
            "de": "Wohnungen die am 2 Januar gepostet wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "need a unit with a private room in the midtown west area",
            "zh": "需要 一个 在 市中心 西部 有 私人 房间 的 一个 房子",
            "de": "Brauche Wohnung mit Privatzimmer in der Midtown West Gegend"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "housing unit that allows cats and has a private bath",
            "zh": "可以 养猫 并且 有 私人 浴室 的 房子",
            "de": "Wohneinheit, die Katzen erlaubt und ein eigenes Bad hat."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "housing posted the same day as 123 sesame street",
            "zh": "与 芝麻街 123 号 发布 日期 相同 的 房子",
            "de": "Wohnung, die am gleichen tag gepostet wurde wie 123 Sesame Street"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "housing posted before january 2",
            "zh": "在 一月 二号 之前 发布 的 房子",
            "de": "Wohnung die von dem 2 Januar gepostet wurde"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "what housing was posted no earlier than jan 2",
            "zh": "哪个 房子 是 不 早于 一月 二号 发布 的 ？",
            "de": "Welche Wohnung wurde nicht frueher als am 2 Januar gepostet"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string housing_type ) ( string = ) en.housing.apartment ) )"
        },
        "question": {
            "en": "find apartments in the neighborhoods of midtown west",
            "zh": "找到 市中心 西区 街区 的 公寓",
            "de": "Finde Apartments in der Gegend von Midtown West"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) )"
        },
        "question": {
            "en": "either 800 or 1000 square feet",
            "zh": "800 或者 1000 平方英尺 的 公寓",
            "de": "Entweder 800 oder 1000 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )"
        },
        "question": {
            "en": "which housing units are at least 800 square feet in size",
            "zh": "哪个 房子 至少 有 800 平方英尺 大",
            "de": "Welche Wohnungseinheiten sind mindestens 800 Quadratfuß groß?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_room ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "which housing unit permits dogs and has the facility of a private room",
            "zh": "哪个 房子 有 私人 房间 而且 允许 养狗",
            "de": "Welche Wohneinheiten, in denen Hunde erlaubt sind, verfügen über die Amenität eines Einzelzimmers"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "list all apartments in midtown west",
            "zh": "列出 所有 市中心 西区 的 公寓",
            "de": "Liste alle Wohnungen in Midtown West auf"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )"
        },
        "question": {
            "en": "housing at least 800 to 1000 square feet",
            "zh": "至少 800 或者 1000 平方英尺 的 房子",
            "de": "Wohnung mit mindestens 800-1000 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "neighborhoods with the least housing units",
            "zh": "有 最少 住房 单元 的 居民区",
            "de": "Stadtteile mit den wenigsten Wohneinheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )"
        },
        "question": {
            "en": "how large is 123 sesame street",
            "zh": "123sesame 大街 有 多 大",
            "de": "Wie groß ist Sesame Street 123?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "apartments in the midtown west neighborhood",
            "zh": "在 市中心 西区 的 公寓",
            "de": "Wohnungen in Midtown West"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "housing that is 1500month and 800 square feet",
            "zh": "月租 1500 块 并且 有 800 平方尺 的 房子",
            "de": "Wohnung für 1500/Monat mit 800 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "cat friendly housing with a private bath",
            "zh": "可以 养猫 并且 有 私人 浴室 的 房子",
            "de": "Katzenfreundliche Unterkunft mit eigenem Bad"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "exclude apartments from midtown west",
            "zh": "排除 在 城中 西部 的 公寓",
            "de": "Ausschluss von Wohnungen aus Midtown West"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "neighborhood that has two housing",
            "zh": "有 两个 房子 的 社区",
            "de": "Wohngegend, die 2 Wohnungen hat."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )"
        },
        "question": {
            "en": "most expensive places to rent",
            "zh": "租金 最贵 的 地方",
            "de": "Teuerste Mietorte."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "housing posted in a neighborhood on january 2",
            "zh": "一月 二号 发布 在 一个 社区 的 房子",
            "de": "Häuser in einer Wohngegnd, die am 2. Januar veröffentlicht wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "which housing unit has a rent of 1500 dollars per month",
            "zh": "哪个 住房 单位 每 月租金 为 1500 美元",
            "de": "Welche Wohneinheit hat eine Miete von 1500 Dollar im Monat?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "find cat friendly housing units that charge 1500 dollars as rent",
            "zh": "找到 可以 养猫 租金 收 1500 的 住房 单元",
            "de": "Katzenfreundliche Wohneinheiten finden welche 1500 Dollar als Miete berechen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )"
        },
        "question": {
            "en": "housing under 800 square feet",
            "zh": "小于 800 平方尺 的 房子",
            "de": "Wohnung mit weniger als 800 Quadratfuß."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "which housing unit permits dogs and has a private bath",
            "zh": "哪 一个 房屋 单元 是 可以 养狗 并且 有 私人 浴室 的 ？",
            "de": "In welcher Wohnung mit eigenem Bad sind Hunde erlaubt?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "show me housing in midtown west where rent is 1500 dollars a month",
            "zh": "给 我 看 在 中心 城西 月租金 是 1500 美元 的 房子",
            "de": "Zeig mir Häuser in midtown west welche eine Miete von 1500 Dollar im Monat haben"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "800 square foot apartment with rent at 1500 a month",
            "zh": "面积 是 800 平方公尺 租金 1500 一个月 的 公寓",
            "de": "800 Quadratfuß apartment mit einer Miete von 1500 im Monat."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )"
        },
        "question": {
            "en": "which housing unit has  an area of 800 or 1000 square feet",
            "zh": "哪个 住房 单元 面积 是 800 或者 1000 平方英尺 的",
            "de": "Welche Wohneinheit hat eine Wohnfläche zwischen 800 und 1000 Quadratfuß?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "name an article found in at least two publications",
            "zh": "说出 一篇 至少 能 在 两篇 出版物 中 找到 的 文章",
            "de": "Nenne einen Artikel, der in mindestens zwei Publikationen zu finden ist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string min ) ( string venue ) ) )"
        },
        "question": {
            "en": "what article has the least venues",
            "zh": "哪 篇文章 拥有 最少 的 场地",
            "de": "Welcher Artikel hat die wenigsten Veranstaltungsorte?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "who is the author of multivariate date analysis articles",
            "zh": "谁 是 多元 数据分析 文章 的 作者",
            "de": "Wer ist der Autor von Artikeln zur multivariaten Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )"
        },
        "question": {
            "en": "articles written by Efron or Lakoff",
            "zh": "Efron 或 Lakoff 撰写 的 文章",
            "de": "Artikel von Efron oder Lakoff"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what article makes the most citations",
            "zh": "哪 篇文章 拥有 最多 的 引用",
            "de": "Welcher Artikel enthält die meisten Zitate"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "who wrote an article about city multivariate data analysis",
            "zh": "谁 写 了 一篇 关于 城市 多元 数据分析 的 文章",
            "de": "Wer schrieb den Artikel über multivariate Datenanalyse von Städten?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find an article with no more than two authors",
            "zh": "找 一篇 不 超过 两位 作者 的 文章",
            "de": "Finde einen Artikel mit nicht mehr als zwei Autoren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "article that does not cite multivariate data analysis",
            "zh": "没有 引用 多元 数据分析 的 文章 。",
            "de": "Artikel, der keine multivariate Datenanalyse zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "articles that won an award published in annals of statistics",
            "zh": "在 统计 年鉴 中 获奖 的 文章",
            "de": "Artikel, die eine Auszeichnung gewonnen haben, die in Annalen der Statistik veröffentlicht wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "an article on statistics that cites multivariate data analysis",
            "zh": "一篇 引用 了 多 变量 数据分析 并且 关于 统计 的 文章",
            "de": "ein Artikel über Statistiken, welcher eine multivariate Datenanalyse zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "writer of two articles",
            "zh": "两篇 文章 的 作者",
            "de": "Autor zweier Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string ! = ) en.person.efron ) )"
        },
        "question": {
            "en": "articles not written by Efron",
            "zh": "不是 埃夫隆 写 的 文章",
            "de": "Artikel, die nicht von Efron geschrieben wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )"
        },
        "question": {
            "en": "publications that contains articles that are also published in annals of statistics",
            "zh": "包含 了 同样 在 统计 年鉴 上 发表 的 文章 的 出版物 。",
            "de": "Veröffentlichungen, die Artikel enthalten, die auch in den Annalen der Statistik veröffentlicht wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what article exchanged citations with multivariate data analysis",
            "zh": "什么 文章 跟 多元 数据分析 交换 了 引用 。",
            "de": "In welchem Artikel wurden Zitate mit multivariater Datenanalyse ausgetauscht?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string author ) ( string = ) en.person.efron ) )"
        },
        "question": {
            "en": "articles written by Efron published in 2004",
            "zh": "埃夫 隆于 2004 年 发表 的 文章",
            "de": "Artikel von Efron veröffentlicht im Jahr 2004"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "articles that cite multivariate data analysis and are cited in multivariate data analysis",
            "zh": "引用 了 多元 数据分析 ， 并 被 多元 数据分析 引用 了 的 文章 。",
            "de": "Artikel die die multivariate Datenanalyse zitieren und in multivariate Datenanalyse zitiert sind"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "articles cited by articles published in 2004",
            "zh": "2004 年 发表 的 文章 引用 的 文章",
            "de": "Artikel, die von in 2004 veröffentlichten Artikeln zitiert werden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "authors of articles published in 2004",
            "zh": "2004 年 发表 的 文章 的 作者",
            "de": "Autoren von Artikeln aus dem Jahr 2004"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "venues of articles cited by multivariate data analysis",
            "zh": "被 多元 数据分析 引用 的 文章 的 发布 渠道",
            "de": "Veranstaltungsorte von Artikeln, die durch multivariate Datenanalyse zitiert wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "venue of two article",
            "zh": "两篇 文章 的 发布 渠道",
            "de": "Veranstaltungsort von zwei Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "article that references one or two articles",
            "zh": "引用 了 一篇 或 两篇 文章 的 文章",
            "de": "Artikel, der auf einen oder zwei Artikel verweist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "what article is about annals of statistics",
            "zh": "什么 文章 是 关于 统计 年鉴 的 ？",
            "de": "Welcher Artikel handelt von Annalen der Statistik?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )"
        },
        "question": {
            "en": "articles that won an award written by Efron",
            "zh": "Efron 写 的 获奖 文章",
            "de": "Artikel, die eine Auszeichnung gewonnen haben, die von Efron geschrieben wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "article by only one author",
            "zh": "只有 一个 作者 的 文章",
            "de": "Artikel von nur einer Autor"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what article was cited the most",
            "zh": "哪 篇文章 被 引用 次数 最 多",
            "de": "Welcher Artikel wurde am meisten zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what article is cited at least twice",
            "zh": "哪 篇文章 被 引用 至少 两次",
            "de": "Welcher Artikel wurde mindestens zweimal zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )"
        },
        "question": {
            "en": "what article has a publication date the same as the date of multivariate data analysis",
            "zh": "哪 篇文章 是 跟 多元化 数据分析 是 在 同一天 发布 的",
            "de": "Welcher Artikel hat das gleiche Veröffentlichungsdatum wie das Datum der multivariaten Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( string min ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "venues publishing the fewest articles",
            "zh": "最少 文章 发布 的 出版 渠道",
            "de": "Veranstaltungsorte mit den wenigsten Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what article has two venues minimum",
            "zh": "哪 篇文章 是 有 最少 两个 出版 渠道 的 ？",
            "de": "Welcher Artikel hat mindestens zwei Veranstaltungsorte"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "publications that include articles published in 2004",
            "zh": "包含 了 2004 年 发表 的 文章 的 出版物",
            "de": "Veröffentlichungen mit Artikeln aus dem Jahr 2004"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "what articles are written between 2004 and 2010",
            "zh": "哪些 文章 是 在 2004 年 到 2010 年 之间 写 的 ？",
            "de": "Welche Artikel wurden zwischen 2004 und 2010 geschrieben?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "article citing multivariate data analysis published in 2004",
            "zh": "引用 在 2004 年 发表 的 多元 变量 分析 的 文章",
            "de": "Artikel, der multivariate Datenanalyse aus dem Jahr 2004 zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many people",
            "zh": "多少 人",
            "de": "Wie viele Leute?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )"
        },
        "question": {
            "en": "article published most recently",
            "zh": "最近 发表 的 文章",
            "de": "Artikel zuletzt veröffentlicht"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "articles with two authors",
            "zh": "有 两位 作者 的 文章",
            "de": "Artikel mit zwei Autoren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "venue of one or two articles",
            "zh": "一篇 或 两篇 文章 的 发表 渠道",
            "de": "Veranstaltungsort von einem oder zwei Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "article written by more than two authors",
            "zh": "文章 由 两位 以上 作者 撰写",
            "de": "Artikel von mehr als zwei Autoren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( string min ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "journal that publishes the fewest number of articles",
            "zh": "发布 了 最少 文章 的 期刊",
            "de": "Zeitschrift, die die geringste Anzahl von Artikeln veröffentlicht"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "who is someone that has not authored an article about multivariate data analysis",
            "zh": "谁 是 没有 撰写 过 关于 多 变量 数据分析 的 文章 的 人",
            "de": "wer ist jemand, der noch keinen Artikel über multivariable Datenanalysen geschrieben hat"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "name an article found in two publications",
            "zh": "举出 一篇 在 两个 出版物 里 可以 找到 的 文章",
            "de": "Nenne einen Artikel, der in zwei Publikationen zu finden ist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "articles citing Efron",
            "zh": "引用 Efron 的 文章",
            "de": "Artikel die Efron zitieren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "articles published in 2004 and citing multivariate data analysis",
            "zh": "在 2004 年 出版 并且 使用 多 变量 数据分析 的 文章",
            "de": "Artikel, die 2004 veröffentlicht wurden und sich auf multivariate Datenanalyse beziehen."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ) )"
        },
        "question": {
            "en": "any article that mentions award winning article",
            "zh": "任何 提及 获奖 文章 的 文章",
            "de": "Ein beliebiger Artikel, der einen preisgekrönten Artikel erwähnt"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ) )"
        },
        "question": {
            "en": "who is the author of the article who won an award",
            "zh": "谁 是 获奖 的 文章 的 作者",
            "de": "Wer ist der Autor des Artikels, der einen Preis gewonnen hat?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "articles with two authors",
            "zh": "有 两位 作者 的 文章",
            "de": "Artikel mit zwei Autoren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )"
        },
        "question": {
            "en": "what is the earliest published article",
            "zh": "哪 篇文章 是 最早 被 发表 的 ？",
            "de": "was ist der als erstes veröffentlichte Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "articles that cites at least two articles",
            "zh": "引用 了 至少 两篇 文章 的 文章",
            "de": "Artikel, die mindestens zwei Artikel zitieren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "venues that have published at least two articles",
            "zh": "已 发表 至少 两篇 文章 的 场地",
            "de": "Veranstaltungsorte, die mindestens zwei Artikel veröffentlicht haben"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "article that cites more than two articles",
            "zh": "引用 两篇 以上 文章 的 文章",
            "de": "Artikel, der mehr als zwei Artikel zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "venues of two articles",
            "zh": "两篇 文章 的 场地",
            "de": "Veranstaltungsorte von zwei Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "name a person who is the author of an article about multivariate data analysis",
            "zh": "关于 多 变量 数据分析 的 文章 作者 的 名字 是 什么 ？",
            "de": "Welche Person ist der Autor/die Autorin eines Artikels über multivariante Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "articles that cite the most articles",
            "zh": "引用 文章 最多 的 文章",
            "de": "Artikel, die die meisten Artikel zitieren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )"
        },
        "question": {
            "en": "what articles are published in annals of statistics",
            "zh": "什么 文章 发表 在 统计 年鉴",
            "de": "Welche Artikel wurden in Annalen der Statistik veröffentlicht"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "articles on multivariate data analysis",
            "zh": "关于 多 变量 数据分析 的 文章",
            "de": "Artikel zur multivariaten Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "articles that cite multivariate data analysis published in 2004",
            "zh": "发布 在 2004 引用 多元化 数据分析 的 文章",
            "de": "Artikel, die die in 2004 publizierte multivariate Datenanalyse zitieren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( string author ) ) )"
        },
        "question": {
            "en": "what article has more authors than any other",
            "zh": "哪 篇文章 的 作者 比 其他 任何 都 多",
            "de": "Welcher Artikel hat mehr Autoren als alle anderen?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) )"
        },
        "question": {
            "en": "who authored multivariate data analysis",
            "zh": "是 谁 撰写 多元 数据分析 的 ？",
            "de": "Wer schrieb multivariate Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "article with venue annals of statistics that multivariate data analysis cites",
            "zh": "被 多元 数据分析 引用 的 ， 有 出版 渠道 的 文章",
            "de": "Artikel mit Veranstaltungsort Annalen von Statistiken, die multivariate Datenanalyse zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "find an additional author to an Efron article",
            "zh": "找到 一个 Efron 的 文章 的 额外 的 作者",
            "de": "Finde einen weiteren Autoren für einen Efron Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "articles citing two articles",
            "zh": "引用 了 两篇 文章 的 文章",
            "de": "Artikel, die zwei Artikel zitieren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "find an article making a citation of a 2004 published article",
            "zh": "引用 了 一篇 2004 年 发布 的 文章 的 文章",
            "de": "Finden Sie einen Artikel, in dem ein 2004 veröffentlichter Artikel zitiert wird"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "articles that cite multivariate data analysis in annals of statistics",
            "zh": "在 数据 年鉴 里 引用 多元 数据分析 的 文章",
            "de": "Artikel, die eine multivariate Datenanalyse in den Annalen der Statistik zitieren."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what article cites other articles",
            "zh": "哪 篇文章 引用 了 其他 文章 ？",
            "de": "welcher Artikel zitiert andere Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "which article that cites multivariate data analysis was published on 2004",
            "zh": "引用 多 变量 数据分析 的 文章 于 2004 年 发表",
            "de": "welcher Artikel, der multivariate Datenanalyse zitiert, wurde im Jahr 2004 veröffentlicht"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what 2004 article cites multivariate data analysis",
            "zh": "哪篇 2004 年 的 文章 引用 了 多元 数据分析 ？",
            "de": "Welcher Artikel von 2004 zitiert multivariate Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "venues of two articles",
            "zh": "两篇 文章 的 出版 渠道",
            "de": "Orte von zwei Artikeln."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "articles published after 2010",
            "zh": "2010 年 后 发表 的 文章",
            "de": "Artikel, die nach 2010 veröffentlicht wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )"
        },
        "question": {
            "en": "what article was published on or after multivariate data analysis was",
            "zh": "什么 文章 是 在 多元 数据分析 发布 的 同时 或 之后 发布 的 ？",
            "de": "Welcher Artikel wurde auf oder nach der multivariaten Datenanalyse veröffentlicht?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "article that does not reference multivariate data analysis",
            "zh": "没有 引用 多元 数据分析 的 文章",
            "de": "Artikel, der sich nicht auf multivariate Datenanalysen bezieht"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "article publication of multivariate data analysis",
            "zh": "多元 数据分析 的 发行 物",
            "de": "Veröffentlichung eines Artikels zur multivariaten Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )"
        },
        "question": {
            "en": "what article is cited by an article in annals of statistics",
            "zh": "什么 文章 是 被 一篇 在 统计 年鉴 里 的 文章 引用 的 ？",
            "de": "Welcher Artikel wird von einem Artikel der Annalen der Statistiken zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which article cites the fewest articles",
            "zh": "哪 篇文章 引用 的 文章 最少",
            "de": "Welcher Artikel zitiert die wenigsten Artikel?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "what article cites an Efron article",
            "zh": "什么 文章 引用 了 Efron 的 文章",
            "de": "Welcher Artikel zitiert einen Artikel von Efron?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "articles published in annals of statistics in 2004",
            "zh": "2004 年 发表 于 统计 年鉴 的 文章",
            "de": "Artikel, die 2004 in den Annalen der Statistik veröffentlicht wurden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )"
        },
        "question": {
            "en": "article whose author is author of multivariate data analysis",
            "zh": "跟 多元 数据分析 是 同一 作者 的 文章",
            "de": "Artikel deren Autor Autor von multivariabler Datenanalyse ist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "article that is published in 2004",
            "zh": "2004 年 发表 的 文章",
            "de": "Artikel, der im Jahr 2004 veröffentlicht wird"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "articles written by two authors at most",
            "zh": "有 最 多 两个 作者 的 文章",
            "de": "Artikel von höchstens zwei Autoren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "authors who published their works in 2004",
            "zh": "在 2004 年 发表 他们 的 作品 的 作者",
            "de": "Autoren die vor 2004 ihre Arbeiten veröffentlicht haben"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "venue of maximum two articles",
            "zh": "有 最 多 两篇 文章 的 出版 地",
            "de": "Veröffentlichungsort maximal zweier Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )"
        },
        "question": {
            "en": "what award winning article was in annals of statistics",
            "zh": "哪篇 获奖 的 文章 是 在 统计 年刊 里 的",
            "de": "Welcher preisgekrönte Artikel war in Annalen der Statistik"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what article has a publication date earlier than 2004",
            "zh": "哪 篇文章 的 发表 日期 早于 2004 年",
            "de": "Welcher Artikel hat ein Veröffentlichungsdatum vor 2004?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "articles cited by multivariate data analysis published in 2004",
            "zh": "2004 年 发表 的 多 变量 数据分析 引用 的 文章",
            "de": "Artikel zitiert von multivariate Datenanalyse im Jahr 2004 veröffentlicht"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )"
        },
        "question": {
            "en": "articles published in the same publication as multivariate data analysis",
            "zh": "与 多 变量 数据分析 在 同一 出版物 上 发表 的 文章",
            "de": "Artikel, die in derselben Publikation wie multivariate Datenanalysen veröffentlicht wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )"
        },
        "question": {
            "en": "award winning article whose venue is annals of statistics",
            "zh": "发布 在 统计 年刊 上 的 获奖 文章",
            "de": "Preisgekrönter Artikel, der in Annals of Statistics erscheint"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "what venues cite multivariate data analysis",
            "zh": "哪个 刊号 摘取 了 多 变量 数据分析",
            "de": "Welche Standorte zitieren multivariate Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "article that cites multivariate data analysis whose venue is annals of statistics",
            "zh": "引用 了 在 统计 年刊 上 发布 的 多元 数据分析 的 文章",
            "de": "Artikel, der multivariate Datenanalyse zitiert, deren Veranstaltungsort Annalen von Statistiken sind"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "writers of more than two articles",
            "zh": "两篇 以上 文章 的 作者",
            "de": "Autoren von mehr als zwei Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "author of at most two articles",
            "zh": "有 至多 两篇 文章 的 作者",
            "de": "Autor*in von höchstens zwei Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what article does not cite multivariate data analysis",
            "zh": "哪 篇文章 没有 引用 多源 数据分析",
            "de": "In welchem Artikel wird die multivariate Datenanalyse nicht zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "article published in 2004 that cites multivariate data analysis",
            "zh": "在 2004 年 发表 的 引用 多 变量 数据分析 的 文章",
            "de": "2004 veröffentlichter Artikel, der sich auf die multivariate Datenanalyse bezieht."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "person that is author of article that cites multivariate data analysis",
            "zh": "引用 的 多 变量 数据分析 的 文章 的 作者",
            "de": "Person die der Autoren des Artikels der aus der multivariante Datenanalyse zitiert ist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ) )"
        },
        "question": {
            "en": "article citing award winning article",
            "zh": "引用 了 获奖 文章 的 文章",
            "de": "Artikel, der einen Preisgekrönten Artikel zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who wrote the most articles",
            "zh": "谁 写 了 最 多 的 文章",
            "de": "Wer schrieb die meisten Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "what article was published in 2004",
            "zh": "哪 篇文章 是 在 2004 年 发表 的",
            "de": "Welcher Artikel wurde 2004 veröffentlicht?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "article that references a single article",
            "zh": "参考 了 一篇 文章 的 文章",
            "de": "Artikel, der auf einen einzelnen Artikel verweist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )"
        },
        "question": {
            "en": "find an article published on or before multivariate data analysis",
            "zh": "找到 一篇 和 多元 数据分析 同时 或者 早于 它 发表 的 文章",
            "de": "Finden Sie einen Artikel, der über oder vor der multivariaten Datenanalyse veröffentlicht wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "what article has annals of statistics as a venue",
            "zh": "哪 篇文章 将 统计 年鉴 作为 其 发表 渠道",
            "de": "welcher Artikel hat Annalen von Statistiken als Veranstaltungsort?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )"
        },
        "question": {
            "en": "articles cited by multivariate data analysis and that won awards",
            "zh": "被 多元 数据分析 引用 的 获奖 文章",
            "de": "Artikel, die von der multivariaten Datenanalyse zitiert wurden und die Auszeichnungen erhielten."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( string min ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what venue has the fewest articles",
            "zh": "哪个 出版 渠道 有 最少 的 文章",
            "de": "Welcher Veranstaltungsort hat die wenigsten Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "venue in most of the articles",
            "zh": "最 多 文章 的 出版 渠道",
            "de": "Veranstaltungsort in den meisten Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "articles that have a minimum of two authors",
            "zh": "有 至少 两个 作者 的 文章",
            "de": "Artikel, die mindestens zwei Autoren haben"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "find an article published after 2004",
            "zh": "找到 一篇 在 2004 年 以后 发表 的 文章",
            "de": "finde einen Artikel der nach 2004 veröffentlicht wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )"
        },
        "question": {
            "en": "when was multivariate data analysis published",
            "zh": "多元 数据分析 是 在 什么 时候 发表 的 ？",
            "de": "Wann wurde die multivariate Datenanalyse veröffentlicht?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "writers of articles citing multivariate data analysis",
            "zh": "引用 多元 数据分析 的 文章 的 作者",
            "de": "Verfasser von Artikeln, die multivariate Datenanalysen zitieren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "what article has the same venue as multivariate data analysis",
            "zh": "那 篇文章 跟 多元 数据分析 是 有 同样 出版 渠道 的 ？",
            "de": "Welcher Artikel hat den gleichen Veranstaltungsort wie die multivariate Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which articles cite more than two articles",
            "zh": "哪些 文章 引用 了 两篇 以上 的 文章",
            "de": "Welche Artikel zitieren mehr als zwei Artikel?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "which article was published in 2004 authored by Efron",
            "zh": "哪 篇文章 是 艾弗隆 在 2004 年 发表 的",
            "de": "Welcher Artikel von Efron wurde 2004 veröffentlicht?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "articles published in 2004 or before",
            "zh": "2004 年 或 之前 发表 的 文章",
            "de": "Artikel veröffentlicht im Jahr 2004 oder früher"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "multivariate data analysis cited articles",
            "zh": "多 变量 数据分析 引用 的 文章",
            "de": "zitierte Artikel zur multivariaten Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "name an article found in more than two venues",
            "zh": "找 一篇 可以 从 多于 两个 地点 找到 的 文章 的 名字",
            "de": "Nenne einen Artikel der in mehr als zwei Orten zu finden ist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "article that the least number of articles cites",
            "zh": "有 最少 引用 数 的 文章",
            "de": "Artikel, den die geringste Anzahl von Artikeln zitiert."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )"
        },
        "question": {
            "en": "article whose venue is annals of statistics and that won an award",
            "zh": "发表 在 统计学 年刊 并 获奖 的 文章",
            "de": "Artikel, dessen Veranstaltungsort Annalen der Statistik ist und der eine Auszeichnung gewonnen hat"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "an article that multivariate data analysis cites",
            "zh": "一篇 多 变量 数据分析 引用 的 文章",
            "de": "ein Artikel, der multivariate Datenanalyse zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what article has no less than two venues",
            "zh": "哪一篇 文章 有 不少 于 两个 地点",
            "de": "Welcher Artikel hat nicht weniger als zwei Veranstaltungsorte?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "who is the author of multivariate data analysis",
            "zh": "谁 是 多 变量 数据分析 的 作者",
            "de": "Wer ist Autor der mutlivarenten Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "articles written by Efron cited by multivariate data analysis",
            "zh": "由 多元 数据分析 引用 的 Efron 撰写 的 文章",
            "de": "Artikel von Efron zitiert durch multivariate Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "articles cited by Efron",
            "zh": "被 埃夫隆 引用 的 文章",
            "de": "von Efron zitierte Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "author of two articles",
            "zh": "两篇 文章 的 作者",
            "de": "Autor zweier Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "articles published in 2004 that won an award",
            "zh": "2004 年 发布 并且 得 了 奖 的 文章",
            "de": "Artikel aus dem Jahr 2004, die ausgezeichnet wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "articles published in two or more venues",
            "zh": "在 多于 两个 出版 地 出版 的 文章",
            "de": "Artikel, die an zwei oder mehr Orten veröffentlicht wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "articles that are cited by two articles",
            "zh": "被 两篇 文章 引用 过 的 文章",
            "de": "Artikel, die von zwei Artikeln zitiert werden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "who is and author of multivariate data analysis",
            "zh": "谁 是 多元 数据分析 的 作者",
            "de": "Wer ist und Autor der multivariaten Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "articles that cite multivariate data analysis",
            "zh": "引用 了 多元 数据分析 的 文章",
            "de": "Artikel, die multivariate Datenanalyse zitieren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what article cites the fewest articles",
            "zh": "哪 篇文章 引用 了 最少 的 文章",
            "de": "welcher Artikel zitiert die wenigsten Artikel?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what is an article that does not cite multivariate data analysis",
            "zh": "没有 引用 多元 数据分析 的 一篇 文章 有",
            "de": "Was ist ein Artikel, der keine multivariate Datenanalyse zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find an article with no more than two venues",
            "zh": "找到 有 不 多于 两个 出版 地 的 一篇 文章",
            "de": "einen Artikel mit nicht mehr als zwei Veranstaltungsorten finden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "name an article found in two venues",
            "zh": "说出 一个 在 两个 出版 地 找到 的 文章",
            "de": "Nenne einen Artikel, der zwei Veröffentlichungsorte hat"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what 2004 article was cited by multivariate data analysis",
            "zh": "哪一篇 2004 年 的 文章 是 被 多元 数据分析 引用 的 ？",
            "de": "Welcher Artikel von 2004 wurde durch multivariate Datenanalyse zitiert"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "choose a brick that is to the left of a brick that is 3 inches wide",
            "zh": "选择 一个 在 3 英寸 宽 的 块 左边 的 块",
            "de": "Wählen Sie einen Ziegelstein, der links von einem Ziegelstein ist, der 3 Zoll breit ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "find me all blocks with a length shorter than the width of block 1",
            "zh": "找到 所有 长度 比块 1 宽度 短 的 块",
            "de": "finde mir alle Blöcke mit einer Länge kleiner als die Breite von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find a block below the block on the right of block 1",
            "zh": "找到 在 1 号 方块 右边 方块 下面 的 方块",
            "de": "Finde einen Block unter dem Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "find a block whose height is smaller than the length of block 1",
            "zh": "找到 一个 高度 小于 块 1 长度 的 块",
            "de": "finde einen Block dessen Höhe kleiner ist als die Länge von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "find me all special blocks that block 1 is left of",
            "zh": "找到 1 号 方块 右边 所有 的 特殊 方块",
            "de": "Finde mir alle speziellen Blöcke die Block 1 zur linken haben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me the block that block 1 is below and above",
            "zh": "找到 块 1 位于 下方 和 上方 的 块",
            "de": "Finde den Block, der Block 1 über und unter sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )"
        },
        "question": {
            "en": "block whose height is 3 inches or 6 inches",
            "zh": "高度 为 3 英寸 或 6 英寸 的 块",
            "de": "Block, dessen Höhe 3 Zoll oder 6 Zoll beträgt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "what block is skinnier than the height of block 1",
            "zh": "什么 方块 比 方块 1 的 高度 还 薄",
            "de": "Welcher Block ist schmaler als die Höhe von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "left of block over block 1",
            "zh": "块 1 左侧 的 块",
            "de": "Links vom Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks below at most 1 blocks",
            "zh": "给 我 找到 所有 在 最 多 一个 板块 下面 的 那些 板块 吗 ？",
            "de": "Finde alle Blöcke, die sich unter höchstens einem Block befinden."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "find me all special blocks right of block 1",
            "zh": "帮 我 找到 所有 一号 木块 右边 的 特殊 木块",
            "de": "Finde mir alle speziellen Blöcke rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "left of and below block 1",
            "zh": "在 一号 木块 左 下",
            "de": "links von und unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me a block with a height of 3 inches that block 1 is to the left of",
            "zh": "帮 我 找到 一个 高度 为 3 英寸 一号 木块 左边 的 木块",
            "de": "finde mir einen Block mit einer Höhe von 3 Zoll, von dem Block 1 links ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks that is to the right of the least number of blocks",
            "zh": "帮 我 找到 所有 在 最少 数量 的 块 的 右边 的 块 。",
            "de": "Finde alle Blöcke rechts von der geringsten Anzahl von Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block below block right of block 1",
            "zh": "再块 1 右边 的 块 的 下面 的 块",
            "de": "Block unter Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "3 inch block above block 1",
            "zh": "在 块 一 上方 的 三 英寸 的 块 。",
            "de": "3 Zoll Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "block that has a width of 3 inches and is below block 1",
            "zh": "宽度 是 三 英寸 ， 并且 在 块 一下 方 的 块 。",
            "de": "Block, der eine Breite von 3 Zoll hat und sich unter Block 1 befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find the block located beneath the second block that is located to the left of block 1",
            "zh": "找到 位于 块 1 左侧 第二个 块 下方 的 块",
            "de": "Finde den Block unterhalb des zweiten Blocks, der sich links von Block 1 befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string color ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find me all blocks with more than 2 colors",
            "zh": "帮 我 找到 所有 超过 两种 颜色 的 木块",
            "de": "Finde alle Blöcke mit mehr als 2 Farben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "select the block above the right one",
            "zh": "选择 在 右边 模块 之上 的 那 一块 。",
            "de": "Wähle den Block über dem rechten"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "3 inch tall block at the left of block 1",
            "zh": "在 区块 一 左边 高为 三 英尺 的 区块",
            "de": "3 Zoll großer Block links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "select a block with height less than block 1",
            "zh": "选择 一块 比 模块 1 低 的 模块 。",
            "de": "Wähle einen Block mit niedrigerer Höhe als Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks that block 1 is left and right of",
            "zh": "帮 我 找到 所有 区块 一在 其 左边 或者 右边 的 区块",
            "de": "Finde alle Blöcke, von denen Block 1 links und rechts ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all the 3 inch tall pyramid bricks",
            "zh": "给 我 找 所有 3 英寸 高 的 锥形 方块",
            "de": "Finde alle 3 Zoll hohen Pyramidensteine"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "what block is on the left of block 1 and is 3 inches in width",
            "zh": "哪个 区块 是 在 区块 一 左边 并且 宽为 三 英寸",
            "de": "Welcher Block ist links von Block 1 und 3 Zoll breit"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks that block 1 is above and right of",
            "zh": "帮 我 找到 所有 区块 一在 其 上方 和 右方 的 区块",
            "de": "Finde mir alle Blöcke, die Block 1 darüber und zur deren rechten haben."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "get me a block above and to the left of block 1",
            "zh": "给 我 一个 在 方块 1 左上方 的 方块",
            "de": "Gib mir einen Block der über und links von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the blocks who have a height of 3 inches are to the left of block 1",
            "zh": "找到 高度 为 三 英尺 并且 在 区块 一 左边 的 区块",
            "de": "Finde die Blöcke mit einer Höhe von 3 Zoll und zur Linken von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "select the block that block 1 is to the left and above",
            "zh": "选择 在 模块 1 右下方 的 模块 。",
            "de": "Wähle den Block, der Block 1 links und über sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "which block has a length smaller than block 1s width",
            "zh": "哪个 块 的 长度 小于 块 1 的 宽度",
            "de": "Welcher Block hat eine Länge, die kleiner ist als die Breite von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find a block of 3 height above block 1",
            "zh": "找到 一个 高度 为 3 的 在 一号 木块 上面 的 木块",
            "de": "Finde einen 3 Zoll hohen Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "block that left of block one and special",
            "zh": "在 块 一 左边 的 特殊 块",
            "de": "Block, der links von Block eins und speziell ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the block that has a height of 3 inches and that block 1 is to the right of",
            "zh": "找到 高为 三 英尺 并且 有 区块 一在 其 右边 的 区块",
            "de": "Finde den Block mit einer Höhe von 3 Zoll und der Block 1 rechts von sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block with a length of 3 inches that is above block 1",
            "zh": "选在 一个 长度 为 3 英寸 在 一号 木块 上面 的 木块",
            "de": "Wählen Sie den Block mit einer Länge von 3 Zoll, der über Block 1 liegt."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what brick is no more than 3 inches high",
            "zh": "哪 块砖 是 不到 三 英寸 高 ？",
            "de": "Welcher Ziegel ist nicht mehr als 3 Zoll hoch?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block below block one",
            "zh": "一号 木块 下面 的 木块",
            "de": "Block unter Block eins"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all the special blocks right of block 1",
            "zh": "帮 我 找到 所有 一号 木块 右边 的 特殊 木块",
            "de": "Finde alle speziellen Blöcke rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )"
        },
        "question": {
            "en": "what shape is brick 1",
            "zh": "砖块 一是 什么 形状",
            "de": "Welche Form hat Ziegel 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what block is less than 3 inches wide",
            "zh": "哪个 木块 的 宽度 少于 3 英寸",
            "de": "Welcher Block ist weniger als 3 Zoll breit?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "right of 3 inch block",
            "zh": "3 英寸 的 块 右边",
            "de": "Rechts vom 3 Zoll Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "pyramid block 3 inches wide",
            "zh": "3 英寸 宽 的 四 棱锥 块",
            "de": "Pyramidenblock 3 Zoll breit"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "which block is 3 in height and has block 1 on its left",
            "zh": "哪个 块 是 有 块 1 在 其 左方 并且 是 3 （ 英寸 ） 高 的",
            "de": "Welcher Block ist 3 in der Höhe und hat Block 1 auf seiner linken Seite"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me all blocks at most 3 inches wide",
            "zh": "帮 我 找到 所有 最多 3 英寸 宽 的 块",
            "de": "Finde alle Blöcke die höchstens 3 Zoll breit sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks over that block 1 is left of",
            "zh": "找到 我 所有 街区 之外 的 街区",
            "de": "Finde alle Blöcke über denen Block 1 links liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block is above block 1",
            "zh": "哪个 块 是 在 块 1 上面 的 ？",
            "de": "Welcher Block ist über Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find the block to the right of the 3 inch tall block",
            "zh": "找到 在 那个 3 英寸 高 的 块 的 右边 的 块",
            "de": "Finde den Block der rechts des 3 Zoll großen Blocks liegt?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ) ) )"
        },
        "question": {
            "en": "what is the total width of the block",
            "zh": "块 的 总 宽度 是 多少 ？",
            "de": "Was ist die Gesamtbreite des Blocks?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ) )"
        },
        "question": {
            "en": "find the block located on the left side of the special block",
            "zh": "寻找 在 特殊 方块 左面 的 方块",
            "de": "Finde den Block auf der linken Seite des Spezialblocks"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "choose the brick that is 3 inches high below brick 1",
            "zh": "选择 在 方块 1 下面 的 3 英寸 高 的 方块",
            "de": "Wähle den Ziegel der 3 Zoll hoch ist und unter Ziegel 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block that the least number of blocks is left of",
            "zh": "左边 方块 最少 的 方块",
            "de": "Block mit den wenigsten Blöcken links von sich"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "find me all blocks whose width is shorter than the height of block 1",
            "zh": "找 给 我 所有 宽度 短比块 1 高 的 块",
            "de": "Finde alle Blöcke, deren Breite kürzer ist als die Höhe von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "select the block to the right of the block left of block 1",
            "zh": "选择 块 1 左侧 块 右侧 的 块",
            "de": "Wähle den Block zur Rechten von dem Block links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )"
        },
        "question": {
            "en": "which special block is 3 inches high",
            "zh": "那个 特殊 的 板块 是 三 英寸 高 ？",
            "de": "welcher spezielle Block ist 3 Zoll hoch"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what block is to the left of the 3 inch wide block",
            "zh": "什么 板块 在 那个 三 英寸 宽 板块 的 左侧 ？",
            "de": "Welcher Block ist auf der linken Seite des 3 Zoll breiten Blocks"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find a block with a height no more than 3 inches",
            "zh": "找 一个 高度 不 超过 3 英寸 的 块",
            "de": "Finde einen Block nicht höher als 3 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block to the left of a block that block 1 is left of",
            "zh": "一个 砖块 左边 的 砖块 ， 那个 砖块 在 砖 1 的 左边",
            "de": "Block links von einem Block, von dem Block 1 links ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all blocks with height and width equal to 3 inches",
            "zh": "给 我 找到 所有 高度 和 宽度 等于 三 英寸 的 那些 板块 。",
            "de": "Finden Sie mir alle Blöcke mit einer Höhe und Breite von 3 Zoll."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )"
        },
        "question": {
            "en": "which block is the same height as block 1",
            "zh": "哪个 块 与 块 1 的 高度 相同",
            "de": "Welcher Block hat die gleiche Höhe wie Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "what block has a length of 3 inches and block 1 above it",
            "zh": "什么 板块 有 一个 三 英寸 高度 且 第一 板块 在 它 上面 ？",
            "de": "Welcher Block hat eine Länge von 3 Zoll und Block 1 über sich"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find a block with less than two blocks above it",
            "zh": "找到 一个 上面 少于 两个 块 的 块",
            "de": "Finde einen Block mit weniger als zwei Blocks über ihm"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "pyramid right of block 1",
            "zh": "立方体 1 右侧 的 椎体",
            "de": "Pyramide rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "see block below block 1 and choose the one left of it",
            "zh": "看看 在 方块 一 下面 的 方块 并且 选择 在 它 左边 的 那个 方块",
            "de": "Schau welcher Block unter Block 1 ist und wähle den links davon"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the pyramid shape blocks above block 1",
            "zh": "选择 块 1 上方 的 金字塔 形状 块",
            "de": "Wähle die pyramidenförmigen Blöcke über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block above most number of blocks",
            "zh": "在 最 多 方块 数目 之上 的 方块",
            "de": "Block über den meisten Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )"
        },
        "question": {
            "en": "which block has the largest height",
            "zh": "哪个 方块 有 最大 的 高度 ？",
            "de": "Welcher Block hat die größte Höhe?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "which brick is 2 bricks to the right of brick 1",
            "zh": "在 砖块 1 右边 并 和 它 相隔 两个 砖块 的 砖块 是 哪个 ？",
            "de": "Welcher Stein ist 2 Steine rechts von Stein 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "what block has less than or equal length then block 1 has width",
            "zh": "哪个 板块 有 少于 或 相等于 第一 板块 的 宽度 的 长度 ？",
            "de": "Welcher Block ist weniger oder gleich lang wie Block 1 breit ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "block whose height is larger than width of block 1",
            "zh": "高度 比 方块 1 的 宽度 大 的 方块",
            "de": "Block, dessen Höhe größer ist als die Breite von Block 1."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "select the pyramid shaped blocks",
            "zh": "选择 金字塔 形状 的 块",
            "de": "Wähle die pyramidenförmigen Blöcke aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "the third block to the right",
            "zh": "右边 第三个 方块",
            "de": "Der dritte Block rechts"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block right and below block 1",
            "zh": "方块 1 下方 右侧 的 方块",
            "de": "Block rechts und unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block left of more than 2 blocks",
            "zh": "在 两个 或 更 多 的 块 左边 的 块",
            "de": "Block links von mehr als 2 Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the special block to the right of block 1",
            "zh": "找到 块 1 右侧 的 特殊 块",
            "de": "Finden Sie den speziellen Block rechts von Block 1."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )"
        },
        "question": {
            "en": "block whose length is at most either 3 inches or 6 inches",
            "zh": "长度 最多为 3 英寸 或 6 英寸 的 块",
            "de": "Block, dessen Länge höchstens 3 Zoll oder 6 Zoll beträgt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find a 3 inch wide pyramid shaped block",
            "zh": "找出 3 英寸 宽 金字塔 形状 的 方块",
            "de": "Finden Sie einen 3 Zoll breiten pyramidenförmigen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me the block that block 1 is to the right of",
            "zh": "帮 我 找到 那个 块 1 在 它 右边 的 块",
            "de": "Finde den Block, der Block 1 rechts von sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks below 2 blocks",
            "zh": "找出 在 两个 方块 以下 的 所有 方块",
            "de": "Finde alle Blöcke unter zwei Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks shorter than block 1 is long",
            "zh": "找出 所有 长度 小于 方块 1 的 方块",
            "de": "Finde alle Blöcke die kürzer sind als Block 1 lang ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "tell me the number of blocks",
            "zh": "告诉 我块 的 数量",
            "de": "Sag mir die Anzahl an Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "find me all blocks at most as tall as block 1",
            "zh": "找到 我 最 多 和 第 1 块 一样 高 的 块",
            "de": "Finde alle Blöcke die höchstens so groß sind wie Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )"
        },
        "question": {
            "en": "how wide is block 1",
            "zh": "1 号 块 有 多 宽",
            "de": "Wie breit ist Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "below and left of block 1",
            "zh": "1 号块 下方 和 左边",
            "de": "unter und links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block left and above block 1",
            "zh": "1 号块 左边 和 上方 的 块",
            "de": "Block links und über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks with at least 2 blocks to the right",
            "zh": "给 我 找出 所有 至少 有 2 块 在 其 右边 的 块",
            "de": "finde mir alle Blöcke mit mindestens 2 Blöcken rechts davon"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "locate the block with a diameter less than that of block 1",
            "zh": "找到 直径 小于 1 号 块 的 块",
            "de": "Welcher Block hat einen geringeren Durchmesser als Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the 3 inch tall block below block 1",
            "zh": "找出 块 1 下方 高为 3 英寸 的 模块",
            "de": "Finde den 3 Zoll großen Block unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all blocks not 3 inches high",
            "zh": "给 我 找出 所有 不是 3 英寸 高 的 块",
            "de": "finde mir alle Blöcke die nicht 3 inch hoch sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block above two others",
            "zh": "在 另外 两块 上方 的 块",
            "de": "Block über zwei anderen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "select block below and to the left of block 1",
            "zh": "选择 在 方块 1 左 下面 的 方块",
            "de": "Welcher Block befindet sich unterhalb und links von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks below and to the right of block 1",
            "zh": "帮 我 找到 在 区块 一 右边 和 下边 的 所有 区块",
            "de": "Welche Blöcke befinden sich unterhalb und rechts von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )"
        },
        "question": {
            "en": "what is the height of block 1",
            "zh": "区块 一 的 高 是 多少",
            "de": "Wie hoch ist Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find all special blocks that are 3 inches wide",
            "zh": "帮 我 找到 所有 宽为 三 英尺 的 特殊 区块",
            "de": "Finde alle speziellen Blöcke, die 3 Zoll breit sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks that is left or right of block 1",
            "zh": "帮 我 找到 所有 在 区块 一 左边 或者 右边 的 所有 区块",
            "de": "Finde alle Blöcke, die links oder rechts von Block 1 liegen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the block that has the most blocks to its right",
            "zh": "帮 我 找到 有 右边 有 最 多 区块 的 区块",
            "de": "Finde den Block, der die meisten Blöcke rechts von sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "pyramid block right of block 1",
            "zh": "在 区块 一 右边 的 金字塔 区块",
            "de": "Pyramidenblock rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which brick is closest to the top",
            "zh": "那个 砖块 离 顶部 最近",
            "de": "Welcher Stein ist am weitesten oben?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which block has two blocks above it",
            "zh": "那个 区块 的 上方 有 两个 区块",
            "de": "Welcher Block hat zwei Blöcke über sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all special blocks above block 1",
            "zh": "找到 块 1 上方 的 所有 特殊 块",
            "de": "Finde alle Spezialblöcke über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )"
        },
        "question": {
            "en": "which block is the same length as block 1",
            "zh": "哪个 块 的 长度 与 块 1 的 长度 相同",
            "de": "Welcher Block hat die gleiche Länge wie Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find the block below and to the left of block 1",
            "zh": "找到 在 1 号 方块 左下方 的 方块",
            "de": "Finde den Block unter und links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block left of block one",
            "zh": "在 1 号 方块 左边 的 方块",
            "de": "Block links von Block eins"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block is 3 tall and has block 1 on its left",
            "zh": "一个 块 1 在 其 左方 的 3 （ 英寸 ） 高 的 块",
            "de": "Welcher Block ist 3 hoch und hat Block 1 links von sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select all blocks above block 1",
            "zh": "选在 所有 一号 方块 上面 的 方块",
            "de": "Wählen Sie alle Blöcke über Block 1 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "find a special block above block 1",
            "zh": "找到 1 号 方块 上面 的 特殊 方块",
            "de": "finde einen Spezialblock über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find a block with the least number of blocks below it",
            "zh": "找到 下面 方块 数目 最少 的 方块",
            "de": "Finde einen Block mit der geringsten Anzahl an Blöcken unter sich"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "choose a block that is right of a 3 inch brick",
            "zh": "选择 一个 在 3 英寸 砖块 右方 的 块",
            "de": "wähle einen Block der Rechts von einem 3 Zoll Ziegel ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "locate the block that has a shape other than that of a pyramid",
            "zh": "找到 那个 形状 不同于 金字塔 的 模块",
            "de": "Wo ist der Block der eine andere Form hat als eine Pyramide?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "choose a block that is below and to the left of block 1",
            "zh": "选择 一个 在 1 号 方块 左下方 的 方块",
            "de": "Wählen Sie einen Block links unterhalb von Block 1 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block left and above block 1",
            "zh": "在 1 号 方块 左上方 的 方块",
            "de": "Block links und über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which brick is closest to the bottom",
            "zh": "哪个 块 是 最靠近 底部 的 ？",
            "de": "Welcher Stein ist am nächsten am Boden"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "select the pyramid shaped block that is left of block 1",
            "zh": "选择 块 1 左侧 的 金字塔 形状 块",
            "de": "Wähle den pyramidenförmigen Block links von Block 1 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "what block is below the block that block 1 is to the left of",
            "zh": "哪个 区块 是 在 区块 一在 其 左边 的 区块 的 下方",
            "de": "Welcher Block ist unter dem Block links von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block above and right from block 1",
            "zh": "在 块 1 上方 和 右边 的 块",
            "de": "Block über und rechts von Block 1."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "choose a block no bigger than 3 inches",
            "zh": "选择 一个 不 大于 3 英寸 的 块",
            "de": "Wähle einen Block, der nicht größer als 3 Zoll ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks that has at most 2 blocks to the left",
            "zh": "帮 我 找到 所有 最多 有 两个 块 在 其 左边 的 块",
            "de": "Finde alle Blöcke, die höchstens 2 Blöcke auf der linken Seite haben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "find the block underneath the pyramid shaped block",
            "zh": "找到 哪个 在 四 棱锥 形状 的 块 下方 的 块",
            "de": "Finde den Block unter dem pyramidenförmigen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block left and above block 1",
            "zh": "区块 一 左上方 的 区块",
            "de": "Block links und über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "left and below of block 1",
            "zh": "区块 一 的 左下方",
            "de": "Links und unter Block 1."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "which brick is not 3 inches long",
            "zh": "哪 块砖 不是 3 英寸 长",
            "de": "Welcher Baustein ist nicht 3 Zoll lang?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string shape ) ) )"
        },
        "question": {
            "en": "choose the most shapeless block",
            "zh": "选择 最 没有 形状 的 方块",
            "de": "wähle den formlosesten Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block left of block above block 1",
            "zh": "是 在 第一 板块 上面 的 那个 板块 左侧 的 板块 吗 ？",
            "de": "Block links von Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "select all 3 inch high blocks",
            "zh": "选中 所有 高 3 英尺 的 方块",
            "de": "Wähle alle 3 Zoll hohen Blöcke aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me the block that is left of two blocks",
            "zh": "找到 在 两块 立方体 左边 的 那 一个 立方体",
            "de": "Finde den Block links von zwei Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block above block 1 that is 3 inches wide",
            "zh": "选择 1 号 方块 上方 3 英尺 宽 的 方块",
            "de": "Wählen Sie den 3 Zoll breiten Block über Block 1 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "select all the pyramid shaped blocks above block1",
            "zh": "选择 所有 1 号 方块 上面 金字塔 形状 的 方块",
            "de": "Wähle alle pyramidenförmigen Blöcke oberhalb von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ) ) )"
        },
        "question": {
            "en": "what is the average height of a brick",
            "zh": "砖头 的 平均 高度 有 多少",
            "de": "Was ist die Durchschnittshöhe eines Ziegels?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find the block with 3 inches in length",
            "zh": "找到 有 3 英尺 长 的 方块",
            "de": "Finde den 3 Zoll langen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what block is at least 3 inches wide",
            "zh": "哪个 方块 至少 有 3 英尺 宽",
            "de": "Welcher Block ist mindestens 3 Zoll breit?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find the block below the block under block 1",
            "zh": "找到 立方体 1 下方 的 下方 的 那 一个 立方体",
            "de": "Finde den Block unter dem Block unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )"
        },
        "question": {
            "en": "block as long as the height of block 1",
            "zh": "长度 和 第一 板块 的 高度 相同 的 板块",
            "de": "Block so lang wie die Höhe von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks with at most two blocks to the left",
            "zh": "找到 所有 左边 最多 有 2 个 方块 的 方块",
            "de": "Finde mir alle Blöcke, die maximal 2 Blöcke links haben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the block with the most blocks to the right of",
            "zh": "找到 右边 方块 数量 最多 的 方块",
            "de": "Finde den Block mit den meisten Blöcken rechts davon."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what blocks are left of block 1",
            "zh": "哪个 方块 在 1 号 方块 的 左边",
            "de": "Welche Blöcke sind links von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find all the blocks that are shorter or longer than 3 inches",
            "zh": "找到 有 比 3 英尺 长 或者 短 的 方块",
            "de": "Finden Sie alle Blöcke, die kürzer oder länger als 3 Zoll sind."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks that is right of more than 2 blocks",
            "zh": "帮 我 找到 所有 在 多于 两个 区块 右边 的 区块",
            "de": "Finde alle Blöcke, die rechts von mehr als 2 Blöcken liegen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "which brick is below brick 1",
            "zh": "哪个 砖块 在 砖块 一下 方",
            "de": "Welcher Stein ist unter Stein 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "block that is above block whose shape is a pyramid",
            "zh": "形状 为 金字塔 的 块 上方 的 块",
            "de": "Block über pyramidenförmigem Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks that is below which block 1 is right of",
            "zh": "帮 我 找到 所有 在 区块 一在 其 右边 的 区块 的 下方 的 区块",
            "de": "Finde alle Blöcke, die unter einem Block rechts von Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what 3 inch block is below block 1",
            "zh": "什么 三 英寸 的 板块 在 第一 板块 的 下面 ？",
            "de": "Welcher 3 Zoll Block ist unter Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find the 3 inch long pyramid shaped block",
            "zh": "找到 3 英寸 长 的 金字塔 形块",
            "de": "Finde den 3 Zoll langen pyramidenförmigen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block below two or more blocks",
            "zh": "在 两个 或 更 多 的 块 下面 的 块",
            "de": "Block unter zwei oder mehr Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the special block above block 1",
            "zh": "选在 1 号 方块 上面 的 特殊 方块",
            "de": "Wähle den Spezialblock über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "name a block of 3inch width above block 1",
            "zh": "举出 在 块 1 上方 宽度 为 3 英寸 的 块 的 名字",
            "de": "Nennen Sie einen Block mit einer Breite von 3 Zoll über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find me all blocks with at least 2 shapes",
            "zh": "帮 我 找到 所有 至少 有 两种 形状 的 块",
            "de": "Wo sind alle Blöcke die mindestens 2 Formen haben?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "block below block 1 and block 2",
            "zh": "在 块 1 和 块 2 下方 的 块",
            "de": "Block unter Block 1 und Block 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block that at most two blocks is below",
            "zh": "有 最 多 两个 块 在 其 下方 的 块",
            "de": "Welcher Block hat maximal Zwei Blöcke unter sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "find me all blocks right of blocks 1 or 2",
            "zh": "帮 我 找到 所有 在 块 1 或块 2 右边 的 块",
            "de": "Wo sind alle Blöcke rechts von Block 1 oder 2?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "3 inches wide block at the right of block 1",
            "zh": "块 1 右侧 3 英寸 宽 的 块",
            "de": "3 Zoll breiter Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose a block to the left of block 2",
            "zh": "选择 块 2 左侧 的 块",
            "de": "wähle einen Block links von Block 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )"
        },
        "question": {
            "en": "block that has the largest height",
            "zh": "最大 高度 的 块状 物",
            "de": "Block mit der größten Höhe"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "what block is thinner than block 1 is long",
            "zh": "哪个 区块 比 区块 一 长度 薄",
            "de": "Welcher Block ist dünner als Block 1 lang ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "get the block that is 3 inches tall found left of block 1",
            "zh": "在 方块 1 的 左面 找 一个 3 英寸 高 的 方块",
            "de": "Nimm den 3 Zoll hohen Block, der sich links von Block 1 befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ) ) )"
        },
        "question": {
            "en": "what is the average block width",
            "zh": "块状 物 的 平均 宽度 是 多少",
            "de": "Was ist die durchschnittliche Blockbreite?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "choose a block that is smaller than block 1",
            "zh": "选择 一个 比 区块 一小 的 区块",
            "de": "Wähle einen Block der kleiner ist als Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks above that block 1 is right of",
            "zh": "帮 我 找到 所有 区块 一在 其 右方 的 区块 的 上方 的 区块",
            "de": "Wo sind alle Blöcke die über Block 1 rechts sind?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "a 3 inch brick that is shaped like a pyramid",
            "zh": "一个 像 金字塔 形状 的 三 英寸 砖块",
            "de": "Ein 3 Zoll Ziegel der wie eine Pyramide geformt ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "which brick is taller than brick 1",
            "zh": "哪个 砖块 比 砖块 一高",
            "de": "Welcher Ziegel ist größer als Ziegel 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "look right of block 1 and get the special block",
            "zh": "看 向 区块 一 右边 并且 得到 特殊 区块",
            "de": "Schaue rechts von Block 1 nach dem Spezialblock"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )"
        },
        "question": {
            "en": "what block has the same width as block 1s height",
            "zh": "哪个 块 的 宽度 与 块 1 的 高度 相同",
            "de": "welcher Block hat die gleiche Breite wie die Höhe von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "which brick is no wider than 3 inches",
            "zh": "哪个 砖块 不 宽 于 三 英寸",
            "de": "Welcher Ziegel ist nicht breiter als 3 Zoll?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "which block is above block 1",
            "zh": "哪个 块 在 块 1 之上",
            "de": "Welcher Block ist über Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what block is longer than 3 inches",
            "zh": "什么 块 超过 3 英寸 长",
            "de": "Welcher Block ist länger als 3 Zoll?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "what block is to the right of the block that block 1 is to the right of",
            "zh": "哪个 区块 在 区块 一在 其 右边 的 区块 右方",
            "de": "Welcher Block ist rechts von dem Block der rechts von Block 1 ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find blocks above block 1 and below block 1",
            "zh": "找到 块 1 上方 和 块 1 下方 的 块",
            "de": "Finde Blöcke über und unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )"
        },
        "question": {
            "en": "find me the block with the smallest width",
            "zh": "给 我 找 最小 宽度 的 方块",
            "de": "finde mir den Block mit der geringsten Breite"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block two up from block 1",
            "zh": "区块 一 上方 两个 位置 的 区块",
            "de": "Block zwei über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all 3 inch tall blocks that block 1 is right of",
            "zh": "帮 我 找到 所有 三 英寸 高 的 区块 一在 其 右方 的 区块",
            "de": "Finde alle 3 Zoll hohen Blöcke die rechts von Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )"
        },
        "question": {
            "en": "what block is the longest",
            "zh": "哪个 方块 是 最长 的",
            "de": "Welcher Block ist der längste?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "select a block that has a width that is the same width of block 1",
            "zh": "选择 宽度 与 块 1 宽度 相同 的 块",
            "de": "Wählen Sie einen Block mit der Breite von Block 1 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks that block 1 is left and right of",
            "zh": "帮 我 找到 所有 块 1 在 其 左边 和 右边 的 块",
            "de": "Finde alle Blöcke, von denen Block 1 links und rechts ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find a block with two or less blocks to the right of it",
            "zh": "找到 一个 右边 有 两个 或 更 少块 的 块",
            "de": "Finde einen Block mit zwei oder weniger Blöcken rechts davon"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string color ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find the block with only one color",
            "zh": "找到 只有 一种 颜色 的 块",
            "de": "Finde den einfarbigen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "select the blocks above block 1 and 2",
            "zh": "选择 在 方块 1 和 2 上面 的 方块",
            "de": "Wähle die Blöcke über Block 1 und 2."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the blocks on the right of and below block 1",
            "zh": "选择 在 块 1 右边 或 下方 的 块",
            "de": "Wähle die Blöcke zur rechten von und unter Block 1 aus."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "select the brick with the least blocks above it",
            "zh": "挑选 上方 木块 数量 最少 的 木块",
            "de": "Welcher Ziegel hat die wenigsten Blöcke über sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "above block 1 or block 2",
            "zh": "在 方块 1 和 方块 2 上面",
            "de": "über Block 1 oder Block 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "which block that is 3 in height has block 1 below it",
            "zh": "哪个 块 是 高 3 英寸 并且 块 1 是 在 其 下方 的 ？",
            "de": "Welcher Block der 3 hoch ist hat Block 1 unter sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block that block 1 is not to the left of",
            "zh": "选择 块 1 不 在 其 左边 的 那个 块",
            "de": "Welcher Block hat nicht Block 1 links von sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which brick has no more than 2 bricks to its right",
            "zh": "哪个 砖块 是 没有 超过 两个 砖块 在 其 右方 的 ？",
            "de": "Welcher Stein hat nicht mehr als zwei Steine rechts von sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block to the right of block 1",
            "zh": "选择 块 1 右侧 的 块",
            "de": "Wählen Sie den Block rechts von Block 1 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block three inches in height is above block 1",
            "zh": "哪个 块 是 三 英寸 高且 在 块 1 上面 的 ？",
            "de": "Welcher drei Zoll hohe Block ist über Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "is there a block that is taller than block 1",
            "zh": "是否 有 比块 1 更 高 的 块",
            "de": "Gibt es einen Block, der größer ist als Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "select the 3 inch tall block below block 1",
            "zh": "选择 块 1 下方 的 3 英寸 高 的 块",
            "de": "Wähle den 3 Zoll großen Block unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks not above block 1",
            "zh": "帮 我 找到 所有 不 在 块 1 上面 的 块",
            "de": "Finde alle Blöcke die nicht über Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block that block 1 is below",
            "zh": "选择 块 1 在 其 下方 的 块",
            "de": "Wähle den Block unter dem Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block not below block 1",
            "zh": "不 在 块 1 下方 的 块",
            "de": "Block nicht unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "find me all the blocks above block 1 or 2",
            "zh": "帮 我 找到 所有 在 块 1 或块 2 上方 的 块",
            "de": "Finde alle Blöcke über Block 1 oder 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the block that is to the right of block 1",
            "zh": "找到 块 1 右侧 的 块",
            "de": "Finde den Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks that block 1 is not under",
            "zh": "帮 我 找到 所有 块 1 不 在 其 下方 的 块",
            "de": "Finde alle Blöcke, unter denen Block 1 nicht liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "block that is left of block whose length is 3 inches",
            "zh": "在 3 英寸 长 的 块 的 左边 的 块",
            "de": "Block, der sich links vom Block befindet, dessen Länge 3 Zoll beträgt."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "which brick is below brick 1 or 2",
            "zh": "哪 块砖 在 砖 1 或 2 下面",
            "de": "Welcher Stein liegt unter Stein 1 oder 2?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block is block one above and to the right of",
            "zh": "哪个 块 是 块 1 在 其 上方 及 右方 的 ？",
            "de": "Welcher Block hat Block 1 über und rechts von sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block right of the block below block 1",
            "zh": "在 块 1 下方 的 块 右边 的 块",
            "de": "Block rechts vom Block unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "block whose shape is not a pyramid",
            "zh": "形状 不是 四 棱锥 的 块",
            "de": "Block, dessen Form keine Pyramide ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me all blocks with length less than 3 inches",
            "zh": "帮 我 找到 所有 长度 小于 3 英寸 的 块",
            "de": "Finde alle Blöcke mit einer Länge von weniger als 3 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which brick is furthest to the right",
            "zh": "哪块 砖头 在 最 右边",
            "de": "Welcher Stein ist am weitesten rechts?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which block has less than two blocks to its right",
            "zh": "哪个 块 右边 少于 两个 块",
            "de": "Welcher Block hat weniger als zwei Blöcke auf der rechten Seite"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "is there a block piled on top of block 1",
            "zh": "有没有 一个 区块 叠 在 区块 一 顶上",
            "de": "Ist ein Block auf Block 1 gestapelt?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ) ) )"
        },
        "question": {
            "en": "what is the average height of the blocks",
            "zh": "块 的 平均 高度 是 多少",
            "de": "Was ist die durchschnittliche Höhe der Blöcke"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.shape.pyramid en.shape.cube ) )"
        },
        "question": {
            "en": "a pyramid or a cube",
            "zh": "金字塔 或 立方体",
            "de": "eine Pyramide oder ein Würfel"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block above at most two blocks",
            "zh": "在 最 多 另外 两个 块 上方 的 块",
            "de": "Block über maximal zwei Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "block whose length is larger than height of block 1",
            "zh": "长度 比块 1 的 高度 大 的 块",
            "de": "Block, dessen Länge größer als die Höhe von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what block is above the 3 inch wide block",
            "zh": "什么 块 在 3 英寸 宽 的 块 上方",
            "de": "Welcher Block ist über den 3 Zoll breiten Block?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find me all blocks with 2 shapes",
            "zh": "帮 我 找到 所有 有 两个 形状 的 块",
            "de": "Finde alle Blöcke mit zwei Formen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "choose a block that is not as thick as block 1",
            "zh": "选择 一个 没有 块 1 那么 厚 的 块",
            "de": "Wähle einen Block, der nicht so dick ist wie Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block above and left of block 1",
            "zh": "在 方块 1 左 上面 的 方块",
            "de": "Block über und links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )"
        },
        "question": {
            "en": "which blocks have a height equal to the width of block 1",
            "zh": "哪些 块 的 高度 等于 块 1 的 宽度",
            "de": "Welche Blöcke haben dieselbe Höhe wie die Breite vom Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "select a block with a length larger than the length of block 1",
            "zh": "选择 长度 大于 块 1 长度 的 块",
            "de": "Wählen Sie einen Block mit einer Länge, die größer als die Länge von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all 3 inch tall blocks that block 1 is left of",
            "zh": "帮 我 找到 所有 块 1 在 其 左边 的 3 英寸 高 的 块",
            "de": "Finde alle 3 Zoll hohen Blöcke, links von denen Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "what block is at least as long as block 1s height",
            "zh": "什么 块 至少 与 块 1 的 高度 一样 长",
            "de": "Welcher Block ist mindestens so lang wie Block 1 hoch ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )"
        },
        "question": {
            "en": "choose the brick that is the least thick",
            "zh": "选择 厚度 最小 的 砖",
            "de": "wähle den Block der am dünnsten ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find all the special blocks that are 3 inches long",
            "zh": "找到 所有 3 英尺 长 的 特殊 方块",
            "de": "Finde alle speziellen Blöcke, die 3 Zoll lang sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block above on the left",
            "zh": "选择 左侧 上方 的 块",
            "de": "Wählen Sie den Block oben links aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ) ) )"
        },
        "question": {
            "en": "what is the average height of the bricks",
            "zh": "砖块 的 平均 高度 是 多少",
            "de": "Was ist die Durchschnittshöhe der Steine"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "select the block right of block 1 that is 3 inches tall",
            "zh": "选择 3 英寸 高 的 块 1 右侧 的 块",
            "de": "Wähle den 3 Zoll hohen Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "block whose shape is a pyramid and whose shape is a pyramid",
            "zh": "块 的 形状 是 金字塔 ， 形状 是 金字塔",
            "de": "Block dessen Form eine Pyramide ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the blocks above and below block 1",
            "zh": "选择 块 1 上方 和 下方 的 块",
            "de": "Wähle die Blöcke über und unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all 3 inch wide blocks that block 1 is above",
            "zh": "帮 我 找 所有 宽度 是 三 英寸 而 又 在 木块 1 下面 的 木块",
            "de": "Finde mir alle 3 Zoll breiten Blöcke, die unter Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "select a block who has width greater than or equal to block 1s height",
            "zh": "选择 宽度 大于 或 等于 块 1s 高度 的 块",
            "de": "Wählen Sie einen Block mit einer Breite größer oder gleich der Höhe von Block 1 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "which brick is to the right of the brick to the left of brick 1",
            "zh": "哪一块 是 在 砖块 1 左侧 的 右侧 的 砖块",
            "de": "Welcher Ziegel ist rechts von dem Ziegel der links von Ziegel 1 ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "find me the special blocks below block 1",
            "zh": "帮 我 找到 所有 块 1 下方 的 特殊 块",
            "de": "Finde mir die speziellen Blöcke unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "choose a block that is 3 inches and shaped like a pyramid",
            "zh": "选择 一个 3 英寸 的 块 ， 形状 像 金字塔",
            "de": "Wähle einen 3 Zoll großen und pyramidenförmigen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks that is above and right of block 1",
            "zh": "帮 我 找到 所有 在 块 1 右上方 的 块",
            "de": "Finde alle Blöcke oberhalb und rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "what block is between block 1 and a block to the left of block 1",
            "zh": "块 1 和 块 1 左侧 的 块 之间 是 什么 块",
            "de": "Welcher Block liegt zwischen Block 1 und einem Block links von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "choose a block that is under block 1",
            "zh": "选择 一个 在 块 1 下方 的 块",
            "de": "wähle einen Block unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block left of block 1",
            "zh": "在 块 1 左边 的 块",
            "de": "Block links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "block that is above block whose height is 3 inches",
            "zh": "在 3 英寸 的 块 上方 的 块",
            "de": "Block der 3 Zoll hohem Block ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which brick has at most two shapes",
            "zh": "哪种 砖 最 多 有 两种 形状",
            "de": "Welcher Ziegel hat höchstens zwei Formen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "block whose width is smaller than 3 inches",
            "zh": "宽度 小于 3 英寸 的 块",
            "de": "Block, dessen Breite kleiner als 3 Zoll ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "what block is to the left of the block that block 1 is below",
            "zh": "一号 木块 下面 的 木块 的 左边 的 木块 是 什么",
            "de": "Welcher Block liegt links von einem Block, unter dem Block 1 liegt?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks left of 2 blocks",
            "zh": "给 我 找到 所有 在 两个 快 左边 的 块",
            "de": "Wo sind alle Blöcke links von 2 Blöcken?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose a block that is to the left of block 2",
            "zh": "选择 块 2 左侧 的 块",
            "de": "Wählen Sie einen Block links von Block 2 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what pyramid shaped block is to the right of block 1",
            "zh": "哪个 金字塔 形状 的 块 位于 块 1 的 右侧",
            "de": "Welcher pyramidenförmige Block befindet sich rechts von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )"
        },
        "question": {
            "en": "find me all the pyramid or cube bricks",
            "zh": "帮 我 找到 所有 金字塔 形状 或者 方形 的 砖",
            "de": "Finde alle Pyramiden- oder Würfelsteine"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )"
        },
        "question": {
            "en": "find me all blocks as tall as block 1 is wide",
            "zh": "帮 我 找到 所有 高度 和 一号 木块 宽度 一样 的 木块",
            "de": "Finde alle Blöcke, die so hoch sind wie Block 1 breit ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block above block one",
            "zh": "在 块 1 上面 的 块",
            "de": "Block über Block eins"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string shape ) ) )"
        },
        "question": {
            "en": "which brick has the least number of shapes",
            "zh": "哪种 砖 的 形状 数量 最少",
            "de": "Welcher Stein hat die wenigsten Formen?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block right of a block which is above block 1",
            "zh": "一号 木块 上面 的 木块 的 右边 的 木块",
            "de": "Block rechts von einem Block, der über Block 1 liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find all blocks above 2 or fewer blocks",
            "zh": "找到 2 个 或 更 少块 以上 的 所有 块",
            "de": "Finde alle Blöcke über 2 oder weniger Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the blocks on the right and left of block 1",
            "zh": "选择 块 1 右侧 和 左侧 的 块",
            "de": "Wähle die Blöcke rechts und links von Block 1 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "block that is above block whose width is 3 inches",
            "zh": "在 3 英寸 宽 的 块 上方 的 块",
            "de": "Block über 3 Zoll breitem Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "which brick is no longer than brick 1 is wide",
            "zh": "哪个 块 的 长度 是 小于 块 1 的 宽度 的 ？",
            "de": "Welcher Stein ist nicht länger als Stein 1 breit ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks at least as long as block 1 is wide",
            "zh": "帮 我 找到 所有 长度 至少 等于 块 1 宽度 的 块",
            "de": "Finde alle Blöcke die mindestens so lang sind wie Block 1 breit ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )"
        },
        "question": {
            "en": "which brick is as long as brick 1 is tall",
            "zh": "哪个 块 的 长度 跟块 1 的 高度 是 一样 的 ？",
            "de": "Welcher Stein ist so lang wie Stein 1 hoch ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string color ) ) )"
        },
        "question": {
            "en": "find the block with the most colors",
            "zh": "找到 颜色 最多 的 块",
            "de": "Finde den Block mit den meisten Farben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what block is to the right of the block that is three inches wide",
            "zh": "哪个 块 是 在 3 英寸 宽 的 块 的 右边 的 ？",
            "de": "Welcher Block ist rechts von dem drei Zoll breiten Block?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find the blocks with length and height of 3 inches",
            "zh": "找到 长度 和 高度 都 是 3 英寸 的 块",
            "de": "Finden Sie die Blöcke mit einer Länge und Höhe von 3 Zoll."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "which brick is to the right of brick 1 or 2",
            "zh": "哪个 砖块 是 在 砖块 一 或者 二 的 右边",
            "de": "Welcher Stein ist rechts von Stein 1 oder 2?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which brick has more than two bricks above it",
            "zh": "哪 块砖 是 有 多于 两块 砖 在 其 上方 的 ？",
            "de": "Welcher Stein hat mehr als zwei Steine über sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "is there a block piled on top of either block 1 or block 2",
            "zh": "一号 木块 或者 二号 木块 上面 有 木块 堆 着 吗",
            "de": "Gibt es einen Block, der entweder auf Block 1 oder Block 2 gestapelt ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "choose a block below the 3 inch brick",
            "zh": "选择 一个 在 3 英寸 砖 下面 的 木块",
            "de": "Wähle einen Block unter dem 3 Zoll Stein"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "above block 1 to the left",
            "zh": "在 块 1 的 左上方",
            "de": "Links über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what block is left of a 3 inch block",
            "zh": "3 英寸 木块 左边 是 什么 木块",
            "de": "Welcher Block is links von einem 3 Zoll Block?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block right of block which is left of block 1",
            "zh": "一个 在 一号 木块 左边 的 木块 的 右边 的 木块",
            "de": "block rechts des blocks der links von block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block which has block 1 at left and above",
            "zh": "一号 木块 在 其 左边 上面 的 木块",
            "de": "Welcher Block hat Block 1 links über sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "find a block shorter than the width of block 1",
            "zh": "找到 一个 长度 小于 一号 木块 宽度 的 木块",
            "de": "finde einen Block, der kürzer als die Breite von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what block has two or more shapes",
            "zh": "什么 木块 有 2 个 或者 以上 形状",
            "de": "Welcher Block hat zwei oder mehr Formen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string ! = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "select all bricks that are not 3 inches wide",
            "zh": "选择 所有 宽度 不是 3 英寸 的 砖",
            "de": "Wähle alle Steine, die nicht 3 Zoll breit sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me the block that block 1 is below",
            "zh": "找到 块 1 位于 下方 的 块",
            "de": "Finde den Block, unter dem sich Block 1 befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "is there a special block with a height that is only 3 inches",
            "zh": "有没有 一个 特殊 块 的 高度 是 只有 3 英寸 的 ？",
            "de": "Gibt es einen Spezialblock, der nur 3 Zoll hoch ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what block has less than two blocks to the right of it",
            "zh": "哪个 块 是 有 少于 两个 块 在 其 右方 的 ？",
            "de": "Welcher Block hat weniger als Zwei Blöcke rechts von sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "select the block that is below the block with a width of 3 inches",
            "zh": "选择 宽度 为 3 英寸 的 块 下方 的 块",
            "de": "Wählen Sie den Block, der sich unter dem Block mit einer Breite von 3 Zoll befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me a block that is to the left of the block with a width of 3 inches",
            "zh": "帮 我 找到 一个 在 3 英寸 块 左方 的 块",
            "de": "Suche mir einen Block links vom Block mit einer Breite von 3 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me a block below the 3 inch tall block",
            "zh": "告诉 我 哪个 方块 是 在 3 英寸 高 的 方块 下面",
            "de": "Finde einen Block unter dem 3 Zoll großen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find that block that is to the left of just one other block",
            "zh": "找到 只有 一个 块 左边 的 块",
            "de": "Finden Sie den Block, der sich links von nur einem weiteren Block befindet."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "select the block that is to the left of two or more blocks",
            "zh": "选择 两个 或 更 多块 左侧 的 块",
            "de": "Wählen Sie den Block aus, der sich links von zwei oder mehr Blöcken befindet."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me all blocks at least 3 inches wide",
            "zh": "告诉 我 所有 最少 有 3 英寸 宽 的 方块",
            "de": "Welche Blöcke sind mindestens 3 Zoll breit?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block has block 1 at its left and right",
            "zh": "什么 块 左边 和 右边 有块 1",
            "de": "Welcher Block hat Block 1 auf seiner linken und rechten Seite"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select a block below block 1 that is 3 inches long",
            "zh": "选择 块 1 下方 3 英寸 长 的 块",
            "de": "Wählen Sie einen Block unter Block 1, der 3 Zoll lang ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which brick is below no more than two bricks",
            "zh": "哪 块砖 是 在 不 超过 两块 砖 的 下面 的 ？",
            "de": "Welcher Stein ist unter nicht mehr als zwei Steinen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "choose the block below the special looking block 1",
            "zh": "选择 特殊 区块 1 下方 的 区块",
            "de": "Wähle den den Block unter dem speziell aussehenden Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "which special block is 3 inches wide",
            "zh": "哪个 特别 的 区块 是 3 英寸 宽",
            "de": "welcher spezielle Block ist 3 Zoll breit?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "find me all blocks left of pyramid blocks",
            "zh": "给 我 找到 金字塔 左边 所有 的 区块",
            "de": "Finde alle Blöcke links von Pyramidenblöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ) )"
        },
        "question": {
            "en": "find the block below the special block",
            "zh": "找到 在 特殊 块 下面 的 块",
            "de": "finde den Block unter dem speziellen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks above that is left of block 1",
            "zh": "给 我 找 所有 在 块 一 左上方 的 块",
            "de": "Finde alle Blöcke oben die links neben Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block below and to right of block 1",
            "zh": "在 块 1 右下方 的 块",
            "de": "Block unterhalb und rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "3 inches long block to the left of block 1",
            "zh": "块 1 左侧 3 英寸 长 的 块",
            "de": "3 Zoll langer Block links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string ! = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "which brick is not 3 inches wide",
            "zh": "哪 块砖 不是 3 英寸 宽",
            "de": "Welcher Ziegel ist nicht 3 Zoll breit?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "choose the block that is below and to the left of block 1",
            "zh": "选择 在 块 1 左下方 的 块",
            "de": "Wählen Sie den Block, der sich unter und links von Block 1 befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "find me all the bricks at least as wide as block 1 is tall",
            "zh": "给 我 找 所有 跟 方块 1 的 高度 一样 宽 的 方块",
            "de": "Finde alle Steine, die mindestens so breit sind wie Block 1 hoch ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "is there a block that has only one block to the left of it",
            "zh": "是否 有 一个 块 左边 只有 一个 块",
            "de": "Gibt es einen Block der nur einen Block links von sich hat?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the block with more than two blocks above it",
            "zh": "找出 在 它 上面 有 两个 或 以上 方块 的 方块",
            "de": "Finde den Block mit mehr als zwei Blöcken über sich"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks below the smallest numbers of blocks",
            "zh": "找到 最小 数量 块 下面 的 所有 块",
            "de": "Finde alle Blöcke unter der kleinsten Anzahl an Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block that is left of block that is below block 1",
            "zh": "在 1 号 方块 下方 方块 左边 的 方块",
            "de": "Block der links von dem Block ist der unter Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what block is to the right of the 3 inch long block",
            "zh": "哪个 板块 在 那个 三 英寸 长 的 板块 的 右侧 ？",
            "de": "Welcher Block ist rechts von dem 3 Zoll langen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "find me all blocks at most as wide as block 1",
            "zh": "找到 所有 最多 跟 1 号 方块 一样 宽 的 方块",
            "de": "Finde alle Blöcke die höchstens so breit sind wie Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )"
        },
        "question": {
            "en": "find me all the special pyramid blocks",
            "zh": "给 我 找 所有 特殊 锥形 的 方块",
            "de": "Finde mir alle speziellen Pyramidenblöcke"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks right of the block that block 1 is below",
            "zh": "找到 所有 1 号 方块 右上方 的 方块",
            "de": "Finde alle Blöcke rechts neben dem Block, unter dem sich Block 1 befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "find me the block in the shape of a pyramid above block 1",
            "zh": "找到 块 1 上方 金字塔 形状 的 块",
            "de": "Finde den Block in Form einer Pyramide über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find the block with a maximum height of 3 inches",
            "zh": "找到 最大 高度 为 3 英寸 的 块",
            "de": "Finden Sie den Block mit einer maximalen Höhe von 3 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )"
        },
        "question": {
            "en": "choose a block that is taller than 3 or 6 inches",
            "zh": "选择 一个 高于 3 英寸 或 6 英寸 的 块",
            "de": "Wählen Sie einen Block, der größer als 3 oder 6 Zoll ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find a block that has at most two blocks to its left",
            "zh": "找到 一个 最多 有 两个 块 在 其 左方 的 块",
            "de": "Finde einen Block der höchstens zwei Blöcke links von sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "which brick is at least 3 inches long",
            "zh": "哪 块砖 至少 3 英寸 长",
            "de": "Welcher Stein ist mindestens 3 Zoll lang?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks that is left of block 1",
            "zh": "帮 我 找到 所有 在 块 1 左边 的 块",
            "de": "finde mir alle Blöcke die links von Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block which is right to block 1 with 3 inches",
            "zh": "选择 在 块 1 右边 的 3 英寸 的 块",
            "de": "wähle einen Block der Rechts von Block 1 ist und 3 Zoll lang"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "block that is left of block 1 or block 2",
            "zh": "块 1 或块 2 左侧 的 块",
            "de": "Block der links von Block 1 oder Block 2 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "block whose length is at most width of block 1",
            "zh": "长度 最 多 达到 块 1 宽度 的 块",
            "de": "Block, dessen Länge höchstens der Breite von Block 1 entspricht"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what brick is to the right of the 3 inch brick",
            "zh": "3 英寸 砖 的 右边 是 什么 砖",
            "de": "Welcher Stein ist rechts vom 3 Zoll Stein?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ) ) )"
        },
        "question": {
            "en": "total width of blocks",
            "zh": "块 的 总 宽度",
            "de": "Gesamtbreite der Blöcke"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks right to whatever block 1 is left of",
            "zh": "给 我 找出 那些 方块 一在 左方 的 方块 ， 它们 右方 所有 的 方块",
            "de": "Finde alle Blöcke recht von was auch immer links von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the block that has a length of 3 inches and is below block 1",
            "zh": "找到 在 方块 1 下方 长度 为 三 英寸 的 方块",
            "de": "finde den Block der eine länge von 3 Zoll hat und unter Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )"
        },
        "question": {
            "en": "what is the width of block 1",
            "zh": "块 1 的 宽度 是 多少",
            "de": "Wie breit ist Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )"
        },
        "question": {
            "en": "bricks that are the same size as brick 1",
            "zh": "与 砖 1 大小 相同 的 砖块",
            "de": "Steine, die die gleiche Größe haben wie Stein 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find a block to the right and above block 1",
            "zh": "找 一个 在 方块 一 右上方 的 方块",
            "de": "finde einen Block rechts und über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which block is at the very bottom",
            "zh": "哪个 方块 是 在 最 下面 的 ？",
            "de": "Welcher Block ist ganz unten?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "find a wider block than block 1",
            "zh": "找到 比块 1 更 宽 的 块",
            "de": "finde einen breiteren Block als Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "which brick is 3 inches wide and 3 inches high",
            "zh": "哪 块砖 宽 3 英寸 ， 高 3 英寸",
            "de": "Welcher Ziegel ist 3 Zoll breit und 3 Zoll hoch?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )"
        },
        "question": {
            "en": "find the block with the same shape as block 1",
            "zh": "找到 与 块 1 具有 相同 形状 的 块",
            "de": "Finde den Block mit der gleichen Form wie Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "find me all pyramid blocks left of block 1",
            "zh": "找到 块 1 左边 的 所有 金字塔 块",
            "de": "finde mir alle Pyramidenblöcke links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "which brick is longer than 3 inches",
            "zh": "哪 块砖 长于 3 英寸",
            "de": "Welcher Stein ist länger als 3 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what special blocks are left of block 1",
            "zh": "哪个 特殊 块 是 在 块 1 左边 的 ？",
            "de": "welche speziellen Blöcke sind links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what block is shorter than 3 inches",
            "zh": "哪个 块 是 短于 3 英寸 的 ？",
            "de": "Welcher Block ist kürzer als 3 Zoll?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block that block 1 is not below it",
            "zh": "选择 块 1 不 在 其 下方 的 块",
            "de": "Wähle den Block unter dem Block 1 nicht ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "3 inches high block",
            "zh": "3 英寸 高 的 块",
            "de": "3 Zoll hoher Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what block is left of the least number of blocks",
            "zh": "在 最少 数目 方块 左边 的 方块 是 什么 ？",
            "de": "Welcher Block befindet sich links von den wenigsten Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "pyramid block above block 1",
            "zh": "在 块 1 上方 的 四 棱锥 块",
            "de": "Pyramidenblock über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "choose a brick that is wider than brick 1 is high",
            "zh": "选择 一个 宽度 比 砖块 1 的 高度 要 大 的 砖块",
            "de": "Wähle den Stein, der breiter ist als Stein 1 hoch ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me a 3inch wide block to the right of block 1",
            "zh": "找到 块 1 右边 3 英寸 宽 的 块",
            "de": "Finde einen 3 Zoll breiten Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "block that is right of block whose height is 3 inches",
            "zh": "在 3 英寸 高 的 方块 右边 的 方块",
            "de": "Block der rechts vom 3 Zoll hohen Block liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students started school the same day Alice graduated",
            "zh": "哪个 学生 在 爱丽丝 毕业 的 同一天 开始 上学",
            "de": "Welche Schueler begannen am selben Tag die Schule als Alice ihren Abschluss machte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is after start date of student Alice",
            "zh": "结束 日 在 学生 爱丽丝 的 开始 日 之后 的 学生",
            "de": "Student, dessen Enddatum nach dem Startdatum der Studentin Alice liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employee whose end date is not after 2004",
            "zh": "结束 日期 不 在 2004 年 之后 的 员工 的 关系 状态",
            "de": "Beziehungsstatus des Mitarbeiters, dessen Enddatum nicht nach 2004 liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what's the relationship status of employees who are not software engineers",
            "zh": "不是 软件 工程师 的 员工 的 关系 状态 是 什么",
            "de": "Wie ist der Beziehungsstatus von Mitarbeitern, die keine Software-Ingenieure sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "who's got more than 2 genders down",
            "zh": "谁 有 两个 以上 的 性别 下降",
            "de": "Wer hat mehr als 2 Geschlechter unten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "where were people that stopped working in or after 2004 born",
            "zh": "人们 在 2004 年 或 之后 停止 工作 的 地方",
            "de": "Wo wurden die Personen geboren, die in oder nach 2004 aufgehoert haben zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students finishing on or after Alice's birthday",
            "zh": "在 爱丽丝 的 生日 或 以后 结束 （ 学业 ） 的 学生",
            "de": "Schüler die an oder nach Alices Geburtstag abschließen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find me all people that are friends with the employee starting after 2004",
            "zh": "帮 我 找到 所有 2004 年 后 开始 的 雇员 的 朋友 们",
            "de": "Finde alle Personen, die mit dem Mitabeiter befreundet sind, der nach 2004 anfaengt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )"
        },
        "question": {
            "en": "person who's 6 feet tall and studies computer science",
            "zh": "身高 6 英尺 ， 学习 计算机科学 的 人",
            "de": "Welche Person ist 6 Fuß Groß und studiert Informatik?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )"
        },
        "question": {
            "en": "is the person male or female",
            "zh": "那个 人 是 男性 还是 女性 ？",
            "de": "Ist diese Person männlich oder weiblich?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who started working the same day Alice left",
            "zh": "是 谁 在 艾丽丝 离开 的 同一天 开始 的 工作 ？",
            "de": "Wer hat am gleichen Tag angefangen als Alice gegangen ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "which city a person is born in whose year of birth is 2004",
            "zh": "在 2004 年 出生 的 那个 人 是 在 哪个 城市 出生 的 ？",
            "de": "In welcher Stadt wurde eine Person geboren dessen Geburtsjahr 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student who left on or before Alice's birthday",
            "zh": "在 爱丽丝 的 生日 或 之前 离开 的 学生",
            "de": "Welcher Student ging an oder vor Alice Geburtstag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of the person logged in",
            "zh": "登录 的 人 的 关系 状态 是 什么",
            "de": "Was ist der Beziehungsstatus der eingeloggten Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that finished school before 2004 or before 2010",
            "zh": "在 2004 年 之前 或 2010 年 之前 完成学业 的 人",
            "de": "Welche Leute haben die Schule vor 2004 oder 2010 beendet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student who left before Alice started",
            "zh": "一个 在 爱丽丝 开始 前 离开 的 学生",
            "de": "Welcher Student ist gegangen bevor Alice angefangen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me the employee who has had the most previous jobs",
            "zh": "帮 我 找到 有 最 多 工作 历史 的 一个",
            "de": "Welcher Mitarbeiter hatte die meisten Jobs vorher?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )"
        },
        "question": {
            "en": "find people with same birth date as Alice or later",
            "zh": "找到 跟 爱丽丝 同一天 或 更 晚 出生 的 人",
            "de": "Welche Personen haben das gleiche Geburtsdatum wie Alice oder ein spaeteres?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of employee whose end date is not before 2004",
            "zh": "结束 日期 在 2004 以后 的 员工 关系 状况",
            "de": "Was ist der Beziehungsstand der Mitarbeiter dessen Endtermin nicht vor 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find all people who born in New York in 2004",
            "zh": "找到 所有 在 2004 年 出生 在 纽约 的 人",
            "de": "Welche Personen wurden in 2004 in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "birthplace of employees whose end date is before 2004",
            "zh": "结束 日 在 2004 年 以前 的 员工 的 出生地",
            "de": "Geburtsort der Arbeitnehmer, deren Enddatum vor 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with the same last day as Alice",
            "zh": "找到 最后 一天 跟 爱丽丝 是 同一天 的 员工",
            "de": "finde Mitarbeiter mit dem selben letzten Tag wie Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have mickinsey as their employer",
            "zh": "有 哪些 员工 的 雇主 是 麦肯锡 ？",
            "de": "Welche Angestellten haben Mickinsey als Arbeitgeber?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find me the student whose field of study is not computer science",
            "zh": "帮 我 找到 研究 领域 不是 计算机科学 的 学生",
            "de": "Welcher Student hat nicht Informatik als Studienfach?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find friends of student who started later than 2004",
            "zh": "找到 在 2004 年 之后 开始 的 学生 的 朋友",
            "de": "finde Freunde von Studenten, die später als 2004 begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "friends of Alice or bob",
            "zh": "爱丽丝 或 鲍勃 的 朋友",
            "de": "Freunde von Alice oder Bob"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )"
        },
        "question": {
            "en": "when did Alice start her study in the field of computer science",
            "zh": "爱丽丝 什么 时候 开始 在 计算机科学 领域 学习",
            "de": "Wann hat Alice ihr Studium auf dem Gebiet der Informatik begonnen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "two or more gendered people",
            "zh": "两种 或 以上 性别 的 人们",
            "de": "Zwei oder mehr geschlechtliche Personen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who is same gender as of at least two persons",
            "zh": "和 至少 有 两个 以上 的 人 是 同样 性别 的 人 是 谁 ？",
            "de": "Wer hat das gleiche Geschlecht wie mindestens zwei Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who is male and friends with Alice",
            "zh": "谁 是 男 的 且 和 阿丽丝 是 朋友 ？",
            "de": "Welche Personen sind männlich und mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have a start date that is equal to Alice's birthday or later",
            "zh": "哪个 学生 开始 的 时间 跟 爱丽丝 的 生日 是 一样 或 之后 的",
            "de": "Welche Studenten/Studentinnen haben ein Eintrittsdatum, das mit Alices Geburtstag übereinstimmt oder danach liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friends of people who joined their jobs after 2004",
            "zh": "在 2004 年 之后 加入 工作 的 人们 的 朋友 们",
            "de": "Welche Personen sind mit Personen befreundet, die ihre Stelle nach 2004 antraten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what relationship status is that of two people at the most",
            "zh": "最多 有 两个 人 的 感情 状态 是 什么 ？",
            "de": "Über welchen Beziehungsstatus verfügen maximal zwei Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "name a person who quit no later than 2004",
            "zh": "说出 一个 不迟于 2004 年 退出 的 人",
            "de": "Nenne eine Person welche nicht später als 2004 kündigte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "which gender is the employee who ended after 2004",
            "zh": "在 2004 年 之后 离职 的 员工 是 什么 性别 ？",
            "de": "Welches Geschlecht hat der Arbeitnehmer, der nach 2004 endete?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who finish on or after Alice starts",
            "zh": "在 Alice 开始 或 之后 完成 的 员工",
            "de": "Welche Mitarbeiter haben ihren Job beendet, als oder nachdem Alice begonnen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee has less than two job titles",
            "zh": "哪个 员工 的 职称 少于 两个",
            "de": "Welcher Mitarbeiter hat weniger als zwei Berufsbezeichnungen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what are the current relationship statuses of employees who have a start date that is anything but 2004",
            "zh": "在 除 2004 年外 开始 （ 工作 ） 的 员工 的 婚姻 状态 是 什么 ？",
            "de": "Wie ist der aktuelle Beziehungsstatus von Mitarbeitern, deren Startdatum alles andere als 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student that attends the same university as Alice",
            "zh": "一个 跟 爱丽丝 上 同一个 大学 的 学生",
            "de": "Welcher Student besucht die gleiche Universität wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "who has a single friend",
            "zh": "谁 有 一个 单身 的 朋友 ？",
            "de": "Wer hat einen Single Freund?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that stopped working when Alice started or after",
            "zh": "在 艾丽丝 开始 工作 时 或 之后 停止 工作 的 人们",
            "de": "Leute, die aufgehört haben zu arbeiten, als Alice angefangen hat oder danach."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who started in or before 2004 or 2010",
            "zh": "在 2004 年 或 之前 或者 在 2010 年 或 之前 开始 的 学生",
            "de": "Welche Studenten starteten in oder vor 2004 oder 2010?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who left on or before Alice's joining",
            "zh": "在 艾丽丝 加入 时 或 之前 离开 的 学生",
            "de": "Student, der am oder vor Alice's Eintritt gegangen ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "friends of Alice that are currently online",
            "zh": "现在 在线 的 爱丽丝 的 朋友",
            "de": "Freunde von Alice, die gerade online sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees whose end date is no earlier than Alice's end date",
            "zh": "结束 日期 不比 爱丽丝 的 早 的 员工 们",
            "de": "Mitarbeiter, deren Enddatum nicht vor dem Enddatum von Alice liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )"
        },
        "question": {
            "en": "what is Alice's first date of studying computer science in school",
            "zh": "爱丽丝 哪一天 开始 在 学校 第一次 学习 计算机科学 ？",
            "de": "Was war das Datum von Alice’s ersten Tag an dem sie Informatik in der Schule studierte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of student whose start date is before 2004",
            "zh": "在 2004 之前 开始 的 学生 的 性别",
            "de": "Geschlecht des Studenten, dessen Anfangsdatum vor 2004 liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who didn't graduate in 2004",
            "zh": "没有 在 2004 年 毕业 的 学生",
            "de": "Welche Studenten machten in 2004 nicht ihren Abschluss?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "people that are not 180 cm tall",
            "zh": "身高 不是 180 厘米 的 人们",
            "de": "Welche Personen sind nicht 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friends with employee who are born at least before 2004",
            "zh": "至少 是 在 2004 年 之前 出生 的 雇员 的 朋友 们",
            "de": "Freunde mit Mitarbeitern, die mindestens vor 2004 geboren sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of fewer than two people",
            "zh": "少于 两个 人 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus von weniger als zwei Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me the employees who quit between 2004 and 2010",
            "zh": "给 我 找到 在 2004 年 到 2010 年 期间 辞职 的 员工",
            "de": "Zeige Mitarbeiter, die zwischen 2004 und 2010 gekündigt haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )"
        },
        "question": {
            "en": "who is the software engineer who is 180 cm tall",
            "zh": "谁 是 180 厘米 高 的 软件 工程师",
            "de": "Wer ist der Software-Entwickler, der 180 cm groß ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "when did Alice stop working as a software engineer",
            "zh": "爱丽丝 何时 不再 担任 软件 工程师",
            "de": "Wann hat Alice aufgehört, als Softwareentwicklerin zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "find all male friends of Alice",
            "zh": "找到 爱丽丝 的 所有 男性 朋友",
            "de": "Finde alle männlichen Freunde von Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who left by the time Alice left",
            "zh": "和 爱丽丝 同时 离开 的 学生",
            "de": "Studenten die gegangen sind bis Alice ging"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ) )"
        },
        "question": {
            "en": "which relationship statuses are claimed by the males in my network",
            "zh": "我 的 网络 中 的 男性 主张 哪 种 关系 状态",
            "de": "Welche Beziehungsstatus werden von Maennern in meinem Netzwerk angegeben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "which people are friends with students who started no sooner than 2004",
            "zh": "哪些 人 是 与 那些 不早 于 2004 开始 的 学生 是 朋友 ？",
            "de": "Wer ist mit Studenten befreundet, die nicht vor 2004 begonnen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee started earliest",
            "zh": "哪个 员工 最早 开始",
            "de": "Welcher Mitarbeiter hat am frühesten angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find all people who are friends with less than two other people",
            "zh": "查找 所有 跟 少于 两人 做 朋友 的 人",
            "de": "Finde alle Leute, die mit weniger als zwei anderen befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "sex of people who began school in 2004 or later",
            "zh": "在 2004 年 或 之后 开始 上学 的 人 的 性别",
            "de": "Geschlecht von Menschen, die 2004 oder später in die Schule kamen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "find all Alice's friends that are male",
            "zh": "找到 所有 爱丽丝 的 男性 朋友",
            "de": "Finde alle Freunde von Alice die männlich sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "Alice's friends who are currently online",
            "zh": "当前 在线 的 爱丽丝 的 朋友",
            "de": "Alices Freunde, die gerade online sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )"
        },
        "question": {
            "en": "find me a person with the same or later birthday as Alice",
            "zh": "给 我 找 一个 和 Alice 在 同一天 或 比 她 迟 生日 的 人",
            "de": "Finde eine Person mit dem selben oder späteren Geburtstag wie Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "name the friend of Alice with a height of 180cm",
            "zh": "指出 Alice 的 那个 身高 180 公分 的 朋友 的 名字",
            "de": "Nenne den Freund von Alice, der 1,8m groß ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what gender is the employee who is not employed by McKinsey",
            "zh": "没 被 McKinsey 雇佣 的 那个 员工 的 性别 是 什么 ？",
            "de": "Welches Geschlecht hat der Angestellte, der nicht bei McKinsey angestellt ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who began school after Alice graduated",
            "zh": "爱丽丝 毕业 后 开始 上学 的 学生",
            "de": "Studenten, die mit der Schule anfingen, nachdem Alice graduierte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "relationship status of two persons",
            "zh": "两个 人 的 感情 状态",
            "de": "Beziehungsstatus von zwei Personen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what people have two genders",
            "zh": "什么 人有 两种 性别 ？",
            "de": "Welche Leute haben zwei Geschlechter?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )"
        },
        "question": {
            "en": "find the tallest person",
            "zh": "找到 最高 的 人",
            "de": "Finde die größte Person"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )"
        },
        "question": {
            "en": "people who were born before Alice started her job",
            "zh": "在 爱丽丝 开始 工作 之前 出生 的 人",
            "de": "Leute, die geboren wurden, bevor Alice ihren Job begann."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of employees who began working by 2004",
            "zh": "在 2004 年前 开始 工作 的 雇员 们 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus der Mitarbeiter, die bis 2004 mit der Arbeit begonnen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "people who are 180 cm tall",
            "zh": "身高 180 公分 以上 的 人",
            "de": "Menschen, die 180 cm groß sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees have fewer than 2 job titles",
            "zh": "哪些 员工 的 职称 少于 2 个",
            "de": "Welche Mitarbeiter haben weniger als 2 Berufsbezeichnungen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friends of people who completed their studies in a year other than 2004",
            "zh": "在 2004 年 以外 的 一年 内 完成学业 的 人 的 朋友",
            "de": "Freunde von Leute die ihr Studium in einem anderen Jahr als 2004 beendet haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people who are friends with a student who did not start in 2004",
            "zh": "和 一个 没有 在 2004 年 开始 的 学生 是 朋友 的 人们",
            "de": "Menschen, die mit einem Studenten befreundet sind, der nicht im Jahr 2004 angefangen hat."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with an end date that is no later than Alice's birthday",
            "zh": "找到 （ 工作 ） 结束 日 不 晚于 爱丽丝 生日 的 员工 。",
            "de": "Finde Angestellte mit einem Enddatum das nicht später ist als Alices Geburtstag"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )"
        },
        "question": {
            "en": "find people born after Alice's graduation from school",
            "zh": "找到 在 爱丽丝 从 学校 毕业 后 出生 的 人",
            "de": "finde Leute die nach Alices Abschluss geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who has not more than two fields of study",
            "zh": "学习 领域 不 多于 两个 的 学生",
            "de": "Student, der nicht mehr als zwei Studienrichtungen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the student end date at least 2004",
            "zh": "在 2004 年 之前 结束 的 学生",
            "de": "Beziehungsstatus des Studenten, dessen Enddatum mindestens 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who is 180 cm tall and the same relationship status as Alice",
            "zh": "谁 身高 180 厘米 ， 与 爱丽丝 的 关系 状况 相同",
            "de": "Wer ist 180cm groß und hat den gleichen Beziehungsstatus wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "who is the 180 cm tall",
            "zh": "谁 180 公分 高 ？",
            "de": "Wer ist der 180cm Große?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )"
        },
        "question": {
            "en": "who does McKinsey employ who is 180 cm tall",
            "zh": "麦西肯 雇佣 的 那个 180 公分 高 的 员工 是 谁",
            "de": "Wen hat McKinsey angestellt, der 180cm groß ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "name a person in more than two relationships",
            "zh": "说出 一个 同时 有 两段 恋情 的 人",
            "de": "Nenne eine Person, die sich in mehr als zwei Beziehungen befindet"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who is online and is friends with alice",
            "zh": "谁 在线 上且 有 网友",
            "de": "der online ist und mit alice befreundet ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student with two or fewer majors",
            "zh": "有 最 多 2 个 专业 的 学生",
            "de": "ein Student mit zwei oder weniger Hauptfächern"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "who has three or more relationship statuses",
            "zh": "谁 有 3 段 及 以上 的 恋情",
            "de": "Wer hat drei oder mehr Beziehungsstatus?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "who are people with a birthdate of 2004 friends with",
            "zh": "谁 和 出生 在 2004 年 的 人 是 朋友",
            "de": "Mit wem sind die Personen, die 2004 geboren wurde, befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )"
        },
        "question": {
            "en": "find people born after Alice",
            "zh": "找出 比 爱丽丝 出生 晚 的 人",
            "de": "Finde Leute, die nach Alice geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that started working the same time as Alice",
            "zh": "和 爱丽丝 同时 开始 工作 的 人",
            "de": "Leute, die zur gleichen Zeit wie Alice angefangen haben zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find student with last day on Alice's birthday",
            "zh": "找到 最后 一天 是 在 爱丽丝 生日 那天 的 学生",
            "de": "Welche Studenten haben ihr Enddatum an Alice’s Geburtstag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find the students whose end date is either 2004 or 2010",
            "zh": "找出 结束 日期 是 2004 年 或者 2010 年 的 学生 们",
            "de": "Finde die Studenten, deren Enddatum entweder 2004 oder 2010 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who are friends with employees who started before 2004",
            "zh": "和 在 2004 年 之前 开始 工作 的 员工 是 朋友 的 人",
            "de": "Menschen, die mit Mitarbeitern befreundet sind, die vor 2004 angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who started after Alice left",
            "zh": "在 爱丽丝 离开 之后 开始 的 学生",
            "de": "Student, der anfing nachdem Alice aufhörte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employee whose job title is not software engineer",
            "zh": "工作 职位 不是 软件 工程师 的 员工 的 情感 状态",
            "de": "Der Beziehungsstatus des Angestellten, dessen Jobtitel nicht Softwareentwickler ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students started no earlier than Alice's birthdate",
            "zh": "开始 时间 晚于 爱丽丝 的 学生 是 哪些",
            "de": "Welche Studenten fingen nicht frueher als Alice’s Geburtstagsdatum an?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have an end date after 2004",
            "zh": "哪个 学生 的 结束 日 是 在 2004 年 以后 的 ？",
            "de": "Welche Studenten haben ein Enddatum nach 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birth city of student whose start date is not 2004",
            "zh": "开始 日 不 在 2004 年 的 学生 的 出生 城市",
            "de": "Geburtsort des Studenten, dessen Startdatum nicht 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee started after the student named Alice",
            "zh": "哪位 员工 是 在 名叫 Alice 的 学生 之后 开始 的",
            "de": "Welcher Mitarbeiter begann nach der Studentin namens Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student started on Alice's birthdate",
            "zh": "哪个 学生 在 Alice 的 出生日期 开始",
            "de": "Welcher Student began an Alice's Geburtstag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find friends of people who started school in 2004 at the latest",
            "zh": "找出 最晚 2004 年 开始 上学 的 人 的 朋友",
            "de": "Finde Freunde von Personen, die spätestens 2004 mit der Schule anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "where was Alice not born",
            "zh": "爱丽丝 不是 在 哪里 出生 的 ？",
            "de": "Wo wurde Alice nicht geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student starting after Alice",
            "zh": "在 爱丽丝 之后 开始 的 一个 学生",
            "de": "ein Student, der nach Alice anfing"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "which 180 cm tall people started in 2004",
            "zh": "哪个 一米 八高 的 人 在 2004 年 开始 的",
            "de": "Welche 180cm grosse Personen begannen in 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )"
        },
        "question": {
            "en": "when did Alice start working as a software engineer",
            "zh": "Alice 何时 开始 担任 软件 工程师",
            "de": "Wann began Alice als Softwareentwickler zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "someone with two relationship status",
            "zh": "有 两种 关系 状态 的 人",
            "de": "Wer hat zwei Beziehungsstatus?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of student whose end date is after 2004",
            "zh": "结束 日期 在 2004 年 之后 的 学生 的 性别",
            "de": "Geschlecht des Studenten, dessen Enddatum nach 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "find Alice's single status friends",
            "zh": "找到 艾丽斯 单身 的 朋友",
            "de": "finde Alice's Single Status Freunde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.person.alice ( string relationship_status ) ) )"
        },
        "question": {
            "en": "what is the status of Alice's relationship",
            "zh": "爱丽丝 的 感情 状态 是 什么",
            "de": "Was ist Alice’s Beziehungsstatus?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students had a start date of 2004 or 2010",
            "zh": "开始 日期 是 2004 年 或 2010 年 的 学生 是 哪些 ？",
            "de": "Welche Studenten hatten ein Eintrittsdatum in 2004 oder 2010?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of employees sho started before 2004",
            "zh": "在 2004 年 之前 开始 的 雇员 们 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht der Mitarbeiter, die vor 2004 begonnen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students starting 2010 or before",
            "zh": "找到 在 2010 年 或 之前 开始 的 学生 们",
            "de": "Finde Studenten, die 2010 oder vorher anfingen."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "people who were born after 2010",
            "zh": "在 2010 年 之后 出生 的 人们",
            "de": "Welche Personen wurden nach 2010 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of an employee who has a start date later than 2004",
            "zh": "2004 年 或 之后 开始 的 员工 的 出生地 是 哪个 城市",
            "de": "Welche Stadt ist der Geburtsort eines Mitarbeiters, dessen Startdatum nach 2004 liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has the greatest number of employers",
            "zh": "哪个 员工 有 数量 最多 的 雇主",
            "de": "Welcher Mitarbeiter hat die meisten Arbeitgeber?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who start before or on 2004",
            "zh": "在 2004 年 或 之前 开始 的 学生 们",
            "de": "Studenten die vor oder in 2004 gestartet sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "which of Alice's friends are single",
            "zh": "爱丽丝 的 哪些 朋友 是 单身",
            "de": "Welche von Alice's Freunden sind single?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "person who is friends with a student that graduated in 2004 or before",
            "zh": "与 2004 年 或 之前 毕业 的 学生 成为 朋友 的 人",
            "de": "Person die mit einem Studenten befreundet ist, der vor oder in 2004 das Studium abgeschlossen hat."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students with a start date after either 2004 or 2010",
            "zh": "找到 开始 日期 在 2004 年 或者 2010 年 的 学生",
            "de": "Welche Schüler sind entweder nach 2004 oder nach 2010 eingetreten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who works for McKinsey or Google",
            "zh": "为 麦肯锡 或谷歌 工作 的 员工",
            "de": "Mitarbeiter, der für McKinsey oder Google arbeitet"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "find Alice's friends who are single",
            "zh": "找到 爱丽丝 的 单身 朋友",
            "de": "finde Alice's Freunde die Single sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of the two people",
            "zh": "这 两个 人 的 感情 状态 是 什么 ？",
            "de": "Was ist der Beziehungsstatus dieser zwei Personen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of the person born in 2004",
            "zh": "在 2004 年 出生 的 人 的 出生地 是 什么 ？",
            "de": "Was ist der Geburtsort der 2004 geborenen Person?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friends of people whose job title is not software engineers",
            "zh": "工作 头衔 不是 软件 工程师 的 人 的 朋友",
            "de": "Freunde von Personen, dessen Berufsbezeichung nicht Softwareentwickler ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "relationship status that is not similar to Alice",
            "zh": "感情 状况 和 爱丽丝 的 不 相似",
            "de": "Beziehungsstatus der nicht der gleiche ist wie der von Alive"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what's the gender of students who started school after 2004",
            "zh": "在 2004 年 之后 开始 上学 的 学生 的 性别 是 什么",
            "de": "was ist das Geschlecht von Studenten die 2004 mit der Schule begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "which people have a birthdate of 2004 and are friends with Alice",
            "zh": "哪些 人出 生于 2004 年 并且 和 爱丽丝 是 朋友",
            "de": "welche Leute haben ein Geburtsdatum von 2004 und sind mit Alice befreundet"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "name a friend of a student who did not graduate in 2004",
            "zh": "说出 2004 年 没有 毕业 的 学生 的 朋友",
            "de": "Nennen Sie einen Freund eines Studenten, der 2004 seinen Abschluss nicht gemacht hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "find people logged in who are 180 cm tall",
            "zh": "寻找 在 登入 的 人 中 谁 是 180 厘米 高",
            "de": "Finde Leute die eingeloggt und 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have a start date before that of student Alice",
            "zh": "哪些 员工 的 开始 日期 是 早于 学生 爱丽丝 的",
            "de": "welche Mitarbeiter haben einen Starttermin vor dem der Studentin Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is gender of students starting in years other than 2004",
            "zh": "不 在 2004 年 开始 的 学生 是 什么 性别",
            "de": "Was ist das Geschlecht der Schüler, die in anderen Jahren als 2004 beginnen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friends of people who quit their jobs in a year other than 2004",
            "zh": "不是 在 2004 年 离职 的 人 的 朋友",
            "de": "Freunde von Menschen, die ihre Arbeit in einem anderen Jahr als 2004 gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who are friends with an employee that started before 2004",
            "zh": "在 2004 之前 开始 的 员工 的 朋友",
            "de": "Personen, die mit einem Mitarbeiter befreundet sind, der vor 2004 begonnen hat."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with the person who didn't start in 2004",
            "zh": "谁 是 那些 没有 在 2004 年 开始 的 人 的 朋友",
            "de": "Wer ist mit der Person befreundet, die 2004 nicht angefangen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "when did Alice stop working for McKinsey",
            "zh": "爱丽丝 什么 时候 停止 为 麦肯锡 工作",
            "de": "Wann hat Alice aufgehört für McKinsey zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "person born in new york and who is 180 cm tall",
            "zh": "出生 在 纽约 ， 身高 180 厘米 的 人",
            "de": "Person die in New York geboren wurde und 180cm gross ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people that have employed friends that did not start working in 2004",
            "zh": "雇用 了 那些 没有 在 2004 年 开始 工作 的 朋友 的 人",
            "de": "Leute, die Freunde eingestellt haben, die 2004 nicht angefangen haben zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of students who are not majoring in computer science",
            "zh": "专业 不是 电脑 科学 的 学生 们 的 情感 状态 是 什么 ？",
            "de": "Was ist der Beziehungsstatus der Studenten, deren Hauptfach nicht Informatik ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )"
        },
        "question": {
            "en": "which employer of Alice's ended in 2004",
            "zh": "哪个 爱丽丝 的 雇主 是 在 2004 年 结束 的 ？",
            "de": "Welcher Arbeitgeber von Alice endete in 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ) )"
        },
        "question": {
            "en": "who are men friends with",
            "zh": "男人 和 谁 交朋友 ？",
            "de": "Mit wem sind Männer befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the birth city of students who have a field of study other than computer science",
            "zh": "学习 领域 不是 计算机科学 的 那些 学生 的 出生 城市 是 哪里 ？",
            "de": "Was sind die Geburtsorte der Studenten mit einem anderen Studienfeld als Informatik"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "who was born in 2004 and is 180 cm tall",
            "zh": "谁 出 生于 2004 年 ， 身高 180 厘米",
            "de": "Wer wurde in 2004 geboren und ist 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "180 cm tall person with same relationship status as that of Alice",
            "zh": "和 艾莉丝 有 相同 情感 状态 的 身高 是 180 厘米 的 人",
            "de": "Welche Person ist 180 cm groß und hat den gleichen Beziehungsstatus wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )"
        },
        "question": {
            "en": "what is job title of Alice who is employed since 2004",
            "zh": "在 2004 年 就 入职 的 爱丽丝 的 工作 职称 是 什么 ？",
            "de": "Was ist die Berufsbezeichnung von Alice die seit 2004 beschäftigt ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "someone 180 cm tall who started in 2004",
            "zh": "在 2004 年 开始 的 身高 是 180 厘米 的 某人",
            "de": "jemand, der 180 cm groß ist und 2004 angefangen hat."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of an employee that is not a software engineer",
            "zh": "一个 不是 软件 工程师 的 雇员 的 出生 城市 是 什么 ？",
            "de": "Welche Stadt ist der Geburtsort eines Mitarbeiters, der kein Softwareentwickler ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student has a start date the same time as the birthdate of Alice",
            "zh": "哪个 学生 的 开始 日 跟 爱丽丝 的 生日 是 一样 的 ？",
            "de": "Welcher Stundent hat zur selben Zeit begonnen als Alice geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what cities were students born in who started after 2004",
            "zh": "在 2004 年 之后 开始 的 学生 们 的 出生 城市 是 什么 ？",
            "de": "In welchen Städten wurden die Studenten geboren, die nach 2004 begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "what is the end date of Alice at McKinsey",
            "zh": "爱丽丝 在 麦肯锡 的 结束 日期 是 什么 时候",
            "de": "Wann ist der Endtermin von Alice bei McKinsey?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students with fewest fields of study",
            "zh": "找到 学习 领域 最少 的 学生",
            "de": "Welche Studenten haben die wenigsten Studienfächer?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "any male born in 2004",
            "zh": "任何 2004 年 出生 的 男性",
            "de": "Welche Männer wurden in 2004 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "people with at most two friends",
            "zh": "最多 有 两个 朋友 的 人",
            "de": "Welche Personen haben maximal Zwei Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.university ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the university's number",
            "zh": "这个 大学 的 号码 是 什么 ？",
            "de": "Was ist die Nummer der Universität?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "when did Alice stop working",
            "zh": "爱丽丝 何时 停止 工作",
            "de": "Wann hat Alice aufgehört zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me an employee whose start date is before or equal to the end date of student Alice",
            "zh": "给 我 找到 一个 开始 日期 早于 或 等于 学生 艾丽丝 的 结束 日期 的 雇员",
            "de": "Suche mir einen Mitarbeiter, dessen Startdatum vor oder gleich dem Enddatum der Schülerin Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find me the birthplace of employees who quit since 2004",
            "zh": "找到 自 2004 年 以来 离职 的 员工 的 出生地",
            "de": "Wo ist der Geburtsort von Angestellten die seit 2004 gekündigt haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students graduate the day Alice starts school",
            "zh": "哪个 同学 在 爱丽丝 入学 时 毕业",
            "de": "Welche Studenten machten ihren Abschluss an dem Tag an dem Alice mit der Schule anfing?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the gender of the students who don't graduate in 2004",
            "zh": "没有 在 2004 年 毕业 的 学生 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht der Studenten welche in 2004 nicht ihren Abschluss machen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find the gender of students who have a field of study in something other than computer science",
            "zh": "找到 除了 学 计算机科学 以外 的 学生 的 性别",
            "de": "Was ist das Geschlecht der Studenten, die ein andered Studienfach als Informatik haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of students with a start date less than 2004",
            "zh": "在 2004 年 以前 入学 的 学生 的 情感 状态 是 什么",
            "de": "Was ist der Beziehungsstatus der Studenten mit einem Startdatum von frueher als 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees last day is no later than Alice's first day",
            "zh": "哪个 员工 离职 日期 在 爱丽丝 入职 之前",
            "de": "Wessen Angestellten letzter Tag ist nicht später als Alices erster Tag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "mention the name of an employee whose end date is either 2004 or 2010",
            "zh": "说出 在 2004 年 或者 2010 年 离职 的 员工 的 名字",
            "de": "Nenne den Namen eines Angestellten, dessen Enddatum entweder 2004 oder 2010 ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the city that is the birthplace of only one person",
            "zh": "找到 只有 一个 人 的 出生地 的 城市",
            "de": "finde die Stadt, die der Geburtsort von nur einer Person ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students started before Alice's birthdate",
            "zh": "哪些 学生 在 爱丽丝 的 出生日期 之前 开始",
            "de": "Welche Studenten fingen vor Alices Geburtsdatum an?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who is Alice's boss",
            "zh": "谁 是 爱丽丝 的 老板",
            "de": "Wer ist Alices Vorgesetzter?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees started no later than Alice did",
            "zh": "哪个 员工 入职 没有 比 爱丽丝 晚",
            "de": "Welche Angestellten fingen nicht später als Alice an?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of employees whose last day was after 2004",
            "zh": "最后 一天 是 在 2004 年 之后 的 员工 的 出生地 是 什么 ？",
            "de": "Wie lautet der Geburtsort von Angestellten, deren letzter Tag nach 2004 war?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have an end date that is smaller than that of employee Alice",
            "zh": "比 员工 爱丽丝 的 结束 日期 小 的 员工 是 哪些 ？",
            "de": "Welche Mitarbeiter haben ein Enddatum das frueher ist als das der Mitarbeiterin Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who joined before 2005",
            "zh": "2005 年 之前 加入 的 员工",
            "de": "Angestellter, der vor 2005 beitrat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students started after 2004",
            "zh": "哪些 学生 是 在 2004 年 之后 开始 的 ？",
            "de": "Welche Schüler haben nach 2004 angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employer has the least amount of employees",
            "zh": "哪个 雇主 的 员工 最少",
            "de": "Welcher Arbeitgeber hat die geringste Anzahl von Mitarbeitern?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "name a person who is 180 cm tall and who quit in 2004",
            "zh": "说出 一个 身高 180 厘米 且 在 2004 年 退出 的 人",
            "de": "Nennen Sie eine Person, die 180 cm groß ist und im Jahr 2004 aufgehört hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what genders are people that started school in any year but 2004",
            "zh": "那些 不是 在 2004 年 入学 的 人 的 性别 是 什么",
            "de": "Welches Geschlecht haben Leute, die mit der Schule in irgendeinem Jahr außer 2004 anfingen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "find people born in 2004 who are friends with Alice",
            "zh": "找到 出 生于 2004 年 和 爱丽丝 是 朋友 的 人",
            "de": "Finde Leute, die 2004 geboren wurden und mit Alice befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student who left at the same time as Alice or before",
            "zh": "和 爱丽丝 同时 或者 更 早 离开 的 一个 学生",
            "de": "ein Student, der zur gleichen Zeit wie Alice oder vorher ging"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of employees whose last day was not in 2004",
            "zh": "最后 一天 不是 2004 年 的 员工 的 情感 状态 是 什么 ？",
            "de": "Welchen Beziehungsstatus haben Angestellte deren letzter Tag nicht in 2004 war"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of a student who was enrolled after 2004",
            "zh": "2004 年 以后 入学 的 学生 的 性别",
            "de": "Das Geschlecht eines Studenten, der nach 2004 immatrikuliert wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of students who's end date is 2004 or more",
            "zh": "结束 日期 在 2004 年 或 之后 的 学生 们 的 性别",
            "de": "Geschlecht der Studenten deren Enddatum 2004 oder später ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who started earliest",
            "zh": "最早 开始 的 员工",
            "de": "Mitarbeiter, der am frühesten angefangen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who is the same height as Alice",
            "zh": "谁 和 爱丽丝 一样 高",
            "de": "Wer ist genauso groß wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee was the first to be hired",
            "zh": "哪个 员工 是 最先 被 雇佣 的 ？",
            "de": "Welcher Mitarbeiter war der erste, der eingestellt wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "name the birthplace city of the employee whose end date is larger than 2004",
            "zh": "说出 在 2004 年 以后 离职 的 员工 的 出生 城市",
            "de": "Wie heißt der Geburtsort des Angestellten dessen Enddatum später als 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who is friends with an employee who started in a year other than 2004",
            "zh": "在 除了 2004 年 以外 入职 的 员工 的 朋友",
            "de": "Wer ist mit einem Mitarbeiter befreundet, der in einem anderen Jahr als 2004 angefangen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students with a start date that is earlier than that of fellow student Alice",
            "zh": "找到 比 爱丽丝 同学 开始 得 更 早 的 学生",
            "de": "Welche Studenten haben ein frueheres Startdatum als das der Mitstudentin Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people that are friends with someone that started school in or after 2004",
            "zh": "在 2004 年 或者 之后 入学 的 人 的 朋友",
            "de": "Personen, die mit jemandem befreundet sind, der in ode rnach 2004 mit der Schule angefangen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find the people who are friends with people who quit their job before 2005",
            "zh": "找到 在 2005 年 以前 辞职 的 人 的 朋友",
            "de": "finde die Leute, die mit Leuten befreundet sind, die ihren Job vor 2005 gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )"
        },
        "question": {
            "en": "find people with a height of 180 cm that go to brown university",
            "zh": "找到 180 厘米 高 在 布朗 大学 的 上学 的 人",
            "de": "finde Menschen mit einer Größe von 180 cm die zur Brown University gehen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what sex are the students who stated before 2004",
            "zh": "2004 年 之前 入学 的 学生 性别",
            "de": "welchen Geschlechts sind die Studenten die vor 2004 begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which city is the birthplace of two or less people",
            "zh": "哪个 城市 是 两个 或 更 少人 的 出生地",
            "de": "Welche Stadt ist der Geburtsort von 2 oder weniger Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "a friend of someone born in 2004",
            "zh": "一个 出生 2004 年 的 人 的 朋友",
            "de": "Ein Freund von jemandem, der 2004 geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find people 180 cm tall with 2004 end dates",
            "zh": "找出 180 厘米 高 并且 结束 日期 是 2004 年 的 人",
            "de": "Welche Personen sind 180 cm groß und haben ihren Endtermin in 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "who is friends with Alice and has a birthdate on 2004",
            "zh": "谁 是 爱丽丝 的 朋友 而且 在 2004 年 出生",
            "de": "Wer ist mit Alice befreundet und hat seinen Geburtstag in 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who are the friends of students with an end date that is not 2004",
            "zh": "谁 是 结束 日期 不是 2004 年 的 学生 的 朋友",
            "de": "Wer sind die Freunde von Studenten mit einem Enddatum, das nicht 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "who is male and 180 cm tall",
            "zh": "谁 是 180 厘米 高 的 男性",
            "de": "Wer ist männlich und 180cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find me all students who have only one field of study",
            "zh": "找出 所有 只有 一个 专业 的 学生",
            "de": "Nenne alle Studenten, die nur ein Studienfach haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose start date is before the start date of employee Alice",
            "zh": "在 爱丽丝 开始 日期 之前 开始 的 员工",
            "de": "Mitarbeiter, dessen Startdatum vor dem Startdatum der Angestellten Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what person has two birthplaces",
            "zh": "什么 人有 两个 出生地",
            "de": "Welche Person hat zwei Geburtsorte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started after Alice",
            "zh": "在 艾丽丝 之后 开始 的 雇员 们",
            "de": "Mitarbeiter, die nach Alice angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students whose end date is larger than 2004 and 2010",
            "zh": "结束 日期 比 2004 年 和 2010 年 大 的 学生 们",
            "de": "Studenten, deren Enddatum spaetaer als 2004 und 2010 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what worker left before 2004",
            "zh": "什么 员工 在 2004 年 之前 离开 了 ？",
            "de": "Welcher Arbeiter ging vor 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "fins birthplaces of employees with last day after 2004",
            "zh": "找到 最后 一天 在 2004 年 之后 的 员工 的 出生地",
            "de": "Wo ist der Geburtsort der Angestellten deren letzter Tag nach 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees who have a start date no later than student Alice's start date",
            "zh": "找出 开始 日期 不晚 于 学生 艾丽丝 的 开始 日期 的 雇员 们",
            "de": "Finde Angestellte die ein Startdatum nicht später als Schülerin Alices Startdatum haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee started earlier than Alice's end date",
            "zh": "哪个 员工 的 开始 日期 早 于 爱丽丝 的 结束 日期",
            "de": "Welcher Mitarbeiter hat vor dem Enddatum von Alice angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "relationship status of max two people",
            "zh": "最 多 两个 人 的 感情 状态",
            "de": "Wie ist der Beziehungsstatus von maximal zwei Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that started work when Alice started school or after",
            "zh": "在 艾丽丝 开始 上学 或 之后 开始 工作 的 人们",
            "de": "Welche Person began mit der Arbeit als Alice ihre Schule began oder danach?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friends of employees who started before 2004",
            "zh": "在 2004 年 之前 开始 的 雇员 的 朋友 们",
            "de": "Freunde von Mitarbeitern, die vor 2004 angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees whose end date is after Alice's end date",
            "zh": "结束 日期 晚于 爱丽丝 的 员工",
            "de": "Mitarbeiter, deren Enddatum nach dem Enddatum von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )"
        },
        "question": {
            "en": "people born on or after the day Alice quit working",
            "zh": "在 爱丽丝 离职 那天 或 以后 出生 的 人",
            "de": "Menschen, die an oder nach dem Tag geboren wurden, an dem Alice aufgehört hat zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "find me all people who are not friends with Alice",
            "zh": "给 我 找出 所有 不是 爱丽丝 朋友 的 人",
            "de": "Welche Personen sind nicht mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "what was Alice's last day of work",
            "zh": "爱丽丝 最后 一天 工作 的 日期 是 什么 ？",
            "de": "Welcher Tag war Alice's letzter Arbeitstag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that studied at most two universities",
            "zh": "至多 在 两所 大学 学习 过 的 人",
            "de": "Menschen, die an höchstens zwei Universitäten studiert haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has an end date that is at least the end date for the employee Alice",
            "zh": "结束 日期 至少 是 员工 爱丽丝 的 结束 日期 的 雇员 是 哪个 ？",
            "de": "Welcher Angestellte hat ein Enddatum das mindestens das Enddatum der Angestellten Alice ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "person that started working most recently",
            "zh": "最近 开始 工作 的 人",
            "de": "Person die zuletzt angefangen hat zu arbeiten."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students whose end date is 2004 or earlier",
            "zh": "结束 日期 为 2004 年 或 更 早 的 学生",
            "de": "Studenten, deren Enddatum 2004 oder früher ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that started school after 2004 or after 2010",
            "zh": "在 2004 年 之后 或 2010 年 之后 开始 上学 的 人",
            "de": "Menschen, die nach 2004 oder nach 2010 eingeschult wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find me all students that will be leaving the company by the time Alice starts",
            "zh": "帮 我 找到 所有 即将 在 爱丽丝 开始 工作 之前 离开 公司 的 学生",
            "de": "Finde alle Studenten die die Firma verlassen haben werden wenn Alice anfaengt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string min ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what person has the least friends",
            "zh": "谁 有 最少 的 朋友",
            "de": "Welche Person hat die wenigsten Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "who is a person whose friends with Alice that is single",
            "zh": "谁 是 艾丽丝 的 单身 朋友 ？",
            "de": "Welche Person ist mit Alice, die single ist, befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "anyone single who is logged in",
            "zh": "任何 登录 了 的 单身 的 人",
            "de": "Irgendein Single der eingeloggt ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who finishes at most on 2004 or 2010",
            "zh": "最多 在 2004 年 或者 2010 年 完成 的 学生",
            "de": "Student der spätestens 2004 oder 2010 fertig sein wird"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find a list of cities that students whose end date is at least 2004 were born in",
            "zh": "查找 结束 日期 至少 为 2004 年 的 学生 出生 的 城市 列表",
            "de": "Eine Liste der Städte finden, in denen Schüler geboren wurden, deren Enddatum mindestens 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people whose end date is not in 2004",
            "zh": "结束 日期 不是 2004 年 的 人",
            "de": "Personen, deren Enddatum nicht im Jahr 2004 liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started working at the same time as or before Alice",
            "zh": "跟 爱丽丝 同时 或者 之前 开始 工作 的 员工",
            "de": "Mitarbeiter, die zur gleichen Zeit wie oder vor Alice angefangen haben zu arbeiten."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find the friends of people who quit their job after 2004",
            "zh": "找到 2004 年 以后 辞职 的 人 的 朋友",
            "de": "Finde Freunde von Leuten, die 2004 ihre Arbeit gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find the birthplace of people who are 6 feet tall",
            "zh": "找到 6 英尺 高 的 人 的 出生地",
            "de": "Finde den Geburtsort von Leuten, die 6 Fuß groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )"
        },
        "question": {
            "en": "find me the oldest person",
            "zh": "找到 年纪 最大 的 人",
            "de": "finde die älteste Person"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student ended school before 2004 or 2010",
            "zh": "哪个 学生 是 在 2004 年前 或 2010 年前 结束 学业 的 ？",
            "de": "Welcher Student beendete sein Studium vor 2004 oder 2010"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student left most recently",
            "zh": "哪个 学生 是 最近 离开 的",
            "de": "Welcher Student ist zuletzt gegangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "find all people who are mutual friends with Alice",
            "zh": "找到 和 艾丽丝 是 共同 朋友 的 所有人",
            "de": "finde alle Leute die ebenfalls mit Alice befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student started after Alice",
            "zh": "哪个 学生 是 在 爱丽丝 之后 开始 的",
            "de": "Welcher Student hat nach Alice angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees with the most job titles",
            "zh": "职称 最多 的 员工",
            "de": "Welche Angestellten haben die meisten Berufsbezeichnungen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "find all of Alice's friends that are currently online",
            "zh": "找到 所有 在线 的 爱丽丝 的 朋友",
            "de": "Welche von Alice's Freunden sind grade online?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people who completed study before Alice joined the job",
            "zh": "在 爱丽丝 开始 工作 之前 完成 学习 的 人",
            "de": "Welche Person beendete sein Studium bevor Alice ihre Arbeit began?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find friends of people who are 180 cm tall",
            "zh": "找到 身高 一米 八 的 人 的 朋友 们",
            "de": "finde freunde von menschen, die 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have an end date that is employee Alice's start date or later",
            "zh": "哪个 员工 的 结束 日 是 在 爱丽丝 开始 日 同一天 或 以后 的 ？",
            "de": "Welche Mitarbeiter haben ein Enddatum, das dem Startdatum von Mitarbeiter Alice oder später entspricht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.university ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find phone number of university",
            "zh": "找到 大学 的 电话号码",
            "de": "Welche Telefonnummer hat die Universität?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "people who are single that are currently online",
            "zh": "目前 在线 的 单身 人士",
            "de": "Singles die gerade online sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what are genders of students not attending brown university",
            "zh": "没有 在 布朗 大学 上学 的 学生 的 性别 是 什么 ？",
            "de": "Was sind die Geschlechter von Studenten die nicht zur Brown Universität gehen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string !type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "which university does the person who is 180 cm attend",
            "zh": "这个 身高 180 厘米 的 人 上 了 哪个 大学 ?",
            "de": "Welche Universität besucht die Person, die 180 cm groß ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string !type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "job titles of all people who are 180 cm tall",
            "zh": "所有 身高 是 180cm 的 人 的 工作 职位",
            "de": "Berufsbezeichnungen aller 180 cm großen Menschen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find people who are 180 cm tall with 2004 start date",
            "zh": "找到 2004 年入 职 而且 180 厘米 高 的 人",
            "de": "Finden Sie Leute, die 180 cm groß sind und das Startdatum 2004 haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what are the current relationship statuses of students with a start date of 2004 or later",
            "zh": "开始 日期 是 在 2004 年 或 之后 的 学生 们 的 现今 情感 状态 是 什么 ？",
            "de": "Wie ist der aktuelle Beziehungsstatus von Studenten deren Start in 2004 oder später ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who is friends with the person who started working after 2004",
            "zh": "谁 和 这位 2004 年 后 开始 工作 的 人 是 朋友 ？",
            "de": "Wer ist mit der Person befreundet, die nach 2004 mit der Arbeit begonnen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "people who were born in 2004",
            "zh": "在 2004 年 出生 的 人们",
            "de": "Personen die in 2004 geboren wurden."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of student who does not finish by 2004",
            "zh": "没有 在 2004 年前 完成 （ 学业 ） 的 学生 的 性别",
            "de": "Geschlecht des Studenten der bis 2004 nicht abschließen wird."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find a person who is a student with a start date that is not 2004 and their friends",
            "zh": "找到 一个 没有 在 2004 年 入学 的 学生 和 他 的 朋友 们",
            "de": "Finde eine Person der Student ist mit einem Anfangsdatum, welches nicht in 2004 liegt, und seine Freunde."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of a worker who left before 2004",
            "zh": "在 2004 年 之前 离开 的 工人 的 情感 状态",
            "de": "Wie ist der Beziehungsstatus eines Arbeiters, der vor 2004 gegangen ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find student with start date before or on Alice's start date",
            "zh": "找到 开始 日 跟 爱丽丝 的 开始 日 是 一样 或 更 早 的 学生",
            "de": "Schüler mit einem Startdatum vor oder am Startdatum von Alice finden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students starting before or with Alice",
            "zh": "和 爱丽丝 一起 或 更 早 开始 的 学生",
            "de": "Welche Studenten starten vor oder mit Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the gender of students with an end date earlier than 2004",
            "zh": "最后 一天 比 2004 年 要 早 的 学生 的 性别 是 什么 ？",
            "de": "Wie lautet das Geschlecht der Studenten mit einem Enddatum früher als 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of a student who graduated 2004 or after",
            "zh": "在 2004 年 或 以后 毕业 的 学生 的 出生 城市 是 什么 ？",
            "de": "Welche Stadt ist der Geburtsort eines Studenten, der 2004 oder später seinen Abschluss gemacht hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students who attended one or two universities",
            "zh": "找到 上过 一 或 两家 大学 的 学生",
            "de": "Finde Schüler die eine oder zwei Universitäten besucht haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students who have an end date that is equal or later to that of student Alice",
            "zh": "找到 结束 日期 等于 或 晚于 学生 Alice 的 学生",
            "de": "Suche nach Schülern mit einem Enddatum, das gleich oder später dem von Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the gender of students with last day in 2004 or before",
            "zh": "最后 一天 在 2004 年 或 以前 的 学生 的 性别 是 什么 ？",
            "de": "Welches Geschlecht haben die Studenten mit einem letzten Tag in 2004 oder vorher?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "who started first",
            "zh": "谁 是 最早 开始 的 ？",
            "de": "Wer fing zuerst an?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what people are friends with students whom have an end date that is no greater than 2004",
            "zh": "与 结束 日期 不 超过 2004 年 的 学生 的 朋友 是 什么 人",
            "de": "Welche Personen sind Freunde von Studenten, die ein Enddatum haben, das nicht größer als 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have a start date that is anything but 2004",
            "zh": "哪些 学生 是 在 2004 年 以外 开始 （ 学业 ） 的 ？",
            "de": "Welche Studenten haben ein Anfangsdatum, das ungleich 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string min ) ( string relationship_status ) ) )"
        },
        "question": {
            "en": "who has minimum number of relationship statuses",
            "zh": "谁 有 最 少数 目的 感情 状态 ？",
            "de": "Wer hat die geringste Anzahl an Beziehungsstatus?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )"
        },
        "question": {
            "en": "what field is Alice studying in brown university",
            "zh": "爱丽丝 在 布朗 大学 学习 的 是 什么 领域",
            "de": "Welches Feld studiert Alice an der Brown Universität?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "male friend of Alice",
            "zh": "爱丽丝 的 男性 朋友",
            "de": "Ein männlicher Freund von Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student had a start date no earlier than Alice",
            "zh": "哪个 学生 的 （ 学业 ） 开始 日 是 不 在 爱丽丝 之前 的 ？",
            "de": "Welcher Student hat nicht vor Alice angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the city that is the birthplace of at least two people",
            "zh": "哪个 城市 是 至少 两个 人 的 出生地 ？",
            "de": "Welche Stadt ist der Geburtsort von mindestens zwei Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who was the last employee to quit",
            "zh": "谁 是 最后 退出 的 员工",
            "de": "Welcher Angstellter kündigte zuletzt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of employees who did not stop working in 2004",
            "zh": "2004 年 没有 停止 工作 的 员工 的 性别 是 什么",
            "de": "Was ist das Geschlecht der Arbeitnehmer, die im Jahr 2004 nicht aufgehört haben zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "where were employees at companies other than McKinsey born",
            "zh": "在 非 McKinsey 的 公司 的 雇员 们 是 在 哪里 出生 的 ？",
            "de": "Wo wurden Mitarbeiter von Firmen, außer von McKinsey, geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who stopped working in 2004 or later",
            "zh": "谁 在 2004 年 或 以后 停止 工作",
            "de": "Wer hat 2004 oder später aufgehört zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees started before 2004",
            "zh": "哪些 雇员 在 2004 前 开始 的 ？",
            "de": "Welche Mitarbeiter haben vor 2004 angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students starting on or after employee Alice's first day",
            "zh": "找到 那些 在 阿丽丝 的 第一天 或 之后 开始 的 学生 了 吗 ？",
            "de": "Finde Studenten, die an oder nach dem ersten Tag der Angestellten Alice anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students studying fields other than computer science",
            "zh": "找到 学习 领域 是 除 电脑科技 以外 的 学生",
            "de": "Finden Sie Studenten, die andere Bereiche als Informatik studieren"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "find people who are not friends with Alice",
            "zh": "找到 不是 爱丽丝 朋友 的 人",
            "de": "Welche Personen sind nicht mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )"
        },
        "question": {
            "en": "a 180 cm tall McKinsey employee",
            "zh": "身高 180 公分 的 麦肯锡 员工",
            "de": "ein 180 cm großer McKinsey-Angestellter"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is before start date of Alice",
            "zh": "结束 日 在 爱丽丝 的 开始 日 之前 的 学生",
            "de": "Student, dessen Enddatum vor dem Startdatum von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find me all the people who are friends with people that did not attend brown",
            "zh": "帮 我 找到 所有 是 没有 在 布朗 大学 上学 的 人 的 朋友 的 人",
            "de": "Welche Personen sind mit Personen befreundet die nicht die brown besuchten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.city.new_york en.city.bejing ) )"
        },
        "question": {
            "en": "select new york or Beijing",
            "zh": "选择 纽约 或 北京",
            "de": "Wählen Sie New York oder Peking aus."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of people studied in fields other than computer science",
            "zh": "在 除了 电脑 科学 之外 的 领域 学习 的 人 的 性别",
            "de": "Welches Geschlecht haben Personen die andere Studienfächer Studierten als Informatik?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "gender employee whose end date is not 2004",
            "zh": "结束 日 不是 2004 年 的 员工 的 性别",
            "de": "Das Geschlecht von Angstellten, dessen Enddatum nicht 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )"
        },
        "question": {
            "en": "people who are the same height as Alice or shorter",
            "zh": "和 艾莉丝 一样 高 或者 更 矮 的 人们",
            "de": "Welche Personen haben die gleiche Größe oder sind kleiner als Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )"
        },
        "question": {
            "en": "people born after Alice finished school",
            "zh": "爱丽丝 完成学业 后 出生 的 人",
            "de": "Menschen, die nach dem Schulabschluss von Alice geboren wurden."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birthplace of people who completed their study in a year other than 2004",
            "zh": "在 2004 年 以外 的 一年 内 完成学业 的 人 的 出生地",
            "de": "Geburtsort von Menschen, die ihr Studium in einem anderen Jahr als 2004 abgeschlossen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of people that started work in or before 2004",
            "zh": "在 2004 年 或 之前 开始 工作 的 人们 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus von Menschen, die ihre Arbeit in oder vor 2004 aufgenommen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what are the birth cities of students who have an end date that is not 2004",
            "zh": "结束 日期 不是 2004 年 的 学生 的 出生 城市 是 什么",
            "de": "Was sind die Geburtsstädte von Studenten, deren Enddatum nicht 2004 liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people that are friends with students hired to start on or before 2004",
            "zh": "和 在 2004 年 或 之前 就 被 雇佣 的 学生 是 朋友 的 人们",
            "de": "Personen, die mit Studenten befreundet sind, die für den Start im Jahr 2004 oder davor eingestellt wurden."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who is friends of employees who have a job title other than software engineer",
            "zh": "工作 职称 不是 软件 工程师 的 雇员 们 的 朋友 们 是 谁 ？",
            "de": "Wer ist mit Angestellten befreundet die eine andere Berufsbezeichnung haben als Softwareentwickler?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find students friends who started in a year other than 2004",
            "zh": "找到 2004 年 以外 一年 开始 的 学生 朋友",
            "de": "Finde Freunden von Studenten, die in einem anderen Jahr als 2004 anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what city were two or fewer people born in",
            "zh": "哪个 城市 有 两个 或少 的 人 出生 ？",
            "de": "In welcher Stadt wurden zwei oder weniger Menschen geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who's friends with someone who left a company or retired before 2004",
            "zh": "谁 是 在 2004 年 之前 离开 公司 或 退休 的 人 的 朋友",
            "de": "Wer ist mit jemanden befreundet der das Unternehmen in 2004 verließ oder in Ruhestand ging?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employee who starts after Alice's last day",
            "zh": "寻找 在 爱丽丝 最后 一天 后 开始 的 员工",
            "de": "Welche Angestellten starteten nach Alice's letzten Tag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )"
        },
        "question": {
            "en": "person born after Alice",
            "zh": "比 爱丽丝 晚 出生 的 人",
            "de": "Welche Personen wurden nach Alice geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birthplace of students who did not join in 2004",
            "zh": "没有 在 2004 年 加入 的 学生 的 出生地",
            "de": "Was ist der Geburtsort von Studenten die nicht in 2004 beigetreten sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of the majority of people",
            "zh": "大部分 人 的 婚姻关系 是 什么 ？",
            "de": "Was ist der Beziehungsstatus der Mehrheit der Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "an employee ending after Alice was born",
            "zh": "一位 在 爱丽丝 出生 之后 结束 的 员工",
            "de": "Ein Angestellter, der aufhörte, nachdem Alice geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "which people are friends with students who didn't graduate in 2004",
            "zh": "谁 是 在 2004 没有 毕业 学生 的 朋友",
            "de": "Welche Leute sind mit Studenten befreundet, die 2004 ihren Abschluss nicht gemacht haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of employees whose start date is no later than 2004",
            "zh": "最迟在 2004 年 开始 员工 的 性别",
            "de": "Was ist das Geschlecht von Angestellten, deren Startdatum nicht später als 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) ( call SW.concat en.relationship_status.single en.relationship_status.married ) ) )"
        },
        "question": {
            "en": "which people are single or married",
            "zh": "谁 是 单身 或者 是 结婚",
            "de": "Welche Personen sind ledig oder verheiratet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "which person born in new york is 180 cm tall",
            "zh": "谁 是 在 纽约 出生 且 有 180 厘米 高 的",
            "de": "Welche Person, die in New York geboren wurde, ist 1,8m groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student that has studied at no more than 2 universities",
            "zh": "在 不 超过 2 所 大学 学习 的 学生",
            "de": "Welcher Student hat an nicht mehr als zwei Universitäten studiert?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "which men are Alice friends with",
            "zh": "爱丽丝 跟 哪些 男性 是 朋友 ？",
            "de": "Mit welchen Männern ist Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees who started on student Alice's last day",
            "zh": "找到 在 爱丽丝 最后 一天 开始 工作 的 员工",
            "de": "Finde Angestellte, die am letzten Tag der Studentin Alice anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started before Alice quit school",
            "zh": "在 爱丽丝 离开 学校 之前 开始 （ 工作 ） 的 员工",
            "de": "Angestellte, die anfingen, bevor Alice mit der Schule aufhörte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string ! = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "people born in any year except 2004",
            "zh": "不 在 2004 年 出生 的 人",
            "de": "Personen, die in einem beliebigen Jahr außer 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friends of people who completed their studies after 2004",
            "zh": "在 2004 年 之后 完成学业 的 人 的 朋友",
            "de": "Freunde von Personen welche ihr Studium nach 2004 beendeten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find friends of people who do not work at McKinsey",
            "zh": "找出 不 在 麦肯锡 工作 的 人 的 朋友 们",
            "de": "finde Freunde von Personen welche nicht bei McKinsey arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "find all Alice's friends that were born in new york",
            "zh": "找出 所有 在 纽约 出生 的 爱丽丝 的 朋友",
            "de": "Welche Freunde von Alice sind in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "where was Alice not born",
            "zh": "爱丽丝 不是 在 哪里 出生 的 ？",
            "de": "Wo wurde Alice nicht geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of student who does not graduate by 2004",
            "zh": "未 在 2004 年 毕业 的 学生 的 关系 状况",
            "de": "Welchen Beziehungsstatus haben Studenten welche ihren Abschluss nicht in 2004 gemacht haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find the people who joined their work before 2005",
            "zh": "找出 2005 年 以前 参加 工作 的 人",
            "de": "Welche Personen haben ihre Stelle vor 2005 angetreten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the number of the field",
            "zh": "场地 的 号码 是 什么 ？",
            "de": "Wie lautet die Nummer des Feldes?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who started in 2004 or later",
            "zh": "在 2004 年 或 之后 开始 的 学生 们",
            "de": "Welche Studenten starteten in oder nach 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find the birth city of employees with an end date later than 2004",
            "zh": "找出 结束 日期 在 2004 年 之后 的 雇员 们 的 出生 城市",
            "de": "In welcher Stadt wurden Angestellte geboren dessen Endtermin später als 2004 war?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "who has friends who are single",
            "zh": "谁 有 单身 朋友 ？",
            "de": "Wer hat Freunde die Single sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find all people who have more than two friends",
            "zh": "找到 所有 拥有 两个 以上 朋友 的 人",
            "de": "Welche Personen haben mehr als zwei Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "birthplace of employees finishing in or after 2004",
            "zh": "在 2004 年 或 以后 结束 的 员工 的 出生 城市",
            "de": "Was sind die Geburtsorte der Angestellten, die in 2004 oder danach aufgehört haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "people who are born in new york and are 180 cm tall",
            "zh": "在 纽约 出生 且 身高 是 180 公分 的 人",
            "de": "Welche Personen sind in New York geboren und sind 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "which single people are 180 cm tall",
            "zh": "哪些 单身 的 人 是 一米 八高 ？",
            "de": "Welche ledige Person is 180cm gross?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee started no later than Alice",
            "zh": "哪个 员工 开始 的 不 晚于 爱丽丝 （ 开始 的 ）",
            "de": "Welcher Mitarbeiter hat nicht später als Alice angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )"
        },
        "question": {
            "en": "what university did Alice study computer science at",
            "zh": "爱丽丝 是 在 哪个 大学 学 电脑 科学 的 ？",
            "de": "An welcher Universität hat Alice Informatik studiert?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is after 2004",
            "zh": "结束 日期 是 在 2004 年 之后 的 学生",
            "de": "Student, dessen Enddatum nach 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students whose quit date of job is same as employee Alice's",
            "zh": "退出 工作 日期 与 员工 Alice ' s 相同 的 学生",
            "de": "Welche Studenten haben ihren Job zum gleichen Zeitpunkt wie Mitarbeiter Alice gekündigt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who has similar relationship status that of Alice",
            "zh": "谁 和 爱丽丝 的 感情 状态 类似 ？",
            "de": "Wer hat einen ähnlichen Beziehungsstatus wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is the friend of a person whose end date is at least 2004",
            "zh": "谁 是 那个 结束 日 至少 在 2004 的 人 的 朋友 ？",
            "de": "Wer ist der Freund der Person, deren Enddatum mindestens 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )"
        },
        "question": {
            "en": "who was born on a date before Alice's start date",
            "zh": "谁 在 爱丽丝 入职 之前 出生 的",
            "de": "Wer wurde an einem Tag vor Alices Startdatum geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationships statuses of employees who don't work as software engineers",
            "zh": "不是 软件 工程师 的 雇员 的 情感 状态",
            "de": "Wie ist der Beziehungsstatus von Mitarbeitern, die nicht als Softwareingenieure arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "who was born in 2004 who is friends with Alice",
            "zh": "谁 出 生于 2004 年 谁 是 爱丽丝 的 朋友",
            "de": "Wer wurde in 2004 geboren, der mit Alice befreundet ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what person has a birthdate earlier than 2004",
            "zh": "谁 的 出生日期 在 2004 年 以前",
            "de": "Welche Person hat ein Geburtsdatum früher als 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who are friends who employees who didn't quit in 2004",
            "zh": "那些 在 2004 年 没有 辞职 的 员工 的 朋友",
            "de": "Personen, die mit Mitarbeitern, die nicht in 2004 gekuendigt haben, befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find me the genders of students who attended after 2004",
            "zh": "帮 我 找 在 2004 年 以后 加入 的 学生 的 性别",
            "de": "Finde das Geschlecht der Studenten, die nach 2004 anwesend waren."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what city was the employee that started after 2004 born in",
            "zh": "2004 年 以后 出生 的 员工 是 哪个 城市 的",
            "de": "In welcher Stadt wurde der Mitarbeiter geboren, der nach 2004 angefangen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose start date is after the end date of employee Alice",
            "zh": "开始 日期 是 在 雇员 艾丽丝 的 结束 日期 之后 的 雇员",
            "de": "Mitarbeiter, dessen Startdatum nach dem Enddatum von Mitarbeiter Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )"
        },
        "question": {
            "en": "who has a birthdate at the end of Alice's employment",
            "zh": "谁 的 生日 在 爱丽丝 就职 结束 时",
            "de": "Wer hat am letzten Arbeitstag von Alice Geburtstag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of student whose field of study is not computer science",
            "zh": "学习 领域 不是 计算机科学 的 学生 的 性别",
            "de": "Was ist das Geschlecht des Studenten welcher nicht Informatik als Studienfach hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "people born between 2004 and 2010",
            "zh": "2004 年 至 2010 年间 出生 的 人",
            "de": "Welche Personen wurden zwischen 2004 und 2010 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what people have two birthplaces",
            "zh": "什么 人有 两个 出生地 ？",
            "de": "Welche Personen haben Zwei Geburtsorte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find employees friends who started in 2004 or before",
            "zh": "找到 在 2004 年 或 之前 开始 的 员工 朋友",
            "de": "Welche Freunde von Mitarbeitern starteten in oder nach 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the gender of students not attending brown university",
            "zh": "没有 在 布朗 大学 上学 的 学生 们 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht der Studenten die nicht die Brown University besuchen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who are friends with employees who quit their job in or after 2004",
            "zh": "在 2004 年 或 之后 辞职 的 员工 的 朋友",
            "de": "Menschen, die mit Mitarbeitern befreundet sind, die ihren Job in oder nach 2004 gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string !type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "job titles of people that are 180 cm tall",
            "zh": "180 厘米 高 的 人 的 职称",
            "de": "Was sind die Berufsbezeichnungen von Personen die 180 cm groß sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "people who are 180 cm tall and are currently online",
            "zh": "身高 180 厘米 且 目前 在线 的 人",
            "de": "Welche Personen sind 180 cm groß und grade online?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "name an employee who quit after Alice",
            "zh": "说出 一个 在 爱丽丝 之后 辞职 的 员工",
            "de": "Nenne einen Mitarbeiter der nach Alice gekündigt hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of people that stopped school in or before 2004",
            "zh": "在 2004 年 或者 之前 停止 上学 的 人 的 关系 状态 是 什么",
            "de": "Wie ist der Beziehungsstatus der Personen die die Schule in oder vor 2004 verlassen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string !type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what do people study who are 180 cm",
            "zh": "身高 一米 八 的 人 都 学 什么",
            "de": "Was studieren Personen die 180 cm groß sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )"
        },
        "question": {
            "en": "who was born after Alice started",
            "zh": "谁 是 爱丽丝 开始 后 出生 的",
            "de": "Wer wurde geboren nachdem Alice startete?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have a start date no later than 2004",
            "zh": "哪些 员工 的 开始 日 不 晚于 2004 ？",
            "de": "Welche Angestellten haben ein Startdatum nicht später als 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "when did Alice leave the job she started in 2004",
            "zh": "爱丽丝 什么 时候 离开 了 她 2004 年 开始 的 工作",
            "de": "Wann hat Alice den Job verlassen, den sie im Jahr 2004 begonnen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birthplace of students whose end date is no greater than 2004",
            "zh": "结束 日期 不 超过 2004 年 的 学生 的 出生地",
            "de": "In welchem Ort wurden die Studenten geboren deren Endtermin nicht später als 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.university ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is total number of universities",
            "zh": "大学 的 总数 是 多少",
            "de": "Wie viele Universitäten gibt es insgesamt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which people have at least two birthplaces",
            "zh": "哪些 人有 至少 两个 出生地 ？",
            "de": "Welche Personen haben mindestens Zwei Geburtsorte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student has a start date earlier than 2004",
            "zh": "哪个 学生 的 开学 日期 早于 2004 年",
            "de": "Welcher Student hat ein Startdatum vor 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "the gender of a student that starts after 2004",
            "zh": "一个 在 2004 年 之后 开始 的 学生 的 性别",
            "de": "das Geschlecht eines Studenten, der nach 2004 beginnt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "which of Alice's friends are online right now",
            "zh": "爱丽丝 的 哪些 朋友 现在 在线",
            "de": "Welche von Alices Freunden sind gerade online?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "the gender of an employee that started before 2004",
            "zh": "一个 在 2004 年 之前 开始 的 员工 的 性别",
            "de": "Wie ist das Geschlecht eines Angestellten der vor 2004 startete?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of an employee who left in 2004 or later",
            "zh": "一位 在 2004 年 或 之后 离开 的 雇员 的 出生地 是 什么 ？",
            "de": "Wo ist der Geburtsort eines Angestellten der in oder nach 2004 ging?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )"
        },
        "question": {
            "en": "people born on or before the day Alice quit her job",
            "zh": "出生 在 爱丽丝 辞职 的 那天 或者 之前 的 人",
            "de": "Menschen, die an oder vor dem Tag geboren wurden, an dem Alice ihren Job gekündigt hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students graduate before 2004 or 2010",
            "zh": "哪些 学生 在 2004 年 或 2010 年 之前 毕业",
            "de": "Welche Studenten machten ihren Abschluss vor 2004 oder 2010?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of people who are 180 cm tall",
            "zh": "有 一米 八 身高 的 人 的 感情 状况 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus der Personen die 180 cm groß sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student who has studied at the fewest universities",
            "zh": "一个 在 最少 的 大学 学习 过 的 学生",
            "de": "Welcher Student hat an wenigsten Universitäten studiert?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employee whose start date is before 2004",
            "zh": "在 2004 年 之前 开始 的 雇员 的 感情 状态",
            "de": "Wie ist der Beziehungsstatus des Angestellten dessen Start Datum vor 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is not 2004",
            "zh": "结束 日期 不是 在 2004 年 的 学生",
            "de": "Welcher Student hat sein End Datum nicht in 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who is friends with Alice and is 180 cm tall",
            "zh": "谁 是 爱丽丝 的 朋友 并且 身高 是 180 厘米 ？",
            "de": "Wer ist mit Alice befreundet und 1,8m groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employer ) ) )"
        },
        "question": {
            "en": "does Alice work at McKinsey",
            "zh": "爱丽丝 在 McKinsey 工作 吗 ？",
            "de": "Arbeitet Alice bei McKinsey?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )"
        },
        "question": {
            "en": "person with the same birthday as Alice",
            "zh": "跟 爱丽丝 同一天 生日 的 人",
            "de": "Welche Person hat den gleichen Geburtstag wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees that have a start date that is the same as student Alice's",
            "zh": "找到 开始 日期 和 学生 爱丽丝 开始 日期 相同 的 雇员 们",
            "de": "Finde Angestellte die das gleiche Startdatum haben wie die Schülerin Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees whom have an end date bigger than the start date for employee Alice",
            "zh": "找出 结束 日期 比 雇员 爱丽丝 的 开始 日期 大 的 雇员 们",
            "de": "Finde Angestellte die ein Enddatum spaeter als das Startdatum der Angestellten Alice haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students with a start date no later than 2004",
            "zh": "找到 开始 日期 不晚 于 2004 年 的 学生 们",
            "de": "Welche Studenten haben ein Starttag der nicht später ist als in 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "who is now friends with the person who was born in new york",
            "zh": "谁 和 在 纽约 出生 的 那个 人 现在 是 朋友 ？",
            "de": "Wer ist nun mit der Person befreundet die in New York geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student started before Alice was born",
            "zh": "什么 学生 在 爱丽丝 出生 之前 就 开始 了 ？",
            "de": "Welcher Student begann, bevor Alice geboren wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people who have student friends who did not graduate in 2004",
            "zh": "有 没 在 2004 年 毕业 的 学生 朋友 的 人",
            "de": "Welche Personen sind mit einen Studenten befreundet der seinen Abschluss nicht in 2004 machte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose university is either brown university or UCLA",
            "zh": "布朗 大学 或者 加州大学洛杉矶分校 的 学生",
            "de": "Schüler dessen Universität entweder die Brown Universität oder UCLA ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of student whose end date is after 2004",
            "zh": "结束 日期 在 2004 年 之后 的 学生 的 感情 状况",
            "de": "Wie ist der Beziehungsstatus des Studenten dessen Endtag nach 2004 liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who finish after Alice's birthday",
            "zh": "在 爱丽丝 生日 之后 完成 的 雇员 们",
            "de": "Mitarbeiter die nach Alices Geburtstag fertig sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "find people who are currently online and born in new york",
            "zh": "找到 目前 在线 并 在 纽约 出生 的 人",
            "de": "Welche Personen sind grade online und in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "find people of the same gender as Alice's friends",
            "zh": "找出 和 爱丽丝 的 朋友 一样 性别 的 人们",
            "de": "Welche Personen haben das gleiche Geschlecht wie Alice's Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have the earliest end date",
            "zh": "哪些 员工 的 结束 日 是 最早 的 ？",
            "de": "Welche Mitarbeiter haben das früheste Enddatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "all 180 cm tall people born in 2004",
            "zh": "所有 在 2004 年 出生 的 身高 180 公分 的 人",
            "de": "Alle 180cm großen Leute, die 2004 geboren sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started before Alice",
            "zh": "在 爱丽丝 之前 开始 的 员工 们",
            "de": "Mitarbeiter, die vor Alice angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )"
        },
        "question": {
            "en": "what is job title of employee Alice whose end date is 2004",
            "zh": "结束 日期 是 2004 年 的 雇员 爱丽丝 的 工作 职位 是 什么 ？",
            "de": "Was ist die Berufsbezeichnung von der Angestellten Alice deren Endtermin in 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "the relationship status of an employee is one with a start date of at least 2004",
            "zh": "开始 日期 至少 在 2004 年 的 一个 雇员 的 感情 状况",
            "de": "Der Beziehungsstatus eines Mitarbeiters ist gleich mit einem Anfangsdatum von spätestens 2004."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what gender represents the least number of people",
            "zh": "哪个 性别 代表 了 最少 的 人 ？",
            "de": "Welches Geschlecht repräsentiert die geringste Anzahl von Menschen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )"
        },
        "question": {
            "en": "180 cm tall brown university student",
            "zh": "身高 180 公分 的 布朗 大学 的 学生",
            "de": "180cm grosser student der Brown University"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of a student that is not studying computer science",
            "zh": "哪个 城市 是 一个 非 电脑 科学 专业 的 学生 的 出生地 ？",
            "de": "Welche Stadt ist der Geburtsort eines Studenten, der keine Informatik studiert?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )"
        },
        "question": {
            "en": "who was born on or after Alice's last day of employment",
            "zh": "谁 在 爱丽丝 就业 最后 一天 或 之后 出生 ？",
            "de": "Wer wurde an oder nach Alices letztem Arbeitstag geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "the gender of a student who started before 2004",
            "zh": "在 2004 年 之前 开始 的 学生 的 性别",
            "de": "das Geschlecht eines Studenten, der vor 2004 angefangen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is birth date of Alice",
            "zh": "结束 日期 是 爱丽丝 出生日期 的 学生",
            "de": "Student, dessen Enddatum das Geburtsdatum von Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is not before end date of student Alice",
            "zh": "开始 日 不 在 学生 爱丽丝 结束 日 之前 的 学生",
            "de": "Student, dessen Anfangsdatum nicht vor dem Enddatum der Studentin Alice liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees have an end date that is earlier than that of student Alice",
            "zh": "哪些 员工 的 结束 日期 早 于 学生 Alice 的 结束 日期",
            "de": "Welche Angestellten haben ein Enddatum, das früher als das der Studentin Alice ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that stopped working in or before 2004 or in or before 2010",
            "zh": "在 2004 年 或 之前 或者 在 2010 年 或 之前 停止 工作 的 人们",
            "de": "Leute, die mit der Arbeit 2004 oder vorher oder 2010 oder vorher aufhörten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of students whose start date is not 2004",
            "zh": "开始 日期 不是 2004 年 的 学生 们 的 感情 状态",
            "de": "Beziehungsstatus von Schülern deren Startdatum nicht 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "what date in 2004 is Alice's last day of work",
            "zh": "爱丽丝 的 最后 一个 工作 天是 在 2004 的 哪一天",
            "de": "Welches Datum im Jahr 2004 ist Alice's letzter Arbeitstag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "who has two or more relationship statuses at once",
            "zh": "谁 同时 有 至少 两种 感情 状态",
            "de": "Wer hat zwei oder mehr Beziehungsstatus auf einmal"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who quit before Alice started",
            "zh": "在 爱丽丝 入 职前 辞职 的 雇员",
            "de": "Angestellter, der gekündigt hat, bevor Alice angefangen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "a worker who didn't start in 2004",
            "zh": "不是 在 2004 年入 职 的 工作人员",
            "de": "Welcher Arbeiter startete nicht in 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find the people who joined study before Alice",
            "zh": "找到 在 爱丽丝 之前 参与 研究 的 人",
            "de": "Welche Personen fingen vor Alice mit dem Studium an?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people studying the same thing as Alice",
            "zh": "和 爱丽丝 学 一样 东西 的 人",
            "de": "Welche Personen studieren das Selbe wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee started after Alice started",
            "zh": "哪位 员工 是 在 爱丽丝 之后 开始 的",
            "de": "Welcher Angestellte startete nach Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of employees who started before 2004",
            "zh": "在 2004 年前 入职 的 员工 的 出生地 在 哪里",
            "de": "Was ist der Geburtsort von Mitarbeitern, die vor 2004 angefangen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student has an end date that is no greater than the start date of Alice",
            "zh": "哪个 学生 在 爱丽丝 开始 前 结束",
            "de": "Welcher Student hat ein Endtermin der nicht später ist als Alice Starttermin?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many gender options are there",
            "zh": "有 多少 个 性别 选项",
            "de": "wie viele Geschlechteroptionen gibt es"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "people with two relationship statuses or less",
            "zh": "有 两种 关系 状态 或 更 少 的 人",
            "de": "Welche Personen haben Zwei oder weniger Beziehungsstatus?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "who is not single",
            "zh": "谁 不是 单身",
            "de": "Wer ist nicht Single?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find relationship statuses of students with a start date that is 2004 or later",
            "zh": "找到 开始 日期 在 2004 年 或 之后 的 学生 的 关系 状态",
            "de": "Wie ist der Beziehungsstatus der Studenten deren Startdatum 2004 oder später ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find people who are friends with students who have a start date of 2004 or later",
            "zh": "找到 与 开始 日期 为 2004 或 更 晚 的 学生 成为 朋友 的 人",
            "de": "Finde Personen, die mit Studenten befreundet sind, die einen Anfangsdatum von 2004 oder später haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )"
        },
        "question": {
            "en": "which date Alice the software engineer started",
            "zh": "软件 工程师 Alice 开始 的 日期",
            "de": "An welchem Datum fing die Softwareentwicklerin Alice an?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "birth city of employees whose end date is after 2004",
            "zh": "结束 日期 在 2004 年 之后 的 员工 的 出生 城市",
            "de": "Geburtsort der Arbeitnehmer, deren Enddatum nach 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "find people who were born in New York who are 180 cm tall",
            "zh": "找到 出生 在 纽约 身高 180 厘米 的 人",
            "de": "Finde Personen, die in New York geboren und 180 cm groß sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "find all of Alice's friends that are currently online",
            "zh": "找到 目前 在线 的 所有 Alice 的 朋友",
            "de": "Finde alle Freunde von Alice, die gerade online sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has an end date that is 2004 or later",
            "zh": "哪些 员工 结束 日期 是 2004 年 或 之后",
            "de": "Welcher Mitarbeiter hat ein Enddatum, welches 2004 oder später ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )"
        },
        "question": {
            "en": "who was born on the day Alice left",
            "zh": "谁 在 爱丽丝 离开 的 那天 出生",
            "de": "Wer wurde an dem Tag geboren an dem Alice gegangen ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student started before Alice",
            "zh": "哪个 学生 在 爱丽丝 之前 开始",
            "de": "Welcher Student hat vor Alice angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "who is Alice's single friend",
            "zh": "Alice 的 单身 朋友 是 谁",
            "de": "Wer ist Alices single Freund?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who works for the same employer as Alice",
            "zh": "谁 和 爱丽丝 为 相同 的 雇主 工作",
            "de": "Wer arbeitete für den gleichen Arbeitgeber wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students graduate after Alice started school",
            "zh": "哪些 学生 在 爱丽丝 开始 上学 之后 毕业",
            "de": "Welche Studenten machten ihren Abschluss, nachdem Alice mit der Schule anfing?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) )"
        },
        "question": {
            "en": "what person has a height of 180 to 200 cm",
            "zh": "什么 人 身高 是 180 到 200 厘米",
            "de": "Welche Person hat eine Größe von 180 bis 200 cm?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "where were people that started school in any year but 2004 born",
            "zh": "在 除了 2004 年 以外 年份 开始 上学 的 人 在 哪里 出生",
            "de": "Wo wurden die Personen geboren, die in jedem beliebigen Jahr ausser 2004 mit der Schule begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students who joined after 2004",
            "zh": "找到 2004 年 后 加入 的 学生",
            "de": "Welche Studenten traten nach 2004 bei?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string max ) ( string relationship_status ) ) )"
        },
        "question": {
            "en": "who has had the most different relationship statuses",
            "zh": "谁 拥有 最 不同 的 关系 状态",
            "de": "Wer hatte die unterschiedlichsten Beziehungsstatus"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is not before birth date of Alice",
            "zh": "开始 日期 不早 于 Alice 出生日期 的 学生",
            "de": "Welche Studenten haben ihr Starttag nicht vor Alice's Geburtstag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )"
        },
        "question": {
            "en": "what was Alice's job when she started in 2004",
            "zh": "Alice2004 年 开始 工作 的 是 干什么 的",
            "de": "Was war Alices Beruf, als sie in 2004 angefangen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "birthplace of employees who didn't start in 2004",
            "zh": "不是 2004 年 开始 工作 的 雇员 的 出生地",
            "de": "Wo ist der Geburtsort der Angestellten die nicht in 2004 starteten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string ! = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find me the people born in any year but 2004",
            "zh": "给 我 找 除了 2004 年 出生 的 人",
            "de": "Finde Personen, die in jedem beliebigen Jahr außer 2004 geboren sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "find people born between 2004 and 2010",
            "zh": "找到 2004 年 至 2010 年间 出生 的 人",
            "de": "Welche Personen wurden zwischen 2004 und 2010 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what's the gender of employees who didn't start in 2004",
            "zh": "不是 2004 年 开始 工作 的 雇员 是 什么 性别",
            "de": "Welches Geschlecht haben die Angestellten, die nicht 2004 angefangen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students starting before Alice finishes",
            "zh": "爱丽丝 毕业 前 开始 上学 的 学生",
            "de": "Studenten die anfangen bevor Alice fertig ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "what is the relationship status of people with the birth place as New York",
            "zh": "像 纽约 这样 出生地 的 人们 婚恋 状况 怎样",
            "de": "Was ist der Beziehungsstatus von Personen deren Geburtsort New York ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )"
        },
        "question": {
            "en": "find all people born after Alice quitted",
            "zh": "找出 所有 爱丽丝 辞职 后 出生 的 人们",
            "de": "Finde alle Menschen, die geboren wurden, nachdem Alice aufgehört hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees before working before Alice",
            "zh": "哪些 雇员 在 爱丽丝 前 开始 工作",
            "de": "Mitarbeiter, dessen Startdatum kleiner als das Startdatum von Mitarbeiter Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find people taller than 180 cm",
            "zh": "找出 180 厘米 以上 高度 的 人们",
            "de": "Welche Person ist größer als 180 cm?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birthplace of students whose end date is not in 2004",
            "zh": "结束 日期 不是 2004 年 的 学生 的 出生地",
            "de": "Wo ist der Geburtsort von Studenten deren Endtag nicht in 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees last day was no sooner than Alice's graduation day",
            "zh": "哪些 雇员 的 最后 一天 不早 过 阿丽丝 的 毕业 日 ？",
            "de": "Von welchen Arbeiter war der letzte Tag nicht früher als Alices Abschluss?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )"
        },
        "question": {
            "en": "people that are shorter than 180 cm",
            "zh": "矮于 一米 八 的 人",
            "de": "Welche Personen sind kleiner als 180 cm?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "180 cm tall persons who quit in 2004",
            "zh": "在 2004 年 辞职 的 身高 一米 八 的 人",
            "de": "180 cm große Personen, die 2004 gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of people that stopped working in or before 2004",
            "zh": "在 2004 年 或 之前 停止 工作 的 人 的 关系 状况 是 什么",
            "de": "Was ist der Beziehungsstatus von Personen die in oder vor 2004 aufgehört haben zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with the person who didn't graduate in 2004",
            "zh": "谁 和 没 在 2004 年 毕业 的 人 是 朋友",
            "de": "Wer ist mit der Person befreundet, die 2004 ihren Abschluss nicht gemacht hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )"
        },
        "question": {
            "en": "what person has a birthdate larger than that of Alice",
            "zh": "谁 的 出生日期 迟 于 爱丽丝",
            "de": "Welche Person hat späteres Geburtsdatum als das von Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who quit after student Alice quit her job",
            "zh": "学生 爱丽丝 辞掉 工作 后 辞职 的 员工",
            "de": "Angestellter, der kündigte, nachdem die Studentin Alice ihren Job gekündigt hatte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ) )"
        },
        "question": {
            "en": "people who are friends with males",
            "zh": "有 男性 朋友 的 人",
            "de": "Personen die mit Männern befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what's the relationship status of employees who quit after 2004",
            "zh": "2004 年 之后 辞职 的 员工 的 关系 状况 如何 ？",
            "de": "Was ist der Beziehungstatus von Mitarbeiten die nach 2004 gekündigt haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "people who are male and currently online",
            "zh": "现在 在线 的 男性",
            "de": "Leute, die männlich und gerade online sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose end date not after start date of student Alice",
            "zh": "结束 日期 不 在 学生 Alice 开始 日期 之后 的 员工",
            "de": "Ein Angestellter, dessen Enddatum nicht nach dem Startdatum der Studentin Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who joined before 2004 or in 2010",
            "zh": "在 2004 年 之前 或者 在 2010 年 加入 的 雇员",
            "de": "Mitarbeiter, der vor 2004 oder 2010 eingestiegen ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people that are friends with someone in school studying something other than computer science",
            "zh": "跟 在 学校 学习 除了 电脑 科学 以外 的 人 是 朋友 的 人",
            "de": "Leute, die mit jemandem in der Schule befreundet sind, der etwas anderes als Computerwissenschaften studiert"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me all the people who quit during or after 2004",
            "zh": "帮 我 找到 所有 在 2004 年 或 之后 辞职 的 人",
            "de": "Welche Personen kündigten während oder nach 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have a field of study that is the same as Alice",
            "zh": "什么 学生 的 学习 领域 是 和 艾丽丝 的 学习 领域 一样 的 ？",
            "de": "Welche Studenten haben ein Studienfach, das das Selbe ist wie Alices?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find friends of employees with end date in 2004 or earlier",
            "zh": "找到 结束 日起 是 2004 年 或 之前 的 雇员 的 朋友 们",
            "de": "finde Freunde von Mitarbeitern mit einem Enddatum in 2004 oder früher"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student ended earlier than Alice",
            "zh": "哪个 学生 比 爱丽丝 结束 得 早 ？",
            "de": "Welcher Schüler hat früher als Alice aufgehört?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "180 cm tall person with same birth place as that of Alice",
            "zh": "身高 180 公分 并且 跟 爱丽丝 出生地 是 一样 的 人",
            "de": "Welche 180 cm große Person hat den gleichen Geburtsort wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started no earlier than Alice",
            "zh": "不比 艾丽丝 开始 的 早 的 雇员",
            "de": "Mitarbeitern die nicht früher als Alice angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find me the employees who started after 2004",
            "zh": "帮 我 找到 在 2004 年 后 开始 的 员工",
            "de": "Finde die Mitarbeiter, die nach 2004 angefangen haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the least common gender",
            "zh": "什么 是 最 不 普遍 的 性别 ？",
            "de": "Was ist das am wenigsten verbreitete Geschlecht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees starting after student Alice's last day",
            "zh": "寻找 在 爱丽丝 最后 一天 开始 的 员工",
            "de": "Welche Angestellte starten nachdem Studentin Alice's letzter Tag ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose start date is not before start date of student Alice",
            "zh": "开始 日期 不是 在 学生 艾丽丝 开始 日期 之前 的 雇员",
            "de": "Angestellte dessen Starttermin nicht vor dem der Studentin Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has end date equal to employee Alice",
            "zh": "那位 員工 的 離職 日期 與員工 艾麗絲 相同",
            "de": "Welcher Angestellte hat das gleiche Enddatum wie die Angestellte Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "find gender of persons born in New York",
            "zh": "找出 在 纽约 出生 的 人们 的 性别",
            "de": "Finde das Geschlecht von Personen, die in New York geboren sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is not after 2004",
            "zh": "结束 日期 不 在 2004 年 之后 的 学生",
            "de": "Student, dessen Enddatum nicht nach 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee has the largest end date",
            "zh": "哪个 员工 的 结束 日期 最长",
            "de": "Welcher Arbeitnehmer hat das spaeteste Enddatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "all 180 cm tall people who joined in 2004",
            "zh": "全部 在 2004 年 加入 且 有 180 厘米 身高 的 人",
            "de": "Alle 180 cm großen Leute die in 2004 beigetreten sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "find friends of people born is 2004",
            "zh": "找到 在 2004 年 出生 的 人们 的 朋友",
            "de": "Finde Freunde von Leuten die in 2004 geboren sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who finish in 2004 or 2010",
            "zh": "在 2004 或 2010 年 毕业 的 学生",
            "de": "Studenten, die 2004 oder 2010 abschließen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )"
        },
        "question": {
            "en": "when did Alice start attending brown university",
            "zh": "爱丽丝 什么 时候 开始 在 布朗 大学 上学 ？",
            "de": "Wann hat Alice sich an der brown university eingeschrieben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ) )"
        },
        "question": {
            "en": "find the gender of everyone currently online",
            "zh": "找出 当前 每个 在线 的 人 的 性别",
            "de": "Finden Sie das Geschlecht aller Personen, die gerade online sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what student has a start date after 2004",
            "zh": "哪个 学生 的 开始 日期 是 在 2004 年 之后 ？",
            "de": "Welcher Student hat ein Startdatum nach 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of student who is not student of brown university",
            "zh": "不 在 布朗 大学 就读 的 学生 的 感情 状态",
            "de": "Beziehungsstatus von Studenten die nicht an der brown university studieren."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "who started in 2004 and is 180 cm tall",
            "zh": "谁 是 在 2004 年 开始 的 并且 身高 是 180 厘米 ？",
            "de": "Wer hat 2004 angefangen und ist 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find the birth city of all employees who have a start date that is 2004 or later",
            "zh": "找到 所有 2004 年 或 以后 开始 （ 工作 ） 的 员工 的 出生 城市",
            "de": "In welcher Stadt wurde die Angestellten geboren deren Start Termin in oder nach 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship statuses of employees who quit their job before 2004",
            "zh": "2004 年前 离职 的 员工 的 婚姻 状态",
            "de": "Wie ist der Beziehungsstatus der Angestellten die ihre Arbeit vor 2004 kündigten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "what is the birth city of people who are friends with Alice",
            "zh": "爱丽丝 的 朋友 们 的 出生 城市 是 什么 ？",
            "de": "Was ist der Geburtsort der Personen die mit Alice befreundet sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who started in Alice's end date",
            "zh": "在 爱丽丝 结束 那天 开始 （ 工作 ） 的 员工",
            "de": "Mitarbeiter, der mit dem Enddatum von Alice begonnen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of people who started their study before 2005",
            "zh": "在 2005 年前 开始 学习 的 人们 的 性别",
            "de": "Was ist das Geschlecht der Personen die ihr Studium vor 2005 begannen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )"
        },
        "question": {
            "en": "whose height is at least 180cm",
            "zh": "谁 的 身高 至少 有 180cm ？",
            "de": "Wessen Körpergröße ist mindestens 180cm?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who is single and is friends with Alice",
            "zh": "谁 是 单身 并且 是 爱丽丝 的 朋友",
            "de": "Wer ist ledig und mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of an employee who does not have McKinsey as an employer",
            "zh": "不是 麦肯锡 作为 雇主 的 员工 的 性别 是 什么",
            "de": "Was ist das Geschlecht eines Mitarbeiters, der nicht McKinsey als Arbeitgeber hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of student who ended in 2004",
            "zh": "2004 年 结束 的 学生 的 关系 状况 如何 ？",
            "de": "Was ist der Beziehungsstatus eines Studenten, der 2004 aufgehört hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "what people have a height of 180 cm and a birth city of New York",
            "zh": "哪些 人 的 身高 是 180 厘米 并且 出生 城市 是 纽约 ？",
            "de": "Welche Leute haben eine Größe von 180 cm und New York als Geburtsort"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that started work when Alice was born or earlier",
            "zh": "爱丽丝 出生 或 早些时候 开始 工作 的 人",
            "de": "Welche Personen haben mit der Arbeit vor oder als Alice geboren wurde angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that started work after 2004 or after 2010",
            "zh": "在 2004 年 或者 2010 年 之后 开始 工作 的 人",
            "de": "Personen, die nach 2004 oder 2010 mit der Arbeit begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who shares end date with employee Alice",
            "zh": "和 雇员 爱丽丝 一起 度过 结束 日 的 雇员",
            "de": "Mitarbeiter, die das gleiche Enddatum haben with Mitarbeiterin Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people who joined the institution after 2004",
            "zh": "2004 年 以后 加入 该 机构 的 人",
            "de": "Welche Person trat der Einrichtung nach 2004 bei?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "which people are 180 cm tall and started school in 2004",
            "zh": "哪些 人 身高 是 180 厘米 并且 在 2004 年 开始 上学 ？",
            "de": "Welche Personen sind 180 cm groß und haben im Jahr 2004 mit der Schule begonnen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people who joined study in years other than 2004",
            "zh": "在 除了 2004 年外 的 年份 加入 学习 的 人",
            "de": "Leute, die mit dem Studium in einem anderen Jahr als 2004 begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "a worker who began in 2004 or 2010",
            "zh": "一个 从 2004 或 从 2010 开始 工作 的 人",
            "de": "ein Arbeitnehmer, der im Jahr 2004 oder 2010 begann"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "a friend of a student ending in 2004 or before",
            "zh": "一个 在 2004 年 或 以前 结束 （ 学习 ） 的 学生 的 朋友",
            "de": "ein Freund eines Studenten, der 2004 oder vorher fertig war"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "people who are a friend of a friend of Alice's",
            "zh": "一个 是 爱丽丝 的 朋友 的 朋友 的 人",
            "de": "Menschen, die ein Freund eines Freundes von Alice sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "what males were born in 2004",
            "zh": "哪些 男性 是 在 2004 年 出生 的 ？",
            "de": "Welche Männer wurde in 2004 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employee whose last day at work is before Alice's start date",
            "zh": "找到 工作 的 最后 一天 在 Alice 的 开始 日期 之前 的 员工",
            "de": "Finden Sie einen Mitarbeiter, dessen letzter Arbeitstag vor dem Startdatum von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what city were the most people born in",
            "zh": "哪个 城市 出生 人口 最 多",
            "de": "in welcher Stadt wurden die meisten Leute geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "name the student who the quit the job with Alice",
            "zh": "给出 跟 爱丽丝 一起 离职 的 学生 的 名字",
            "de": "Welcher Student kündigte seinen Job mit Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ) )"
        },
        "question": {
            "en": "person who has male friends",
            "zh": "有 男性 朋友 的 人",
            "de": "Person, die männliche Freunde hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students that will begin to work on the same day Alice's leaves her job",
            "zh": "在 爱丽丝 离开 工作 那天 开始 工作 的 学生",
            "de": "Welche Studenten beginnen am selben Tag zu arbeiten an den Alice ihren Job kündigte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of students starting after 2004",
            "zh": "在 2004 年 之后 开始 的 学生 们 的 感情 状态",
            "de": "Wie ist der Beziehungsstand von Studenten die nach 2004 starteten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of students who joined before 2005",
            "zh": "在 2005 年 之前 加入 的 学生 们 的 感情 状态",
            "de": "Wie ist der Beziehungsstand von Studenten die vor 2005 beitraten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee has been employed by the most employers",
            "zh": "哪个 员工 是 被 最 多 的 雇主 雇佣 过 的 ？",
            "de": "Welcher Mitarbeiter wurde von den meisten Arbeitgebern beschäftigt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of students with an end date no later than 2004",
            "zh": "结束 日期 不晚 于 2004 年 的 学生 们 的 出生地 是 什么 城市 ？",
            "de": "Welche Stadt ist der Geburtsort von Studenten, mit einem spätesten Enddatum von 2004"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "find people who are friends of Alice's friends",
            "zh": "找出 艾丽丝 朋友 们 的 朋友 们",
            "de": "Finde Leute, die Freunde von Alices Freunden sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "where were the people that go to a university other than brown born",
            "zh": "在 除了 布朗 大学 之外 的 地方 上学 的 人 是 在 哪里 出生 的 ？",
            "de": "Wo sind die Menschen geboren, die eine andere Universität als Braun besuchen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started after Alice's birthdate",
            "zh": "在 Alice 的 出生日期 之后 开始 的 员工",
            "de": "Mitarbeiter, die nach Alices Geburtsdatum angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "what date in 2004 did Alice stop working",
            "zh": "爱丽丝 是 在 2004 年 的 哪一天 停止 工作 的 ？",
            "de": "An welchem Datum in 2004 hörte Alice auf zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "whom is Alice friends with who also have a birthdate of 2004",
            "zh": "爱丽丝 的 哪个 朋友 也 是 生于 2004 年",
            "de": "Mit wem ist Alice befreundet die auch ein Geburtsdatum von 2004 haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with the person who started school before 2004",
            "zh": "谁 是 2004 年 之前 开始 上学 的 人 的 朋友",
            "de": "Wer ist mit der Person befreundet, die die Schule vor 2004 begonnen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has less than two jobs",
            "zh": "哪些 雇员 的 工作 少于 两项 ？",
            "de": "Welcher Angestellte hat weniger als zwei Jobs?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )"
        },
        "question": {
            "en": "which is the field of study of Alice",
            "zh": "阿丽丝 的 学习 领域 是 什么 ？",
            "de": "Was ist das Fachgebiet von Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people joined their study before Alice born",
            "zh": "在 爱丽丝 出生 前 参加 学习 的 人",
            "de": "Menschen die ihr Studium vor Alice's Geburt begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )"
        },
        "question": {
            "en": "people that were born after Alice started school",
            "zh": "在 爱丽丝 上学 以后 出生 的 人",
            "de": "Personen, die geboren wurden nachdem Alice mit der Schule begonnen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is before 2004",
            "zh": "结束 日期 早于 2004 年 的 学生",
            "de": "Student, dessen Abschlussdatum vor 2004 ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that did not stop working in 2004",
            "zh": "那些 在 2004 年 没有 停止 工作 的 人",
            "de": "Menschen, die 2004 nicht aufgehört haben zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what city has the least births",
            "zh": "哪所 城市 出生率 最低 ？",
            "de": "Welche Stadt hat die wenigsten Geburten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "people who were born between 2004 and 2010",
            "zh": "在 2004 年 到 2010 年 之间 出生 的 人",
            "de": "Personen, die zwischen 2004 und 2010 geboren wurden."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birthplace of employees who don't study computer science",
            "zh": "不 学 计算机科学 的 雇员 的 出生地",
            "de": "Geburtsort von Mitarbeitern, die nicht Informatik studieren."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )"
        },
        "question": {
            "en": "which person 180 cm tall is a software engineer",
            "zh": "哪个 一米 八高 的 人 是 一个 软件 公程师 ？",
            "de": "Welche 180 cm große Person ist ein Softwareentwickler?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find all people who were born in 2004",
            "zh": "找到 所有 2004 年 出生 的 人",
            "de": "Finde alle Personen, die 2004 geboren wurden."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.university.brown en.university.ucla ) )"
        },
        "question": {
            "en": "people that studied at brown university or UCLA",
            "zh": "在 布朗 大学 或者 加州大学洛杉矶分校 上 过学 的 人",
            "de": "Welche Personen haben an der brown university oder an der UCLA studiert?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students with last day before or same as Alice's",
            "zh": "找到 最后 一天 和 爱丽丝 是 同一天 或者 早 于 那天 的 学生",
            "de": "Welche Studenten haben ihren letzten Tag vor oder zeitgleich mit Alice's?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what genders are the people born in 2004",
            "zh": "在 2004 年 出生 的 人 的 性别 是 什么 ？",
            "de": "Welches Geschlecht haben Personen die in 2004 geboren wurden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of employee who started in year other than 2004",
            "zh": "在 除了 2004 年 以外 的 年份 开始 工作 的 员工 是 什么 性别",
            "de": "Was ist das Geschlecht der Angestellten die in einem anderen Jahr als 2004 gestartet sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find relationship status of employee with last day in 2004 or before",
            "zh": "找到 最后 一天 在 2004 年 或 以前 的 员工 的 婚姻关系",
            "de": "Welchen Beziehungsstatus haben Angestellte deren letzter Tag in oder vor 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who is friends with employees before or on 2004",
            "zh": "谁 是 在 2004 年 或者 之前 入职 的 员工 的 朋友",
            "de": "Wer ist mit Angestellten vor oder in 2004 befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "who is friends with someone born in 2004",
            "zh": "谁 是 2004 年 出生 的 人 的 朋友",
            "de": "Wer ist mit jemandem befreundet, der im Jahr 2004 geboren wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees have a start date between 2004 and 2010",
            "zh": "哪些 员工 的 开始 日期 在 2004 年 到 2010 年 之间",
            "de": "Welche Angestellten haben ein Startdatum zwischen 2004 und 2010?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "birthplace of students who started no earlier than 2004",
            "zh": "不早 于 2004 年 开始 的 学生 的 出生地",
            "de": "Geburtsort von Schülern die nicht vor 2004 gestartet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "birthplace of people who did not start their job in 2004",
            "zh": "没 在 2014 年 开始 工作 的 人 的 出生地点 是 哪里 ？",
            "de": "Geburtsort von Leuten die ihren Job nicht in 2004 gestartet haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who started no earlier than Alice's birthdate",
            "zh": "没有 比 爱丽丝 生日 更 早 开始 的 学生",
            "de": "Studenten, die nicht früher als Alice Geburtstag angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is before 2004",
            "zh": "入学 时间 在 2004 年 之前 的 学生",
            "de": "Schüler, deren Anfangsdatum vor 2004 liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find the people joined work before 2010",
            "zh": "找到 在 2010 年 以前 就 工作 的 人",
            "de": "Finde Personen, die der Arbeit vor 2010 beigetreten sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "who started school the earliest",
            "zh": "谁 最早 入学 的 ？",
            "de": "Wer hat am frühesten mit der Schule angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find me people that are friends with students leaving before and after 2004",
            "zh": "帮 我 找到 在 2004 年 之前 或者 之后 离开 的 学生 的 朋友",
            "de": "Finden Sie mir alle Personen die mit Studenten befreundet sind, die vor und nach 2004 aufgehört haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of the employee who started in 2004 or later",
            "zh": "入职 时间 在 2004 年 或者 之后 的 员工 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht des Mitarbeiters, der in 2004 oder später angefangen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who started before end date of student Alice",
            "zh": "在 学生 爱丽丝 最后 一天 之前 开始 上班 的 员工",
            "de": "Mitarbeiter, der vor dem Enddatum der Studentin Alice angefangen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who is not employed by McKinsey",
            "zh": "不是 被 McKinsey 雇佣 的 雇员",
            "de": "Mitarbeiter, der nicht von McKinsey angestellt ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of student whose start date is not 2004",
            "zh": "开始 日期 不是 2004 年 的 学生 的 感情 状态 是 什么 ？",
            "de": "Was ist der Beziehungsstatus des Studenten dessen Anfangsdatum nicht 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees had start dates on 2004 or 2010",
            "zh": "开始 日期 是 2004 年 或者 2010 年 的 雇员 们",
            "de": "Welche Angestellten hatten das Startdatum in 2004 oder 2010?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that started working before Alice's birthdate",
            "zh": "在 爱丽丝 生日 前 开始 工作 的 人们",
            "de": "Personen, die vor Alices Geburtsdatum angefangen haben zu arbeiten."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )"
        },
        "question": {
            "en": "what university does Alice study at",
            "zh": "爱丽丝 在 哪个 大学 学习 ？",
            "de": "An welcher Universität studiert Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with last day not in 2004",
            "zh": "找出 最后 一天 （ 工作 ） 不是 2004 年 的 员工",
            "de": "Welche Angestellten haben ihren letzten Tag nicht in 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students whose end date is later than the end date of Alice",
            "zh": "结束 日期 晚于 爱丽丝 结束 日期 的 学生",
            "de": "Studenten, deren Enddatum nach dem Enddatum von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "name a male who is 180 cm tall",
            "zh": "给 我 列举 一个 身高 是 180 厘米 的 男人",
            "de": "Nenne einen Mann der 180 cm groß ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who began school in 2004 or 2010",
            "zh": "在 2004 年 或 2010 年 开始 上学 的 学生",
            "de": "Schüler, die 2004 oder 2010 eingeschult wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.person.alice ( string birthdate ) ) )"
        },
        "question": {
            "en": "what is Alice's date of birth",
            "zh": "爱丽丝 的 出生日期 是 什么 ？",
            "de": "Wie lautet Alice´ Geburtsdatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that started work when Alice did or before",
            "zh": "与 爱丽丝 同时 或 更 早 开始 工作 的 人",
            "de": "Leute, die gleichzeitig mit Alice zu arbeiten begonnen haben oder früher."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )"
        },
        "question": {
            "en": "what is height of Alice",
            "zh": "爱丽丝 的 身高 是 多少 ？",
            "de": "Wie groß ist Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of employees whose last day was no later than 2004",
            "zh": "最后 一天 （ 工作 ） 不晚 于 2004 年 的 员工 的 出生地 在 哪里 ？",
            "de": "Was ist der Geburtsort von Mitarbeitern, deren letzter Tag nicht später als 2004 war"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees quit after 2004",
            "zh": "哪些 员工 2004 年 以后 辞职",
            "de": "Welche Mitarbeiter haben nach 2004 gekündigt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "current users who are 180 cm tall",
            "zh": "当前 180 厘米 高 的 用户",
            "de": "Welche derzeitige Nutzer sind 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "person that is studying the most things at school",
            "zh": "在 学校 里 学习 最多 的 东西 的 人",
            "de": "Person die die meisten Dinge in der Schule studiert"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "who was born in over two places",
            "zh": "谁 是 在 超过 两个 地方 出生 的 ？",
            "de": "Wer wurde in über zwei Orten geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that started school on or after the day Alice stopped school",
            "zh": "在 爱丽丝 辍学 后 上学 的 人",
            "de": "Welche Personen fingen am selben Tag oder spaeter  mit der Schule an als Alice aufhoerte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "in which cities were employees who started working after 2004 born",
            "zh": "在 2004 年 后 开始 工作 的 员工 是 在 哪里 出生 的",
            "de": "In Welchen Städten wurden Mitarbeiter geboren welche nach 2004 anfingen zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student ending at the same time as Alice",
            "zh": "跟 爱丽丝 在 同一个 时间 结束 （ 学习 ） 的 学生 。",
            "de": "Ein Schüler der zur gleichen Zeit aufgehört hat wie Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "give me the genders of the students who graduate in 2004 or sooner",
            "zh": "给 我 在 2004 年 或 以前 毕业 的 学生 们 的 性别",
            "de": "Nenne mir die Geschlechter der Schüler die in 2004 oder früher ihren Abschluss gemacht haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string !type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "universities where all 180 cm tall people studied",
            "zh": "所有 身高 180 公分 的 人 上 的 学校",
            "de": "In Welchen Universitäten studieren alle 180 cm großen Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find me students whose end dates are the same as the start date of Alice",
            "zh": "帮 我 找到 和 结束 日期 和 爱丽丝 起始 日期 一样 的 学生",
            "de": "Finde die Schüler deren Enddatum das gleiche ist wie das Startdatum von Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who has friends with students that have a start date of 2004",
            "zh": "谁 有 朋友 是 在 2004 年 开始 的 学生 ？",
            "de": "wer ist mit Studenten befreundet die in 2004 begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "find all of Alice's single friends",
            "zh": "找到 所有 爱丽丝 的 单身 朋友",
            "de": "Finde alle Single Freunde von Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with last day on or after Alice's first day",
            "zh": "找到 最后 一天 是 爱丽丝 第一天 或者 之后 的 员工",
            "de": "finde Angestellte deren letzter Tag an oder vor Alice's erstem Tag war"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people who are friends with students who started after 2004",
            "zh": "与 2004 年 之后 开始 的 学生 成为 朋友 的 人",
            "de": "Menschen, die mit Studenten befreundet sind, die nach 2004 angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees whose last day is the same as Alice's first day at the job",
            "zh": "最后 一天 和 爱丽丝 开始 这份 工作 的 第一天 一样 的 员工",
            "de": "Angestellte deren letzter Tag an Alice's erstem Arbeitstag war"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find birthplaces of employees who started after 2004",
            "zh": "找到 2004 年 以后 开始 的 员工 的 生日",
            "de": "Finden Sie Geburtsorte von Mitarbeitern, die nach 2004 angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what is the gender of the person whose birthdate is in 2004",
            "zh": "2004 年 出生 日 的 人 的 性别 是 什么",
            "de": "Was ist das Geschlecht der Person, deren Geburtsdatum im Jahr 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "which of Alice's friends is 180 cm tall",
            "zh": "爱丽丝 的 哪个 朋友 身高 180 厘米",
            "de": "Welche von Alices Freunden ist 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "when did Alice quit her software engineer job",
            "zh": "爱丽丝 什么 时候 辞掉 了 她 的 软件 工程师 工作",
            "de": "wann hat Alice ihre Stelle als Software Engineer gekündigt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "a friend of a student not starting in 2004",
            "zh": "没有 在 2004 年 开始 的 学生 的 一个 朋友",
            "de": "Ein Freund eines Studenten, der nicht im Jahr 2004 angefangen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string field_of_study ) ) )"
        },
        "question": {
            "en": "is Alice's field of study computer science",
            "zh": "爱丽丝 的 学习 领域 是 电脑 科学 吗 ？",
            "de": "Studiert Alice Informatik"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of people that started working in or before 2004",
            "zh": "在 2004 年 或 之前 开始 工作 的 人们 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht der Menschen, die ihre Arbeit in oder vor 2004 aufgenommen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student started in 2004 or 2010",
            "zh": "在 2004 年 或者 2010 年 开始 的 学生 是 哪个 ？",
            "de": "Welcher Student hat 2004 oder 2010 angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students left after 2004",
            "zh": "在 2004 年 之后 离开 的 学生 是 哪些 ？",
            "de": "Welche Schüler haben nach 2004 aufgehört?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friend of employee whose start date is smaller than 2004",
            "zh": "开始 日期 小于 2004 年 的 雇员 的 朋友",
            "de": "Freund eines Angestellten, dessen startdatum vor 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "Alice's quit date",
            "zh": "爱丽丝 的 退出 日期",
            "de": "Alices Kündigungsdatum"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has an end date that is the same as that of Alice",
            "zh": "和 爱丽丝 有 相同 结束 日期 的 雇员 是 哪个 ？",
            "de": "Welcher Angestellte hat das gleiche Enddatum wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "where were employees who finish on or before 2004 born",
            "zh": "在 2004 年 或者 之前 结束 的 雇员 们 是 在 哪里 出生 的 ？",
            "de": "Wo sind die Angestellten welche in oder vor 2004 fertig wurden geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "the relationship status of a worker who didn't leave in 2004",
            "zh": "没有 在 2004 年 离开 的 员工 的 感情 状态",
            "de": "Der Beziehungsstatus eines Arbeiters der nicht 2004 gegangen ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who was born after 2004 that is friends with Alice",
            "zh": "爱丽丝 的 朋友 里面 谁 是 2004 年 后 出生 的",
            "de": "Wer wurde nach 2004 geboren und ist ein Freund von Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have been at college for the least amount of time",
            "zh": "哪些 学生 在 大学 的 时间 最少 ？",
            "de": "welche Studenten waren am kürzesten auf der Universität"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) )"
        },
        "question": {
            "en": "people that are 180 cm or 200 cm tall",
            "zh": "180 厘米 或 200 厘米 高 的 人",
            "de": "Leute die 180 cm oder 200 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "people who were born in New York",
            "zh": "出生 在 纽约 的 人",
            "de": "Leute, die in New York geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who are friends with employees who started working before or after 2004",
            "zh": "与 2004 年 之前 或 之后 开始 工作 的 员工 成为 朋友 的 人",
            "de": "Leute, die mit Angestellten befreundet sind, die vor oder nach 2004 angefangen hatten zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student started school after Alice was born",
            "zh": "哪个 学生 在 爱丽丝 出生 后 开始 上 的 学",
            "de": "Welcher Student hat mit der Schule angefangen nachdem Alice geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have an end date that is either 2004 or 2010 and no greater",
            "zh": "哪些 学生 的 结束 日 是 2004 或 2010 ， 但 没有 再晚 ？",
            "de": "Welche Schüler haben ein Enddatum welches entweder 2004 oder 2010 und nicht später ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of employees who started in 2004 or later",
            "zh": "2004 年 或 以后 开始 工作 的 雇员 的 出生地",
            "de": "Was ist der Geburtsort von Mitarbeitern, die 2004 oder später angefangen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of a student studying something other than computer science",
            "zh": "学非 计算机科学 专业 的 学生 的 恋爱 状况",
            "de": "Wie ist der Beziehungsstatus eines Studenten, der etwas anderes als Informatik studiert?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "birthplace of employees who didn't start working in 2004",
            "zh": "非 2004 年 开始 工作 的 雇员 的 出生地",
            "de": "Geburtsort von Angestellten die nicht in 2004 angefangen haben zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find employees friend with title other than software engineer",
            "zh": "找到 员工 的 朋友 工作 职称 不是 软件 工程师 的",
            "de": "Finde den Freund des Angestellten mit einem anderen Titel als Softwareentwickler"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose start date is not after the end date of employee Alice",
            "zh": "开始 日期 不 在 员工 Alice 结束 日期 以后 的 员工",
            "de": "Ein Angestellter, dessen Anfangsdatum nicht nach dem Enddatum der Angestellten Alice kommt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees who have a start date later than that of the end date of employee Alice",
            "zh": "找到 开始 日比 爱丽丝 结束 日晚 的 员工",
            "de": "Finde Angestellte, deren Startdatum später als das Enddatum der Angestellten Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that stopped working when Alice was born or before",
            "zh": "爱丽丝 出生 时 或 以前 停止 工作 的 人",
            "de": "Welche Person hörte auf zu arbeiten als oder nachdem Alice geboren wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )"
        },
        "question": {
            "en": "who is a software engineer or program manager",
            "zh": "谁 是 软件 工程师 或 项目经理",
            "de": "Wer ist ein Softwareentwickler oder Programmmanager?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have a start date earlier than that of employee Alice",
            "zh": "开始 日期 早 于 员工 艾丽斯 开始 日期 的 学生",
            "de": "Welche Schüler haben ein früheres Startdatum als das der Angestellten Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which relationship status represents no more than two people",
            "zh": "哪 一种 关系 状态 代表 不 超过 两个 人",
            "de": "Welcher Beziehungsstatus repräsentiert nicht mehr als zwei Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that stopped working after 2004",
            "zh": "2004 年 后 结束 工作 的 人",
            "de": "Menschen, die nach 2004 ihre Arbeit eingestellt haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of students that did not finish school in 2004",
            "zh": "没有 在 2004 年 完成学业 的 学生 ， 他们 的 关系 状态 是 什么",
            "de": "Wie ist der Beziehungsstatus von Studenten die die Schule nicht in 2004 beendeten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the least common relationship status",
            "zh": "找到 最 不 常见 的 关系 状态",
            "de": "Finden Sie den am wenigsten verbreiteten Beziehungsstatus"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "what is the gender of the person Alice is friends with",
            "zh": "和 艾莉丝 是 朋友 的 那个 人 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht der Person, mit der Alice befreundet ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "who is studying two things or less",
            "zh": "谁 在 学 两种 或 更 少 的 东西 ？",
            "de": "Wer studiert zwei Dinge oder weniger?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of employees whose end date is less than 2004",
            "zh": "在 2004 年 以前 退出 的 职工 的 性别 是 什么 ？",
            "de": "Wie ist das Geschlecht von Angestellten deren Endtermin vor 2004 liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "who is shorter than 180cm",
            "zh": "有 谁 身高 低于 180 厘米 ？",
            "de": "Wer ist kleiner als 180 cm?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "an employee with the longest start date",
            "zh": "开始 日期 最长 的 员工",
            "de": "ein Angestellter mit dem längsten Anfangsdatum"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "what is the last date of employee Alice who started in 2004",
            "zh": "2004 年 开始 工作 的 爱丽丝 工作 的 最后 一天 日期 是 什么 ？",
            "de": "Wie lautet das Enddatum der Angestellten Alice, die 2004 anfing?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is relationship status of employee whose last day was after 2004",
            "zh": "在 2004 年 之后 退出 工作 的 员工 的 情感 状态 是 什么 ？",
            "de": "Was ist der Beziehungsstatus eines Mitarbeiters, dessen letzter Tag nach 2004 lag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees started no later than 2004",
            "zh": "哪些 员工 在 2004 年 或者 以前 开始 工作 ？",
            "de": "Welche Angestellten fingen nicht später als 2004 an?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "people who were born in 2004 and are single",
            "zh": "在 2004 年 出生 并且 单身 的 人",
            "de": "Menschen, die im Jahr 2004 geboren wurden und ledig sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )"
        },
        "question": {
            "en": "what does Alice study at brown university",
            "zh": "爱丽丝 在 布朗 大学 学习 什么 ？",
            "de": "Was studiert Alice an der Brown University?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find people that are friends with students who have quit after 2004",
            "zh": "找 那些 在 2004 后 退出 的 学生 们 的 朋友",
            "de": "Finde Personen, die Freunde von Studenten sind, die nach 2004 gekündigt haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students have the most majors",
            "zh": "哪个 学生 有 最 多 的 专业",
            "de": "Welche Studenten haben die meisten Hauptfächer?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose end date is not after birth date of Alice",
            "zh": "结束 日 不是 在 爱丽丝 生日 之后 的 员工",
            "de": "Angestellter, dessen Enddatum nicht nach Alices Geburtsdatum liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "name a person with whom Alice is not friends",
            "zh": "列出 一位 与 爱丽丝 不是 朋友 的 人",
            "de": "Nennen Sie eine Person, mit der Alice nicht befreundet ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find the gender of people with a height of 180 cm",
            "zh": "找到 身高 180 厘米 的 人 的 性别",
            "de": "Finde das Geschlecht von Personen mit einer Größe von 180 cm"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what person is friends with people that do not work for McKinsey",
            "zh": "找到 一个 跟 不 给 麦肯锡 工作 的 人 是 朋友 的 人",
            "de": "Welche Person ist mit Leuten befreundet, die nicht für McKinsey arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "people who are shorter than 181 cm",
            "zh": "比 181 公分 矮 的 人",
            "de": "Leute, die kleiner als 1,81m sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )"
        },
        "question": {
            "en": "what is Alice's exact start date in 2004",
            "zh": "什么 是 爱丽丝 2004 年 的 确切 开始 日期",
            "de": "Was ist Alices genaues Startdatum im Jahr 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me employees that have worked for no more than two employers",
            "zh": "帮 我 找 没有 为 两家 公司 以上 工作 的 人",
            "de": "Finde Angestellte, die für nicht mehr als zwei Arbeitgeber tätig waren"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of students who graduated before 2004",
            "zh": "2004 年 之前 毕业 的 学生 的 出生地 是 什么",
            "de": "Was ist der Geburtsort von Studenten, die vor 2004 ihren Abschluss gemacht haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )"
        },
        "question": {
            "en": "what person has a height of 180 cm and a job title of software engineer",
            "zh": "谁 是 身高 180 公分 并且 工作 头衔 是 软件 工程师 的 ？",
            "de": "Welche Person ist 1,8m groß und trägt den Jobtitel Softwareentwickler"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "what people are logged in who are also friends with Alice",
            "zh": "哪些 人 已经 登录 并且 是 艾丽丝 的 朋友 ？",
            "de": "Welche Personen sind eingeloggt, die auch mit Alice befreundet sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employee whose employer is not McKinsey",
            "zh": "雇主 不是 麦肯锡 的 雇员 的 感情 状态",
            "de": "Beziehungsstatus von Angestellten deren Arbeitgeber nicht McKinsey ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "male 180 cm tall",
            "zh": "身高 180 厘米 的 男人",
            "de": "Männlich, 180 cm groß"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "who stopped going to school after 2004",
            "zh": "谁 在 2004 年 以后 停止 了 上学 ？",
            "de": "Wer hörte auf nach 2004 in die Schule zu gehen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee quit the day Alice started",
            "zh": "哪个 员工 是 在 爱丽丝 开始 的 那天 离职 的 ？",
            "de": "Welcher Mitarbeiter hat an dem Tag gekündigt, an dem Alice angefangen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )"
        },
        "question": {
            "en": "people born the same day as or after Alice started school",
            "zh": "在 爱丽丝 开始 上学 的 那天 或 之后 出生 的 人",
            "de": "Personen, die am selben Tag oder danach geboren wurden als Alice begann zur Schule zu gehen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of student that left school before or on 2004",
            "zh": "在 2004 年 或 之前 离开 学校 的 学生 的 感情 状态",
            "de": "Beziehungsstatus des Schülers, der die Schule vor oder im Jahr 2004 verlassen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "males born in 2004",
            "zh": "2004 年 出生 的 男性",
            "de": "Männer die in 2004 geboren sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who is 180 cm tall and is female",
            "zh": "哪位 女生 是 180 厘米",
            "de": "Wer ist 180 cm groß und weiblich?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the student's gender who ended at least in 2004",
            "zh": "在 最晚 2004 年 结束 的 学生 的 性别 是 什么 ？",
            "de": "welches Geschlecht hat der Student der wenigstens 2004 fertig wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who works for McKinsey or Google",
            "zh": "谁 为 麦肯锡 或谷歌 工作",
            "de": "Wer arbeitet für McKinsey oder Google?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "find all single people",
            "zh": "找到 所有 单身 的 人",
            "de": "Finde alle Single Personen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "who started school most recently",
            "zh": "谁 是 最近 开始 上学 的",
            "de": "Wer hat zuletzt die Schule begonnen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the gender of students with a start date 2004 or later",
            "zh": "2004 年 或 以后 开学 日期 的 学生 的 性别 是 什么",
            "de": "Was ist das Geschlecht der Studenten, die ein Startdatum in 2004 oder spaeter haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have an end date no later than 2004 or 2010",
            "zh": "哪些 员工 的 结束 日 是 不 晚于 2004 年 或 2010 年 的 ？",
            "de": "Welche Angestellten haben ein Enddatum nicht später als 2004 oder 2010?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "who is friends with Alice and was born in New York",
            "zh": "谁 是 爱丽丝 在 纽约 出生 的 朋友",
            "de": "Wer ist mit Alice befreundet und in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is not before start date of student Alice",
            "zh": "结束 日期 不 在 学生 艾丽斯 开始 日期 之前 的 学生",
            "de": "Ein Student, dessen Enddatum nicht vor dem Startdatum der Studentin Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "people born in New York that are 180 cm tall",
            "zh": "在 纽约 出生 并且 身高 180 公分 的 人",
            "de": "In New York geborene Menschen, die 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "people born before 2004",
            "zh": "在 2004 年前 出生 的 人",
            "de": "Welche Personen sind vor 2004 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who has less than two friends",
            "zh": "谁 不到 两个 朋友",
            "de": "Wer hat weniger als zwei Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )"
        },
        "question": {
            "en": "all 180 cm tall software engineers",
            "zh": "所有 180 厘米 高 的 软件 工程师",
            "de": "Alle 1,8m großen Softwareentwickler"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of a student whose end date is earlier than 2004",
            "zh": "结束 日 是 在 2004 年 之前 的 学生 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus eines Studenten, dessen Enddatum vor 2004 liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what are the student's birthplaces who started before 2004",
            "zh": "在 2004 年前 开始 的 学生 的 出生地 都 是 什么 ？",
            "de": "An welchen Orten sind die Studenten geboren, die vor 2004 ihr Studium begannen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "which people are exactly 180 cm tall",
            "zh": "哪些 人 刚好 是 一米 八高 ？",
            "de": "Welche Leute sind genau 1,8m groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "who graduated after Alice",
            "zh": "谁 在 艾丽丝 之后 毕业 ？",
            "de": "Wer hat seinen Abschluss nach Alice gemacht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what is the birthdate of the person who is 180 cm",
            "zh": "这个 一米 八高 的 人 的 出生日期 是 什么 ？",
            "de": "Welches Geburtsdatum hat die Person, die 180 cm groß ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose last date was before the day Alice started",
            "zh": "最后 一天 是 在 艾丽丝 开始 前 的 雇员",
            "de": "Ein Angestellter, dessen letzter Tag vor dem Tag war, als Alice anfing"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who is the employee leaving the company after Alice leaves",
            "zh": "在 艾丽丝 离开 之后 离开 公司 的 雇员 是 谁 ？",
            "de": "Wer ist der Angestellte, er das Unternehmen nach Alice verlassen wird?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "who was born after 2003",
            "zh": "谁 出 生于 2003 年 以后",
            "de": "Wer wurde nach 2003 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "which of my friends is at some school other than brown university",
            "zh": "我 的 哪 一些 朋友 们 是 在 除了 布朗 大学 之外 的 其他 一些 学校 的 ？",
            "de": "Welcher meiner Freunde ist an einer andere Universität als der Brown Universität?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "find me males born in 2004",
            "zh": "帮 我 找到 生于 2004 年 的 男性",
            "de": "Finde Männer, die 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "people 180 cm tall who are single",
            "zh": "身高 一米 八 并且 单身 的 人",
            "de": "Leute, die 1,8m groß und single sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )"
        },
        "question": {
            "en": "find me all people who are older than Alice",
            "zh": "帮 我 找到 所有 比 爱丽丝 年纪 大 的 人",
            "de": "Finde alle Personen, die älter sind als Alice."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee has an end date of at least 2004",
            "zh": "哪 一个 雇员 的 结束 日期 至少 是 2004 年 ？ ？",
            "de": "Welcher Mitarbeiter hat ein Enddatum von mindestens 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with a student who graduated in 2004 or later",
            "zh": "谁 是 2004 年 或 以后 毕业 的 学生 的 朋友",
            "de": "Wer ist mit einem Studenten befreundet, der 2004 oder später seinen Abschluss gemacht hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is not after start date of student Alice",
            "zh": "结束 日期 不 在 学生 Alice 开始 日期 之后 的 学生",
            "de": "Student, dessen Enddatum nicht nach dem Startdatum der Studentin Alice liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "which people are friends of Alice's friends",
            "zh": "哪些 人 是 爱丽丝 朋友 的 朋友",
            "de": "Welche Personen sind Freunde von Alices Freunden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is not after end date of employee Alice",
            "zh": "入职 日期 在 爱丽丝 雇员 离职 日期 之前 的 同学",
            "de": "Student, dessen Startdatum nicht nach dem Enddatum des Mitarbeiters Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) )"
        },
        "question": {
            "en": "what is Alice's end date",
            "zh": "爱丽丝 的 结束 日期 是 哪天",
            "de": "Was ist Alices Enddatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students finishing on or before Alice's birthday",
            "zh": "在 爱丽丝 生日 或者 之前 完成 的 学生",
            "de": "Studenten, die an oder vor Alices Geburtstag aufhören."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )"
        },
        "question": {
            "en": "find someone born on or after Alice's first day of employment",
            "zh": "找到 在 爱丽丝 工作 第一天 或者 之后 出生 的 人",
            "de": "Finde jemanden, der an oder nach Alice' ersten Arbeitstag geboren wurde."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has an end date that is not in 2004",
            "zh": "哪个 员工 的 结束 日期 不是 在 2004 年 ？",
            "de": "Welcher Mitarbeiter hat ein Enddatum, welches nicht in 2004 liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees who have a start date earlier than that of employee Alice",
            "zh": "找到 起始 日期 比 员工 爱丽丝 早 的 员工",
            "de": "Mitarbeiter finden, die ein früheres Startdatum als das der Mitarbeiterin Alice haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find the birth city of employees who have an end date of 2004 or later",
            "zh": "找到 在 2004 年 或者 之后 离职 的 员工 的 出生 城市",
            "de": "Finde die Geburtsstadt von Angestellten, die ein Enddatum von 2004 oder später haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find people having a relationship with people who are 180 cm tall",
            "zh": "找到 跟 身高 180 厘米 的 人 交往 的 人",
            "de": "Finde Personen, die eine Beziehung mit Personen haben, die 180 cm groß sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )"
        },
        "question": {
            "en": "what is Alice's start date at brown university",
            "zh": "什么 是 爱丽丝 在 布朗 大学 的 开学 日期",
            "de": "Was ist Alices Startdatum an der Brown Universität?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have an end date before 2004",
            "zh": "哪个 员工 在 2004 年 之前 离职",
            "de": "Welche Angestellten haben ein Enddatum vor 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )"
        },
        "question": {
            "en": "180 cm tall persons studied in brown university",
            "zh": "身高 一米 八在 布朗 大学 上学 的 人",
            "de": "180 cm große Personen, die an der braunen Universität studiert haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students finishing contemporaneous to or before Alice starts",
            "zh": "在 艾丽丝 开始 同期 或 之前 完成 的 学生 们",
            "de": "Schüler, die zeitgleich zu oder vor Alice beginnen."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find the friends of students whose end date is later than 2004",
            "zh": "找到 结束 日期 晚于 2004 年 的 学生 的 朋友",
            "de": "Finde die Freunde von Studenten, deren Enddatum später als 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people who joined studies after Alice joined the job",
            "zh": "爱丽丝 加入 这份 工作 后 加入 学习 的 人",
            "de": "Personen, die ihr Studium antraten, nachdem Alice ihren Job aufnahm"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )"
        },
        "question": {
            "en": "people born on or before Alice's birthday",
            "zh": "爱丽丝 生日 那天 或 之前 出生 的 人",
            "de": "Menschen, die an oder vor Alices Geburtstag geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )"
        },
        "question": {
            "en": "what is the job title of Alice who started in 2004",
            "zh": "在 2004 年 开始 （ 工作 ） 的 爱丽丝 的 工作 头衔 是 什么 ？",
            "de": "Was ist die Berufsbezeichnung von Alice, die im Jahr 2004 begann"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "find the relationship statuses of people whom Alice is friends with",
            "zh": "找出 和 艾莉丝 是 朋友 的 人们 的 感情 状态",
            "de": "Finde den Beziehungsstatus der Personen, mit denen Alice befreundet ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee ended no greater than Alice's birthdate",
            "zh": "哪个 雇员 在 不 大于 阿丽丝 的 生日 结束 的 ？",
            "de": "Welcher Mitarbeiter endete nicht länger als Alices Geburtsdatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the gender of no more than two people",
            "zh": "不 多于 两个 人 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht von nicht mehr als zwei Leuten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees finishing before Alice",
            "zh": "在 爱丽丝 之前 完成 的 员工 们",
            "de": "Angestellte die vor Alice aufgehört haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of students who started before 2004",
            "zh": "在 2004 年 之前 开始 的 学生 们 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus von Studierenden, die vor 2004 begonnen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is start date of employee Alice",
            "zh": "开始 日期 也 是 爱丽丝 的 开始 日期 的 学生",
            "de": "Student, dessen Startdatum das Startdatum des Mitarbeiters Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )"
        },
        "question": {
            "en": "who is the tallest person",
            "zh": "谁 是 最高 的 人",
            "de": "Wer ist die größte Person?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "all 180 cm tall females",
            "zh": "所有 身高 一米 八 的 女性",
            "de": "Alle 180cm großen Frauen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have an end date that is before student Alice's start date",
            "zh": "哪些 员工 的 结束 日期 是 在 学生 爱丽丝 的 开始 日期 之前 的",
            "de": "Welche Mitarbeiter haben ein Enddatum, das vor dem Startdatum der Schülerin Alice liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what cities are the birthplaces of people who have a height of 180 cm",
            "zh": "哪些 城市 是 那些 身高 是 一米 八 的 人 的 出生地 呀 ？",
            "de": "Welche Städte sind die Geburtsorte von Personen, die eine Körpergröße von 180 cm haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "who has over two relationship status",
            "zh": "谁 有 超过 两种 以上 的 感情 状态 ？",
            "de": "Wer hat mehr als zwei Beziehungsstatus?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )"
        },
        "question": {
            "en": "who is 180 cm and is in the field of computer science",
            "zh": "谁 是 身高 一米 八 并且 在 计算机科学 领域",
            "de": "Wer ist 180 cm groß und im Bereich der Informatik tätig?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )"
        },
        "question": {
            "en": "person who is shorter than 180 cm or 200 cm",
            "zh": "矮于 一米 八 或者 两米 的 人",
            "de": "Person, die kleiner ist als 180 cm oder 200 cm"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "birthplaces of employees starting before 2004",
            "zh": "在 2004 年 之前 开始 的 员工 们 的 出生地点",
            "de": "Geburtsorte von Mitarbeitern, die vor 2004 angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of an employee who does not work for McKinsey",
            "zh": "不为 McKinsey 工作 的 雇员 的 出生地 是 什么 ？",
            "de": "Was ist der Geburtsort eines Mitarbeiters, der nicht für McKinsey arbeitet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee ended earlier than Alice's start date",
            "zh": "哪位 员工 早于 Alice 的 开始 日期 结束",
            "de": "Welcher Angestellte hörte früher als Alices Anfangsdatum auf?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )"
        },
        "question": {
            "en": "what is job title of Alice whose employment end date is in 2004",
            "zh": "在 2004 年 离职 的 爱丽丝 的 工作 职位 是 什么",
            "de": "Was ist die Berufsbezeichnung von Alice, deren Beschäftigungsende im Jahr 2004 liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "what city was Alice and bob born in",
            "zh": "爱丽丝 和 鲍勃 出生 在 哪个 城市",
            "de": "In welcher Stadt wurden Alice und Bob geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "the gender of an employee who's not a software engineer",
            "zh": "一个 不是 软件 工程师 的 雇员 的 性别",
            "de": "das Geschlecht eines Mitarbeiters, der kein Softwareentwickler ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )"
        },
        "question": {
            "en": "whose birthdate is on or after Alice's start date",
            "zh": "谁 的 生日 是 在 爱丽丝 入职 日期 时 或者 之后",
            "de": "Wessen Geburtsdatum ist an oder nach Alices Startdatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that started working when Alice stopped school or after",
            "zh": "在 爱丽丝 离开 学校 之后 入职 的 人",
            "de": "Leute die angefangen haben zu Arbeiten als oder nachdem Alice die Schule beendet hatte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student starting after Alice ends",
            "zh": "爱丽丝 结束 后 开始 的 学生",
            "de": "Ein Student, der anfaengt nachdem Alice aufhoert"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) )"
        },
        "question": {
            "en": "when did Alice finish school",
            "zh": "爱丽丝 什么 时候 毕业 的 ？",
            "de": "Wann hat Alice die Schule beendet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "name a city that fewer than two of the people were born in",
            "zh": "说出 一个 最 多 只有 2 个人 出生 的 城市",
            "de": "Nennen Sie eine Stadt, in der weniger als zwei der Menschen geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "180 cm tall persons who were born in the same place where Alice was born",
            "zh": "跟 爱丽丝 出生地 一样 而且 有 180 厘米 高 的 人",
            "de": "180 cm große Personen die an dem gleichen Ort geboren wurden wo Alice geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who has friends that are students who have a start date before 2004",
            "zh": "谁 有 朋友 是 在 2004 年 之前 入学 的 学生 ？",
            "de": "Wer hat Freunde, die Studenten sind, die ein Startdatum vor 2004 haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students with last days on or before Alice's first day",
            "zh": "找出 最后 日子 是 Alice 的 第一天 或 以前 的 学生",
            "de": "suche Schüler deren letzter Tag an oder vor Alices ersten Tag liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ) ) )"
        },
        "question": {
            "en": "what is the average height of a person",
            "zh": "一个 人 的 平均 身高 是 多少 ？",
            "de": "Was ist die durchschnittliche Größe einer Person"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "find me a male born in New York",
            "zh": "给 我 找 一位 在 纽约 出生 的 男性",
            "de": "finde einen Mann, der in New York geboren wurde."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what people are friends of students who have a start date no earlier than 2004",
            "zh": "什么 人 是 开始 日 不 早于 2004 年 的 学生 的 朋友",
            "de": "Welche Personen sind Freunde von Studenten, die ein Anfangsdatum nicht früher als 2004 haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees finishing after 2004",
            "zh": "2004 年 后 结束 的 员工",
            "de": "Angestellte, die nach 2004 fertig sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ) )"
        },
        "question": {
            "en": "what cities were people that are currently online born in",
            "zh": "现在 在线 的 人 是 在 什么 城市 出生 的 ？",
            "de": "In welchen Städten wurden die Leute geboren, die gerade online sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of employees who don't work for McKinsey",
            "zh": "不 为 麦肯锡 工作 的 员工 的 性别 是 什么 ？",
            "de": "Wie lautet das Geschlecht der Angestellten, die nicht für McKinsey arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "name a person of the same gender as Alice who is 180 cm tall",
            "zh": "指出 跟 Alice 同一 性别 而且 高 180 公分 的 人 的 名字",
            "de": "Nenne eine Person des gleichen Geschlechts wie Alice, die 180 cm groß ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who were not friends before 2004",
            "zh": "那些 在 2004 年 之前 不是 朋友 的 人",
            "de": "Menschen, die vor 2004 keine Freunde waren."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started working on or after the day Alice ended school",
            "zh": "在 Alice 结束 学业 之日 或 之后 开始 工作 的 员工",
            "de": "Angestellte, die an oder nach dem Tag, an dem Alice die Schule beendete, zu arbeiten anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "connection to someone who will have graduated before 2004",
            "zh": "与 将 于 2004 年 之前 毕业 的 人 联系",
            "de": "Verbindung zu jemandem, der vor 2004 den Abschluss gemacht haben wird"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )"
        },
        "question": {
            "en": "who is 180 cm tall and goes to brown university",
            "zh": "谁 是 高 180 厘米 且 去 布朗 大学",
            "de": "Wer ist 1,8m groß und geht an die Brown Universität?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees starting after Alice's birthday",
            "zh": "寻找 在 爱丽丝 生日 后 开始 的 员工",
            "de": "Finde Angestellte, die nach Alices Geburtstag anfangen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "which person has a relationship status the same as Alice",
            "zh": "哪个 人 的 关系 状态 与 Alice 相同",
            "de": "Welche Personen haben den gleichen Beziehungsstatus wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of students who are not at brown",
            "zh": "不 在 布朗 的 那些 学生 的 关系 状况 是 如何 的 ？",
            "de": "Wie ist der Beziehungsstatus der Studenten die nicht auf der brown sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "people whose height is 180 cm",
            "zh": "高度 为 180 厘米 的 人",
            "de": "Welche Personen haben eine Größe von 180 cm?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "who are all of Alice's guy friends",
            "zh": "谁 是 阿丽丝 的 全部 的 男性 朋友 ？",
            "de": "Wer sind alles Alices männliche Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "find the friends of all people who list their relationship status as single",
            "zh": "找到 所有 列出 了 他们 的 关系 状况 是 单身 的 那些 人 的 朋友",
            "de": "Finde die Freunde von allen Personen die ihren Beziehungsstatus als Single angeben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with the student who did not start in 2004",
            "zh": "2004 年 內 沒 有 開學 的 學生 之 朋友 是 誰 ？",
            "de": "Wer ist mit dem Schüler befreundet der nicht in 2004 gestartet ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who has at least two friends",
            "zh": "谁 至少 有 两个 朋友",
            "de": "Wer hat mindestens zwei Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people that are friends with someone that finished school before 2004",
            "zh": "与 2004 年 之前 完成学业 的 人 成为 朋友 的 人",
            "de": "Wer ist mit einer Person befreundet die vor 2004 die Schule beendete?"
        }
    }
]