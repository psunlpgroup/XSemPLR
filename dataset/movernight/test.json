[
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "which restaurant is friendly to children and has delivery",
            "zh": "哪些 餐馆 适合 小朋友 用餐 并且 提供 外卖 服务",
            "de": "welches Restaurant ist Kinderfreundlich und liefert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurant that has outdoor seating and that takes reservations",
            "zh": "有 室外 座位 并且 可以 接受 预定 的 餐馆",
            "de": "Restaurant, welches Sitzplätze im Freien hat und Reservierungen entgegennimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurant that serves lunch and accepts credit cards",
            "zh": "提供 午餐 并且 接受 信用卡 支付 的 餐馆",
            "de": "Restaurant, das Mittagessen serviert und Kreditkarten akzeptiert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "restaurant whose star rating is 3 stars and that has waiter service",
            "zh": "拥有 三星 评分 并且 有 服务员 的 餐馆",
            "de": "Restaurants mit mindestens 3 Sternen und Tischservice"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ) )"
        },
        "question": {
            "en": "restaurants that has outdoor seating",
            "zh": "有 室外 座位 的 餐馆",
            "de": "Restaurants mit Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )"
        },
        "question": {
            "en": "hotels that have a higher rating than 3 stars",
            "zh": "评级 高于 3 星级 的 酒店",
            "de": "Hotels, die eine höhere Gesamtbewertung als 3 Sterne haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )"
        },
        "question": {
            "en": "cuisine that is cuisine of restaurant that serves lunch",
            "zh": "餐馆 提供 的 午餐 菜肴",
            "de": "Welche Küche ist die Küche des Restaurants welches Mittagessen serviert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "name a restaurant with a price rating of two dollars signs that has outdoor seating",
            "zh": "给 我 一个 既有 室外 座位 并且 价格 评分 是 两个 美金 符号 的 餐馆 的 名字",
            "de": "Nenne ein Restaurant mit einer Preisbewertung von zwei Dollarzeichen und das Aussensitzplätze hat"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "what 2 dollar signs restaurant offers waiter service",
            "zh": "哪些 拥有 两个 美金 符号 的 餐馆 提供 服务生 服务",
            "de": "Welche Restaurants mit zwei Dollarzeichen bieten Kellner Service an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurants that serves lunch",
            "zh": "供应 午餐 的 餐厅",
            "de": "Restaurants, die Mittagessen servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "which restaurant with a price rating of two dollars is good for children",
            "zh": "哪个 餐馆 有 两个 美元 符号 的 价格 评价 并且 适合 儿童 ？",
            "de": "Welches Restaurant mit einer Preisbewertung von zwei Dollar-Zeichen ist kinderfreundlich?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "what restaurants offers delivery and takes reservations",
            "zh": "哪些 餐馆 提供 送餐 服务 并且 接受 预定 ？",
            "de": "Welche Restaurants bieten Lieferungen an und nehmen Reservierungen entgegen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "which restaurant with a star rating of three is good for groups",
            "zh": "哪个 三星 餐馆 适合 多人 聚会 ？",
            "de": "Welches Restaurant mit einer 3 Sterne-Bewertung ist geeignet für Gruppen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "what restaurant has lunch and waiter service",
            "zh": "哪个 餐馆 有 午餐 并且 有 服务生 ？",
            "de": "Welches Restaurant bietet Mittagessen und Tischservice an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which hotel offers the most number of meals",
            "zh": "哪家 酒店 提供 最多 的 餐点",
            "de": "Welches Hotel bietet die meisten Mahlzeiten an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "what kind of cuisine is thai cafe",
            "zh": "泰国 咖啡馆 是 哪种 风味 ？",
            "de": "Welche Art von Küche bietet das Thai Café?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "restaurants that have waiters and you can sit outside",
            "zh": "有 服务员 并且 可以 坐在 外面 用餐 的 餐馆",
            "de": "Restaurants mit Bedienung und Aussensitzplätzen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "what 2 dollar sign restaurant offers takeout",
            "zh": "哪个 两个 美元 符号 的 餐馆 提供 外卖 ？",
            "de": "Welches Restaurant mit 2-Dollar-Zeichen-Bewertung bietet Essen zum Mitnehmen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "thai restaurants with a price rating of 2 dollar signs",
            "zh": "有 两个 美元 符号 的 价格 评价 的 泰国 餐厅",
            "de": "Thai-Restaurants mit einer Preisbewertung von 2-Dollar-Zeichen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "what restaurant delivers and has a price rating of 2 dollar signs",
            "zh": "哪个 餐馆 提供 送餐 服务 并且 有 两个 美元 符号 的 价格 评价 ？",
            "de": "Welches Restaurant liefert und hat eine Bewertung von 2 Dollarzeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "find a 3 star restaurant with takeout",
            "zh": "找 一家 带 外卖 的 3 星级 餐厅",
            "de": "Finde ein 3 Sterne Restaurant mit Mitnahme"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )"
        },
        "question": {
            "en": "what meals does this restaurant serve for lunch",
            "zh": "这家 餐馆 的 中 午餐 都 供应 什么 ？",
            "de": "Welche Gerichte serviert dieses Restaurant zum Mittagessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )"
        },
        "question": {
            "en": "restaurants with star ratings better or equal to thai cafe",
            "zh": "星级 评定 优于 或 等于 泰国 咖啡馆 的 餐厅",
            "de": "Welche Restaurants haben eine bessere oder gleiche Sternebewertung wie das Thailändische cafe?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "what 3 star restaurant offers take out",
            "zh": "哪个 3 星级 的 餐馆 送 外卖 ？",
            "de": "Welches 3 Sterne Restaurant bietet Mitnahme an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "what restaurants are kid and group friendly",
            "zh": "哪家 餐馆 适合 儿童 和 团体 ？",
            "de": "Welche Restaurants sind kinder- und gruppenfreundlich?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )"
        },
        "question": {
            "en": "thai restaurants that offer takeout",
            "zh": "提供 外卖 的 泰国 餐馆",
            "de": "Thai-Restaurants, die zum Mitnehmen anbieten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string waiter ) ) )"
        },
        "question": {
            "en": "which thai restaurants have waiters",
            "zh": "哪家 泰式 餐馆 有 服务生 ？",
            "de": "Welche thailändischen Restaurants haben Kellner"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "thai restaurants that accept credit cards",
            "zh": "接受 信用卡 的 泰式 餐馆",
            "de": "Thailändische Restaurants, die Kreditkarten akzeptieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string kids ) ) )"
        },
        "question": {
            "en": "restaurants in midtown west and is kid friendly",
            "zh": "在 中 西城 适合 儿童 用餐 的 餐厅",
            "de": "Welche Restaurants in midtown west sind Kinderfreundlich?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "number of cuisine",
            "zh": "几种 风味",
            "de": "Anzahl der Küchen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ) )"
        },
        "question": {
            "en": "restaurants that serve meal for groups",
            "zh": "为 团体 用餐 的 餐厅",
            "de": "Restaurant die Gruppenmahlzeiten servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ) )"
        },
        "question": {
            "en": "cuisine of restaurant that has outdoor seating",
            "zh": "有 露天 座位 餐馆 的 主打 风味",
            "de": "Küche des Restaurants mit Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "a restaurant with waiter service for lunch",
            "zh": "一家 提供 午餐 服务 的 餐厅",
            "de": "Ein Restaurant mit Kellnerservice zum Mittagessen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which restaurants focus on one cuisine",
            "zh": "哪家 餐馆 主打 一种 风味",
            "de": "Welches Restaurant fokussiert sich auf eine Küche?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurants with outdoor dining areas",
            "zh": "餐厅 设有 户外 用餐 区",
            "de": "Restaurants mit Essbereichen im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "what restaurant is good for kids and offers lunch",
            "zh": "什么 餐厅 对 孩子 们 有 好处 ， 并 提供 午餐",
            "de": "Welches Restaurant ist geeignet für Kinder und bietet Mittagessen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "list all restaurants that have a price rating of 2 dollar signs or 3 star dollar signs",
            "zh": "列出 所有 价格 为 2 美元 符号 或 3 星 美元 符号 的 餐厅",
            "de": "Liste alle Restaurants die ein Preisrating von 2 Dollarzeichen oder 3 Sterne-Dollarzeichen auf"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )"
        },
        "question": {
            "en": "restaurant whose price rating is smaller than 2 dollar signs or 3 dollar signs",
            "zh": "价格 低于 2 美元 标志 或 3 美元 标志 的 餐厅",
            "de": "Restaurants wo die Preisbewertung kleiner als 2 oder 3 dollar signs ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant that is good for kids and whose neighborhood is midtown west",
            "zh": "中 西城 一带 适合 儿童 就餐 的 餐馆",
            "de": "Restaurant, das geeignet für Kinder ist und dessen Nachbarschaft Midtown West ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )"
        },
        "question": {
            "en": "which thai restaurants accept credit cards",
            "zh": "哪家 泰式 餐馆 接受 信用卡 ？",
            "de": "welche thailändischen restaurants akzeptieren kreditkarten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )"
        },
        "question": {
            "en": "restaurants that serve lunch or dinner",
            "zh": "哪些 餐厅 供应 午餐 或 晚餐 ？",
            "de": "Restaurants, die Mittag- oder Abendessen servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ) )"
        },
        "question": {
            "en": "what is the neigborhood of the restaurant that accepts reservations",
            "zh": "哪片 区域 的 餐厅 接受 预定 ？",
            "de": "in welchem Stadtteil ist das Restaurant das Reservierungen vornimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "what are some thai restaurants",
            "zh": "都 有 什么 泰国 饭馆 呀 ？",
            "de": "Was sind einige thailändische Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "which restaurant has waiter service and a 3 star rating",
            "zh": "哪个 饭馆 有点 菜 服务 且 是 三星级 ？",
            "de": "Welches Restaurant hat Bedienung und ein 3 Sternerating?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurant in midtown west that takes credit cards",
            "zh": "位于 市中心 西部 的 餐厅 用 信用卡",
            "de": "Restaurant in Midtown West, das Kreditkarten akzeptiert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "restaurants that are kid friendly and have waiters",
            "zh": "儿童 友好 且 有 服务员 的 餐馆",
            "de": "Restaurants die kinderfreundlich sind und Bedienung anbieten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurant which serves at maximum two meals",
            "zh": "餐厅 最 多 供应 两餐",
            "de": "Restaurant das höchstens zwei Mahlzeiten serviert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "restaurant that delivers and is kid friendly",
            "zh": "提供 外送 并且 适合 孩子 的 餐馆",
            "de": "Restaurant, das liefert und kinderfreundlich ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ) )"
        },
        "question": {
            "en": "what neighborhood contains restaurants that have takeout",
            "zh": "哪些 小区 有 可以 外带 的 餐厅 ？",
            "de": "welcher Stadtteil hat Restaurants mit Mitnahme Service"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurants only open for 2 meals a day",
            "zh": "一天 只 提供 两餐 的 餐馆",
            "de": "Restaurants die nur für 2 Mahlzeiten täglich öffnen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurants that has a popular meal",
            "zh": "有着 广 受欢迎 食物 的 餐馆",
            "de": "Restaurants, die ein beliebtes Essen anbieten."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "list all restaurants that are similar to thai cafe",
            "zh": "列出 所有 与 泰国 咖啡馆 相似 的 餐厅",
            "de": "Liste alle Restaurants auf, die dem Thai Cafe ähnlich sind"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "what restaurant offers delivery and accepts credit cards",
            "zh": "哪些 餐馆 提供 外送 并且 接受 信用卡 支付",
            "de": "Welches Restaurant bietet Lieferung an und akzeptiert Kreditkarten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurants accepting reservations and serving lunch",
            "zh": "接受 预定 并且 提供 午餐 的 餐馆",
            "de": "Restaurants, die Reservierungen annehmen und Mittagessen servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurant that has outdoor seating and that serves lunch",
            "zh": "餐厅 设有 户外 座位 ， 供应 午餐",
            "de": "Restaurant mit Sitzgelegenheiten im Freien, in dem Mittagessen serviert wird"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurants that are good for groups and deliver",
            "zh": "适合 多人 并且 提供 外送 的 餐馆",
            "de": "Restaurants, die für Gruppen geeignet sind und liefern"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )"
        },
        "question": {
            "en": "what restaurant has a lower price rating than thai cafe",
            "zh": "哪些 餐馆 比 泰式 餐馆 价格 更 低",
            "de": "welches Restaurant hat eine niedrigere Preisbewertung als das Thai-Café?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) ) )"
        },
        "question": {
            "en": "list restaurants in the neighborhood of thai cafe",
            "zh": "列出 泰国 咖啡馆 附近 的 餐馆",
            "de": "liste restaurants in der nähe des thailändischen cafés auf"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "what restaurant can i get delivery and reservations",
            "zh": "哪些 餐馆 可以 给 我 提供 外送 和 预定",
            "de": "Welches Restaurant bietet Lieferung und Reservierungsmöglichkeiten an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "what are the neighborhoods without thai cafes",
            "zh": "有 哪些 社区 没有 泰式 餐馆",
            "de": "Was sind die Nachbarschaften ohne Thai-Cafés"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "what restaurants are in midtown west",
            "zh": "市中心 西部 有 哪些 餐厅",
            "de": "Welche Restaurants befinden sich in Midtown west?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ) )"
        },
        "question": {
            "en": "restaurants that have waiters",
            "zh": "有 服务员 的 餐厅",
            "de": "Restaurants mit Kellnern"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ) ) )"
        },
        "question": {
            "en": "what is the average star rating of all restaurants",
            "zh": "所有 餐厅 的 平均 星级 评分 是 多少 ？",
            "de": "was ist die durchschnittliche Bewertung aller Restaurants"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "what restaurants offer reservations and waiter service",
            "zh": "什么 餐厅 提供 预订 和 服务员 服务",
            "de": "Welche Restaurants bieten Reservierungen und Kellner-Service"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurants with outdoor seating in midtown west",
            "zh": "西部 市中心 设有 户外 座位 的 餐厅",
            "de": "Restaurants in Midtown West mit Außensitzplätzen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which restaurants serve less than two meals",
            "zh": "哪些 餐厅 供应 不到 两餐",
            "de": "Welche Restaurants servieren weniger als zwei Mahlzeiten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which neighborhood has the most restaurants",
            "zh": "哪个 街区 的 餐馆 最 多",
            "de": "welcher Stadtteil hat die meisten Restaurants"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurants that deliver and are good for large parties",
            "zh": "餐厅 提供 并 适合 大型 聚会",
            "de": "Restaurants, die liefern und für große Gruppen geeignet sind"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "which restaurant s cuisine has a price rating of 2 dollar signs",
            "zh": "哪个 餐馆 的 菜肴 有 两星 价格 评分 ？",
            "de": "Welches Restaurant hat eine Küche, die ein price rating mit einem 2-Dollar-Zeichen hat?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "which hotel in midtown west has a 3 star stating",
            "zh": "哪个 市中心 西部 的 酒店 有 3 星 评价",
            "de": "welches Hotel in Midtown West hat eine 3 Sterne Bewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "what midtown west restaurant offers takeout",
            "zh": "哪个 中 城 西部 的 餐馆 提供 外卖 ？",
            "de": "Welches Restaurant in midtown west bietet Mitnahme an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )"
        },
        "question": {
            "en": "what is neighborhood of restaurant whose star rating is 3 stars",
            "zh": "哪个 小区 里 的 餐馆 有 三星 评价 ？",
            "de": "Welches ist die Nachbarschaft eines Restaurants das eine 3 Sterne Bewertung hat?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurants that accomodate groups and have outdoor seating",
            "zh": "可以 服务 多人 就餐 并且 有 室外 座位 的 餐馆",
            "de": "Restaurants, die Gruppen unterbringen und über Außenplätze verfügen."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )"
        },
        "question": {
            "en": "what group friendly restaurant serves lunch",
            "zh": "哪个 适合 多人 就餐 的 餐厅 提供 午餐 ？",
            "de": "Welches Gruppen freundliche Restaurant serviert Mittagessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurant that has waiter service and that is good for groups",
            "zh": "提供 服务生 服务 并且 适合 群体 就餐 的 餐馆",
            "de": "Restaurant mit Kellnerservice, das für Gruppen geeignet ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string max ) ( string neighborhood ) ) )"
        },
        "question": {
            "en": "what restaurant is in the most number of neighborhoods",
            "zh": "哪个 餐馆 在 各个 社区 内有 最 多 的 分店",
            "de": "Welches Restaurant befindet sich in den meisten Stadtteilen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "what restaurants offers reservations and waiter service",
            "zh": "哪个 餐馆 可以 接受 预定 和 提供 服务员 服务",
            "de": "welches Resaturant bietet Reservierungen und Tischservice"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "restaurants with a star rating of 4 or higher",
            "zh": "哪些 饭馆 是 四星级 或 以上 ？",
            "de": "Restaurant mit mindestens 4 Sternen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "2 dollar signs or 3 dollar signs",
            "zh": "2 美元 的 符号 或 3 美元 的 符号",
            "de": "2 Dollarzeichen oder 3 Dollarzeichen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "whats a restaurant in midtown west",
            "zh": "哪个 餐馆 在 中城 西部 ？",
            "de": "Was ist ein Restaurant in Midtown West"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant that takes credit cards and whose neighborhood is midtown west",
            "zh": "哪个 饭馆 接受 信用卡 且 在 中 西城 社区 ？",
            "de": "Restaurant, das Kreditkarten akzeptiert und in der Gegend Midtown West liegt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "what restaurant takes reservations and accepts credit cards",
            "zh": "哪个 饭馆 接受 订位 和 信用卡 ？",
            "de": "Welches Restaurant nimmt Reservierungen entgegen und akzeptiert Kreditkarten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )"
        },
        "question": {
            "en": "what are some restaurants rated higher than 3 stars",
            "zh": "什么 餐馆 有 三星 以上 的 评价",
            "de": "Welche Restaurants sind besser bewertet als 3 Sterne?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ) )"
        },
        "question": {
            "en": "which neighborhood has restaurants that offer delivery",
            "zh": "哪些 社区 有 送 外卖 的 饭馆 ？",
            "de": "Welche Gegend hat Restaurants mit Lieferung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "meal served by two or more different restaurants",
            "zh": "两餐 或 更 多 餐厅 供应 的 餐点",
            "de": "Gericht, welches von zwei oder mehr verschiedenen Restaurants angeboten wird"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "a place that is good for groups and for kids",
            "zh": "一个 适合 团体 和 孩子 的 地方",
            "de": "Ein Ort, für Gruppen und Kinder geeignet ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurants that take reservations in midtown west",
            "zh": "在 西 市中心 接受 预约 的 餐馆",
            "de": "Restaurants in Midtown West, die Reservierungen annehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "restaurant that has waiter service and that has takeout",
            "zh": "有 服务员 服务 ， 外卖 的 餐厅",
            "de": "Restaurant mit Kellnerservice und Mitnahme"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "what restaurant takes credit cards and delivers",
            "zh": "哪个 饭馆 接受 信用卡 且 送 外卖 ？",
            "de": "Welches Restaurant akzeptiert Kreditkarte und liefert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ) )"
        },
        "question": {
            "en": "what is the cuisine of restaurants that are good for children",
            "zh": "什么 料理 餐馆 是 适合 孩子 们 的",
            "de": "Welche Küche bieten Restaurants, die für Kinder geeignet sind?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "which 3 star restaurants are good for children",
            "zh": "哪些 三星级 餐厅 适合 儿童",
            "de": "Welche Drei Sterne Restaurants sind gut für Kinder?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "thai restaurant that can be booked in advance",
            "zh": "可以 提早 预订 的 泰国 餐馆",
            "de": "Thai-Restaurant, das im Voraus gebucht werden kann"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "what thai restaurants have waiter service",
            "zh": "什么 泰国 餐馆 有待 应 服务",
            "de": "welches Thai Restaurant hat Tischservice"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ) )"
        },
        "question": {
            "en": "restaurant that serves good meals for kids",
            "zh": "为 孩子 们 提供 美食 的 餐厅",
            "de": "Restaurant das gute Speisen für Kinder anbietet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant in the area of midtown west which is good for group dining",
            "zh": "于 市中心 西面 区域 适合 团体 进餐 的 餐馆",
            "de": "Restaurant in der Gegend von Midtown West, das gut für Gruppen geeignet ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "What 3 star restaurants are located in midtown west",
            "zh": "哪些 三星 饭馆 在 中 西城 ？",
            "de": "Welche 3-Sterne-Restaurants befinden sich in Midtown West"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurant that has room for groups and also takes credit cards",
            "zh": "有 独立 房间 给 团体 及 接纳 信用 咭 的 餐馆",
            "de": "Restaurant das platz für Gruppen hat und Kreditkarten akzeptiert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurants in midtown west that take credit cards",
            "zh": "于 市中心 西面 会 接纳 信用 咭 的 餐馆",
            "de": "Restaurants in Midtown West, die Kreditkarten akzeptieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "a 3 star restaurant",
            "zh": "一家 三星级 餐厅",
            "de": "Ein 3-Sterne-Restaurant"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string kids ) ) )"
        },
        "question": {
            "en": "which restaurants in midtown west are kid friendly",
            "zh": "西部 中城 的 哪些 餐厅 对 孩子 友好",
            "de": "Welche Restaurants in Midtown West sind kinderfreundlich"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurants for groups",
            "zh": "适合 团体 就餐 的 餐馆",
            "de": "Restaurants für Gruppen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurants in midtown west serving lunch",
            "zh": "西区 中心 的 餐厅 供应 午餐",
            "de": "Restaurants in Midtown West, die Mittagessen servieren."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "which 3 star restaurants have outdoor dining areas",
            "zh": "哪些 三星 饭馆 有 室外 就餐 区 ？",
            "de": "welche 3-Sterne-Restaurants haben Essbereiche im Freien?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ) )"
        },
        "question": {
            "en": "what restaurant serves cuisine at an outdoor setting",
            "zh": "哪个 饭馆 有 室外 就餐 服务 ？",
            "de": "Welche Restaurants servieren Essen im Außenbereich?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "a restaurant with varied cuisine",
            "zh": "一家 供应 各种 美食 的 餐厅",
            "de": "ein Restaurant mit abwechslungsreicher Küche"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "what kidfriendly restaurants accept credit cards",
            "zh": "什么 礼宾 餐馆 接受 信用卡",
            "de": "Welche kinderfreundlichen Restaurants akzeptieren Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ) ) )"
        },
        "question": {
            "en": "what is the average price rating of a hotel",
            "zh": "什么 是 酒店 的 平均价格",
            "de": "Was ist die durchschnittliche Preisbewertung eines Hotels?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which restaurant have two cuisines",
            "zh": "哪个 餐馆 提供 两种 菜系",
            "de": "Welche Restaurants bieten zwei verschiedene Küchen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ) )"
        },
        "question": {
            "en": "which neighborhoods have restaurants with waiters",
            "zh": "哪些 小区 有 提供 服务生 的 餐馆 ？",
            "de": "Welche Viertel haben Restaurants mit Kellnern?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string groups ) ) )"
        },
        "question": {
            "en": "thai restaurant that is good for groups",
            "zh": "哪个 泰国 饭馆 适合 团体 ？",
            "de": "Thai-Restaurant, das für Gruppen geeignet ist."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurants in the midtown west neighborhood that take reservations",
            "zh": "在 中城 西边 社区 的 并且 能 接受 预定 的 餐馆",
            "de": "Restaurants in der Nachbarschaft von Midtown West, die Reservierungen annehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "what 2 dollars rated restaurant has outdoor seating",
            "zh": "哪家 两位数 价格 的 餐馆 可以 室外 就餐 ？",
            "de": "Welches mit 2 Dollar bewertete Restaurant hat Außensitzplätze"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ) )"
        },
        "question": {
            "en": "what neighborhoods have restaurants that offer delivery",
            "zh": "哪些 社区 有 可 提供 外送 的 餐馆",
            "de": "In welchen Stadtteilen gibt es Restaurants, die Lieferservice anbieten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ) )"
        },
        "question": {
            "en": "what restaurants take reservations",
            "zh": "哪些 餐馆 接受 预定",
            "de": "welche restaurants nehmen reservierungen entgegen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "restaurant with delivery service that accepts reservations",
            "zh": "有外 送 服务 并且 接受 预定 的 餐馆",
            "de": "Restaurant mit Lieferservice, das Reservierungen entgegennimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ) )"
        },
        "question": {
            "en": "restaurants with a cuisine that is child friendly",
            "zh": "适合 儿童 就餐 的 餐馆",
            "de": "Restaurants mit kinderfreundlicher Küche"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "a restaurant that serves multiple meals",
            "zh": "一家 供应 多餐 的 餐厅",
            "de": "ein Restaurant, das mehrere Mahlzeiten serviert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )"
        },
        "question": {
            "en": "restaurants that serve lunch or dinner",
            "zh": "提供 午餐 和 晚餐 的 餐馆",
            "de": "Restaurants, die Mittag- oder Abendessen servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ) )"
        },
        "question": {
            "en": "what cuisine has restaurants that are best for kids",
            "zh": "什么 饭馆 风味 最 适合 小孩 ？",
            "de": "Welche Restaurants haben eine Küche die die beste für Kinder ist?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ) )"
        },
        "question": {
            "en": "hotel that has the facility of waiter service",
            "zh": "有 服务员 服务 的 餐馆",
            "de": "Hotel mit Kellner-Service"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "restaurant that has take out facilities and that kids can enjoy",
            "zh": "孩子 喜欢 并且 可以 提供 外卖 服务 的 餐馆 。",
            "de": "Restaurants die zum Mitnehmen anbieten und die Kinder gefallen können"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurant near a neighborhood",
            "zh": "社区 附近 的 餐馆 。",
            "de": "Restaurant in der Nähe eines Viertels"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )"
        },
        "question": {
            "en": "what is the highest rated restaurant",
            "zh": "哪 一家 餐厅 评级 最高 ？",
            "de": "was ist das am höchsten bewertete Restaurant?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( string max ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what kind of cuisine has the most restaurants",
            "zh": "哪 一种 菜系 的 餐馆 最 多 ？",
            "de": "Welche Art von Küche haben die meisten Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "what restaurants makes deliveries and accepts credit cards",
            "zh": "什么 餐馆 可以 外送 并且 接受 信用卡 ？",
            "de": "Welche Restaurants liefern und akzeptieren Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what kind of cuisines have at least two restaurants",
            "zh": "哪些 风味 有 至少 两个 餐馆 ？",
            "de": "Welche Art von Küche wird von mindestens zwei Restaurants angeboten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) ) )"
        },
        "question": {
            "en": "restaurants in the neighborhood of thai cafe",
            "zh": "哪 一家 餐厅 在 thai 咖啡馆 附近 ？",
            "de": "Restaurants in der Nähe des Thai-Cafés"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurants with a price rating of 2 dollar signs that also take reservations",
            "zh": "有着 价格 平分 是 两个 美金 标志 并且 接受 预定 的 餐馆 。",
            "de": "Restaurants mit einer Preiswertung von 2-Dollarzeichen, die zudem Reservierungen annehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "which restaurants in midtown west have thai cuisine",
            "zh": "哪些 中 城 西部 的 餐馆 有 泰国 风味 ？",
            "de": "Welche Restaurants in Midtown West bieten thailändische Küche?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ) )"
        },
        "question": {
            "en": "neighborhood that is neighborhood of restaurant that takes credit cards",
            "zh": "哪 一个 餐厅 在 小区 附近 并且 接受 信用卡 ？",
            "de": "Stadtteil neben des Stadtteils des Restaurants das Kreditkarten annimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "which restaurant has waiter and delivery service",
            "zh": "哪个 饭店 有 服务员 和 外卖 服务",
            "de": "Welches Restaurant hat Kellner und Lieferservice"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "what meals do the thai cafe serve",
            "zh": "泰国 餐厅 有 什么 菜",
            "de": "Welche Gerichte serviert das Thai Café."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )"
        },
        "question": {
            "en": "which restaurant has thai cuisine",
            "zh": "哪家 餐厅 有 泰国菜",
            "de": "Welches Restaurant serviert thailändische Küche?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "the most common restaurant meal",
            "zh": "最 平常 的 饭店 菜",
            "de": "Das gängigste Restaurant-Gericht"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurant that can be booked in advance and has outdoor seating facilities",
            "zh": "餐厅 可以 提前 预订 ， 并 设有 户外 座位 设施",
            "de": "Restaurant, das im Voraus gebucht werden kann und Sitzgelegenheiten im Freien bietet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )"
        },
        "question": {
            "en": "restaurant with the same or less stars as the thai cafe",
            "zh": "与 泰国 咖啡馆 相同 或 更少 明星 的 餐厅",
            "de": "Welches Restaurant hat gleich viel oder weniger Sterne als das thai cafe?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )"
        },
        "question": {
            "en": "restaurants rated least expensive",
            "zh": "评价 最 便宜 的 饭店",
            "de": "Welche Restaurants sind am billigsten bewertet?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "what 3 star rated restaurant takes credit cards",
            "zh": "哪个 3 星 餐厅 接受 信用卡 ？",
            "de": "Welches 3-Sterne-Restaurant akzeptiert Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ) )"
        },
        "question": {
            "en": "which neighborhood restaurant takes credit cards",
            "zh": "哪个 街道 餐厅 接受 信用卡 ？",
            "de": "Welches Restaurant in der Nachbarschaft akzeptiert Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )"
        },
        "question": {
            "en": "restaurants in midtown west neighborhood",
            "zh": "在 中区 西部 的 饭店",
            "de": "Restaurants im Midtown-West-Viertel"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant that has delivery and whose neighborhood is midtown west",
            "zh": "餐馆 有 外卖 还有 地点 在 中间 西边",
            "de": "Welches Lieferrestaurant ist in der Gegend von midtown west?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant whose price rating is 2 dollars and whose neighborhood is midtown west",
            "zh": "哪个 餐馆 价格 评价 是 两个 美元 符号 并且 位于 中 城 西部 ？",
            "de": "Welches Restaurant hat eine Preisbewertung von 2 Dollar in der Gegend von midtown west?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "affordable restaurant with outdoor seating",
            "zh": "价格 实惠 的 餐厅 设有 户外 座",
            "de": "günstiges Restaurant mit Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )"
        },
        "question": {
            "en": "what is the star rating of thai cafe",
            "zh": "泰 咖啡馆 是 几 星级 的 ？",
            "de": "Was ist die Sternebewertung des Thai Cafés"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( string min ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which type of cuisine is least popular",
            "zh": "什么 风味 的 菜 最 不 流行 ？",
            "de": "welche Art von Küche ist am wenigsten beliebt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurant that serves the least number of meal",
            "zh": "供应 最少 餐点 的 餐厅",
            "de": "Restaurant, das die geringste Anzahl von Mahlzeiten serviert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "restaurant with 2 dollar price rating sign",
            "zh": "餐厅 与 2 美元 的 价格 评级 标志",
            "de": "Restaurant mit 2-Dollar-Preisbewertungszeichen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "what 3 star restaurant has takeout",
            "zh": "什么 三星级 饭馆 有 外卖 ？",
            "de": "Welches 3 Sterne Restaurant bietet Mitnahme an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "restaurants that serve lunch with a price rating of 2",
            "zh": "哪个 价格 评定 为 二 的 餐馆 提供 午餐 服务 ？",
            "de": "Welche Restaurants servieren Mittagessen und haben eine Preisbewertung von 2?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "list all restaurants that are cheaper than 2 dollar signs",
            "zh": "列出 所有 比 2 美元 标志 便宜 的 餐馆",
            "de": "Welche Restaurants sind billiger als 2 Dollarzeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "restaurants that have delivery and takeout",
            "zh": "哪些 饭馆 有 外卖 且 管送 ？",
            "de": "Restaurants welche liefern oder Takeaway anbieten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "more than three restaurant in neighborhood",
            "zh": "附近 有 三家 以上 的 餐廳",
            "de": "Mehr als drei Restaurants in der Nachbarschaft"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "restaurants that serve outdoors with waiters",
            "zh": "可以 在 室外 就 在 并且 有 服务员 的 餐馆",
            "de": "Restaurants die draußen servieren mit Kellnern"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhoods have at least two restaurants",
            "zh": "哪些 社区 至少 有 两家 餐馆",
            "de": "In welchen Vierteln gibt es mindestens zwei Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurant with food of two cultures",
            "zh": "有 两个 饮食文化 的 餐馆",
            "de": "Restaurant mit Speisen aus zwei Kulturen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "restaurants that are good for children and also have a price rating of 2 dollar signs",
            "zh": "适合 孩子 并且 价格 评分 为 2 个 美金 符号 的 餐馆",
            "de": "Restaurants, welche gut für Kinder sind und eine Preisbewertung von 2 Dollarzeichen haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string waiter ) ) )"
        },
        "question": {
            "en": "what midtown west restaurant offers waiter service",
            "zh": "哪个 在 中城 西边 的 餐馆 提供 服务生 服务",
            "de": "welches midtown west Restaurant bietet Kellnerservice?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "the restaurant with take out food is fairly inexpensive",
            "zh": "价格 实惠 的 外 送 餐馆",
            "de": "Das Restaurant mit Essen zum Mitnehmen ist recht günstig"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "restaurants that can be reserved in advance and that offers delivery services",
            "zh": "可 提前 预订 并 提供 送餐 服务 的 餐厅",
            "de": "Restaurants wo im Voraus reserviert werden kann und welche Lieferservice anbieten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "which restaurants in midtown west have a 2dollarsigns price rating",
            "zh": "哪些 在 中城 西边 的 餐馆 价格 评分 是 两个 美金 标志",
            "de": "Welche Restaurants in midtown west haben eine 2 Dollarzeichen Preisbewertung?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what restaurant serves multiple cuisines",
            "zh": "哪个 餐厅 提供 多种类型 的 饭菜 ？",
            "de": "Welches Restaurant serviert verschiedene Küchen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )"
        },
        "question": {
            "en": "three star restaurant meals",
            "zh": "三星级 餐厅 用餐",
            "de": "Drei-Sterne-Restaurant Mahlzeiten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )"
        },
        "question": {
            "en": "what is the price rating of the thai cafe",
            "zh": "这 间 泰国 咖啡厅 的 价格 评级 是 多少 ？",
            "de": "Was ist die Preisbewertung des thai cafes?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string groups ) ) )"
        },
        "question": {
            "en": "thai restaurants for groups",
            "zh": "适合 多人 就餐 的 泰国 餐馆 。",
            "de": "Thai-Restaurants für Gruppen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "what is a kid friendly restaurant with an outdoor dining area",
            "zh": "哪个 餐馆 适合 儿童 并且 有 室外 就餐 环境 ？",
            "de": "Welches Restaurant ist kinderfreundlich und hat ein Sitzbereich im freien?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "what restaurants with 2 price rating serve outdoors",
            "zh": "哪些 2 级 价格 评级 的 餐厅 在 户外 服务 ？",
            "de": "Welche Restaurants haben eine Preisbewertung von 2 und servieren draußen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "hotel that has a 3 star rating and which accepts credit catds",
            "zh": "3 星 评级 而且 接受 信用卡 的 酒店 ？",
            "de": "Welches Hotel hat eine 3 Sternebewertung und akzeptiert Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )"
        },
        "question": {
            "en": "restaurant with 5 stars or 3 stars rating",
            "zh": "餐厅 有 5 星级 或 3 星 评级",
            "de": "Welches Restaurant hat 5 oder 3 Sternebewertung?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "restaurant whose price rating is larger than 2 dollar signs",
            "zh": "价格 评分 大于 二 的 餐馆 ，",
            "de": "Welches Restaurant hat eine Preisbewertung von mehr als 2 Dollarzeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "what 3 star restaurant takes credit cards",
            "zh": "哪个 3 星 评级 餐厅 接受 信用卡 ？",
            "de": "Welches 3-Sterne-Restaurant akzeptiert Kreditkarten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "restaurant that has two cuisines",
            "zh": "做 两种 菜系 的 餐馆 。",
            "de": "Restaurant welches 2 Küchen anbietet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "restaurants rated 2 or 3 dollars",
            "zh": "餐厅 评级 为 2 或 3 美元",
            "de": "Restaurants, die bei 2 bis 3 Dollar eingestuft sind."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "which 3 star restaurants have takeout",
            "zh": "哪些 三星 的 餐馆 提供 外卖 服务 ？",
            "de": "Welche Drei-Sterne-Restaurants bieten Speisen zur Mitnahme an."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "restaurants that take credit cards and have waiters",
            "zh": "接受 信用卡 并且 有 服务生 服务 的 餐馆 。",
            "de": "Restaurants welche Kreditkarten akzeptieren und Bedienung haben."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "restaurant with a price rating of 2 or under",
            "zh": "价格 评分 在 2 或者 以下 的 餐馆",
            "de": "Restaurants mit einer Preisbewertung von 2 oder niedriger."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant in midtown west that accepts reservations",
            "zh": "在 中城 西面 接受 预定 的 餐馆",
            "de": "Restaurant in Midtown West welches Reservierungen akzeptiert."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ) )"
        },
        "question": {
            "en": "which neighborhood restaurants have waiters",
            "zh": "哪些 社区 饭馆 有 服务员 ？",
            "de": "Welche Restaurants im Viertel haben Bedienung."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )"
        },
        "question": {
            "en": "the neighborhood that thai cafe or pizzeria juno is in",
            "zh": "哪个 社区 有泰 咖啡馆 和 juno 比萨 店 ？",
            "de": "die Nachbarschaft, in der sich das Thai Cafe oder die Pizzeria juno befindet."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string waiter ) ) )"
        },
        "question": {
            "en": "thai restaurants with waiter service",
            "zh": "有 服务生 服务 的 泰式 餐馆",
            "de": "Thai-Restaurant mit Bedienung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ) )"
        },
        "question": {
            "en": "what is cuisine of the kid friendly restaurant",
            "zh": "那个 小孩 友好 的 饭馆 是 什么 风味 的 ？",
            "de": "Was für eine Landesküche gibt es in dem kinderfreundlichen Restaurant?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "thai restaurant that has outdoor seating facilities",
            "zh": "泰国 餐厅 ， 有 户外 座位 设施",
            "de": "Thai-Restaurant mit Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )"
        },
        "question": {
            "en": "what restaurants are similar to thai cafe",
            "zh": "什么 饭馆 和 泰 咖啡馆 类似 ？",
            "de": "Welche Restaurants sind ähnlich wie das Thai Cafe?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "what restaurant offers waiter service and outdoor seating",
            "zh": "哪个 餐馆 有 服务生 并且 有 室外 就餐 环境 ？",
            "de": "Welches Restaurant bietet Kellner-Service und Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "a restaurant that is open for lunch",
            "zh": "一家 供应 午餐 的 餐厅",
            "de": "ein Restaurant, das zum Mittagessen geöffnet ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurants that serve two at most at a time",
            "zh": "一次性 最 多 服务 两个 客人 的 餐馆",
            "de": "Restaurants, die höchstens zwei gleichzeitig servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )"
        },
        "question": {
            "en": "restaurant that has the largest star rating",
            "zh": "星级 评分 最高 的 餐馆",
            "de": "Restaurant mit der höchsten Sternebewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ) )"
        },
        "question": {
            "en": "restaurant in the neighborhood that provides waiter service",
            "zh": "在 社区 内有 服务员 服务 的 餐馆",
            "de": "Restaurant in der Nachbarschaft, das Kellnerservice anbietet."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "what restaurants are not located in midtown west",
            "zh": "哪些 餐馆 不 位于 中 城 西部 ？",
            "de": "Welche Restaurants befinden sich nicht in Midtown West"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "restaurant that takes credit cards and that has waiter service",
            "zh": "可以 接受 信用卡 并且 有 服务员 服务 的 餐馆",
            "de": "Welches Restaurant nimmt Kreditkarten und hat einen Kellnerservice?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "three star restaurants that take reservations",
            "zh": "可以 接受 预定 的 三星级 餐馆",
            "de": "Drei-Sterne-Restaurants, die Reservierungen annehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "which restaurant can be booked in advance",
            "zh": "哪 一个 餐馆 可以 被 提前 预定",
            "de": "Welches Restaurant kann im Voraus gebucht werden?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )"
        },
        "question": {
            "en": "restaurant whose price rating is larger than price rating of thai cafe",
            "zh": "价格 等级 大于 泰国 咖啡馆 价格 等级 的 餐厅",
            "de": "Ein Restaurant, dessen Preisbewertung höher als die des Thai-Cafes ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )"
        },
        "question": {
            "en": "what kind of restaurants are thai cafe or pizzeria juno",
            "zh": "什么样 的 餐馆 是 泰国 咖啡馆 或 比萨 店 juno",
            "de": "Welche Art von Restaurants sind das Thai-Cafe und die Pizzeria Juno?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )"
        },
        "question": {
            "en": "restaurant whose neighborhood is midtown west or chelsea",
            "zh": "附近 是 市中心 西部 或 切尔西 的 餐馆",
            "de": "Ein Restaurant, dessen Lage Midtown West oder Chelsea ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has a good kids restaurant",
            "zh": "哪个 社区 有 适合 孩子 的 餐馆",
            "de": "In welcher Nachbarschaft gibt es ein gutes Kinderrestaurant?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ) )"
        },
        "question": {
            "en": "which neighborhoods have restaurants that take credit cards",
            "zh": "哪些 社区 有 接受 信用卡 的 饭馆 ？",
            "de": "Welche Nachbarschaften haben Restaurants, die Kreditkarten akzeptieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurants with delivery and outdoor seating",
            "zh": "提供 外送 并且 有 室外 座位 的 餐馆",
            "de": "Restaurants mit Lieferung und Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "restaurant that takes reservations and whose star rating is 3 stars",
            "zh": "可以 接受 预定 并且 星际 评分 是 三星 的 餐馆",
            "de": "Ein Restaurant, das Reservierungen akzeptiert und eine 3-Sterne-Bewertung hat"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has the most restaurants",
            "zh": "哪个 社区 的 饭馆 最 多 ？",
            "de": "Wo gibt es die meisten Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "which restaurants in the midtown west neighborhood are good for children",
            "zh": "哪些 在 中城 西边 社区 的 餐馆 适合 儿童",
            "de": "Welche Restaurants in der Gegend Midtown West sind für Kinder geeignet"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "which thai restaurants have takeout",
            "zh": "哪些 泰国 餐馆 提供 外卖 ？",
            "de": "Welches thai Restaurant bietet Mitnahme an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ) )"
        },
        "question": {
            "en": "what meals do the restaurant with reservations serve",
            "zh": "这个 接受 预定 的 餐馆 提供 哪餐 ？",
            "de": "Welche Speisen servieren die Restaurants mit Reservation"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "which meal does a thai cafe serve",
            "zh": "泰国 咖啡馆 提供 什么 餐食 ？",
            "de": "Welche Speisen serviert ein Thai-Cafe"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string kids ) ) )"
        },
        "question": {
            "en": "find a good kids restaurant in midtown west",
            "zh": "请 找出 一个 在 中城 西部 的 适合 儿童 的 餐馆 。",
            "de": "Finden Sie ein gutes Restaurant für Kinder in Midtown West"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant whose star rating is 3 stars and whose neighborhood is midtown west",
            "zh": "在 中城 西面 有着 三星 评分 的 餐馆 。",
            "de": "Restaurant dessen Sternebewertung 3 Sterne beträgt und in der Gegend midtown west liegt."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurants serving lunch with price rating of 2 dollar signs",
            "zh": "提供 午餐 服务 并且 价格 评分 为 两个 美金 符号 的 餐馆 。",
            "de": "Welches Restaurant serviert Mittagessen das eine Preisbewertung von 2 Dollarzeichen hat?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "restaurants with 3 star ratings and that serve lunch",
            "zh": "提供 午餐 的 三星级 餐馆 。",
            "de": "Welches Restaurant hat eine 3 Sternebewertung und serviert Mittagessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )"
        },
        "question": {
            "en": "what neighborhood is the thai restaurant in",
            "zh": "这个 泰国 餐馆 在 哪个 社区 ？",
            "de": "In welcher Gegend ist das Thai-Restaurant"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurant open for lunch and has a 3 star rating",
            "zh": "餐厅 供应 午餐 ， 并 有 3 星级 的 评分",
            "de": "Das Restaurant ist zum Mittagessen geöffnet und hat eine 3-Sterne-Bewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurant that has waiter service and that has outdoor seating",
            "zh": "有 服务生 服务 ， 并且 有 室外 座位 的 餐馆 。",
            "de": "Restaurant mit Kellnerservice und Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )"
        },
        "question": {
            "en": "which restaurants serve lunch and have takeout",
            "zh": "哪些 餐馆 提供 午餐 并且 有 外卖 服务 ？",
            "de": "Welche Restaurants servieren Mittagessen und bieten Mitnahme an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )"
        },
        "question": {
            "en": "what restaurant takes credit cards and have lunch",
            "zh": "哪个 餐馆 接受 信用卡 并且 提供 午餐",
            "de": "Welches Restaurant nimmt Kreditkarten an und serviert Mittagessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "what type of dishes does the thai cafe offer",
            "zh": "这个 泰国 咖啡馆 提供 什么样 的 饭菜 ？",
            "de": "Welche Art von Gerichten bietet das Thai Cafe an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant that serves lunch and whose neighborhood is midtown west",
            "zh": "在 中城 西面 提供 午餐 的 餐馆",
            "de": "Welches Restaurant serviert Mittagessen und befindet sich in der Gegend von midtown west?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.food.lunch en.food.dinner ) )"
        },
        "question": {
            "en": "what restaurants serve lunch or dinner",
            "zh": "哪些 餐馆 有 午餐 或者 晚餐 ？",
            "de": "Welche Restaurants servieren Mittag- oder Abendessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurant that takes credit cards and that serves lunch",
            "zh": "接受 信用卡 并且 提供 午餐 的 餐馆",
            "de": "Welches Restaurant akzeptiert Kreditkarten und serviert Mittagessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ) )"
        },
        "question": {
            "en": "what kind of restaurants offer delivery",
            "zh": "哪 种 餐馆 提供 送餐 服务 ？",
            "de": "Welche Art von Restaurants liefern?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "restaurant which had a maximum of 2 dollar sign price rating",
            "zh": "最多 两星 价格 评分 的 餐馆",
            "de": "Welches Restaurant hat maximal eine 2 Doller Preisbewertung?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ) )"
        },
        "question": {
            "en": "what is the cuisine of restaurants that have outdoor seating",
            "zh": "能 室外 就餐 的 那些 饭馆 是 什么 环境 ？",
            "de": "Welche Küchen haben die Restaurants die draußen Sitzplätze haben?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "which restaurants are good places for groups and offer outdoor seating",
            "zh": "哪些 餐馆 适合 多人 聚会 并且 有 室外 就餐 环境 ？",
            "de": "Welche Restaurants sind gute Orte für Gruppen und bieten draußen Sitzplätze an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "restaurants that are kid friendly",
            "zh": "适合 小朋友 用餐 的 餐馆",
            "de": "Kinderfreundliche Restaurants"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )"
        },
        "question": {
            "en": "what restaurants have price ratings of 2 or 3 dollar signs",
            "zh": "什么 饭馆 有 两 美元 或 三 美元 的 价牌 ？",
            "de": "welche restaurants haben preisbewertungen von 2 oder 3 dollar zeichen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "where is a good restaurant to take kids",
            "zh": "适合 带 小孩子 的 餐厅 在 哪里 ？",
            "de": "In welches Restaurant kann man gut mit Kindern gehen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )"
        },
        "question": {
            "en": "restaurant with smaller star rating",
            "zh": "星级 较 小 的 餐厅",
            "de": "Ein Restaurant mit geringerer Sternebewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has at most one restaurant",
            "zh": "哪些 社区 最 多 只有 一个 饭馆 ？",
            "de": "welche nachbarschaft hat höchstens ein restaurant"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "a restaurant for lunch that has outdoor seating",
            "zh": "有 户外 座位 的 午餐 餐厅",
            "de": "Ein Restaurant zum Mittagessen mit Sitzplätzen draußen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "which restaurant that takes reservations have a price rating of two dollar signs",
            "zh": "哪个 需要 预定 的 餐厅 的 价格 为 两 美元 符号",
            "de": "Welches Restaurant, das Reservierungen annimmt, hat ein Preisrating von 2 Dollarzeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "a kid friendly take out restaurant",
            "zh": "一个 小孩 友好 的 外卖 餐厅",
            "de": "Ein kinderfreundliches Restaurant mit Essen zum Mitnehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant that takes reservations and whose neighborhood is midtown west",
            "zh": "在 中城 西面 接受 预定 的 餐馆 。",
            "de": "Restaurant das Reservierungen annimmt und dessen Nachbarschaft Midtown West ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "restaurants whose cuisine is thai and that deliver",
            "zh": "提供 外卖 的 泰国 餐馆",
            "de": "Restarants, derem Küche thailändisch ist und die liefern."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )"
        },
        "question": {
            "en": "list all restaurants that have ratings lower than 3 stars",
            "zh": "列出 所有 评级 低于 3 星级 的 餐厅",
            "de": "Listen Sie alle Restaurants mit einer Bewertung von weniger als 3 Sternen auf"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "which restaurants in midtown west have delivery service",
            "zh": "哪些 中 西城 饭馆 有 送 外卖 服务 ？",
            "de": "Welche Restaurants in Midtown West bieten einen Lieferservice?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurant that takes credit cards",
            "zh": "接收 信用卡 的 餐馆",
            "de": "Restaurant, das Kreditkarten akzeptiert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "which restaurants offer takeout",
            "zh": "哪些 餐厅 提供 外卖",
            "de": "Welches Restaurant bietet Mitnahme?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurants that serve multiple meals",
            "zh": "供应 多餐 的 餐厅",
            "de": "Restaurants, die mehrere Mahlzeiten servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurant that takes reservations",
            "zh": "需要 预订 并 预订 的 餐厅",
            "de": "Restaurant, das Reservierungen entgegennimmt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ) )"
        },
        "question": {
            "en": "what restaurants in this neighborhood is group friendly",
            "zh": "附近 哪个 餐馆 适合 团队 聚餐",
            "de": "Welche Restaurants in dieser Gegend sind gruppenfreundlich?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "which hotel has a price rating of 2 dollar signs and  waiter service facilities",
            "zh": "哪个 酒店 有 两个 美元 符号 的 价格 评级 和 服务员 服务设施",
            "de": "Welches Hotel hat eine Preisbewertung von 2 dollar signs und einen Kellner Service?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ) )"
        },
        "question": {
            "en": "restaurants in the neighborhood with outdoor seating",
            "zh": "附近 有 户外 座位 的 餐馆",
            "de": "Welche Restaurants in der Nachbarschaft haben einen Außensitzbereich?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "which two dollar sign rated restaurants have takeout",
            "zh": "哪些 有 两个 美元 符号 价格 评级 的 餐馆 有 外卖",
            "de": "Welche mit zwei Dollarzeichen benotete Restaurants bieten die Mitnahme von Speisen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )"
        },
        "question": {
            "en": "restaurants rated less than 5 stars",
            "zh": "五星 以内 平分 的 餐馆 。",
            "de": "Restaurants welche mit weniger als 5 Sternen bewertet wurden"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "a delivering restaurant",
            "zh": "一个 外送 的 餐馆 。",
            "de": "Ein Lieferrestaurant"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )"
        },
        "question": {
            "en": "restaurants that are at most 2 or 3 dollar price ratings",
            "zh": "最 多 两个 或者 三个 美金 符号 的 餐馆 。",
            "de": "Restauraunts welche maximal eine 2- oder 3-Dollar-Preisbewertung haben."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( string min ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the least served meal at restaurants",
            "zh": "哪 道菜 在 饭馆 里 卖 得 最少 ？",
            "de": "Was ist das am wenigsten servierte Gericht in Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "hotel that is found in a maximum of two areas",
            "zh": "最 多 两个 地区 有 服务 的 酒店 。",
            "de": "Hotel welches maximal in zwei Gebieten zu finden ist."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "which restaurants with takeout take reservations",
            "zh": "哪些 外卖 饭馆 接受 订位 ？",
            "de": "Welches Restaurant mit Mitnahme nimmt Reservierungen an."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurants that are good for children and have outdoor seating",
            "zh": "适合 儿童 餐厅 提供 户外 座位",
            "de": "Restaurants welche für Kinder geeignet sind und Außenplätze haben."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )"
        },
        "question": {
            "en": "find a restaurant with less than 3 stars",
            "zh": "找 一家 三星 以内 的 餐馆 。",
            "de": "Finde ein Restaurant mit weniger als 3 Sternen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.restaurant.thai_cafe ) )"
        },
        "question": {
            "en": "what is a neighborhood that doesnt have a thai cafe",
            "zh": "哪个 小区 没有 泰国 咖啡馆 ？",
            "de": "Was ist ein Viertel, in dem es kein Thai-Café gibt?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the two cuisine restaurant",
            "zh": "哪个 餐馆 提供 两种 菜系 。",
            "de": "Welches ist das Restaurant, das zwei verschiedene Küchen anbietet?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )"
        },
        "question": {
            "en": "restaurant that has the smallest star rating",
            "zh": "评论 星 最低 的 餐馆",
            "de": "Restaurant mit der niedrigsten Sternebewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string waiter ) ) )"
        },
        "question": {
            "en": "what restaurant in midtown west has waiter service",
            "zh": "哪家 在 中西部 的 餐馆 有 服务员 ？",
            "de": "Welches Restaurant in Midtown West hat Kellnerservice?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "restaurants with 2 price rating",
            "zh": "价格 评分 是 二 的 餐馆 。",
            "de": "Restaurant mit einem Preisrating von 2"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )"
        },
        "question": {
            "en": "what kind of meals do thai restaurants serve",
            "zh": "泰国 餐馆 供应 什么样 的 饭菜",
            "de": "Welche Art von Gerichten servieren Thai Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "whats a restaurant with waiter service thats good for groups",
            "zh": "哪 一家 有 服务员 的 餐厅 适合 团队 聚餐 ？",
            "de": "Welches Restaurant mit Kellnerservice ist für Gruppen geeignet?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "restaurants with waiters that have a price rating of 2 dollar signs",
            "zh": "有 好 服务 的 第二 等级 的 价钱 的 餐馆",
            "de": "Restaurants mit Bedienungsservice die ein Pricerating von 2 Dollar haben"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "what restaurant offers delivery and waiter service",
            "zh": "什么 餐厅 提供 送货 和 服务员 服务",
            "de": "Welches Restaurant bietet Liefer- und Kellnerservice?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )"
        },
        "question": {
            "en": "restaurants in midtown west or chelsea",
            "zh": "位于 市中心 西部 或 切尔西 的 餐馆",
            "de": "Restaurants in Midtown West oder Chelsea"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ) )"
        },
        "question": {
            "en": "what meal can you pay for with credit cards",
            "zh": "你 可以 用 信用卡 支付 什么 餐",
            "de": "Welche Gerichte kann man mit Kreditkarte bezahlen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurant whose price rating is 2 dollar signs and that serves lunch",
            "zh": "提供 午餐 和 有 第二 等级 的 价钱 的 餐馆",
            "de": "Restaurant, dessen Preisklasse 2-Dollar-Zeichen ist und das Mittagessen serviert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )"
        },
        "question": {
            "en": "where is a thai cafe",
            "zh": "去 哪里找 一家 泰国 咖啡店 ？",
            "de": "Wo ist ein thailändisches Café?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "which restaurants deliver",
            "zh": "哪些 饭馆 送 外卖 ？",
            "de": "welche Restaurants liefern"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string waiter ) ) )"
        },
        "question": {
            "en": "restaurant that serves lunch and that has waiter service",
            "zh": "提供 午餐 并且 有 服务员 服务 的 餐馆",
            "de": "Restaurant, das Mittagessen serviert und Kellner-Service hat"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "family friendly restaurants that take reservations",
            "zh": "接受 预定 并且 适合 家庭 就餐 的 餐馆",
            "de": "Familienfreundliche Restaurants, die Reservierungen annehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ) )"
        },
        "question": {
            "en": "restaurants with waiter service in the neighborhood",
            "zh": "在 社区 内 提供 服务员 服务 的 餐馆",
            "de": "Restaurants mit Kellner Service in der Nachbarschaft"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurants with lunch and outdoor seating",
            "zh": "提供 午餐 和 户外 座位 的 餐馆",
            "de": "Restaurants mit Mittagessen und Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "what restaurant offers lunch and an outdoor seating",
            "zh": "哪个 餐馆 提供 午餐 和 户外 座位",
            "de": "Welches Restaurant bietet Mittagessen und Sitzgelegenheiten im Freien"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )"
        },
        "question": {
            "en": "restaurant whose price rating is smallest",
            "zh": "价格 最 便宜 的 餐馆",
            "de": "Restaurant, dessen Preisbewertung am niedrigsten ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurant that is good for kids and that has outdoor seating",
            "zh": "适合 孩子 并且 有 户外 座位 的 餐馆",
            "de": "Restaurant welches für Kinder geeignet ist und Sitzmöglichkeiten im Freien bietet-"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurant that serves at least two meal",
            "zh": "提供 至少 两餐 的 餐馆",
            "de": "Restaurant, das mindestens zwei Mahlzeiten serviert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string kids ) ) )"
        },
        "question": {
            "en": "restaurant that is good for kids and that is good for kids",
            "zh": "适合 孩子 和 适合 孩子 的 餐馆 。",
            "de": "Restaurant, das gut für Kinder ist und das gut für Kinder ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "which restaurants deliver and have waiters",
            "zh": "哪些 餐馆 有 送餐 服务 并且 有 服务生 ？",
            "de": "Welche Restaurants liefern und haben Kellner"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "what restaurant has outdoor seating and delivery",
            "zh": "哪个 餐馆 有 室外 就餐 环境 并且 提供 送餐 服务 ？",
            "de": "welches Restaurant hat Aussensitzplätze und liefert"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ) )"
        },
        "question": {
            "en": "cuisine that is cuisine of restaurant that has takeout",
            "zh": "外卖 的 餐厅 的 美食",
            "de": "Küche, die Küche eines Restaurants, das einen Mitnahmedienst hat"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )"
        },
        "question": {
            "en": "restaurants pricier than thai cafe",
            "zh": "比 泰国菜 还贵 的 餐馆 。",
            "de": "Restaurants teurer als das Thai Cafe"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "what thai restaurants have waiters",
            "zh": "哪些 泰国 餐馆 有 服务生 ？",
            "de": "Welche thailändischen Restaurants haben Kellner?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "what 3 star restaurant offers takeout",
            "zh": "哪个 三星 餐馆 提供 外卖 服务 ？",
            "de": "Welches 3-Sterne-Restaurant bietet Mitnahme an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string outdoor ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurants that have outdoor seating and is good for groups",
            "zh": "适合 多人 就餐 ， 并且 有 室外 座位 的 餐馆 。",
            "de": "Restaurants mit Sitzgelegenheiten im Freien, die für Gruppen geeignet sind"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "what midtown west restaurants takes credit cards",
            "zh": "哪些 在 中城 西部 的 餐馆 收 信用卡 ？",
            "de": "In welchen Restaurants in Midtown West werden Kreditkarten akzeptiert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )"
        },
        "question": {
            "en": "restaurants which have the same star rating or better of thai cafe",
            "zh": "跟 泰国 餐馆 有着 一样 星级 评分 或者 更好 评分 的 餐馆 。",
            "de": "Restaurants, welche dieselbe oder eine bessere Sternebewertung haben als das Thai Café"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )"
        },
        "question": {
            "en": "restaurant rated 1 dollar",
            "zh": "有 一个 美金 符号 的 餐馆 。",
            "de": "Restaurant mit einer Bewertung von 1 Dollar-Zeichen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what restaurant has the smallest menu",
            "zh": "哪个 餐馆 拥有 最少 菜肴 的 菜单 ？",
            "de": "Welches Restaurant hat das kleinste Menü"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string delivery ) ) )"
        },
        "question": {
            "en": "which restaurants offer delivery and takeout",
            "zh": "哪些 餐厅 提供 送货 和 外卖",
            "de": "Welche Restaurants bieten einen Lieferservice und Mitnahme an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string min ) ( string cuisine ) ) )"
        },
        "question": {
            "en": "which restaurants offer the least types of cuisines",
            "zh": "哪些 饭馆 提供 最少 种类 的 风味 ？",
            "de": "Welches Restaurant bietet die wenigsten ausländischen Küchen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "which restaurants arent a 3 star rating",
            "zh": "哪些 饭馆 不是 三星级 的 ？",
            "de": "Welche Restaurants haben keine 3-Sterne-Bewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "which restaurants accept credit cards and has a rating of 2 dollar signs",
            "zh": "哪些 饭馆 接受 信用卡 且 有 一个 两 美元 价档 招牌 ？",
            "de": "Welche Restaurants akzeptieren Kreditkarten und haben eine Bewertung von 2 Dollarzeichen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( string min ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what kind of meal has the smallest number of restaurants that serve it",
            "zh": "什么 菜 很少 饭馆 有 ？",
            "de": "Welches Gericht wird am wenigsten von allen Restaurants serviert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( string min ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what kind of cuisine has the smallest amount of restaurants",
            "zh": "哪个 风味 没有 几个 饭馆 有 ？",
            "de": "Welche ausländische Küche wird am wenigsten von allen Restaurants angeboten?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ) )"
        },
        "question": {
            "en": "what meals do delivery restaurants serve",
            "zh": "外卖 的 餐馆 都 提供 什么样 的 菜 ？",
            "de": "Welche Mahlzeiten werden in Lieferrestaurants serviert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many different cuisines are there to chose from",
            "zh": "有 多少 种 菜系 可以 选择 ？",
            "de": "wie viele verschiedene küchen gibt es zur auswahl"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.cuisine.thai en.cuisine.italian ) )"
        },
        "question": {
            "en": "restaurants serving thai or italian food",
            "zh": "提供 泰国菜 或 意大利 菜 的 餐厅",
            "de": "Restaurants mit thailändischer oder italienischer Küche"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "thai restaurants",
            "zh": "泰式 餐厅",
            "de": "Thailändische Restaurants"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )"
        },
        "question": {
            "en": "what is the neighborhood of the 3 star rated restaurant",
            "zh": "哪些 小区 有 三星 餐厅 ？",
            "de": "In welchem Bezirk liegt das Restaurant mit einer Bewertung von 3 Sternen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what meal do two or more restaurants serve",
            "zh": "哪些 菜 有 两家 以上 餐厅 提供 ？",
            "de": "welche Mahlzeiten werden in zwei oder mehr Restaurants serviert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )"
        },
        "question": {
            "en": "restaurants whose price rating is 1 dollar sign",
            "zh": "价格 为 1 美元 符号 的 餐厅",
            "de": "Restaurants, deren Preisbewertung 1 Dollar Zeichen ist."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "find restaurant with 2 dollar price rating that serves lunch",
            "zh": "查找 价格 是 两个 美金 符号 的 餐厅 并且 提供 午餐 的 餐厅",
            "de": "Finde Restaurants mit einer Bewertung von 2 Dollarzeichen, die Mittagessen servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string takeout ) ) )"
        },
        "question": {
            "en": "restaurants that offer takeout and delivery",
            "zh": "提供 外卖 和 送货 的 餐厅",
            "de": "Welche Restaurants bieten Abholung und Lieferung an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "cuisine that is cuisine of at least two restaurant",
            "zh": "这是 至少 两家 餐厅 的 美食",
            "de": "Welche Küche gibt es in mindestens zwei Restaurants?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "restaurants that are near a neighborhoood",
            "zh": "在 一个 社区 附近 的 餐厅",
            "de": "Restaurants die in der Gegend sind"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "restaurant that is good for groups and whose neighborhood is midtown west",
            "zh": "适合 团体 用餐 并且 在 中西区 的 餐厅",
            "de": "Ein Restaurant, das gut für Gruppen geeignet ist und in der Nähe von Midtown West liegt"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string min ) ( string cuisine ) ) )"
        },
        "question": {
            "en": "what restaurants serve a single type of cuisine",
            "zh": "哪些 餐厅 提供 单一 类型 的 美食 ？",
            "de": "Welche Restaurants servieren eine einzige Art von Küche"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string delivery ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "what restaurants have waiter service and delivery",
            "zh": "那 几家 饭店 有 侍应生 还 可以 送餐 ？",
            "de": "Welche Restaurants haben einen Kellner und liefern auch?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )"
        },
        "question": {
            "en": "restaurants located in midtown west that also serve lunch",
            "zh": "在 中城 西面 并且 提供 午餐 的 餐馆 。",
            "de": "Restaurants in Midtown West, die auch Mittagessen anbieten"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string waiter ) ) )"
        },
        "question": {
            "en": "restaurants that have wait service and serve lunch",
            "zh": "提供 服务生 服务 ， 并且 提供 午餐 的 餐馆 。",
            "de": "Restaurants mit Kellner, die auch Mittagessen servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "which restaurants has outdoor seating and a 3star rating",
            "zh": "哪些 餐厅 有 户外 座位 和 三星 评级 ？",
            "de": "Welches Restaurant hat Sitzgelegenheiten im Freien und eine 3-Sterne-Bewertung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "restaurant that has 3 stars rating",
            "zh": "有 三星 评分 的 餐馆 。",
            "de": "Restaurants mit einer Bewertung von 3 Sternen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what cuisine is served at two or less restaurants",
            "zh": "哪些 菜系 被 两个 或者 以内 的 餐馆 提供 ？",
            "de": "Welche Küche wird in zwei oder weniger Restaurants serviert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "which restaurants have price ratings of two dollar signs and star ratings of three stars",
            "zh": "哪些 餐厅 有 两个 美元 符号 的 价格 和 三星级 的 星级 评级",
            "de": "welche Restaurants haben eine Preisbewertung von 2 Dollarzeichen und eine Bewertung von drei Sternen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what restaurant is found in two neighborhoods",
            "zh": "在 两个 街区 找到 什么 餐厅 ？",
            "de": "Welche Restaurants gibt es in zwei Wohngegenden?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ) ) )"
        },
        "question": {
            "en": "what are the star ratings of this restaurant",
            "zh": "这家 餐厅 的 星级 评分 是 多少 ？",
            "de": "Was hat dieses Restaurants für eine Sternebewertung?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string takeout ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "which restaurant has both takeout and outdoor seating",
            "zh": "哪个 餐馆 有 外卖 并且 有 室外 就餐 环境 ？",
            "de": "Welches Restaurant bietet sowohl Mitnahme als auch einen Außensitzbereich an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ( call SW.reverse ( string meals ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is a meal that 2 or less restaurants serve",
            "zh": "哪 种 食品 只有 两个 或 两个 以下 的 餐馆 提供 ？",
            "de": "Was ist eine Mahlzeit, die 2 oder weniger Restaurants servieren"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string waiter ) ) ( string reserve ) ) )"
        },
        "question": {
            "en": "restaurants that have waiters and take reservations",
            "zh": "有 服务员 并 预订 的 餐厅",
            "de": "Restaurants, die Kellner haben und Reservierungen annehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ( string waiter ) ) )"
        },
        "question": {
            "en": "kid friendly restaurant with waiter service",
            "zh": "有 服务生 并且 适合 孩子 就餐 的 餐馆 。",
            "de": "kinderfreundliches Restaurant mit Bedienung"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )"
        },
        "question": {
            "en": "restaurants rated 35 stars",
            "zh": "星级 评分 35 的 餐馆 。",
            "de": "Welche Restaurants haben eine Sternebewertung von 35?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "which hotel has a price rating of 2 dollar signs and is good for group dining",
            "zh": "哪个 酒店 有 两个 美元 符号 的 价格 评价 并且 适合 多人 用餐 ？",
            "de": "Welches Hotel hat ein Preisrating von 2 Dollarzeichen und ist gut für Gruppenabendessen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )"
        },
        "question": {
            "en": "restaurant with a 2 dollar signs rating that welcomes groups",
            "zh": "适合 多人 就餐 ， 并且 有 两个 美金 符号 的 餐馆 。",
            "de": "Welches Restaurant das eine 2 Dollarzeichen Bewertung hat heißt Gruppen willkommen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.food ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many meals are served",
            "zh": "提供 多少 份 食物 ？",
            "de": "Wie viele Gerichte werden serviert?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string groups ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "which restaurants are good for groups",
            "zh": "哪些 餐馆 适合 多人 用餐 ？",
            "de": "Welche Restaurants eignen sich gut für Gruppen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )"
        },
        "question": {
            "en": "what restaurant has better star ratings than thai cafe",
            "zh": "哪个 餐馆 比 泰国 咖啡馆 有 更好 的 星级 评价 ？",
            "de": "Welches Restaurant hat eine bessere Sternebewertung als das thai cafe?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "restaurants that take reservations with outdoor seating",
            "zh": "可以 接受 预定 而且 有 室外 座位 的 餐馆",
            "de": "Restaurants die einen Außenbereich haben und Reservierungen vornehmen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) )"
        },
        "question": {
            "en": "where is the thai cafe and the pizzeria juno",
            "zh": "泰国 咖啡馆 和 比萨 店 juno 在 哪里",
            "de": "wo ist das Thai Cafe und die Pizzeria Juno"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "list all restaurants that are not thai",
            "zh": "列出 所有 非 泰式 餐馆",
            "de": "Liste alle Restaurants auf welche keine thailändischen Restaurants sind."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ( string outdoor ) ) )"
        },
        "question": {
            "en": "what restaurant has outdoor seating and takes reservations",
            "zh": "哪些 餐厅 有 户外 座位 并且 接受 预约",
            "de": "welches Restaurant hat Außenbestuhlung und nimmt Reservierungen an?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )"
        },
        "question": {
            "en": "list all of the thai restaurant in midtown west",
            "zh": "列出 西部 市中心 的 所有 泰国 餐厅",
            "de": "liste alle thailändischen Restaurants in Midtown West auf."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )"
        },
        "question": {
            "en": "a restaurant with a better star rating than thai cafe",
            "zh": "一家 比 泰国 咖啡馆 有 更好 星级 的 餐厅",
            "de": "ein restaurant mit einer besseren sternebewertung als das thailändische cafe"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.food.lunch en.food.dinner ) )"
        },
        "question": {
            "en": "what restaurant has lunch or dinner",
            "zh": "哪个 餐厅 有 午餐 或 晚餐 ？",
            "de": "welches Restaurant bietet Mittagessen oder Abendessen"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string !type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string kids ) ) ) )"
        },
        "question": {
            "en": "cuisine that is cuisine of restaurant that is good for kids",
            "zh": "對兒童 有益 的 餐廳 美食",
            "de": "Küche, die die Küche eines kinderfreundlichen Restaurants ist"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string credit ) ) )"
        },
        "question": {
            "en": "restaurant whose star rating is 3 stars and that takes credit cards",
            "zh": "星级 评分 是 3 星 并且 接受 信用卡 的 餐厅",
            "de": "Restaurant, dessen Sternenbewertung 3 Sterne beträgt und das Kreditkarten akzeptiert."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string reserve ) ) ) )"
        },
        "question": {
            "en": "what neighborhoods have restaurants which take reservations",
            "zh": "哪些 社区 里 有 接受 预定 的 餐馆",
            "de": "Welche Viertel haben Restaurants welche Reservierungen entgegennehmen?"
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )"
        },
        "question": {
            "en": "restaurant whose price rating is 2 dollars and that is good for groups",
            "zh": "两个 美元 符号 价格 且 适合 团体 用餐 的 餐厅 ，",
            "de": "Ein Restaurant, dessen Preisbewertung 2 Dollar beträgt und das für Gruppen geeignet ist."
        }
    },
    {
        "domain": "restaurants",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string !type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )"
        },
        "question": {
            "en": "restaurant whose star rating is not 3 stars",
            "zh": "星级 评定 不是 3 星级 的 餐厅",
            "de": "Restaurant, dessen Sternebewertung nicht drei Sterne beträgt"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "show me all recipes from 2004",
            "zh": "告诉 我 2004 年 的 所有 食谱",
            "de": "Zeig mir alle Rezepte aus 2004"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "show me recipes not for lunch",
            "zh": "给 我 看 非 午餐 食谱",
            "de": "zeige mir Rezepte, die nicht zum Mittagessen passen."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "on average how long does the recipe take to cook",
            "zh": "这个 菜谱 大约 需要 多少 时间 烹饪",
            "de": "Wie lange dauert das Rezept durchschnittlich zum Kochen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipe has a lesser preparation time than that of rice pudding",
            "zh": "哪 种 食谱 的 准备 时间 比 米饭 布丁 少",
            "de": "Welches Rezept hat eine schnellere Vorbereitungszeit als Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "which recipe that uses milk for its preparation was posted in 2004",
            "zh": "哪 一个 在 2004 年 发布 的 菜谱 使用 牛奶 做 准备 ？",
            "de": "Welches Rezept, das Milch für die Zubereitung verwendet, wurde im Jahr 2004 veröffentlicht"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "on average how long is the prep time of the recipe",
            "zh": "平均 而言 ， 食谱 的 准备 时间 有 多长",
            "de": "Wie lange ist die durchschnittliche Vorbereitungszeit für dieses Rezept?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipes are for two or more meals",
            "zh": "什么 菜谱 是 提供 两顿 或者 更 多 的 餐点 ？",
            "de": "Welche Rezepte eigenen sich für Zwei oder mehr Mshlzeiten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me total number of meals",
            "zh": "给 我 看 总共 有 几道菜",
            "de": "Zeig mir die Gesamtzahl der Mahlzeiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe takes longer to prep than rice pudding takes to cook",
            "zh": "哪个 菜谱 的 准备 时间 比做 米饭 布丁 的 时间 还要 长 ？",
            "de": "Welches Rezept hat eine längere Vorbereitungszeit als die Kochzeit von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "which recipes prep time is the same as the cook time of rice pudding",
            "zh": "哪些 菜谱 的 准备 时间 和 做 米饭 布丁 的 时间 一样 长 ？",
            "de": "Welches Rezept benötigt die gleiche Zeit an Vorbereitung wie die Kochzeit von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe requires no more cooking time than rice pudding",
            "zh": "什么 食谱 不 需要 比 米饭 布丁 更 多 的 烹饪 时间",
            "de": "Welches Rezept erfordert nicht mehr Kochzeit als Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )"
        },
        "question": {
            "en": "what is the preparation time of rice pudding",
            "zh": "米 布丁 的 准备 时间 是 多长 ？",
            "de": "Was ist die Vorbereitungszeit von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipes serve more than two meals",
            "zh": "哪 一道 菜谱 可以 提供 多于 两份 的 餐点 ？",
            "de": "Welche Rezepte reichen für mehr als zwei Mahlzeiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "recipe need two ingredients",
            "zh": "需要 两种 食材 的 食谱",
            "de": "Rezept das 2 Zutaten benötigt"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe is designed for the most number of meals",
            "zh": "什么 是 为 最 多数 目的 餐点 设计 的 菜谱 ？",
            "de": "Welches Rezept ist für die meisten Mahlzeiten ausgelegt?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "a recipe which posted either in 2004 or 2010",
            "zh": "一个 在 2004 年 或 2010 年 发布 的 食谱",
            "de": "Ein Rezept, das entweder in 2004 oder 2010 veröffentlicht wurde"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )"
        },
        "question": {
            "en": "what recipe calls for the same ingredients as rice pudding",
            "zh": "什么 菜谱 需要 和 米 布丁 同样 的 食材 ？",
            "de": "Welches Rezept braucht die gleichen Zutaten wie Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes with preparation time less than cooking time for rice pudding",
            "zh": "给 我 看 准备 时间 要 比米 布丁 的 制作 时间 少 的 菜谱",
            "de": "Zeig mir Rezepte bei denen die Vorbereitungszeit kürzer als die Kochzeit von Reispudding ist"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "show me all recipes require milk",
            "zh": "给 我 看 所有 需要 牛奶 的 菜谱",
            "de": "Zeig mir alle Rezepte die Milch benötigen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "what recipe has the least posting date",
            "zh": "什么 食谱 的 发布 日期 最少",
            "de": "Was ist das neueste Rezept"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what meal has the least recipes available",
            "zh": "哪个 餐种 有 最少 的 食谱 ？",
            "de": "Welches Gericht hat die wenigsten verfügbaren Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "show me recipes for more than two cuisines",
            "zh": "给 我 看 两种 以上 菜肴 的 食谱",
            "de": "Zeig mir Rezepte für mehr als 2 Küchen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "recipe with largest posting date",
            "zh": "最 晚 发布 的 食谱",
            "de": "Was ist das neueste Rezept"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes that could be used for one or two meals",
            "zh": "告诉 我 可以 用于 一餐 或 两餐 的 食谱",
            "de": "Zeige mir Rezepte, die für ein oder zwei Mahlzeiten benutzt werden können"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipes are for less than two meals",
            "zh": "哪些 食谱 不到 两餐",
            "de": "Welche Rezepte sind für weniger als zwei Mahlzeiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "show me recipes posted in 2004 or in 2010",
            "zh": "告诉 我 2004 年 或 2010 年 发布 的 食谱",
            "de": "Zeige mir Rezepte die 2004 oder 2010 veröffentlicht wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "which recipe has milk as its ingredient for lunch",
            "zh": "哪个 食谱 的 午餐 食材 中 有 牛奶",
            "de": "Welches Rezept hat Milch als Zutat für ein Mittagessen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )"
        },
        "question": {
            "en": "what meal has a recipe requiring milk",
            "zh": "哪 一餐 的 食谱 中 需要 牛奶",
            "de": "Welche Mahlzeit hat ein Rezept, das Milch erfordert"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes with preparation time equal to or less than cooking time for rice pudding",
            "zh": "举出 准备 时间 等于 或 小于 米 布丁 烹饪 时间 的 食谱",
            "de": "Zeige mir Rezepte mit Vorbereitungszeit, die genauso lang oder kürzer als die Kochzeit von Milchreis sind"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which recipes has more than two cuisines",
            "zh": "哪些 食谱 有 两种 以上 的 美食",
            "de": "Welche Rezepte haben mehr als Zwei Küchen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string cuisine ) ) )"
        },
        "question": {
            "en": "what recipe has the most cuisine",
            "zh": "有 最 多 菜肴 的 菜谱 是 什么 ？",
            "de": "Welches Rezept kann auf die meisten verschiedenen Küchenarten zubereitet werden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "what recipes posting date is the same as rice pudding",
            "zh": "什么 食谱 发布 日期 与 米饭 布丁 相同",
            "de": "Welche Rezepte haben das gleiche Postingdatum wie Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( string cuisine ) ) )"
        },
        "question": {
            "en": "show me recipes for the fewest cuisines",
            "zh": "有 最少 菜肴 的 菜谱 是 什么 ？",
            "de": "zeig mir rezepte für die wenigsten küchen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what recipe has no greater than two cuisines",
            "zh": "什么 食谱 不 超过 两种 美食",
            "de": "Welches Rezept kann höchstens auf zwei verschiedene Küchenarten zubereitet werden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "show me recipes with the most cooking time",
            "zh": "给 我 看看 烹饪 时间 最长 的 食谱",
            "de": "Zeig mir Rezepte mit der längsten Kochzeit"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )"
        },
        "question": {
            "en": "show me recipes that require milk or spinach",
            "zh": "告诉 我 需要 牛奶 或 菠菜 的 食谱",
            "de": "Zeige mir Rezepte, die Milch oder Spinat benötigen."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "show the recipes with smallest preparation time",
            "zh": "显示 准备 时间 最短 的 食谱",
            "de": "Zeig mir rezepte mit der kürzesten Vorbereitungszeit"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "recipes posted in 2004 that require milk",
            "zh": "2004 年 发布 的 需要 牛奶 的 食谱",
            "de": "Rezepte die 2004 gepostet wurden und Milch benötigen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes with cooking times shorter than cooking time of rice pudding",
            "zh": "给 我 看 烹饪 时间 比米 布丁 短 的 菜谱",
            "de": "zeig mir Rezepte mit einer kürzeren Kochzeit als Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "what recipe was posted after the date rice pudding",
            "zh": "哪些 食谱 是 发表 在 米 布丁 之后 的",
            "de": "Welches Rezept wurde nach Milchreis veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which recipe belongs to more than two cuisines",
            "zh": "哪 种 食谱 属于 两种 以上 的 菜系",
            "de": "Welches Rezept gehört zu mehr als zwei Küchen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "what recipe takes the same time to cook as rice pudding takes to prep",
            "zh": "哪个 食谱 需要 和 米 布丁 一样 的 烹饪 时间 去 准备",
            "de": "Welches Rezept braucht die gleiche Zeit zum Kochen wie Milchreis zum Zubereiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes for meals for two",
            "zh": "给 我 看 给 两个 人 的 餐食 的 菜谱",
            "de": "Zeige mir Rezepte für Gerichte für zwei Personen."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )"
        },
        "question": {
            "en": "what meal did that recipe I used for lunch go with",
            "zh": "我 用作 午餐 的 菜谱 和 什么 餐食 搭配 ？",
            "de": "Zu welcher Mahlzeit gehört das Rezept welche ich für's Mittagessen genutzt habe?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )"
        },
        "question": {
            "en": "what recipe makes the same type of cuisine as rice pudding",
            "zh": "什么 菜谱 能 做出 和 米 布丁 同 类型 的 菜式 ？",
            "de": "welches Rezept kommt aus derselben Küche wie Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipes take at most as long to cook as rice pudding",
            "zh": "哪个 菜谱 用时 最 多 和 制作 米 布丁 的 时间 一样 长 ？",
            "de": "Welche Rezepte brauchen höchstens solange wie Milchreis zum kochen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "what recipe is fastest prepared",
            "zh": "哪个 菜谱 准备 得 最快 ？",
            "de": "Welches Rezept bereitet man am schnellsten vor?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which ingredient is used for at most two recipes",
            "zh": "哪个 食材 最 多 被 用 在 两个 菜谱 里 ？",
            "de": "welche Zutat wird für höchstens zwei Rezepte verwendet"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipes take longer to cook than rice pudding does to prepare",
            "zh": "哪些 菜谱 需要 比 准备 米饭 布丁 还 长来 做 ？",
            "de": "welches Rezept benötigt längere Kochzeit als die Zubereitung von Reispudding benötigt"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "what recipes are for lunch",
            "zh": "哪些 食谱 是 适于 午餐 的",
            "de": "Welche Rezepte eigenen sich für Mittagessen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is an ingredient found in the fewest recipes",
            "zh": "哪 种 材料 是 在 最少 数量 的 食谱 里 用到 的 ？",
            "de": "Welche Zutat benötigt man in den wenigsten Rezepten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )"
        },
        "question": {
            "en": "what ingredient is called for in the same recipe as milk",
            "zh": "在 与 牛奶 相同 的 配方 中 需要 什么 成分",
            "de": "Welche Zutat braucht man im gleichen Rezept wie Milch?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what meal has the most recipes for it",
            "zh": "什么 餐有 最 多 的 食谱",
            "de": "welche Mahlzeit hat die meisten Rezepte"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe is for more than two meals",
            "zh": "什么 食谱 是 可以 做 两种 以上 餐种 的 ？",
            "de": "Welches Rezept eignet sich für mehr als Zwei Mahlzeiten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "which recipe needs the shortest cooking time",
            "zh": "哪 种 食谱 的 烹饪 时间 最短 ？",
            "de": "welches Rezept hat die kürzeste Kochzeit"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "the recipe posting date is 2004",
            "zh": "食谱 的 发布 日期 是 2004",
            "de": "das Rezept wurde 2004 gepostet"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "a recipe which posted after 2004",
            "zh": "2004 年 以后 发布 的 一个 食谱",
            "de": "Ein Rezept welches nach 2004 veröffentlicht wurde"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipes take less time to cook than rice pudding",
            "zh": "那种 食谱 的 烹饪 时间 是 比米 布丁 短 的 ？",
            "de": "Welche Rezepte brauchen weniger Zeit zum Kochen als Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "what is the total prep time of the recipe",
            "zh": "这个 菜谱 的 总共 准备 时间 是 多少 ？",
            "de": "Was ist die gesamte Vorbereitungszeit für das Rezept?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )"
        },
        "question": {
            "en": "what is a recipe for a meal with rice pudding",
            "zh": "一份 包括 米 布丁 的 食谱 是 什么样 的",
            "de": "Was ist ein Rezept für eine Mahlzeit mit Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes with a preparation time that is longer than rice puddings cooking time",
            "zh": "展示 给 我 准备 时间 比米 布丁 长 的 食谱",
            "de": "Zeigen Sie mir Rezepte mit einer Vorbereitungszeit, die länger ist als die Kochzeit von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "what recipe can be prepped in the same time as rice pudding can be cooked",
            "zh": "哪个 菜谱 有 像 做 米饭 布丁 一样 的 准备 时间 ？",
            "de": "welches Rezept kann in der gleichen Zeit vorbereitet werden, in der Milchreis gekocht werden kann?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "recipes posted after posting rice pudding recipe",
            "zh": "发布 米饭 布丁 配方 后 发布 的 食谱",
            "de": "Rezepte die nach dem Reispudding Rezept gepostet wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "which recipe requires the longest cooking time",
            "zh": "哪 种 食谱 需要 最长 的 烹饪 时间",
            "de": "Welches Rezept benötigt die längste Kochzeit?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )"
        },
        "question": {
            "en": "find me all recipes requires milk or spinach",
            "zh": "帮 我 找到 所有 需要 牛奶 或者 菠菜 的 食谱",
            "de": "Such mir alle Rezepte die Milch oder Spinat benötigen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipes cooking time is at most that of rice puddings preparation time",
            "zh": "哪些 食谱 的 烹饪 时间 最多 和 米 布丁 一样 长",
            "de": "Welches Rezept braucht höchstens solange zum kochen wie Milchreis zum vorbereiten braucht"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "what is the average cooking time of this recipe",
            "zh": "这个 食谱 的 平均 烹饪 时间 是 多少",
            "de": "Was ist die durchschnittliche Kochzeit von diesem Rezept?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )"
        },
        "question": {
            "en": "what recipes have a common ingredient in rice pudding",
            "zh": "什么 食谱 在 米饭 布丁 中有 一个 共同 的 成分",
            "de": "Welche Rezepte haben eine herkömmliche Zutat in Reispudding?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "recipe with posting date same as rice pudding",
            "zh": "和 米 布丁 同时 发布 的 食谱",
            "de": "Welches Rezept wurde am gleichen Tag veröffentlicht wie Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "which recipe posted in 2004 requires milk",
            "zh": "哪个 在 2004 推出 的 菜谱 需要 牛奶 ？",
            "de": "Welches Rezept, das 2004 veröffentlicht wurde, benötigt Milch?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes with preparation time less than rice pudding",
            "zh": "给 我 看 一下 准备 时间 比 米饭 布丁 短 的 菜谱 吧 ？",
            "de": "Zeig mir Rezepte mit kürzerer Vorbereitungszeit als Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )"
        },
        "question": {
            "en": "what cuisine is rice pudding",
            "zh": "米饭 布丁 是 属于 什么 风味 ？",
            "de": "Zu welcher Küche gehört Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "what recipe calling for milk makes something for lunch",
            "zh": "什么 食谱 要求 牛奶 做 一些 午餐",
            "de": "Welches Rezept das Milch benötigt eignet sich als Mittagessen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe has a prep time at least as long as the cooking time of rice pudding",
            "zh": "哪个 菜谱 的 准备 时间 至少 和 米饭 布丁 的 制作 时间 一样 长 ？",
            "de": "Welches Rezept hat eine Vorbereitungszeit mindestens so lange wie die Kochzeit von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "what recipe posted before 2004 or 2010",
            "zh": "哪个 菜谱 在 2004 或 2019 之前 推出 的 ？",
            "de": "welches Rezept wurde vor 2004 oder 2010 gepostet"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what meal has more than two recipes for it",
            "zh": "哪 道菜 可用 多于 两个 菜谱 来 做 ？",
            "de": "Für welches Gericht gibt es mehr als zwei Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what is the meal of a recipe posted in 2004",
            "zh": "2004 推出 的 菜谱 的 那 道菜 是 什么 ？",
            "de": "Welches Rezept eines Gerichts kam 2004 heraus?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "what recipe has the longest preparation time",
            "zh": "哪个 菜谱 有 最长 的 准备 时间 ？",
            "de": "Welches Rezept hat die längste Vorbereitungszeit"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which meal has the most number of recipes",
            "zh": "哪 道菜 有 最 多 的 菜谱 做法 ？",
            "de": "Für welches Gericht gibt es die meisten Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe is for a dish that takes longer to cook than does rice pudding",
            "zh": "什么 配方 是 一道 比 米饭 布丁 煮 的 时间 更长 的 菜",
            "de": "Was für ein Rezept für ein Gericht, dessen Zubereitung länger dauert als die von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many recipes are there",
            "zh": "那里 有 多少 个 菜谱 ？",
            "de": "wie viele Rezepte gibt es"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "recipe of one cuisine",
            "zh": "一道 菜 的 食谱",
            "de": "Rezept von einer Kochkunst."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which ingredients are used in more than two recipes",
            "zh": "哪些 食材 是 被 两种 以上 的 食谱 用到 的 ？",
            "de": "Welche Zutaten werden in mehr als zwei Rezepten benötigt?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )"
        },
        "question": {
            "en": "which meal recipe requires milk for preparation",
            "zh": "哪 一份 膳食 菜谱 需要 用 牛奶 来 准备",
            "de": "Welches Rezept benötigt Milch zur Zubereitung?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )"
        },
        "question": {
            "en": "in which meal rice pudding cannot be used as part",
            "zh": "在 哪 顿饭 里 不能 用米 布丁 作为 它 的 一部分 ？",
            "de": "In welcher Mahlzeit wird Milchreis nicht verwendet?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string cuisine ) ) )"
        },
        "question": {
            "en": "which recipe is found in many cuisines",
            "zh": "哪 一份 菜谱 是 在 许多 菜式 中 都 找到 的",
            "de": "Welches Rezept gibt es in vielen Küchen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes with longer preparation times than rice pudding",
            "zh": "给 我 看 那些 准备 时间 比米 布丁 长 的 菜谱",
            "de": "Zeige mir Rezepte mit einer längeren Zubereitungszeit als die von Reispudding."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes that take longer to cook than rice pudding",
            "zh": "给 我 看 那些 烹饪 时间 比米 布丁 长 的 菜谱",
            "de": "Zeig mir Rezepte, die länger zum Kochen brauchen als Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )"
        },
        "question": {
            "en": "what meal is the rice pudding recipe",
            "zh": "米 布丁 菜谱 是 为 哪 一餐 而设 的",
            "de": "Was für eine Mahlzeit ist das Milchreis-Rezept"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "what recipe has the longest cooking time",
            "zh": "哪个 菜谱 烹饪 时间 最长 ？",
            "de": "welches Rezept hat die längste Kochzeit"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )"
        },
        "question": {
            "en": "what recipe can be used for a lunch or dinner meal",
            "zh": "什么 食谱 可以 用于 午餐 或 晚餐",
            "de": "Welches Rezept kann für ein Mittag- oder Abendessen verwendet werden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "what recipes posting date is in 2004 and requires milk",
            "zh": "哪些 菜谱 的 推出 日 是 在 2004 且 需要 牛奶 ？",
            "de": "Welche Rezepte wurden 2004 eingestellt und benötigen Milch?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find a recipe for a small meal",
            "zh": "找 一份 轻食 的 食谱",
            "de": "suche ein Rezept für eine kleine Mahlzeit"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "recipe cooked in preparation time of rice pudding or less",
            "zh": "烹饪 时间 跟 米 布丁 的 准备 时间 一样 或 更 短 的 食谱",
            "de": "Rezept, das in der Zubereitungszeit von Milchreis oder weniger gekocht wird."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "which recipes were not posted in 2004",
            "zh": "哪些 菜谱 不是 在 2004 推出 的 ？",
            "de": "Welche Rezepte wurden nicht 2004 veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what ingredient is called for in two recipes",
            "zh": "哪种 食材 被 用于 两个 食谱",
            "de": "Welche Zutaten braucht man in zwei Rezepten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "which recipe does not need milk",
            "zh": "哪份 食谱 不 需要 牛奶 ？",
            "de": "Welches Rezept braucht keine Milch"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "recipe with more preparation time than rice pudding",
            "zh": "准备 时间 比米 布丁 长 的 食谱 。",
            "de": "Rezept mit längerer Zubereitungszeit als Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what ingredient is used by the least number of recipes",
            "zh": "什么 食材 被 最少 的 食谱 ？ 使用",
            "de": "Welche Zutat wird von der geringsten Anzahl von Rezepten verwendet?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which recipe follows one cuisine",
            "zh": "哪个 菜谱 遵循 一个 风味 ？",
            "de": "welches Rezept folgt einer Küche"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "recipe for at least two meal",
            "zh": "可以 做 超过 两餐 的 食谱",
            "de": "Rezept für mindestens zwei Mahlzeiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "recipes that require greater time to prepare than rice pudding",
            "zh": "比米 布丁 需要 更长 准备 时间 的 食谱",
            "de": "Rezepte, deren Zubereitung mehr Zeit in Anspruch nimmt als Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipes need the most ingredients",
            "zh": "哪个 食谱 需要 最多 的 食材 ？",
            "de": "Welche Rezepte brauchen die meisten Zutaten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "which are non lunch recipes",
            "zh": "哪些 是非 午餐 食谱 ？",
            "de": "Welche der Rezepte sind keine Rezepte für Mittagessen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what ingredient is needed for more than two recipes",
            "zh": "在 多于 两个 食谱 中 需要 的 食材 是 什么 ？",
            "de": "Welche Zutat wird in mehr als in Zwei Rezepten benötigt?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what meals have at least two recipes",
            "zh": "什么 餐食 有 至少 两个 菜谱 ？",
            "de": "Welche Mahlzeiten haben mindestens zwei Rezepte"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "what is the total cooking time summed across all recipes",
            "zh": "所有 食谱 加 起来 的 总 烹饪 时间 是 多少 ？",
            "de": "Wie lang ist die gesamte Zubereitungszeit für alle Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what ingredients does both recipes share",
            "zh": "两种 食谱 共用 了 哪些 食材 ？",
            "de": "Welche Zutat haben beide Rezepte gemein?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "show me all recipes posted in 2004",
            "zh": "给 我 看 所有 在 2004 年 发布 的 菜谱",
            "de": "zeige mir alle rezepte aus dem jahr 2004"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )"
        },
        "question": {
            "en": "what is a recipe requiring milk",
            "zh": "一个 需要 用 牛奶 的 食谱 是 什么 ？",
            "de": "Welches Rezept benötigt Milch?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe requires two ingredients",
            "zh": "哪 一种 食谱 需要 两种 食材",
            "de": "Welches Rezept benötigt zwei Zutaten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "which recipes were posted by 2004",
            "zh": "哪些 食谱 是 在 2004 年 之前 发布 的",
            "de": "Welche Rezepte wurden bis 2004 veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipe needs a longer preparation time than rice pudding",
            "zh": "哪 种 食谱 比 米饭 布丁 需要 更长 的 准备 时间",
            "de": "Welches Rezept benötigt eine längere Vorbereitungszeit als Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "show me lunch recipes that use milk",
            "zh": "看 我 看看 需要 使用 牛奶 的 午餐 食谱",
            "de": "Zeige mir Rezepte für Mittagessen, wofür man Milch braucht"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipe requires a cooking time at least as long as rice pudding",
            "zh": "什么 食谱 需要 烹饪 时间 至少 与 米饭 布丁 一样 长",
            "de": "Welches Rezept hat eine Kochzeit die genauso lang ist wie die von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )"
        },
        "question": {
            "en": "what ingredients does rice pudding or quiche need",
            "zh": "米 布丁 或者 乳蛋 饼 所 需要 的 食材 是 什么 ？",
            "de": "Welche Zutaten braucht man für Milchreis oder Quiche?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )"
        },
        "question": {
            "en": "show me cooking time of rice pudding",
            "zh": "告诉 我 米饭 布丁 的 烹饪 时间",
            "de": "Zeig mir die Kochzeit von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what meal has the most number of recipes",
            "zh": "有 最 多 菜谱 的 餐点 是 什么 ？",
            "de": "Welche Mahlzeit hat die meisten Rezepte"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipes are required by two recipes or less",
            "zh": "需要 两个 或 更少 菜谱 的 菜谱 是 什么 ？",
            "de": "Welche Rezepte benötigen Zwei oder weniger Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "what recipe has a posting date of 2004 and is lunch",
            "zh": "哪个 午餐 菜谱 是 在 2004 年 发布 的 ？",
            "de": "Welches Rezept wurde 2004 gepostet und ist für MIttagessen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "show me recipes posted on the same day as rice pudding",
            "zh": "给 我 看 和 米 布丁 在 同一天 发布 的 菜谱",
            "de": "Zeige mir Rezepte, die am selben Tag wie Milchreis veröffentlicht wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "what is the average cooking time across all recipes",
            "zh": "所有 菜谱 的 平均 烹饪 时间 是 多少",
            "de": "Was ist die durchschnittliche Kochzeit aller Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipes take less time to cook than to prepare rice pudding",
            "zh": "什么 菜谱 的 制作 时间 比米 布丁 的 准备 时间 短 ？",
            "de": "Welche Rezepte haben eine geringere Kochzeit als die Vorbereitungszeit von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "what is the total time taken to prepare the dish",
            "zh": "准备 这 道菜 一共 需要 多少 时间 ？",
            "de": "Was ist die Gesamtzeit für die Zubereitung des Gerichts"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which ingredient is used for less than two recipes",
            "zh": "哪个 材料 是 被 两个 以下 食谱 用到 的 ？",
            "de": "Welche Zutat braucht man für weniger als Zwei Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes that take as long to cook as it takes to prepare rice pudding or quicker",
            "zh": "给 我 看 制作 时间 和 米 布丁 或 软蛋 饼 需要 的 准备 时间 相同 的 菜谱",
            "de": "Welche Rezepte brauchen genauso lange oder sind schneller als die Vorbereitung von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe is for most meals",
            "zh": "什么 食谱 适合 大多数 膳食",
            "de": "Welches Rezept ist für die meisten Mahlzeiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which meal has the least number of recipes",
            "zh": "哪 一餐 的 食谱 数量 最少",
            "de": "Welche Mahlzeit hat die wenigsten Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many meals are there",
            "zh": "总共 有 多少 种餐种 ？",
            "de": "wie viele Mahlzeiten gibt es"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "recipe that needs milk",
            "zh": "需要 牛奶 的 食谱",
            "de": "Rezept das Milch braucht"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "recipe for more than two meals",
            "zh": "超过 两餐 的 食谱",
            "de": "Rezept für mehr als zwei Mahlzeiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )"
        },
        "question": {
            "en": "show me recipes that are the same cuisine as rice pudding",
            "zh": "给 我 看 和 米 布丁 相同 菜式 的 菜谱",
            "de": "Zeig mir Rezepte im selben Stil wie Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )"
        },
        "question": {
            "en": "what is the preparation time of rice pudding",
            "zh": "米 布丁 的 准备 时间 是 什么 ？",
            "de": "Was ist die Vorbereitungszeit von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "recipe that with smallest preparation time",
            "zh": "准备 时间 最短 的 食谱",
            "de": "Das Rezept mit der kürzesten Vorbereitungszeit"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "recipes prepare in same or less time for cooking rice pudding",
            "zh": "准备 时间 和 米 布丁 的 制作 时间 相等 或 更 少 的 菜谱",
            "de": "Rezepte, die in der selben oder weniger Zeit als Milchreis vorbereitet werden können"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "what recipe was posted later than rice pudding",
            "zh": "什么 食谱 比 米饭 布丁 晚 发布",
            "de": "Welches Rezept wurde nach Reispudding gepostet"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "what recipes preparation time is the greatest",
            "zh": "最长 准备 时间 的 食谱 是 什么",
            "de": "Welches Rezept braucht am längsten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "recipe for lunch",
            "zh": "午餐 食谱",
            "de": "Rezept für Mittagessen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )"
        },
        "question": {
            "en": "how long does rice pudding take to prepare",
            "zh": "米 布丁 要花 多久 准备 ？",
            "de": "Wie lange braucht man, um Milchreis zu kochen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes with cooking time equal to or less than the preparation time for rice pudding",
            "zh": "给 我 看 一下 烹饪 时间 等于 或 小于 米饭 布丁 准备 时间 的 食谱",
            "de": "Welche Rezepte haben eine Kochzeit die gleich oder schneller ist als die Vorbereitungszeit von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )"
        },
        "question": {
            "en": "which recipe needs milk for its preparation",
            "zh": "哪个 食谱 需要 牛奶 作为 准备 材料",
            "de": "Welches Rezept benötigt Milch für die Zubereitung?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipe is for two meals",
            "zh": "哪 种 配方 是 两餐",
            "de": "Welches Rezept ist für zwei Mahlzeiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipes take less time to prepare than rice pudding",
            "zh": "哪些 食谱 比 米饭 布丁 花费 的 时间 更 少",
            "de": "Welche Rezepte brauchen weniger Zeit für die Zubereitung als Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes designed for two meals or less",
            "zh": "给 我 看 为 两餐 或者 更少 而 设计 的 食谱",
            "de": "zeige mir Rezepte für zwei oder weniger Mahlzeiten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what recipe has two cuisine",
            "zh": "哪个 食谱 有 两种 菜系",
            "de": "Welches Rezept findet man in Zwei Küchen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "show me recipes that fall under at least two cuisines",
            "zh": "给 我 看 至少 有 属于 两种 菜系 的 食谱",
            "de": "zeig mir Rezepte die aus zwei Küchen kommen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipe takes longer to prepare rice pudding",
            "zh": "哪个 食谱 比 准备 米 布丁 花 的 时间 长 ？",
            "de": "Welche Rezepte brauchen länger zum Vorbereiten als Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "show me recipes posted in 2004 or later",
            "zh": "给 我 看 在 2004 年 或者 之后 发布 的 食谱",
            "de": "zeig mir Rezepte die 2004 oder später gepostet wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipes take less time to cook than rice pudding",
            "zh": "哪些 食谱 比 米饭 布丁 花 的 时间 少",
            "de": "Welches Rezept braucht weniger Zeit zur Zubereitung als Reispudding?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what ingredient is required by the least recipes",
            "zh": "哪种 食材 是 被 最少 的 食谱 需要 的 ？",
            "de": "welche Zutat wird von den wenigsten Rezepten benötigt"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which meal has the most recipes for it",
            "zh": "哪 一餐 的 配方 最 多",
            "de": "Welche Mahlzeit hat die meisten Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes that require a maximum cooking time as rice pudding",
            "zh": "给 我 看 最长 制作 时间 和 糯米 布丁 一样 的 食谱",
            "de": "zeig mir Rezepte die keine längere Kochzeit als reispudding haben"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "recipe posted on the same date of posting of rice pudding",
            "zh": "和 米 布丁 在 同一天 发布 的 菜谱",
            "de": "Rezepte die am selben Tag gepostet wurden wie Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )"
        },
        "question": {
            "en": "which recipes donÃ•t need milk",
            "zh": "哪些 菜谱 不 需要 牛奶 ？",
            "de": "Welche Rezepte brauchen keine Milch?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "what recipes preparation time is the same as rice puddings cooking time",
            "zh": "什么 菜谱 的 准备 时间 和 米饭 布丁 的 制作 时间 一样 ？",
            "de": "Welche Rezepte haben die gleiche Vorbereitungszeit wie die Kochzeit von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )"
        },
        "question": {
            "en": "meal that rice pudding and quiche can be used",
            "zh": "可以 使用 米 布丁 和 乳蛋 饼 的 餐食",
            "de": "Gericht, welches Reispudding und Quiche verwendet"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )"
        },
        "question": {
            "en": "how long does rice pudding take to prepare",
            "zh": "米饭 布丁 需要 多长时间 准备",
            "de": "Wie lange dauert die Zubereitung von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )"
        },
        "question": {
            "en": "what are ingredients of rice pudding",
            "zh": "什么 是 米饭 布丁 的 成分",
            "de": "Was sind die Zutaten für Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "which recipe needs less time to cook than rice pudding",
            "zh": "哪 种 食谱 比 米饭 布丁 需要 更少 的 烹饪 时间",
            "de": "welches Rezept benötigt weniger Kochzeit als die Zubereitung von Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the number of recipes",
            "zh": "食谱 的 数量 是 多少",
            "de": "Was ist die Anzahl der Rezepte"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe requires two or more ingredients",
            "zh": "什么 食谱 需要 两种 或 更 多 成分",
            "de": "Welches Rezept erfordert zwei oder mehr Zutaten"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "recipe with preparation time not less than that of rice pudding",
            "zh": "准备 时间 不 低于 米饭 布丁 的 配方",
            "de": "Rezept mit einer Vorbereitungszeit, die nicht unter der von Milchreis liegt"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "what recipe was posted during or before 2010",
            "zh": "哪些 食谱 是 在 2010 年 或 以前 发布 的 ？",
            "de": "Welches Rezept wurde während oder vor 2010 veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipes prep time is longer than the cook time for rice pudding",
            "zh": "什么 食谱 准备 时间 比 米饭 布丁 的 烹饪 时间 长",
            "de": "welches Rezept hat eine längere Vorbereitungszeit als die Kochzeit von Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "what is the cooking time for this recipe",
            "zh": "这个 食谱 的 烹饪 时间 是 多长 ？",
            "de": "Was ist die Kochzeit für dieses Rezept?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "show me the recipe that takes the least time to prepare",
            "zh": "给 我 看 需要 最少 时间 准备 的 菜谱",
            "de": "Zeigen Sie mir das Rezept, dessen Zubereitung am wenigsten Zeit in Anspruch nimmt"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "show me lunch recipes posted in 2004",
            "zh": "告诉 我 2004 年 发布 的 午餐 食谱",
            "de": "Zeig mir Mittagessen-Rezepte die in 2004 gepostet wurden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipes takes as long to cook as rice pudding",
            "zh": "什么 食谱 的 烹饪 时间 是 跟 米 布丁 一样 长 的 ？",
            "de": "welches Rezept braucht genauso lange zum Kochen wie Reispudding"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many total meals are there",
            "zh": "那里 有 多少 顿饭",
            "de": "Wie viele Mahlzeiten gibt es insgesamt?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe can make two or more meals",
            "zh": "什么 食谱 可以 做 两顿 或 更 多餐",
            "de": "Aus welchem Rezept kann man zwei oder mehr Mahlzeiten machen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which recipes require only a single ingredient",
            "zh": "那些 菜谱 只 需要 一种 材料",
            "de": "Welche Rezepte erfordern nur eine einzige Zutat"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "show me recipes with two cuisines",
            "zh": "给 我 看 有 两种 料理 的 菜谱",
            "de": "Zeig mir Rezepte mit zwei Küchen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "a recipe for a lunch meal",
            "zh": "午餐 食谱",
            "de": "Ein Rezept für eine Mittagsmahlzeit"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what recipes posting date is at least in 2004",
            "zh": "哪些 菜谱 是 至少 在 2004 年 发布 的 ？",
            "de": "Von welchem Rezept ist das Postingdatum mindestens in 2004?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what is a recipe of two different cuisines",
            "zh": "哪份 食谱 是 有 两份 不同 的 美食",
            "de": "Was ist ein Rezept aus zwei verschiedenen Küchen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )"
        },
        "question": {
            "en": "what meal is rice pudding or quiche intended for",
            "zh": "米 布丁 和 乳蛋 饼 是 属于 哪餐 的",
            "de": "Für welche Mahlzeit ist Milchreis oder Quiche bestimmt?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what ingredient is used by less than two recipes",
            "zh": "哪 一种 食材 是 用 在 少于 两个 菜谱 里 的 ？",
            "de": "Welche Zutat wird von weniger als zwei Rezepten verwendet?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "recipe posted in 2004",
            "zh": "在 2004 年 发布 的 菜谱",
            "de": "Rezept veröffentlicht im Jahr 2004"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )"
        },
        "question": {
            "en": "name a recipe for lunch or dinner",
            "zh": "给 我 说 一个 午餐 或者 晚餐 的 菜谱",
            "de": "Nennen Sie ein Rezept zum Mittag- oder Abendessen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "what recipes were posted at or before rice pudding",
            "zh": "哪 一些 菜谱 是 和 米 布丁 同时 或者 在 其 之前 发布 的 ？",
            "de": "Welche Rezepte wurden zeitgleich mit oder vor Milchreis veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "how long does it take to prepare the recipe",
            "zh": "这个 菜谱 需要 多少 时间 准备 ？",
            "de": "Wie lang dauert es um das Rezept vorzubereiten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "what recipe takes the longest to prepare",
            "zh": "什么 食谱 需要 最长 的 准备 时间",
            "de": "Welches Rezept braucht am längsten zum Vorbereiten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )"
        },
        "question": {
            "en": "when was the rice pudding recipe posted",
            "zh": "米 布丁 的 食谱 是 什么 时候 发布 的 ？",
            "de": "Wann wurde das Milchreis-Rezept veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )"
        },
        "question": {
            "en": "show me ingredients for rice pudding or quiche",
            "zh": "给 我 列出 米 布丁 或 乳蛋饼 需要 的 食材",
            "de": "Zeigen Sie mir Zutaten für Milchreis oder Quiche"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "a recipe which posted in 2004 or later",
            "zh": "2004 年 或 之后 发布 的 食谱",
            "de": "Ein Rezept, das im Jahr 2004 oder später veröffentlicht wurde"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many ingredients are in this recipe",
            "zh": "这个 菜谱 里 有 多少 种食材 ？",
            "de": "Wie viele Zutaten enthält dieses Rezept?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )"
        },
        "question": {
            "en": "what is a recipe for rice pudding or quiche",
            "zh": "米 布丁 或 乳蛋 饼 的 食谱 是 什么 ？",
            "de": "Was ist ein Rezept für Milchreis oder Quiche?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the number of ingredients in total",
            "zh": "总共 有 多少 种食材 ？",
            "de": "Was ist die Gesamtzahl der Zutaten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which recipe belongs to two cuisines",
            "zh": "哪个 食谱 是 属于 两个 菜系 的 ？",
            "de": "Welches Rezept gehört zu Zwei Küchen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "which recipe was posted first",
            "zh": "哪 一个 菜谱 是 第一个 发布 的 ？",
            "de": "Welches Rezept wurde zuerst veröffentlicht?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )"
        },
        "question": {
            "en": "which meals is rice pudding not intended for",
            "zh": "米 布丁 不 适合 哪餐",
            "de": "Für welche Mahlzeiten ist Milchreis nicht bestimmt?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what recipe calls for the most ingredients",
            "zh": "哪个 食谱 需要 最多 的 食材",
            "de": "Welches Rezept benötigt die meisten Zutaten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )"
        },
        "question": {
            "en": "what is the cooking time of rice pudding",
            "zh": "米 布丁 的 烹饪 时间 是 多长",
            "de": "Was ist die Kochzeit von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which meal has the most number of recipes",
            "zh": "哪 一餐 有 最 多 的 食谱",
            "de": "Welche Mahlzeit hat die meiste Anzahl an Rezepten?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )"
        },
        "question": {
            "en": "what ingredient is called for by a lunch recipe",
            "zh": "一份 午餐 的 菜谱 要 用 什么 食材",
            "de": "Welche Zutat wird von einem Mittagsrezept verlangt?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what meals are at most two recipes for",
            "zh": "哪些 道菜 最多 是 两个 菜谱 能 做到 ？",
            "de": "Welche Mahlzeiten haben höchstens Zwei Rezepte?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "recipe not posted in 2004",
            "zh": "不 在 2004 年 发布 的 食谱",
            "de": "Rezept das nicht im Jahr 2004 veröffentlicht wurde"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )"
        },
        "question": {
            "en": "which recipe was posted in 2004 and is for lunch",
            "zh": "哪 一个 2004 年 发表 的 菜谱 是 用来 做 午餐 的",
            "de": "Welches Rezept wurde 2004 eingereicht und ist für Mittagessen?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipes preparation time is greater than the cooking time for rice pudding",
            "zh": "什么 菜谱 的 准备 时间 比米 布丁 的 烹饪 时间 长",
            "de": "Die Vorbereitungszeit von welchem Rezept ist länger als die Kochzeit von Milchreis?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )"
        },
        "question": {
            "en": "for what meal is rice pudding or quiche used for",
            "zh": "米 布丁 和 乳蛋 饼 是 用于 哪 一餐 的",
            "de": "Für welche Mahlzeit wird Milchreis oder Quiche verwendet?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )"
        },
        "question": {
            "en": "what recipes preparation time is no lesser than the cooking time for rice pudding",
            "zh": "什么 菜谱 的 准备 时间 不 小于 做米 布丁 的 时间",
            "de": "Welches Rezept hat eine Zubereitungszeit die nicht geringer ist als die Kochzeit für Reis-Pudding?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "recipe whose posting date is after that of rice pudding",
            "zh": "发布 日期 在 米饭 布丁 之后 的 食谱",
            "de": "Rezept, dessen Buchungsdatum nach dem des Milchreises liegt"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show me recipes requiring fewest ingredients",
            "zh": "给 我 看 需要 最少 食材 的 菜谱",
            "de": "Zeig mir die Rezepte welche die wenigsten Zutaten benötigen."
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "what is the minimum time required to prepare rice pudding",
            "zh": "做米 布丁 最短 需要 多长时间",
            "de": "Was ist die Mindestzeit für die Zubereitung von Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "recipe prepared in preparation time of rice pudding",
            "zh": "在 米 布丁 的 准备 时间 内 准备 好 的 菜谱",
            "de": "Rezept in der Vorbereitungszeit von Milchreis vorbereitet"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what recipe has less than two cuisines",
            "zh": "哪个 菜谱 是 少于 两个 风味 的 ？",
            "de": "Welches Rezept hat weniger als zwei Küchen"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "tell me recipe that at most require two ingredients",
            "zh": "给 我 说 一个 最 多 需要 两种 食材 的 菜谱",
            "de": "Sag mir ein Rezept das höchstens zwei Zutaten benötigt"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find recipes that are made with two ingredients",
            "zh": "找到 用 两种 食材 制作 的 菜谱",
            "de": "finden Sie Rezepte, die mit zwei Zutaten hergestellt werden"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )"
        },
        "question": {
            "en": "is it the recipe for rice pudding or quiche",
            "zh": "这 是 做 米饭 布丁 还是 乳蛋 饼 的 菜谱 ？",
            "de": "Ist es das Rezept für Milchreis oder Quiche?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )"
        },
        "question": {
            "en": "recipe for meal same as rice pudding",
            "zh": "和 米 布丁 一样 的 食谱",
            "de": "Rezept für eine Mahlzeit wie Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string !type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is a meal for which you can find more than two recipes",
            "zh": "哪 一餐 你 可以 找到 超过 2 个 食谱",
            "de": "Was ist eine Mahlzeit für die man mehr als 2 Rezepte finden kann?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )"
        },
        "question": {
            "en": "what recipe has the smallest cooking time",
            "zh": "哪 一个 食谱 的 烹饪 时间 最短",
            "de": "Welches Rezept hat die kürzeste Kochzeit?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )"
        },
        "question": {
            "en": "show me recipes with a preparation time equal to or greater than rice pudding",
            "zh": "给 我 列出 所有 准备 时间 等于 或 长于 米 布丁 的 食谱",
            "de": "Zeigen Sie mir Rezepte mit einer Zubereitungszeit, die gleich oder länger ist als Milchreis"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )"
        },
        "question": {
            "en": "what recipes are prepared in cooking time of rice pudding",
            "zh": "哪些 食谱 的 准备 时间 跟 米 布丁 的 烹饪 时间 是 一样 的 ？",
            "de": "Welche Rezepte werden in der Kochzeit von Milchreis vorbereitet?"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "which is the latest recipe posted",
            "zh": "哪 一个 食谱 是 最新 发布 的",
            "de": "Welches Rezept wurde zuletzt veröffentlicht"
        }
    },
    {
        "domain": "recipes",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string !type ) ) ( string max ) ( string cuisine ) ) )"
        },
        "question": {
            "en": "recipe with most cuisine",
            "zh": "哪个 菜谱 的 菜样 最多 ？",
            "de": "Rezept mit den meisten Küchen"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the players number",
            "zh": "球员 的 号码 是 多少",
            "de": "Was ist die Nummer des Spielers"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players made more than 3 rebounds over a season",
            "zh": "哪位 球员 在 一 整个 赛季 里 拥有 多于 3 个 的 篮板",
            "de": "Welche Spieler machten mehr als drei Rebounds in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player whose steals are not 3 over a season",
            "zh": "在 一个 赛季 中 抢断 次数 不是 三次 的 球员",
            "de": "Ein Spieler, der nicht mehr als drei Steals in einer Saison gemacht hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with smallest number of points over a season",
            "zh": "一个 赛季 得分 最少 的 球员",
            "de": "Spieler mit der geringsten Punktzahl in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find the player who had the least number of steals over an entire season",
            "zh": "找到 整个 赛季 抢断 次数 最少 的 球员",
            "de": "Finde den Spieler, der die geringste Anzahl an Steals über eine gesamten Saison hatte."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "when did Kobe Bryant have 3 all season rebounds",
            "zh": "在 什么 时候 科比 布莱恩 在 一个 赛季 里 只 拿到 3 个 篮板",
            "de": "Wann hatte Kobe Bryant 3 Rebounds in der gesamten Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name the player who did not have three blocks this season",
            "zh": "说出 本赛季 没有 三个 盖帽 的 球员",
            "de": "Nenne den Spieler, der nicht drei Blocks in dieser Saison hatte."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points Kobe Bryant made in the season in which he made 3 fouls",
            "zh": "科比 布莱恩 在 拿到 3 个 犯规 的 赛季 里 一共 拿到 多少 分",
            "de": "wie viele Punkte Kobe Bryant in der Saison gemacht hat, in der er 3 Fouls gemacht hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player scored no more points in a season than Kobe Bryant",
            "zh": "哪个 球员 在 一 赛季 中 得分 不 多于 科比 布莱恩特",
            "de": "Welcher Spieler erziehlte nicht mehr Punkte in der Saison als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with more than 3 rebounds in an average season",
            "zh": "说出 一个 在 一 平均 赛季 中有 三次 以上 的 篮板球 的 球员",
            "de": "Nenne einen Spieler mit mehr als 3 Rebounds in einer durchschnittlichen Saison."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find the player that has the highest point score over any one season",
            "zh": "找到 在 任意 一 赛季 中 得分 最高 的 球员",
            "de": "Finde den Spieler welcher den höchsten Punkestand über jede Saison hatte."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had the most steals this season",
            "zh": "哪个 球员 在 这个 赛季 有 最 多 的 抢断",
            "de": "Welcher Spieler erzielte die meisten Steals in dieser Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had less blocks all season than Kobe Bryant",
            "zh": "哪个 球员 在 全 赛季 有 比 科比 布莱恩特 少 的 阻拦",
            "de": "Welcher Spieler hatte weniger Blocks als Kobe Bryant in der gesamten Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has played in fewer games than Kobe Bryant",
            "zh": "哪个 球员 比 Kobe Bryant 打得 比赛 少 ？",
            "de": "Welcher Spieler hat in weniger Spielen mitgespielt als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )"
        },
        "question": {
            "en": "this is considered to be the season of player Kobe Bryant with 3 rebounds",
            "zh": "在 这个 被 认为 球员 科比 布莱恩特 获得 3 个 篮板 的 赛季",
            "de": "dies könnte möglicherweise die Saison des Spielers Kobe Bryant werden mit drei Rebounds"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers in the year did Kobe Bryant have",
            "zh": "科比 布莱恩特 今年 有 多少 失误",
            "de": "Wie viele Turnovers im Jahr hatte Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "in the season in which he was responsible for 3 steals how many assists are attributable to Kobe Bryant",
            "zh": "在 他 获得 3 个 抢断 的 赛季 里 ， 科比 布莱恩特 送出 了 多少 次 助攻",
            "de": "Wie viele Vorlagen sind Kobe Bryant in der Saison zuzuordnen, in der er für drei Steals verantwortlich war"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that have played less than 3 games over all seasons",
            "zh": "哪些 球员 整个 赛季 打 的 比赛 低于 三场",
            "de": "Spieler, die innerhalb der gesamten Saison weniger als drei Spiele gespielt haben"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks has Lakers player Kobe Bryant had in the season",
            "zh": "赛季 中湖 人 球员 科比 布莱恩特 获得 了 多少 个 盖帽",
            "de": "Wie viele Blocks hatte der Laker-Spieler Kobe Bryant in der Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what is the position of Kobe Bryant",
            "zh": "科比 布莱恩特 打 的 是 什么 位置",
            "de": "wie ist die Position von Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players had more than 3 points in a season",
            "zh": "赛季 中 那些 球员 的 得分 不 低于 3 分",
            "de": "Welche Spieler hatten mehr als drei Punkte in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had the same or less rebounds than Kobe Bryant this season",
            "zh": "本赛季 哪 一个 运动员 的 篮板 数 等于 或 少于 科比 布莱恩特 ？",
            "de": "Welcher Spieler hatte in dieser Saison gleich viele oder weniger Rebounds als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who made more than2 steals over a season",
            "zh": "一个 赛季 超过 2 次 抢断 的 球员",
            "de": "Spieler, der mehr als zwei Steals innerhalb einer Saison machte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals were awarded to Kobe Bryant who belonged to the Los Angeles Lakers team",
            "zh": "为 洛杉矶 湖人 效力 的 科比 布莱恩 取得 了 多少 个 抢断 ？",
            "de": "Wie viele Steals wurden an Kobe Bryant vergeben, der zum Team der Los Angeles Lakers gehörte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.team.lakers en.team.cavaliers ) )"
        },
        "question": {
            "en": "what NBA teams play in Cleveland or LA",
            "zh": "哪些 NBA 球队 在 克利夫兰 或 洛杉矶 打球",
            "de": "Welche NBA Teams spielen in Cleveland oder LA?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player played the same or more games as Kobe Bryant",
            "zh": "哪 一名 运动员 与 科比 布莱恩特 上场 次数 相同 或 更 多 ？",
            "de": "Welcher Spieler spielte genauso viele oder mehr Spiele als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "during the season in which he was responsible for 3 fouls how many steals were attributable to Kobe Bryant",
            "zh": "在 有 3 次 犯规 的 赛季 ， 科比 布莱恩特 有 多少 次 抢断 ？",
            "de": "Wie viele Steals wurden Kobe Bryant in den Saisons zugeschrieben, in denen er für drei Fouls verantwortlich war?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant who had three blocks have",
            "zh": "有 3 次 盖帽 的 科比 布莱恩特 有 多少 次 犯规 ？",
            "de": "Wie viele Fouls hatte Kobe Bryant, der drei Blocks hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who had fewer rebounds in a season than Kobe Bryant",
            "zh": "谁 一个 赛季 的 篮板 数 少于 科比 布莱恩特 ？",
            "de": "Wer hatte weniger Rebounds in einer Saison als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players who are not point guards",
            "zh": "不是 控球 后卫 的 球员",
            "de": "Spieler, die keine Point Guards sind."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "what was the total number of rebounds in each season where Kobe Bryant played point guard",
            "zh": "在 科比 布莱恩特 打 控卫 的 每个 赛季 中 ， 篮板球 的 总数 是 多少",
            "de": "Wie viele Rebounds gab es in jeder Saison, in der Kobe Bryant Point Guard spielte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had the same amount of blocks this season as Kobe Bryant",
            "zh": "哪个 球员 这个 赛季 有 和 Kobe Bryant 一样 多 的 盖 蓝 ？",
            "de": "Welcher Spieler hatte die gleiche Anzahl an Blocks diese Saison wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had 3 or fewer blocks",
            "zh": "哪个 球员 有 三个 或 少于 三个 盖 蓝 ？",
            "de": "Welcher Spieler hatte 3 oder weniger Blocks?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had a higher number of assists in a season than Kobe Bryant",
            "zh": "哪个 球员 在 一个 赛季 助攻 次数 比 科比 布莱恩特 多",
            "de": "Welcher Spieler hatte eine höhere Anzahl an Vorlagen in einer Saison als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "in the same season in which he had 3 rebounds name the number of blocks performed by Kobe Bryant",
            "zh": "在 他 有 三个 蓝 板球 的 赛季 里 ， 举出 Kobe Bryant 的 盖 蓝数 吧 ？",
            "de": "Nenne die Anzahl der Blocks, die Kobe Bryant in derselben Saison erzielte, in der er drei Rebounds hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games has Kobe Bryant played with three steals",
            "zh": "科比 布莱恩特 在 多少 场 比赛 中有 三次 抢断",
            "de": "Wie viele Spiele spielte Kobe Bryant mit drei Steals"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had got a minimum of 3 points",
            "zh": "哪个 球员 取得 了 至少 3 分 ？",
            "de": "Welcher Spieler hat mindestens drei Punkte erzielt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has fewer per season steals than Kobe Bryant",
            "zh": "谁 在 每个 赛季 是 比 科比 布莱恩 抢断 次数 更少 的 ？",
            "de": "Wer hat weniger Steals pro Saison als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points were attributable to Kobe Bryant during the season he had a total of 3 rebounds",
            "zh": "科比 布莱恩 在 他 有 3 个 篮板球 的 赛季 得分 是 多少 ？",
            "de": "Wie viele Punkte wurden Kobe Bryant während der Saison zugeordnet, in der er insgesamt drei Rebounds hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )"
        },
        "question": {
            "en": "in which position did Kobe Bryant get 3 rebounds",
            "zh": "科比 布莱恩 有 3 个 篮板球 的 时候 打 的 是 什么 位置",
            "de": "Auf welcher Position machte Kobe Bryant 3 Rebounds?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )"
        },
        "question": {
            "en": "what year did Kobe Bryant have three blocks",
            "zh": "科比 在 哪一年 有 三个 盖帽",
            "de": "In welchem Jahr hatte Kobe Bryant drei Blocks"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks has Kobe Bryant averaged each season he's had 3 rebounds",
            "zh": "科比 在 那些 场均 3 个 篮板 的 赛季 里 ， 场均 得到 几个 盖帽 ？",
            "de": "Wie viele Blocks hatte Kobe Bryant durchschnittlich pro Saison, in der er drei Rebounds hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe Bryant have as point guard",
            "zh": "作为 控球 后卫 的 科比 每场 有 多少 次 抢断 ？",
            "de": "Wie viele Steals hatte Kobe Bryant als Point Guard?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players with the same number of steals as Kobe Bryant over all seasons",
            "zh": "在 职业生涯 里 跟 科比 有 一样 抢断 数 的 球员",
            "de": "Spieler mit derselben Anzahl an Steals wie Kobe Bryant über alle Saisons"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games over a season did Kobe Bryant play where his assists was three",
            "zh": "在 一个 赛季 里 有 多少 场球 科比 有 三个 助攻",
            "de": "Wie viele Spiele in einer Saison hat Kobe Bryant mit drei Assists gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant have when he had three rebounds",
            "zh": "科比 在 有 三个 篮板 时有 多少 盖帽",
            "de": "Wie viele Blocks hatte Kobe Bryant, als er drei Rebounds hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which team is Kobe Bryant on",
            "zh": "科比 布莱恩特 在 哪支 球队 ？",
            "de": "In welchem Team ist Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has the least amount of assists over a season",
            "zh": "哪个 球员 在 一个 赛季 里 有 最少 的 助攻 ？",
            "de": "Welcher Spieler hat die geringste Anzahl an Vorlagen in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players for seasons other than 2004",
            "zh": "除了 2004 年 赛季 以外 的 球员",
            "de": "Spieler für andere Saisons außer 2004"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player scored equal or less points than Kobe Bryant this season",
            "zh": "哪个 球员 得分 小于 或者 等于 科比 在 这个 赛季 的 得分 ？",
            "de": "Welcher Spieler erzielte genauso viele oder weniger Punkte als Kobe Bryant in dieser Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player whose season average is more than 3 blocks",
            "zh": "赛季 场均 盖帽 超过 3 个 的 球员",
            "de": "Spieler, dessen Saisondurchschnitt mehr als 3 Blocks beträgt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games Kobe Bryant played in the season in which he made 3 turnovers",
            "zh": "科比 布莱恩 在 他 失误 3 次 的 赛季 打 了 多少 场 比赛 ？",
            "de": "Wie viele Spiele spielte Kobe Bryant in der Saison, in der er drei Turnovers machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find the player who had the same number of steals as Kobe Bryant or less",
            "zh": "找到 与 科比 · 布莱恩特 相同 或 更 少 的 抢断 数 的 球员",
            "de": "Finde den Spieler, der die gleiche Anzahl oder weniger Steals hatte als Kobe Bryant."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "number of fouls of Kobe Bryant whose rebounds are three",
            "zh": "有 3 个 篮板 的 科比 布莱恩特 有 多少 犯规",
            "de": "Anzahl an Fouls von Kobe Bryant dessen Rebounds drei sind"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )"
        },
        "question": {
            "en": "in which season did Kobe Bryant play for the Los Angeles Lakers team",
            "zh": "科比 在 哪个 赛季 为 洛杉矶 湖人队 效力",
            "de": "In welcher Saison spielte Kobe Bryant für das Los Angeles Lakers Team?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games did Kobe Bryant have when he had 3 blocks",
            "zh": "科比 布莱恩特 有 3 个 盖帽 时有 多少 场 比赛",
            "de": "Wie viele Spiele hatte Kobe Bryant als er 3 Blocks hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )"
        },
        "question": {
            "en": "what position did Kobe Bryant play on the Lakers",
            "zh": "科比 布莱恩特 在 湖人队 打 的 什么 位置",
            "de": "Welche Position spielte Kobe Bryant bei den Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "what player had more steals than Kobe Bryant whose number of rebounds is 3",
            "zh": "哪个 运动员 有 3 个 篮板球 、 比 科比 布莱恩特 有 更 多 的 抢断",
            "de": "Welcher Spieler hatte mehr Steals als Kobe Bryant, dessen Anzahl an Rebounds drei ist?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals does Kobe Bryant get in seasons when he's played 3 games",
            "zh": "科比 布莱恩 在 他 打 了 3 长 比赛 的 赛季 有 多少 个 抢断 ?",
            "de": "Wie viele Steals bekommt Kobe Bryant in der Saison, wenn er 3 Spiele gespielt hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had more fouls than Kobe Bryant",
            "zh": "谁 比 科比 布莱恩特 犯规 更 多",
            "de": "Wer hat mehr Fouls als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players didn't commit 3 turnovers in a season",
            "zh": "哪个 球员 在 一个 赛季 中 没有 犯下 3 次 失误",
            "de": "Welche Spieler verübten nicht 3 Turnovers in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find those players who have participated in more games during any one specific season than Kobe Bryant",
            "zh": "找到 那些 在 某个 赛季 参加 过 的 比赛 多于 科比 布莱恩特 的 球员",
            "de": "Finde die Spieler, die an mehr Spielen während einer speziellen Saison teilgenommen hatten als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant have when he had three rebounds",
            "zh": "科比 布莱恩特 取得 三次 篮板球 （ 的 那场 比赛 ） 有 几次 犯规 ？",
            "de": "Wie viele Fouls hatte Kobe Bryant, als er drei Rebounds hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )"
        },
        "question": {
            "en": "what season did Kobe Bryant start playing in",
            "zh": "科比 布莱恩特 是 在 哪个 赛季 开始 比赛 的",
            "de": "In welcher Saison hat Kobe Bryant angefangen zu spielen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had the most assists this season",
            "zh": "哪个 球员 本赛季 助攻 最 多",
            "de": "Welcher Spieler hatte in dieser Saison die meisten Vorlagen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "number of assists over a season of player Kobe Bryant who is at point guard",
            "zh": "科比 布莱恩特 在 做 控球 后卫 赛季 时 的 助攻 数",
            "de": "Anzahl von Assists in einer Saison von Spieler Kobe Bryant der Pointguard ist"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team is Kobe Bryant on",
            "zh": "科比 布莱恩 是 为 哪支 球队 效力 的 ？",
            "de": "In welchem Team ist Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has played less fouls than Kobe Bryant",
            "zh": "哪个 球员 的 犯规 比 科比 布莱恩特 少",
            "de": "Welcher Spieler hat weniger Fouls als Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant make over a season",
            "zh": "科比 布莱恩特 一个 赛季 有 多少 次 犯规",
            "de": "Wie viele Fouls hat Kobe Bryant in einer Saison begangen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games did Kobe Bryant play in during 2004",
            "zh": "科比 布莱恩 在 2004 年 打 了 多少 场 比赛 ？",
            "de": "In wie vielen Spielen hat Kobe Bryant im Jahr 2004 gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games did Kobe Bryant play when he had 3 all season rebounds",
            "zh": "科比 布莱恩 在 他 取得 了 3 个 赛季 篮板球 的 时候 打 了 多少 场 比赛 ？",
            "de": "Wie viele Spiele machte Kobe Bryant als er 3 Gesamtsaison Rebounds hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player averages less than 3 blocks per season",
            "zh": "哪 一名 运动员 每 赛季 平均 盖帽 数 少于 3 个 ？",
            "de": "welcher Spieler hatte im Schnitt weniger als 3 Blocks pro Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had less than 3 rebounds",
            "zh": "谁 的 篮板 少于 3 个",
            "de": "Wer hat weniger als 3 Rebounds gehabt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had equal to or less assists than Kobe Bryant during a season",
            "zh": "哪 一名 运动员 在 一个 赛季 的 助攻 等于 会 少于 科比 布莱恩特 ？",
            "de": "Welcher Spieler hat gleich oder weniger Assists als Kobe Bryant während einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who has the least number of positions",
            "zh": "打 的 位置 数 最少 的 运动员 。",
            "de": "Spieler der die wenigsten Positionen spielt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many three game fouls did Kobe Bryant have over a season",
            "zh": "科比 布莱恩特 在 一个 赛季 中有 多少 次 三次 犯规",
            "de": "Wie viele drei Spiel Fouls hatte Kobe Bryant über eine Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players have had more or less than 3 steals during a season",
            "zh": "一个 赛季 中 哪位 球员 有 多于 或 少于 三次 的 抢断",
            "de": "Welche Spieler hatten mehr oder weniger als 3 Steals während einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player who is not a point guard",
            "zh": "说出 一个 不是 组织后卫 的 球员",
            "de": "Nenne einen Spieler, der kein Point Guard ist"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many players are there",
            "zh": "有 多少 球员 在 那里",
            "de": "Wie viele Spieler gibt es?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team did Kobe Bryant play for when he had 3 all season assists",
            "zh": "当 他 有 3 个 赛季 助攻 时 科比 布莱恩特 队 效力 于 什么 球队",
            "de": "Für welches Team spielte Kobe Bryant als er 3 Gesamtsaison Assists hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many all season assists did Kobe Bryant have as an LA Laker",
            "zh": "当 科比 布莱恩 效力 于 洛杉矶 湖人队 的 时候 他 有 多少 个 全 赛季 助攻",
            "de": "Wie viele Gesamtsaison Assists hatte Kobe Bryant als ein LA Laker?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players had less than 3 blocks over all seasons",
            "zh": "在 所有 的 赛季 里 ， 什么 球员 有 少于 三个 盖 蓝 ？",
            "de": "Welche Spieler hatten weniger als drei Blocks in allen Saisons?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has other than 3 all season games",
            "zh": "哪个 球员 没有 三次 全 赛季 比赛",
            "de": "Welcher Spieler hat andere als 3 alle Saison Spiele?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe Bryant have in the season in which he had three fouls",
            "zh": "科比 布莱恩特 在 哪个 他 犯规 三次 的 赛季 中有 几次 抢断",
            "de": "Wie viele Steals hatte Kobe Bryant in der Saison, in der er drei Fouls hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists has Kobe Bryant had",
            "zh": "科比 布莱恩特 有 几次 助攻",
            "de": "Wie viele Vorlagen hat Kobe Bryant gehabt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "in how many seasons Kobe Bryant made 3 fouls",
            "zh": "科比 在 多少 个 赛季 中有 3 次 犯规",
            "de": "In wievielen Saisons hat Kobe Bryant dreimal gefoult?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )"
        },
        "question": {
            "en": "what seasons has Kobe Bryant played",
            "zh": "科比 打 了 哪些 赛季",
            "de": "In welchen Saisons hat Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe Bryant score in a season",
            "zh": "科比 布莱恩特 在 一个 赛季 中得 了 多少 分",
            "de": "Wie viele Punkte erzielte Kobe Bryant in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks were made by Kobe Bryant after getting 3 assists",
            "zh": "科比 在 拿 了 3 个 助攻 以后 那 了 多少 个 盖帽",
            "de": "Wieviele Blocks hatte Kobe Bryant nachdem er 3 Assists bekam?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with not 3 rebounds over a season",
            "zh": "在 一个 赛季 中 没有 拿 三次 篮板球 的 球员",
            "de": "Ein Spieler, der keine 3 rebounds innerhalb einer Saison hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players play for the least amount of teams",
            "zh": "哪个 球员 效力 过 的 球队 最少",
            "de": "welche Spieler spielen für die geringste Anzahl von Teams"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers Kobe Bryant made over a season in which he played 3 games",
            "zh": "科比 布莱恩 在 他 打 了 三场 比赛 的 赛季 有 多少 个 失误 ？",
            "de": "Wie viele Turnover Kobe Bryant in einer Saison machte, in der er drei Spiele spielte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position did Kobe Bryant have 3 blocks as",
            "zh": "科比 布莱恩特 有 3 个 盖帽 的 时候 打 的 什么 位置",
            "de": "In welcher Spielposition hatte Kobe Bryant 3 blocks?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )"
        },
        "question": {
            "en": "what season did Kobe Bryant have 3 blocks",
            "zh": "科比 布莱恩特 在 哪个 赛季 有 3 个 盖帽",
            "de": "in welcher season hatte Kobe Bryant 3 blocks"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "during the same season in which Kobe Bryant was responsible for 3 assists how many rebounds was he also responsible for",
            "zh": "在 科比 布莱恩特 有 三次 助攻 的 赛季 中 他 有 多少 个 篮板球",
            "de": "Während der gleichen Saison in der Kobe Bryant verantwortlich für 3 Assists war, wie viele Rebounds war er ebenso verantwortlich für?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has had the fewest steals",
            "zh": "哪个 球员 的 抢断 最少",
            "de": "Welcher Spieler hatte die wenigsten Steals?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had fewer fouls in the season than Kobe Bryant",
            "zh": "哪个 球员 在 这个 赛季 中 比 科比 布莱恩特 犯规 次数 少",
            "de": "Welcher Spieler hatte weniger Fouls in der Saison als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points does Kobe Bryant make in seasons with 3 turnovers",
            "zh": "科比 布莱恩特 在 有 三次 失误 的 赛季 中得 了 多少 分",
            "de": "wie viele Punkte hatte Kobe Bryant in der Saison mit 3 Turnovers"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with more than 3 points in a season",
            "zh": "一个 赛季 得分 超过 3 分 的 球员",
            "de": "Spieler mit mehr als 3 Punkten in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls Kobe Bryant made over a season in which he made 3 points",
            "zh": "科比 布莱恩特 在 他 得 了 三分 的 一个 赛季 中有 多少 次 犯规",
            "de": "Wie viele Fouls machte Kobe Bryant in einer Saison in der er 3 Punkte machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )"
        },
        "question": {
            "en": "what are seasons played by Kobe Bryant",
            "zh": "科比 布莱恩 参加 了 哪几个 赛季 ？",
            "de": "Welche Saisons hat Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players give up less than 4 turnovers per season",
            "zh": "哪个 球员 每个 赛季 送出 了 至少 4 次 失误",
            "de": "welche Spieler erlauben weniger als 4 Turnover in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )"
        },
        "question": {
            "en": "in which season did Kobe Bryant get 3 assists",
            "zh": "科比 在 哪个 赛季 得到 3 次 助攻",
            "de": "In welcher Saison bekam Kobe Bryant 3 Assists?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe Bryant have in a season he had 3 fouls",
            "zh": "科比 布莱恩特 在 一个 有 三次 犯规 的 赛季 有 几次 抢断",
            "de": "wie viele Steals hatte Kobe Bryant in einer Saison in der er 3 Fouls hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds did Kobe Bryant have when his all season points equalled 3",
            "zh": "在 他 所有 的 得 三分 的 赛季 里 ， Kobe Bryant 有 多少 蓝 板球 ？",
            "de": "Wie viele Rebounds hatte Kobe Bryant, als seine Gesamtpunktzahl einer Saison 3 betrug?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player played less games than Kobe Bryant",
            "zh": "什么 球员 比 科比 布莱恩特 打得少",
            "de": "Welcher Spieler spielte weniger Spiele als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who has played least number of games over a season",
            "zh": "一个 赛季 打 得 最少 的 球员",
            "de": "Spieler, der die geringste Anzahl an Spielen in einer Saison gespielt hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks has Kobe Bryant had in any one season",
            "zh": "科比 在 任何 一个 赛季 都 有 多少 盖帽",
            "de": "Wie viele Blocks hatte Kobe Bryant in einer beliebigen Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )"
        },
        "question": {
            "en": "in which season did Kobe Bryant play for Los Angeles Lakers",
            "zh": "科比 在 哪个 赛季 效力 于 洛杉矶 湖人队",
            "de": "In welcher Saison spielte Kobe Bryant für Los Angeles Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player not from Los Angeles Lakers team",
            "zh": "不 来自 洛杉矶 湖人队 的 球员",
            "de": "Spieler, der nicht im Los Angeles Lakers Team ist"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "number of blocks over a season of player Kobe Bryant with 3 blocks over a season",
            "zh": "科比 布莱恩特 整个 赛季 超过 3 次 盖帽 时 的 赛季 盖帽 数量",
            "de": "Anzahl an Blocks des Spielers Kobe Bryant in einer Saison, in der er 3 Blocks pro Saison machte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player who is a point guard or a forward",
            "zh": "举出 一个 是 控球 后卫 或 前锋 的 球员",
            "de": "Nennen Sie einen Spieler, der ein Point Guard oder ein Stürmer ist"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players had fewer turnovers than Kobe Bryant over a season",
            "zh": "哪个 球员 是 在 一个 赛季 里 比 科比 布莱恩 有 更 少 的 失误 的 ？",
            "de": "Welche Spieler hatten weniger Turnover als Kobe Bryant in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )"
        },
        "question": {
            "en": "which is the team of Kobe Bryant who got 3 steals",
            "zh": "科比 布莱恩 为 哪个 队伍 得到 了 3 个 抢断 ？",
            "de": "Welches ist das Team von Kobe Bryant, das 3 Steals bekam?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player whose number of blocks over a season is more than that of player Kobe Bryant over a season",
            "zh": "在 一个 赛季 里 取得 比 科比 布莱恩 更 多 盖帽 的 球员",
            "de": "Spieler, dessen Anzahl an Blocks in einer Saison mehr ist als die des Spielers Kobe Bryant in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find players responsible for fewer rebounds in any one season than Kobe Bryant",
            "zh": "找到 在 任一 赛季 比 科比 布莱恩 篮板球 少 的 球员",
            "de": "Finde Spieler, die in irgendeiner Saison für weniger Rebounds verantwortlich waren als Kobe Bryant."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who doesn't have 3 assists over a season",
            "zh": "一个 赛季 没有 3 次 助攻 的 球员",
            "de": "Spieler, der in einer Saison keine 3 Vorlagen hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position did Kobe Bryant play in 2004",
            "zh": "科比 布莱恩 在 2004 年 是 打 哪个 位置 的 ？",
            "de": "Welche Position spielte Kobe Bryant im Jahr 2004?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name players who played in 2004 or 2010",
            "zh": "举出 一个 在 2004 年 或 2010 年 参赛 的 球员",
            "de": "Nenne Spieler, die im Jahr 2004 oder 2010 spielten."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find those players with rebound tallies that at most equal those of Kobe Bryant over any given season",
            "zh": "找到 那些 在 任意 赛季 篮板球 数最多 跟 科比 布莱恩 一样 的 球员",
            "de": "Finde diejenigen Spieler mit einer Reboundanzahl, die maximal gleich der von Kobe Bryant in einer beliebigen Saison ist."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds does Kobe Bryant get every season",
            "zh": "科比 每个 赛季 都 有 多少 篮板球",
            "de": "Wie viele Rebounds bekommt Kobe Bryant in jeder Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find those players who have committed the same number of steals in a given season as Kobe Bryant",
            "zh": "找到 得到 抢断 数量 在 特定 的 一个 赛季 中 跟 科比 布莱恩特 一样 的 球员",
            "de": "Finde die Spieler, die die gleiche Anzahl an Steals in einer beliebigen Saison gemacht haben wie Kobe Bryant."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with at least three turnovers",
            "zh": "说出 至少 有 三次 失误 的 球员",
            "de": "Nenne einen Spieler mit mindestens drei Turnovern."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "during the season he was responsible for 3 fouls what was the number of assists performed by Kobe Bryant",
            "zh": "在 他 有 三个 犯规 的 赛季 里 ， Kobe Bryant 的 助攻 次数 是 多少 ？",
            "de": "Was ist die Anzahl an Assists von Kobe Bryant während der Saison, in der er für 3 Fouls verantwortlich war?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe Bryant have when he had 3 assists",
            "zh": "科比 在 得到 3 次 助攻 时得 了 多少 分",
            "de": "Wie viele Punkte hatte Kobe Bryant, als er drei Vorlagen hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players have made more turnovers than Kobe Bryant over all seasons",
            "zh": "哪些 球员 在 所有 赛季 比 科比 布莱恩 失误 多 的 ？",
            "de": "Welche Spieler haben über alle Saisons hinweg mehr Turnover gemacht als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what is the position of Kobe Bryant",
            "zh": "科比 布莱恩 打 的 是 哪个 位置 ？",
            "de": "An welcher Position spielt Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )"
        },
        "question": {
            "en": "who was Kobe Bryant playing for when he made three fouls",
            "zh": "当有 三个 犯规 时 ， Kobe Bryant 在 为 谁 打球 ？",
            "de": "Für wen spielte Kobe Bryant, als er drei Fouls machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position did Kobe Bryant play with 3 steals over the season",
            "zh": "科比 布莱恩 在 赛季 里 有 3 次 抢断 的 时候 打 的 是 哪个 位置 ？",
            "de": "Auf welcher Position spielte Kobe Bryant, als er drei Steals in einer Saison machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds has Kobe Bryant had",
            "zh": "科比 有 多少 篮板球",
            "de": "Wie viele Rebounds hatte Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players amount of all season rebounds equals Kobe Bryant",
            "zh": "哪个 球员 在 所有 赛季 里 跟 科比 布莱恩 有 一样 次数 的 篮板球 ？",
            "de": "Die Anzahl an Rebounds innerhalb aller Saisons welchen Spielers entspricht der von Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant have who had three steals",
            "zh": "有 3 个 抢断 的 科比 布莱恩特 有 多少 次 犯规",
            "de": "Wie viele Fouls hatte Kobe Bryant wenn er drei Steals hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "when Kobe Bryant had 3 all season blocks how many steals did he have",
            "zh": "当 科比 在 整个 赛季 中有 3 次 盖帽 时 他 有 多少 次 抢断",
            "de": "Als Kobe Bryant 3 Gesamtsaison Blocks hatte, wie viele Steals hatte er?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string position ) ) )"
        },
        "question": {
            "en": "what is position played by Kobe Bryant over the season",
            "zh": "科比 布莱恩特 本赛季 的 位置 是 什么",
            "de": "An welcher Position spielte Kobe Bryant in der Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.team.lakers en.team.cavaliers ) )"
        },
        "question": {
            "en": "either Los Angeles Lakers or Cleveland cavaliers",
            "zh": "无论是 洛杉矶 湖人队 还是 克利夫兰 骑士队",
            "de": "Entweder Los Angeles Lakers oder Cleveland Cavaliers"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games are played by Kobe Bryant for the Los Angeles Lakers team",
            "zh": "科比 · 布莱恩特 为 洛杉矶 湖人队 打 了 多少 场 比赛",
            "de": "Wie viele Spiele werden von Kobe Bryant für das Los Angeles Lakers Team gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )"
        },
        "question": {
            "en": "in what position was Kobe Bryant playing  in the 3 games",
            "zh": "这 三场 比赛 中 科比 布莱恩特 打得 是 什么 位置",
            "de": "In welcher Position spielte Kobe Bryant in den 3 Spielen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has scored the points of Kobe Bryant",
            "zh": "哪个 球员 的 得分 让 科比 布莱恩特 得分",
            "de": "Welcher Spieler hat die Punkte von Kobe Bryant erzielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name the player with the most turnovers per season",
            "zh": "说出 每个 赛季 里 有 最 多 丢球 的 球员 了 吗 ？",
            "de": "Nenne den Spieler mit den meisten Turnovers pro Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe Bryant have while committing three fouls",
            "zh": "科比 在 犯下 3 次 犯规 时有 多少 助攻",
            "de": "Wie viele Vorlagen hatte Kobe Bryant, als er drei Fouls begangen hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players don't play for the Los Angeles Lakers",
            "zh": "哪些 球员 不 为 洛杉矶 湖人队 效力",
            "de": "Welche Spieler spielen nicht für die Los Angeles Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many rebound Kobe Bryant made over a season in Los Angeles Lakers team",
            "zh": "在 洛杉矶 湖人队 科比 布莱恩特 在 一个 赛季 有 多少 篮板",
            "de": "Wie viele Rebounds machte Kobe Bryant innerhalb einer Saison in dem Los Angeles Lakers Team?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )"
        },
        "question": {
            "en": "which season Kobe Bryant made 3 turnovers",
            "zh": "科比 在 哪个 赛季 有 3 次 失误",
            "de": "Welche Saison machte Kobe Bryant drei Turnovers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name of a player with fewer annual fouls than Kobe Bryant",
            "zh": "年度 犯规 比 科比 布莱恩特 少 的 球员 的 名字",
            "de": "Name eines Spieler mit weniger jährlichen Fouls als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had less than 3 steals",
            "zh": "谁 有 小于 3 次 抢断",
            "de": "Wer hatte weniger als 3 Steals?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )"
        },
        "question": {
            "en": "when did Kobe Bryant play as point guard",
            "zh": "科比 布莱恩特 什么 时候 开始 打 控球 后卫 的",
            "de": "Wann hat Kobe Bryant als Point Guard gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "during the season Kobe Bryant participated in 3 games how many rebounds did he have",
            "zh": "在 本赛季 ， 科比 布莱恩特 参加 了 3 场 比赛 ， 他 有 多少 篮板球",
            "de": "Während der Saison in der Kobe Bryant in 3 Spielen gespielt hat, wie viele Rebounds hatte er?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that played only one position",
            "zh": "只 打过 一个 位置 的 球员",
            "de": "Spieler, die nur an einer Position spielten"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )"
        },
        "question": {
            "en": "what position does Kobe Bryant play for the LA Lakers",
            "zh": "科比 布莱恩特 在 洛杉矶 湖人 打 什么 位置",
            "de": "An welcher Position spielt Kobe Bryant für die LA Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has not played three games",
            "zh": "哪个 球员 没有 打 到 三场 比赛 ？",
            "de": "Welcher Spieler hat keine drei Spiele gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant have over a season and turnovers",
            "zh": "科比 布莱恩特 在 一个 赛季 中有 多少 盖帽 和 失误",
            "de": "Wie viele blocks und turnovers hatte Kobe Bryant während der Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "during the season in which Kobe Bryant participated in 3 games how many points was he responsible for",
            "zh": "在 科比 布莱恩特 参加 了 三场 比赛 的 赛季 他 贡献 了 多少 分",
            "de": "Wie viele Punkte mache Kobe in der Saison er drei Spiele spielte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with more than three blocks in the season",
            "zh": "说出 一个 在 这 赛季 里 有 多于 三个 盖帽 的 球员",
            "de": "Nenne einen Spieler mit mehr als 3 Blocks in der Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player whose number of assists over a season is less than that of player Kobe Bryant over a season",
            "zh": "在 一个 赛季 中 助攻 次数 比 科比 布莱恩特 少 的 球员",
            "de": "Spieler, dessen Anzahl an Vorlagen in einer Saison geringer ist als die des Spielers Kobe Bryant in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe have when scoring three points",
            "zh": "科比 在 得到 3 分时 有 多少 失误",
            "de": "Wie viele Turnovers hatte Kobe, wenn er 3 Punkte erzielte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant have during a single season that is over 3 steals",
            "zh": "在 一个 赛季 超过 3 次 抢断 的 情况 下 科比 布莱恩特 有 多少 盖帽",
            "de": "Wie viele Blocks hatte Kobe Bryant während einer Saison, in der er 3 Steals hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player whose number of steals over a season is same as that of player Kobe Bryant over a season",
            "zh": "跟 科比 布莱恩特 一个 赛季 里 的 抢断 一样 多 的 球员",
            "de": "Spieler, dessen Anzahl von Steals innerhalb einer Season die gleiche ist wie von Kobe Bryant innerhalb einer Saison."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position did Kobe Bryant play when he had over three points in a season",
            "zh": "科比 布莱恩特 在 他 有 超过 三分 的 一个 赛季 中 打 什么 位置",
            "de": "Auf welcher Position spielte Kobe Bryant, als er mehr als drei Punkte in einer Saison hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has less rebounds than Kobe Bryant",
            "zh": "比 科比 布莱恩特 篮板 少 的 球员",
            "de": "Wer hat weniger Rebounds als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with the largest number of fouls over all seasons",
            "zh": "在 全 赛季 里 犯规 最多 的 球员",
            "de": "Der Spieler mit den meisten Fouls in allen Saisonen"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )"
        },
        "question": {
            "en": "where did Kobe Bryant play in 2004",
            "zh": "2004 年 科比 布莱恩特 在 哪里 比赛",
            "de": "Wo hat Kobe Bryant 2004 gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players made less than 4 assists over a season",
            "zh": "哪个 球员 一个 赛季 的 助攻 小于 4 个",
            "de": "Welche Spieler hatten weniger als 4 Assist in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "if Kobe Bryant has 3 assists in a season what's his average steal total",
            "zh": "如果 科比 在 一个 赛季 有 3 次 助攻 ， 他 的 平均 抢断 总数 是 多少",
            "de": "Wenn Kobe Bryant 3 Assists macht in einer Saison, wie ist sein Steal durchschnitt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds did Kobe Bryant get after 3 steals",
            "zh": "在 3 次 抢断 后 ， 科比 得到 了 多少 篮板球",
            "de": "Wie viele Rebounds hat Kobe Bryant nach 3 Steals bekommen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has made no more than 3 steals per season in their career",
            "zh": "哪些 选手 在 他们 的 职业生涯 中 一个 赛季 中 抢断 不 多于 三个",
            "de": "Wer machte nicht mehr als drei Steals pro Saison in seiner Karriere?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players made at least 3 rebounds over the season",
            "zh": "哪些 选手 在 本赛季 中 至少 有 三个 篮板球",
            "de": "Welche Spieler machten mindestens drei Rebounds in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )"
        },
        "question": {
            "en": "who did Kobe Bryant play for when he had 3 points in a season",
            "zh": "科比 布莱恩 在 只 取得 了 3 分 的 赛季 是 为 谁 效力 的 ？",
            "de": "Für wen hat Kobe Bryant gespielt, als er 3 Punkte in einer Saison hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who is a player with 3 or less fouls each season",
            "zh": "谁 是 每个 赛季 有 3 次 或 更少 犯规 的 球员",
            "de": "Wer ist ein Spieler mit 3 oder weniger Fouls pro Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant have in the season when he had three steals",
            "zh": "科比 布莱恩特 在 他 有 3 个 抢断 的 赛季 有 多少 个 盖帽",
            "de": "Wie viele Blocks hatte Kobe Bryant in der Saison in der er drei Steals hattte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games did Kobe Bryant have 3 turnovers in",
            "zh": "科比 布莱恩 在 多少 个 赛季 里 出现 了 三次 失误 ？",
            "de": "In wie vielen Spielen hatte Kobe bryant drei Turnover?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find the players with turnover tallies of at least 3 in any one season",
            "zh": "找到 在 任何 一个 赛季 失误 最少 三次 的 球员",
            "de": "Finde die Spieler mit einer Turnover-Anzahl von mindestens drei in einer beliebigen Saison."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player that has played at least 3 games in a season",
            "zh": "在 一个 赛季 至少 打 了 3 场 比赛 的 球员",
            "de": "Spieler, der mindestens 3 Spiele in einer Saison gespielt hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players with less points scored than Kobe Bryant over all seasons",
            "zh": "在 所有 赛季 中 得分 少于 科比 布莱恩特 的 运动员 。",
            "de": "spieler mit weniger punkten als kobe bryant in allen saisons"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals Kobe Bryant made over a season in which he made 3 rebounds",
            "zh": "在 抢 得 3 个 篮板 的 赛季 ， 科比 布莱恩特 有 多少 次 抢断 ？",
            "de": "Wie viele Steals machte Kobe Bryant in der Saison in der er 3 Rebounds machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds has Kobe Bryant made in a season at point guard",
            "zh": "科比 在 一个 控球 后卫 的 赛季 中有 多少 篮板",
            "de": "Wie viele Rebounds hatte Kobe Bryant in einer Saison als Point Guard gemacht?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players who played for the Cleveland cavaliers or Los Angeles Lakers",
            "zh": "为 克利夫兰 骑士队 或 洛杉矶 湖人队 效力 的 球员",
            "de": "Spieler, die für die Cleveland Cavaliers oder Los Angeles Lakers spielten"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )"
        },
        "question": {
            "en": "in which positions did Kobe Bryant make 3 fouls in a season",
            "zh": "一个 赛季 里 在 什么 位置 Kobe Bryant 有 三次 犯规 ？",
            "de": "Auf welchen Positionen machte Kobe Bryant mehr als 3 Fouls in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists does Kobe Bryant average",
            "zh": "科比 的 平均 助攻 数是 多少",
            "de": "Wie viele Assists macht Kobe Bryant im Durchschnitt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who's got at least 3 blocks in a season",
            "zh": "谁 在 一个 赛季 中 至少 有 3 个 盖帽",
            "de": "Wer hat mindestens 3 blocks in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name the player who played for the most number of teams",
            "zh": "说出 效力 球队 最多 的 运动员 。",
            "de": "Nenne den Spieler der für die größte Anzahl an Teams gespielt hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had 3 or less turnovers",
            "zh": "谁 有 3 次 或 更 少 的 失误",
            "de": "Wer hatte 3 oder weniger Turnovers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "what is the number of blocks played by Kobe Bryant over the season",
            "zh": "本赛季 科比 布莱恩特 的 盖帽 数量 是 多少 ？",
            "de": "Wieviele blocks wurden von Kobe Bryant über die Saison gemacht?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )"
        },
        "question": {
            "en": "in which season did Kobe Bryant play as point guard",
            "zh": "科比 在 哪个 赛季 担任 控球 后卫",
            "de": "In welcher Saison spielte Kobe Bryant als Point Guard?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "note those players with steals over a season equal to or more than the number of steals made by Kobe Bryant",
            "zh": "记录 下 哪些 赛季 抢断 等于 或者 多于 科比 布莱恩特 抢断 数量 的 球员",
            "de": "Notiere diese Spieler mit Steals über eine Saison gleich oder mehr als die Anzahl an Steals gemacht von Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant have when he had 3 assists",
            "zh": "当 科比 布莱恩特 有 3 次 助攻 时 他 有 多少 次 犯规",
            "de": "wie viele Fouls hatte Kobe Bryant, als er 3 Assists hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has not got 3 turnovers",
            "zh": "哪个 球员 没有 3 次 失误",
            "de": "Welcher Spieler hat keine drei Ballverluste?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points were made by Kobe Bryant over a season in which he made 3 steals",
            "zh": "整个 赛季 中当 科比 布莱恩特 有 3 次 抢断 时 科比 布莱恩特 拿 了 多少 分",
            "de": "Wie viele Punkte macht Kobe Bryant in einer Saison, in der er drei Steals machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )"
        },
        "question": {
            "en": "what season did Kobe Bryant play",
            "zh": "科比 在 哪个 赛季 打球",
            "de": "In welcher Saison spielte Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )"
        },
        "question": {
            "en": "in what year did Kobe Bryant have three assists",
            "zh": "哪一年 科比 布莱恩特 有 3 次 助攻",
            "de": "In welchem Jahr hatte Kobe Bryant drei Vorlagen"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has scored more than 3 points",
            "zh": "哪位 球员 得分 超过 3 分",
            "de": "Welcher Spieler hat mehr als 3 Punkte erzielt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that started playing between the 2004 and 2010 seasons",
            "zh": "2004 年 和 2010 年 赛季 之间 开始 打球 的 球员",
            "de": "Spieler, die zwischen den Saisons 2004 und 2010 anfingen zu spielen"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many three-point rebounds did Kobe Bryant have",
            "zh": "科比 布莱恩特 有 多少 三分 篮板球",
            "de": "Wie viele Drei-Punkte-Rebounds hatte Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find players with blocks per season scores for any one season equivalent to blocks per season score for any one season performed by Kobe Bryant",
            "zh": "找到 每 赛季 阻拦 次数 和 科比 布莱恩特 相当 的 球员",
            "de": "Vergleiche Spieler mit Blöcken per Saisonergebnissse für eine beliebige Saison im Gegensatz zu einer Saison die von Kobe Bryant durchgeführt wurde"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players with less than 4 rebounds",
            "zh": "篮板 少于 4 个 的 球员",
            "de": "Spieler mit weniger als 4 Rebounds"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who plays on the same team as Kobe Bryant",
            "zh": "谁 和 科比 布莱恩特 在 同一 队 效力",
            "de": "Wer spielt im gleichen Team wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many times has Kobe Bryant started as point guard",
            "zh": "科比 布莱恩特 有 多少 次 作为 控球 后卫 开始",
            "de": "Wie viele Male ist Kobe Bryant als Point Guard gestartet?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with more than three steals during the season",
            "zh": "说出 一个 在 赛季 中有 多于 三次 抢断 的 球员",
            "de": "Nenne einen Spieler mit mehr als drei Steals in der Saison."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe Bryant have on the Los Angeles Lakers",
            "zh": "科比 布莱恩特 在 洛杉矶 湖人队 的 助攻 数是 多少",
            "de": "Wie viele Assists hatte Kobe Bryant bei den Los Angeles Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players with more than 3 steals over all seasons",
            "zh": "在 所有 赛季 有 多于 三次 抢断 的 球员",
            "de": "Spieler mit mehr als 3 Steals in allen Saisons?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that played for the Lakers or the Cavs",
            "zh": "为 湖人队 或 骑士队 效力 的 球员",
            "de": "Spieler die für die Lakers oder die Cavs gespielt haben"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "games played by Kobe Bryant over all seasons with 3 fouls",
            "zh": "科比 布莱恩特 在 整个 赛季 都 有 过 3 次 犯规 的 比赛",
            "de": "Spiele, die Kobe Bryant in allen Spielzeiten mit 3 Fouls gespielt hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant have after 3 games",
            "zh": "科比 布莱恩特 在 三场 比赛 之后 有 多少 次 失误",
            "de": "Wie viele Turnover hatte Kobe Bryant nach 3 Spielen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "during the season in which he had 3 turnovers name the number of steals attributable to Kobe Bryant",
            "zh": "科比 布莱恩特 在 有 3 次 失误 的 赛季 ， 抢断 有 多少 次 ？",
            "de": "Nenne die Anzahl an Steals, die Kobe Bryant in der Saison zugeschrieben wurden, in der er 3 Turnover hatte."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls Kobe Bryant made over the season in which he made 3 turnovers",
            "zh": "在 有 ３ 次 失误 的 赛季 ， 科比 布赖恩 特有 多少 次 犯规 ？",
            "de": "wie viele Fouls Kobe Bryant in der Saison gemacht hat, in der er 3 Umsätze gemacht hat."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )"
        },
        "question": {
            "en": "what season did Kobe Bryant play 3 games in",
            "zh": "科比 在 哪个 赛季 打 了 3 场 比赛",
            "de": "In welcher Saison hat Kobe Bryant 3 Spiele gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe Bryant have playing point guard in a season",
            "zh": "科比 布莱恩特 在 一 赛季 中 作为 控球 后卫 有 多少 次 助攻",
            "de": "Wie viele Assists hatte Kobe Bryant als Point Guard in der Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that did not have more than three steals",
            "zh": "没有 超过 三次 抢断 的 球员",
            "de": "Spieler, die nicht mehr als drei Steals hatten"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals Kobe Bryant made in the season in which he played in point guard position",
            "zh": "科比 布莱恩特 在 他 打 控球 后卫 的 赛季 中有 多少 次 抢断",
            "de": "Wie viele Steals hat Kobe Bryant in der Saison gemacht in der er auf der Point Guard Position gespielt hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with fouls over a season not less than fouls over a season of player Kobe Bryant",
            "zh": "一个 赛季 中 犯规 次数 不少 于 科比 布莱恩特 的 球员",
            "de": "Spieler dessen Anzahl an Fouls in einer Saison nicht geringer ist als die von Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did point guard Kobe Bryant have",
            "zh": "控球 后卫 科比 布莱恩特 失误 了 多少 次",
            "de": "Wie viele Turnovers hatte Point Guard Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "for the season in which he played with the Los Angeles Lakers name the number of blocks attributable to Kobe Bryant",
            "zh": "在 科比 布莱恩特 为 洛杉矶 湖人队 效力 的 赛季 ， 他 有 多少 次 盖帽 ？",
            "de": "Nenne die Anzahl der Blocks von Kobe Bryant für die Saison, als er für die Los Angeles Lakers spielte."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )"
        },
        "question": {
            "en": "in which season did Kobe Bryant have more than 3 fouls",
            "zh": "科比 在 哪个 赛季 犯规 超过 3 次",
            "de": "In welcher Saison hatte Kobe Bryant mehr als 3 Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had 3 or less rebounds",
            "zh": "什么 球员 有 3 个 或 更 少 的 篮板球",
            "de": "Welcher Spieler hatte 3 oder weniger Rebounds?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player with more than 3 assists over a season",
            "zh": "一个 赛季 超过 3 次 助攻 的 球员",
            "de": "Spieler mit mehr als 3 Vorlagen in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who had the most rebounds in a season",
            "zh": "谁 在 一个 赛季 中有 最 多 的 篮板球",
            "de": "Wer hatte die meisten Rebounds in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players made more than 3 rebounds in a season",
            "zh": "哪个 球员 在 一个 赛季 中 得到 超过 3 个 篮板",
            "de": "welche Spieler hatten mehr als 3 Rebounds in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players have made at least as many points as Kobe Bryant",
            "zh": "哪些 球员 的 得分 至少 与 科比 一样 多",
            "de": "welche Spieler haben mindestens so viele Punkte wie Kobe Bryant gemacht"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe get after 3 rebounds",
            "zh": "科比 在 3 个 篮板 后 得到 多少 次 抢断",
            "de": "Wie viele Steals hat Kobe nach 3 Rebounds bekommen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had less blocks than Kobe Bryant",
            "zh": "谁 拥有 比 科比 布莱恩特 更少 的 盖帽",
            "de": "wer hatte weniger blocks als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string team ) ) )"
        },
        "question": {
            "en": "what teams has Kobe Bryant played with other than the LA Lakers",
            "zh": "科比 布莱恩 除了 湖人 之外 还给 哪个 球队 效力 过 ？",
            "de": "für welche Mannschaften außer den LA Lakers hat Kobe Bryant gespielt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe Bryant have in a season he played 3 games",
            "zh": "科比 布莱恩 在 他 打 了 三场 比赛 的 赛季 有 多少 次 助攻 ？",
            "de": "wie viele Assists hatte Kobe Bryant in einer Saison, in der er 3 Spiele spielte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers has Kobe had as a Laker",
            "zh": "科比 作为 湖人 有 多少 失误",
            "de": "wie viele Turnovers hatte Kobe als Laker"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has more than 3 fouls every season they've played",
            "zh": "谁 在 每个 参赛 赛季 里 都 有 超过 3 次 犯规 ？",
            "de": "wer hatte mehr als 3 fouls in allen seasons die er gespielt hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe Bryant have the seasons he had 3 fouls",
            "zh": "科比 布莱恩 在 他 犯规 3 次 的 赛季 里 得 了 多少 分 ？",
            "de": "Wie viele Punkte hatte Kobe Bryant in der Saison, in der er drei Fouls hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds Kobe Bryant made in the season he made 3 assists",
            "zh": "科比 布莱恩 在 他 取得 了 三次 助攻 的 赛季 里 取得 了 多少 个 篮板球 ？",
            "de": "Wie viele Rebounds hat Kobe Bryant in der Saison gemacht, in der er 3 Assists hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "number of played games over a season of player Kobe Bryant whose number of rebounds over a season",
            "zh": "科比 布来 恩 一个 赛季 的 比赛 场次 其 篮板 次数",
            "de": "Anzahl der gespielten Spiele innerhalb einer Saison des Spielers Kobe Bryant, dessen Anzahl der Rebounds innerhalb einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has more than 3 games played during a season",
            "zh": "哪个 球员 在 赛季 里面 打 了 3 场 以上 的 比赛 ？",
            "de": "Welcher Spieler hat mehr als 3 gespielte Spiele in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "number of games Kobe Bryant has played in a season",
            "zh": "科比 布莱恩特 在 一个 赛季 中 的 比赛 数量",
            "de": "Anzahl der Spiele, die Kobe Bryant in einer Saison gespielt hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has got less than 3 rebounds",
            "zh": "哪个 球员 得到 不到 3 个 篮板",
            "de": "Welcher Spieler hat weniger als 3 rebounds?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )"
        },
        "question": {
            "en": "how many seasons has Kobe Bryant played",
            "zh": "科比 布莱恩 打 了 多少 个 赛季 ？",
            "de": "Wie viele Saisons hat Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "during the 2004 season how many blocks was Kobe Bryant responsible for",
            "zh": "在 2004 赛季 期间 ， 科比 布莱恩特 负责 了 多少 次 盖帽",
            "de": "Für wie viele Blocks war Kobe Bryant während der Saison 2004 verantwortlich?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player that doesn't have 3 turnovers",
            "zh": "没有 3 次 失误 的 球员",
            "de": "Spieler der keine drei Turnovers hat"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players have been played the same number of games as Kobe Bryant",
            "zh": "哪些 球员 和 科比 的 比赛 次数 相同",
            "de": "Welche Spieler wurden für die gleiche Anzahl von Spielen wie Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe Bryant score during the season in which he played point guard",
            "zh": "科比 在 他 打 控卫 的 赛季 中 得分 多少 分",
            "de": "Wie viele Punkte erzielte Kobe Bryant in der Saison, in der er Point Guard spielte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find those players with total fouls in any one season equalling an amount more than 3",
            "zh": "找到 那些 在 任何 赛季 总 犯规 次数 多于 3 次 的 球员",
            "de": "Finde die Spieler dessen Gesamtmenge an Fouls in jeglicher Saison gleich einer Menge über drei ist"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds did Kobe Bryant make in seasons where he made 3 steals",
            "zh": "科比 布莱恩 在 他 取得 3 个 抢断 的 赛季 有 多少 次 篮板球 ？",
            "de": "Wie viele Rebounds hat Kobe Bryant in einer Saisons gemacht, in denen er 3 Steals machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points does Kobe Bryant make per season when he's got at least 3 blocks",
            "zh": "当 科比 布莱恩特 至少 有 3 个 盖帽 时 ， 他 每个 赛季 的 得分 是 多少",
            "de": "Wie viele Punkte macht Kobe Bryant pro Saison, wenn er mindestens drei Blocks hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that tied Kobe in total scoring for the season",
            "zh": "在 本赛季 总得分 上 和 科比 布莱恩特 打成平手 的 球员",
            "de": "Spieler, die mit Kobe in der Gesamtpunktzahl der Saison punktgleich waren."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists does Kobe Bryant have in seasons with exactly 3 turnovers",
            "zh": "科比 布莱恩特 在 有 正好 3 次 失误 的 赛季 中有 多少 次 助攻",
            "de": "Wie viele Assists macht Kobe Bryant in Saisons mit genau 3 turnovers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant have in games in which he had three assists",
            "zh": "科比 布莱恩特 在 有 3 次 助攻 的 比赛 中有 多少 次 犯规",
            "de": "Wie viele Fouls hatte Kobe Bryant in Spielen, in denen er drei Vorlagen hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players did not play in 2004",
            "zh": "哪些 球员 在 2004 年 没有 参赛 ？",
            "de": "Welche Spieler spielten nicht in 2004?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls does Kobe Bryant have in a typical season",
            "zh": "科比 在 一个 典型 的 赛季 中有 多少 次 犯规",
            "de": "Wie viele Fouls hat Kobe Bryant in einer typischen Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who has less than 3 rebounds over a season",
            "zh": "一个 赛季 篮板球 少于 3 个 的 球员",
            "de": "Spieler, der in einer Saison weniger als 3 Rebounds hat."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points has Kobe Bryant gotten in a season",
            "zh": "科比 布莱恩特 一个 赛季 拿 了 多少 分 ？",
            "de": "wie viele Punkte hat Kobe Bryant in einer Saison bekommen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant have as point guard",
            "zh": "科比 布莱恩特 在 控球 后卫 的 位置 上 有 几次 失误 ？",
            "de": "Wieviele Ballverluste hatte Kobe Bryant als Aufbauspieler?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe score after 3 fouls",
            "zh": "科比 布莱恩 在 犯规 3 次后 得 了 多少 分 ？",
            "de": "Wie viele Punkte erzielte Kobe nach 3 Fouls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games did Kobe Bryant play in which he made three rebounds",
            "zh": "科比 布莱恩特 在 多少 他 打过 的 比赛 中 拿到 过 三次 篮板球 ？",
            "de": "Wie viele Spiele hat Kobe Bryant gespielt, in denen er drei Rebounds gemacht hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe Bryant have in the season in which he had three assists",
            "zh": "科比 布莱恩特 在 他 有 三次 助攻 的 的 那个 赛季 有过 几次 抄截 ？",
            "de": "Wie viele Steals hatte Kobe Bryant in der Saison, in der er drei Assists hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe Bryant have when he had 3 fouls",
            "zh": "在 拿到 三次 犯规 的 时候 ， 科比 布莱恩特 有过 几次 抄截 ？",
            "de": "Wie viele Steals hatte Kobe Bryant als er drei Fouls hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds did Kobe Bryant have during the same season in which his number of total fouls was 3",
            "zh": "科比 布莱恩特 在 他 总共 拿过 三次 犯规 的 那个 赛季 有 几次 篮板球 ？",
            "de": "Wie viele Rebounds hatte Kobe Bryant in der gleichen Saison, in der er insgesamt 3 Fouls begangen hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find those players with fouls to their credit equalling at least 3 in any given season",
            "zh": "找到 在 任何 一个 赛季 里 有 至少 三个 犯规 记在 他们 名下 的 那些 球员",
            "de": "Finde diejenigen Spieler, denen man mindestens 3 Fouls in jeder Saison anrechnen kann"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position did Kobe Bryant play in 2004",
            "zh": "科比 布莱恩特 在 2004 年 打 什么 位置",
            "de": "In welcher Position spielte Kobe Bryant in 2004"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.team.lakers en.team.cavaliers ) )"
        },
        "question": {
            "en": "which team is it the LA Lakers or the Cleveland cavaliers",
            "zh": "那 是 哪支 队伍 洛杉矶 湖人队 还是 克利夫兰 骑士队",
            "de": "welches Team sind es die LA Lakers oder die Cleveland Kavaliere?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had the same or more steals as Kobe Bryant",
            "zh": "哪个 球员 跟 科比 布莱恩 有 一样 或 更 多 的 抢断 ？",
            "de": "Welcher Spieler hatte ebensoviele oder mehr Steals wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe Bryant have all season as an LA Laker",
            "zh": "科比 布莱恩特 在 为 洛杉矶 湖人队 效力 的 整个 赛季 中有 几次 抢断",
            "de": "Wie viele Steals hatte Kobe Bryant die ganze Saison als LA Laker"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games has Kobe Bryant participated in during any one season",
            "zh": "科比 布莱恩特 在 任意 赛季 参加 多少 场 比赛",
            "de": "An wie vielen Spielen hat Kobe Bryant im Verlauf in irgendeiner Saison teilgenommen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team was Kobe Bryant on when he scored 3 points over the season",
            "zh": "科比 布莱恩特 在 一个 他 得 了 三分 的 赛季 在 哪个 队",
            "de": "In welchem Team spielte Kobe Bryant, als er in der Saison drei Punkte machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player who has minimum 3 points over a season",
            "zh": "一个 赛季 至少 得到 3 分 的 球员",
            "de": "Spieler, der in einer Saison mindestens 3 Punkte hat."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls does Kobe Bryant have in seasons with 3 blocks",
            "zh": "科比 在 3 个 盖帽 的 赛季 中有 多少 次 犯规",
            "de": "Wie viele Fouls hatte Kobe Bryant in Saisons mit 3 Blocks?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player that plays less than two positions",
            "zh": "打 过 少于 两个 位置 的 球员",
            "de": "Spieler, der weniger als zwei Positionen spielt."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player is not on the Los Angeles Lakers",
            "zh": "哪个 球员 不是 为 洛杉矶 湖人 效力 的 ？",
            "de": "Welcher Spieler ist nicht bei den Los Angeles Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant of the Los Angeles Lakers have during the season",
            "zh": "在 这个 赛季 洛杉矶 湖人队 的 科比 布莱恩特 有 多少 次 犯规 ？",
            "de": "Wie viele Fouls hatte Kobe Bryant von den Los Angeles Lakers während der Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player played with Kobe Bryant",
            "zh": "哪个 球员 是 跟 科比 布莱恩 一起 打球 的 ？",
            "de": "welcher Spieler spielte mit Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find those players who have scored tallies equivalant to those of Kobe Bryant in any one specific season",
            "zh": "找出 在 任一 赛季 得分 和 科比 布莱恩特 得分 相同 的 那些 运动员 。",
            "de": "Finden Sie die Spieler, die in einer bestimmten Saison gleiche Ergebnisse erzielt haben wie Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players whose total number of blocks in a season is the fewest that Kobe Bryant had in a season",
            "zh": "一个 赛季 的 盖帽 数 等于 科比 布莱恩特 一个 赛季 最少 盖帽 数 的 运动员 。",
            "de": "Spieler, deren Gesamtzahl an Blocks in einer Saison die niedrigste ist, die Koe Bryant in einer Saison hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name someone with at least as many games played per season as Kobe Bryant",
            "zh": "说出 一个 每个 赛季 上场 次数 至少 和 科比 布莱恩特 一样 多 的 运动员 。",
            "de": "Nennen Sie jemanden mit mindestens so vielen Spielen pro Saison wie Kobe Bryant."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks Kobe Bryant made in the season in which he made 3 turnovers",
            "zh": "在 科比 布赖恩 特有 ３ 次 失误 的 赛季 ， 他 有 多少 次 盖帽 ？",
            "de": "Wie viele Blocks machte Kobe Bryant in der Saison, in der er drei Ballverluste hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "what is the number of turnovers by Kobe Bryant who made 3 fouls over the season",
            "zh": "在 科比 布莱恩特 有 ３ 次 犯规 的 赛季 ， 他 有 多少 次 失误 ？",
            "de": "Wie ist die Anzahl der Turnovers von Kobe Bryant, der innerhalb der Saison drei Fouls beging?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe Bryant get",
            "zh": "科比 布赖恩 特有 多少 次 助攻 ？",
            "de": "Wie viele Vorlagen bekam Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had the same amount of assists as Kobe Bryant",
            "zh": "哪个 运动员 和 科比 布赖恩 特 助攻 次数 相同 ？",
            "de": "welcher Spieler hatte die gleiche Anzahl von Vorlagen wie Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had less than 3 blocks in a season",
            "zh": "谁 在 一个 赛季 中 少于 3 个 盖帽",
            "de": "Wer hatte weniger als drei Blocks in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position was Kobe Bryant playing in the season in which he committed 3 fouls",
            "zh": "科比 布莱恩 在 他 犯规 了 3 次 的 那个 赛季 是 打 哪个 位置 的 ？",
            "de": "welche Position spielte Kobe Bryant in der Saison, in der er 3 Fouls beging?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that played at the same time as Kobe Bryant",
            "zh": "和 Kobe Bryant 同时 打球 的 球员 们",
            "de": "Spieler, die zur gleichen Zeit spielten wie Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "during the season he scored 3 points what was Kobe Bryant's steal tally",
            "zh": "在 他 取得 3 分 的 赛季 ， 科比 布莱恩 的 抢断 次数 是 多少 ？",
            "de": "Während der Saison erzielte er drei Punkte, wie viele Steals hatte Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with more steals during the season than Kobe Bryant",
            "zh": "举出 一个 在 赛季 里面 比 科比 布莱恩 取得 更 多 抢断 的 球员 的 名字 ？",
            "de": "Nenne einen Spieler, der während der Saison mehr Übernahmen hatte als Kobe Byrant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points and turn overs does Kobe Bryant have over a season",
            "zh": "Kobe Bryant 在 一个 赛季 中得 了 多少 分 和 多少 个 失误",
            "de": "Wie viele Punkte und Turnovers hat Kobe Bryant über eine Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )"
        },
        "question": {
            "en": "season of Kobe Bryant with 3 points",
            "zh": "科比 布莱恩 得 了 3 分 的 赛季",
            "de": "Saison von Kobe Bryant mit 3 Punkten"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had the same amount of fouls as Kobe Bryant",
            "zh": "什么 球员 与 科比 的 犯规 次数 相同",
            "de": "Welcher Spieler hatte die gleiche Anzahl an Fouls wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string position ) ) )"
        },
        "question": {
            "en": "does Kobe Bryant play point guard",
            "zh": "科比 布莱恩特 是 打 控球 后卫 吗",
            "de": "Spielt Kobe Bryant als Punkte Verteidiger"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant have when he had three fouls",
            "zh": "科比 在 三次 犯规 时有 多少 次 盖帽",
            "de": "Wie viele Blocks hatte Kobe Bryant, als er drei Fouls hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with no more assists than Kobe Bryant in a season",
            "zh": "举出 一个 在 赛季 里 没有 比 科比 布莱恩 取得 更 多 助攻 的 球员 的 名字",
            "de": "Nennen Sie einen Spieler mit nicht mehr Vorlagen als Kobe Bryant in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "when Kobe Bryant has 3 steals in a season how many points does he usually have",
            "zh": "当 Kobe Bryant 一个 赛季 里 有 三个 偷球 时 ， 他 通常 有 得 多少 分 ？",
            "de": "Wenn Kobe Bryant 3 Übernahmen in einer Saison hatte, wie viele Punkte hat er dann normalerweise?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points has Kobe Bryant gotten in a season",
            "zh": "科比 布莱恩特 在 一个 赛季 已经 得 了 多少 分",
            "de": "Wie viele Punkte hat Kobe Bryant in einer Saison gesammelt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what team was he on during the season that Kobe Bryant had 3 fouls",
            "zh": "科比 布莱恩特 在 他 有 三次 犯规 的 赛季 为 哪支 球队 效力",
            "de": "In welcher Mannschaft war er während der Saison, in der Kobe Bryant 3 Fouls hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had the same number of steals as Kobe Bryant",
            "zh": "谁 与 科比 · 布莱恩特 有 同样 数量 的 抢断",
            "de": "Wer hat die gleiche Anzahl an Steals wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had no more than the number of fouls obtained by Kobe Bryant",
            "zh": "哪位 球员 犯规 的 次数 没有 科比 多",
            "de": "Welcher Spieler hatte nicht mehr als die Anzahl der Fouls von Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant have all season as point guard",
            "zh": "科比 布莱恩特 在 整个 作为 控球 后卫 的 赛季 有 多少 次 失误",
            "de": "Wie viele Ballverluste hatte Kobe Bryant während der gesamten Saison als Aufbauspieler"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has had equal to or less fouls than Kobe Bryant",
            "zh": "哪个 球员 有 和 Kobe Bryant 一样 或 还 少 的 犯规 次数 ？",
            "de": "Welcher Spieler hatte genauso viele oder weniger Fouls als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "are there players who have participated in either the same number or less than the same number of games in any one season as Kobe Bryant",
            "zh": "有 哪位 球员 在 一个 赛季 里 参与 了 跟 科比 一样 或 更 少 的 球赛",
            "de": "Gibt es Spieler, die in irgendeiner Saison an genauso vielen oder weniger Spielen teilgenommen haben als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has highest number rebounds",
            "zh": "哪个 球员 有 最 多 的 篮板球",
            "de": "Welcher Spieler hat die höchste Anzahl an Rebounds?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has had less fouls than Kobe Bryant during a season",
            "zh": "哪个 球员 在 一个 赛季 中有 比 科比 布莱恩特 更少 的 犯规 次数",
            "de": "Welcher Spieler hatte in einer Saison weniger Fouls als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had less assists than Kobe Bryant",
            "zh": "哪个 球员 的 助攻 比 科比 布莱恩特 少",
            "de": "Welcher Spieler hatte weniger Vorlagen als Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "has Kobe Bryant had a season with exactly 3 rebounds",
            "zh": "科比 布莱恩特 有过 一个 赛季 刚好 3 个 篮板 吗",
            "de": "Hatte Kobe Bryant eine Saison mit exakt 3 Rebounds"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant who had three steals have during the season",
            "zh": "在 本赛季 中有 三次 抢断 的 科比 布莱恩特 有 多少 失误",
            "de": "Wie viele Turnover hatte Kobe Bryant in der Saison, in der er drei Steals hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "when Kobe Bryant has at least 3 fouls in a season how many rebounds did he have",
            "zh": "这个 赛季 中当 科比 布莱恩特 有 至少 3 个 犯规 的 时候 他 有 多少 篮板",
            "de": "Als Kobe Bryant mindestens 3 Fouls in einer Saison hatte, wie viele Rebounds hatte er?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games has Kobe Bryant made at least 3 rebounds in this season",
            "zh": "一个 赛季 里 Kobe Bryant 有 多少 个 至少 是 三个 蓝 板球 的 比赛 呀 ？",
            "de": "In wie vielen Spielen dieser Saison hat Kobe Bryant mindestens 3 Rebounds erzielt"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "how many rebounds did Kobe Bryant have when he had 3 assists",
            "zh": "当 科比 布莱恩特 有 3 个 助攻 时 科比 有 多少 篮板",
            "de": "Wie viele Rebounds hatte Kobe Bryant, als er drei Assists hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with the same assists per season as Kobe Bryant",
            "zh": "给 一个 每个 赛季 有 跟 科比 布莱恩特 相同 助攻 数 的 球员 命名",
            "de": "Nenne einen Spieler der die selbe Anzahl an Assists pro Saison hat wie Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that play point guard",
            "zh": "打 控球 后卫 的 球员",
            "de": "Spieler, die als Point Guard spielen"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "steals by Kobe Bryant over all season with 3 blocks",
            "zh": "科比 布莱恩特 整个 赛季 都 有 3 个 盖帽 抢断",
            "de": "Steals von Kobe Bryant in der gesamten Saison mit drei Blocks"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who played more than 3 games all season",
            "zh": "谁 在 所有 的 赛季 里 打 了 不止 三场 比赛 ？",
            "de": "Wer spielte mehr als drei Spiele in der gesamten Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players have had more assists than Kobe Bryant",
            "zh": "哪些 球员 有 比 科比 布莱克 特 更 多 的 助攻 次数",
            "de": "Welche Spieler hatten mehr Assists als Kobe Bryant gehabt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )"
        },
        "question": {
            "en": "for the season in which he performed 3 blocks name the number of rebounds attributable to Kobe Bryant",
            "zh": "在 得到 3 个 盖帽 的 那个 赛季 ， 科比 布莱恩特 的 篮板球 数是 多少 ？",
            "de": "In der Saison in der er 3 Blocks durchgeführt hat, nenne die Anzahl an Rebounds die Kobe Bryant zugeordnet werden können"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )"
        },
        "question": {
            "en": "on what team did Kobe Bryant only have 3 turnovers in a season",
            "zh": "科比 在 哪支 球队 的 时候 一个 赛季 只有 3 次 丢球 ？",
            "de": "In welchem Team hatte Kobe Bryant nur drei Ballverluste in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has played the maximum number of fouls",
            "zh": "哪个 球员 有 最 多 的 犯规 次数 ？",
            "de": "Welcher Spieler hat die maximale Anzahl an Fouls gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had more or equal to 3 blocks",
            "zh": "谁 已有 了 三个 或 更 多 的 盖 蓝 了 ？",
            "de": "wer hatte mehr oder gleich viele als 3 Blocks"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name of someone with more fouls since the start of the season than Kobe Bryant",
            "zh": "找出 从 赛季 开始 犯规 次数 比 科比 还要 多 的 球员",
            "de": "Name von jemandem mit mehr Fouls seit dem Start der Saison als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe Bryant have for the 04 season",
            "zh": "在 04 赛季 科比 布莱恩特 有 多少 次 助攻 ？",
            "de": "Wie viele Vorlagen hatte Kobe Bryant für die Saison 04?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe get after playing 3 fouls",
            "zh": "在 有 三次 犯规 之后 科比 有 几次 丢球 ？",
            "de": "wie viele Turnovers hatte Kobe nach 3 Fouls"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player with fewer assists than Kobe Bryant",
            "zh": "找出 一个 比 科比 助攻 次数 更少 的 球员",
            "de": "Nennen Sie einen Spieler mit weniger Vorlagen als Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had fewer than three rebounds",
            "zh": "哪个 球员 篮板 数 低于 3 个 ？",
            "de": "welcher Spieler hatte weniger als drei Rebounds"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points did Kobe Bryant score after getting 3 steals",
            "zh": "科比 在 3 个 抢断 后 得 了 多少 分",
            "de": "Wie viele Punkte erzielte Kobe Bryant, nachdem er drei Steals erhalten hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name players responsible for the least number of assists over any given season",
            "zh": "列出 在 任意 赛季 贡献 最少 助攻 的 球员 的 名字",
            "de": "Nenne Spieler die für die niedrigste Anzahl an Assists verantwortlich sind über irgendeine gegebene Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals does Kobe Bryant get in his usual season",
            "zh": "科比 通常 在 一个 赛季 有 多少 抢断",
            "de": "Wie viele Steals bekommt Kobe Bryant in seiner gewöhnlichen Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had the least blocks this season",
            "zh": "这个 赛季 盖帽 最少 的 球员",
            "de": "Welcher Spieler hatte die wenigsten Blocks in dieser Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant commit the seasons he had 3 blocks",
            "zh": "科比 布莱恩 在 他 取得 三个 封阻 的 赛季 有 多少 个 犯规 ？",
            "de": "Wie viele Fouls beging Kobe Bryant in den Saisons, in denen er 3 Blocks hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe get after 3 rebounds",
            "zh": "在 科比 布莱恩 取得 三个 篮板球 之后 他 贡献 了 多少 个 助攻 ？",
            "de": "Wie viele assists hatte Kobe nach 3 rebounds?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who averages at least 3 fouls a season",
            "zh": "谁 在 每个 赛季 平均 至少 有 三次 犯规 ？",
            "de": "Wer macht durchschnittlich mindestens 3 Fouls pro Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "number of turnovers for Kobe Bryant over all season with 3 or more blocks",
            "zh": "科比 布莱恩 在 他 取得 三个 以上 盖篮 的 所有 赛季 里面 有 多少 次 失误 ？",
            "de": "Anzahl von Turnovers von Kobe Bryant über alle Saisons mit 3 oder mehr Blocks"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players tied with Kobe Bryant for blocks in a season",
            "zh": "在 一个 赛季 跟 科比 布莱恩 盖篮数 相同 的 球员",
            "de": "Spieler, die genauso viele Blocks in einer Saison haben wie Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many all season fouls did Kobe Bryant have when his all season points were 3",
            "zh": "当 科比 布莱恩 全 赛季 得分 是 3 份 的 时候 ， 他 的 全 赛季 犯规 是 多少 ？",
            "de": "Wie viele Fouls hatte Kobe Bryant in einer gesamten Saison, in der seine Saisonpunkte 3 betrugen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player does not play for the LA Lakers",
            "zh": "哪个 球员 不是 为 洛杉矶 湖人 效力 的",
            "de": "Welcher Spieler spielt nicht bei den LA Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who gets more than 3 steals a season",
            "zh": "谁 在 一个 赛季 抢断 超过 3 次 ？",
            "de": "Wer erhält mehr als 3 Steals pro Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who made the least steals over a season",
            "zh": "谁 在 一个 赛季 抢断 最少 ？",
            "de": "Wer machte die wenigsten Steals in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "what are the number of steals of player Kobe Bryant over this season with 3 rebounds",
            "zh": "本赛季 球员 科比 · 布莱恩特 抢断 3 个 篮板 的 数量 是 多少 ？",
            "de": "Was ist die Anzahl an Steals des Spielers Kobe Bryant in dieser Saison mit drei Rebounds?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player have played for fewer than two teams",
            "zh": "哪 一个 运动员 效力 的 球队 少于 2 支 ？",
            "de": "Welcher Spieler hat für weniger als zwei Teams gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players have not even made 3 rebounds in a season",
            "zh": "哪些 球员 一个 赛季 里 还 没有 得到 三个 蓝 板球 ？",
            "de": "Welche Spieler haben nicht einmal drei Rebounds in einer Saison erzielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many all season steals did Kobe Bryant have when his points equalled 3",
            "zh": "在 科比 布莱恩特 得 3 分时 的 所有 赛季 ， 总共 有 多少 次 抢断 ？",
            "de": "Wie viele Steals in der Saisons hatte Kobe Bryant, als seine Punkte bei drei waren?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists did Kobe have in seasons when he had 3 steals in a season",
            "zh": "在 有 3 次 抢断 的 赛季 ， 科比 布莱恩特 有 多少 次 助攻 ？",
            "de": "Wie viele Assists hatte Kobe Bryant in den Saisons, als er drei Steals in einer Saison hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists in the season did Kobe Bryant have",
            "zh": "在 这个 赛季 科比 布莱恩特 有 多少 次 助攻 ？",
            "de": "Wie viele Vorlagen machte Kobe Bryant in der Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player has less than 3 rebounds over a season",
            "zh": "哪个 球员 一个 赛季 里 有 不到 三个 蓝 板球 ？",
            "de": "Welcher Spieler hat weniger als drei Rebounds in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "player whose position is point guard or forward",
            "zh": "位置 是 控球 后卫 或者 前锋 的 球员",
            "de": "Spieler, dessen Position Point Guard oder Angreifer ist"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games did Kobe Bryant get 3 rebounds in",
            "zh": "科比 在 多少 场 比赛 中 得到 3 个 篮板球",
            "de": "In wie vielen Spielen hatte Kobe Bryant drei Rebounds?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name the player with the fewest points in the season",
            "zh": "说出 赛季 里 得分 最少 球员 的 人 的 名字",
            "de": "Nennen Sie den Spieler mit den wenigsten Punkten in der Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )"
        },
        "question": {
            "en": "what position does Kobe Bryant play for on the Lakers",
            "zh": "科比 布莱恩特 在 湖人队 打 什么 位置",
            "de": "Auf welcher Position spielt Kobe Bryant für die Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name the player who did not have three steals in the season",
            "zh": "说出 本赛季 没有 三次 抢断 的 球员",
            "de": "Nenne den Spieler der diese Saison keine drei Steals hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals Kobe Bryant made over a season in which he made 3 turnovers",
            "zh": "科比 布莱恩特 在 有 3 个 失误 的 赛季 里 得到 多少 抢断",
            "de": "Wieviele Steals hat Kobe Bryant in einer Saison gemacht, in denen er 3 Turnovers gemacht hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "how many turnovers did Kobe Bryant get when he was at point guard",
            "zh": "科比 布莱恩特 在 是 控球 后卫 时有 多少 次 失误",
            "de": "Wie viele Turnover erzielte Kobe Bryant, als er in der Point Guard-Position war?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "number of fouls over a season of player Kobe Bryant with 3 points over a season",
            "zh": "科比 布莱恩特 在 得 三分 的 那个 赛季 里 有 多少 次 犯规 ？",
            "de": "Anzahl der Fouls in einer Saison des Spielers Kobe Bryant mit 3 Points in einer Saison"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has the most all season assists",
            "zh": "哪个 球员 有 最 多 的 全 赛季 助攻 次数",
            "de": "Welcher Spieler hat die ganze Saison über die meisten Vorlagen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points total did Kobe score during the season that he average three points per game",
            "zh": "科比 布莱恩特 在 平均 得 3 分 的 赛季 里 一共 得 了 多少 分",
            "de": "Wieviele Punkte insgesamt hat Kobe erzielt in der Saison in der er durchschnittlich drei Punkte pro Spiel hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games has Kobe Bryant played",
            "zh": "科比 布莱恩 打 了 多少 场 比赛",
            "de": "Wie viele Spiele hat Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "find those players with a maximum number of turnovers  in a given season equalling that of Kobe Bryant in a given season",
            "zh": "找到 哪些 在 任意 赛季 中 最 多 犯规 次数 和 科比 布莱恩特 在 那 赛季 犯规 次数 相同 的 球员",
            "de": "Finde diejenigen Spieler mit einer Maximalanzahl von Turnovern in einer bestimmten Saison, die der Nummer von Kobe Bryant in einer bestimmten Saison entsprechen."
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has 3 or less steals",
            "zh": "谁 有 3 次 或 更 少 的 抢断",
            "de": "Wer hat drei oder weniger Steals?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "Kobe Bryant scored 3 points",
            "zh": "科比 布莱恩 得 了 三分",
            "de": "Kobe Bryant erzielte 3 Punkte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player played 3 or less games this season",
            "zh": "本赛季 哪位 球员 打 了 3 场 或 更 少 的 比赛",
            "de": "Welcher Spieler spielte diese Saison 3 oder weniger Spiele?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "how many games has Kobe Bryant been a Laker for",
            "zh": "科比 布莱恩 在 湖人 打 了 多少 场 比赛 ？",
            "de": "Wie viele Spiele hat Kobe Bryant für die Lakers gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has gotten 3 or more steals",
            "zh": "谁 有 三次 或者 更 多 的 抢断",
            "de": "Wer hat 3 oder mehr Steaks bekommen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )"
        },
        "question": {
            "en": "what team does point guard Kobe Bryant play for",
            "zh": "控球 后卫 科比 布莱恩 是 为 哪支 球队 效力 的 ？",
            "de": "Für welche Mannschaft spielt Point Guard Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had less than 3 assists",
            "zh": "哪个 球员 有 少于 三次 的 助攻",
            "de": "Welcher Spieler hatte weniger als 3 Vorlagen"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position did Kobe Bryant play in the three games",
            "zh": "在 这 ３ 场 比赛 中 科比 布莱恩特 打 什么 位置 ？",
            "de": "Auf welcher Position hat Kobe Bryant in den drei Spielen gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "blocks by Kobe Bryant over all seasons as point guard",
            "zh": "科比 布莱恩特 作为 控球 后卫 在 全部 赛季 中 的 盖帽 球",
            "de": "Blocks von Kobe Bryant über alle Saisons als Point Guard"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many players are in the team",
            "zh": "团队 中有 多少 玩家",
            "de": "Wie viele Spieler sind in der Mannschaft"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant have over the season in which he had 3 steals",
            "zh": "科比 布莱恩特 在 他 有 三次 抢断 的 赛季 中有 几次 犯规",
            "de": "Wie viele Fouls hat Kobe Bryant über die Saison gemacht in der er 3 Steals hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant have during a single season that he had exactly three fouls",
            "zh": "科比 布莱恩特 在 有 3 个 犯规 的 一个 赛季 有 多少 盖帽",
            "de": "Wie viele Blocks hatte Kobe Bryant während einer einzigen Saison in der er exakt drei Fouls hatte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has the least turnovers",
            "zh": "谁 失误 最少",
            "de": "Wer hat die wenigsten Ballverluste?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant have",
            "zh": "科比 布莱恩特 有 多少 盖帽 球",
            "de": "Wie viele Blocks hatte Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name those players who have performed a specific number of assists over any given season equalling that of Kobe Bryant also over any given season",
            "zh": "说出 在 特定 赛季 和 科比 布莱恩特 有 相当 数量 的 助攻 的 球员",
            "de": "Nennen Sie die Spieler, die in einer bestimmten Saison eine bestimmte Anzahl von Assists ausgeführt haben, die der von Kobe Bryant auch in einer bestimmten Saison entsprechen"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who has had more turnovers than Kobe Bryant",
            "zh": "谁 的 失误 数比 科比 布莱恩特 多",
            "de": "Wer hatte mehr Ballverluste als Kobbe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "blocks made by Kobe Bryant over a season in which he made 3 points",
            "zh": "科比 布莱恩特 命中 3 分 的 赛季 里 的 盖帽 球",
            "de": "Blocks von Kobe Bryant in einer Saison, in der er drei Punkte machte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player scored the same amount of scores as Kobe Bryant this season",
            "zh": "谁 跟 科比 布莱恩特 在 这个 赛季 的 得分 一样",
            "de": "Welcher Spieler hatte die gleiche Zahl an Punkten wie Kobe Bryant in dieser Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )"
        },
        "question": {
            "en": "how many fouls did Kobe Bryant have during his Laker career",
            "zh": "在 湖人队 的 职业生涯 中 科比 布莱恩 有 多少 次 犯规",
            "de": "Wie viele Fauls hatte Kobe Bryant während seiner Karriere bei den Lakers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that had the most blocks over a season",
            "zh": "在 一个 赛季 里 盖帽 最多 的 球员",
            "de": "Spieler, die die meisten Blocks in einer Saison hatten"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )"
        },
        "question": {
            "en": "what teams has Kobe Bryant played on",
            "zh": "科比 布莱恩 在 哪些 球队 效力 过",
            "de": "In welchen Teams hat Kobe Bryant gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had as many turnovers as Kobe Bryant",
            "zh": "哪个 球员 的 失误 与 科比 一样 多",
            "de": "Welcher Spieler hatte genau so viele Turnover wie Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players that have played in the same number of games as Kobe over all seasons",
            "zh": "在 所有 赛季 中 与 科比 打 过 相同 数量 比赛 的 球员",
            "de": "Spieler die in der gleichen Anzahl an Spielen gespielt wie Kobe über alle Saisons"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "players who don't play for Los Angeles Lakers",
            "zh": "不 为 洛杉矶 湖人队 效力 的 球员",
            "de": "Spieler die nicht für die Los Angeles Lakers spielen"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "during his season playing with the Los Angeles Lakers how many turnovers did Kobe Bryant have",
            "zh": "科比 布莱恩特 在 效力 于 洛杉矶 湖人时 有 多少 失误",
            "de": "Während seiner Saison mit den Los Angeles Lakers spielend, wie viele Turnovers hatte Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many players are on the team",
            "zh": "这个 球队 有 多少 个 球员",
            "de": "Wie viele Spieler sind in der Mannschaft?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what players have less than 3 steals during a season",
            "zh": "哪些 球员 在 一个 赛季 有 少于 三次 抢断",
            "de": "Welcher Spieler haben weniger als 3 Steals während einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player had more than three points scored",
            "zh": "哪位 球员 得分 超过 三分",
            "de": "Welcher Spieler hat mehr als drei Punkte erzielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )"
        },
        "question": {
            "en": "which is the team of Kobe Bryant who made 3 blocks",
            "zh": "科比 布莱恩 在 有 三次 盖帽 的 时候 为 哪支 球队 效力",
            "de": "Welches ist das Team von Kobe Bryant der 3 Blocks gemacht hat?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had less blocks than Kobe Bryant this season",
            "zh": "哪位 球员 这个 赛季 比 科比 布莱恩 的 盖帽 数少",
            "de": "Welcher Spieler hatte weniger Blocks als Kobe Bryant diese Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player played for two or less teams",
            "zh": "哪位 球员 为 两支 或者 少于 两支 球队 效力 过",
            "de": "Welcher Spieler hat für zwei or weniger Teams gespielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has the least number of positions",
            "zh": "哪位 球员 打 过 最少 的 位置",
            "de": "Welcher Spieler hat die geringste Anzahl an Positionen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string team ) ) )"
        },
        "question": {
            "en": "what team does Kobe Bryant play for",
            "zh": "科比 布莱恩 为 哪 只 球队 效力",
            "de": "Für welches Team spielt Kobe Bryant?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player had 3 or more fouls",
            "zh": "哪位 球员 有 三次 或 超过 三次 犯规",
            "de": "Welcher Spieler hatte drei oder mehr Fauls?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "who is a player with more than 3 baskets per season played",
            "zh": "哪位 球员 每个 赛季 有 超过 三次 灌篮",
            "de": "Welcher Spieler hat in einer Saison mehr als drei Koerbe erspielt?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )"
        },
        "question": {
            "en": "what position did Kobe Bryant play in 2004",
            "zh": "科比 布莱恩 在 2004 年 打过 什么 位置",
            "de": "Auf welcher Position spielte Kobe Bryant in 2004?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe Bryant get when he was at point guard",
            "zh": "当 他 是 控球 后卫 的 时候 科比 布莱恩 有 多少 次 抢断",
            "de": "Wie viele Steals bekam Kobe Bryant, als er als Point Guard spielte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )"
        },
        "question": {
            "en": "how many assists in three games did Kobe Bryant make",
            "zh": "科比 布莱恩 在 三场 球赛 中有 多少 次 助攻",
            "de": "Wie viele Assists machte Kobe Bryant in drei Spielen?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "number of points made by Kobe Bryant over a season in which he played 3 games",
            "zh": "科比 布莱恩 在 他 打 了 三场 比赛 的 那个 赛季 的 总得分",
            "de": "Anzahl an Punkten von Kobe Bryant in einer Saison, in der er drei Spiele spielte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) )"
        },
        "question": {
            "en": "number of played games over a season of player Kobe Bryant",
            "zh": "科比 布莱恩特 在 一个 赛季 打 的 比赛场 数",
            "de": "Anzahl der gespielten Spiele in einer Saison des Spielers Kobe Bryant"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which players have made more than 3 turnovers in a season",
            "zh": "哪个 球员 在 一个 赛季 中 失误 超过 3 次",
            "de": "Welche Spieler waren für mehr als drei Ballverluste in einer Saison verantwortlich?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )"
        },
        "question": {
            "en": "how many blocks did Kobe Bryant make all season as point guard",
            "zh": "科比 布莱恩特 整个 赛季 作为 控球 后卫 有 多少 盖帽",
            "de": "Wie viele Blocks machte Kobe Bryant in der gesamten Saison als Point Guard?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )"
        },
        "question": {
            "en": "how many points has Kobe Bryant gotten in a season",
            "zh": "科比 布莱恩特 在 一个 赛季 中得 了 多少 分",
            "de": "Wie viele Punkte holte Kobe Bryant in einer Saison?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )"
        },
        "question": {
            "en": "how many steals did Kobe Bryant have when he made three rebounds",
            "zh": "科比 在 三个 篮板球 时有 多少 次 抢断",
            "de": "Wie viele Steals hatte Kobe Bryant als er drei Rebounds machte?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "name a player who had at least as many turnovers as Kobe Bryant",
            "zh": "说出 一个 至少 和 科比 一样 多 失误 的 球员",
            "de": "Nenne einen Spieler, der mindestens genauso viele Ballverluste wie Kobe Bryant hatte"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )"
        },
        "question": {
            "en": "does Kobe Bryant have more turnovers than his 3 blocks",
            "zh": "科比 布莱恩特 的 失误 数比 他 的 3 次 盖帽 更 多 吗",
            "de": "Hatte Kobe Bryant mehr Ballverluste als seine drei Blocks?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "which player has the maximum number of turnovers",
            "zh": "哪个 球员 的 失误 次数 最 多",
            "de": "Welcher Spieler hat die maximale Anzahl an Turnovers?"
        }
    },
    {
        "domain": "basketball",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )"
        },
        "question": {
            "en": "what player did not have 3 blocks",
            "zh": "哪个 球员 没有 3 个 盖帽",
            "de": "Welcher Spieler hatte keine drei Blocks?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "which meetings end later than 10 in the morning or 3 in the afternoon",
            "zh": "哪 一次 会议 是 在 早上 十点 后 或 下午 三点 后 结束",
            "de": "Welche Meetings enden später als 10 am Morgen oder 3 am Nachmittag?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "important meeting with three hour duration",
            "zh": "时长 3 小时 的 重要 会议",
            "de": "wichtige Besprechung mit einer Dauer von drei Stunden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )"
        },
        "question": {
            "en": "meeting that has duration of less than three hours",
            "zh": "时 长短 于 3 小时 的 会议",
            "de": "Besprechung, die eine Dauer von weniger als drei Stunden hat"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "meetings that start earlier than or at the same time as the weekly stand-up meeting",
            "zh": "在 每周 站立 会议 之前 或 同时 开始 的 会议",
            "de": "Besprechungen, die vor oder zur gleichen Zeit beginnen wie das wöchentliche Stand-Up-Meeting"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )"
        },
        "question": {
            "en": "show me the meetings that are scheduled for longest length of time",
            "zh": "告诉 我 计划 最长 时间 的 会议",
            "de": "Zeige mir die Besprechungen, die mit der längsten Zeit angesetzt wurden."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "what meeting is Alice not attending",
            "zh": "爱丽丝 没有 参加 哪个 会议 ？",
            "de": "An welchem Meeting nimmt Alice nicht teil?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "which January 2nd meeting is three hours long",
            "zh": "哪个 一月 2 号 的 会议 是 3 小时 长 的 ？",
            "de": "Welche Besprechung am zweiten Januar dauert drei Stunden?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who has attended the most meetings",
            "zh": "谁 出席 了 最 多 会议",
            "de": "Wer nahm an den meisten Besprechungen teil?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )"
        },
        "question": {
            "en": "meeting is no later than January 2nd or 3rd",
            "zh": "会议 不晚 于 一月 2 号 或 3 号",
            "de": "Besprechung findet nicht später als am zweiten oder dritten Januar statt"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me all three hour meetings that begin at 10am",
            "zh": "告诉 我 从 上午 10 点 开始 的 所有 三 小时 会议",
            "de": "Zeige mir alle dreistündigen Besprechungen, die um 10 Uhr anfangen."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "meetings in Greenberg cafe that start at 10am",
            "zh": "早上 10 点 在 Greenberg 咖啡厅 开始 的 会议",
            "de": "Meetings im Greenberg Cafe die um 10 Uhr morgens starten"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "show me meetings on Jan 2",
            "zh": "给 我 看 在 一月 二号 的 会议",
            "de": "Zeig mir Treffen am 2. Januar"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings scheduled to be longer than the weekly stand-up meeting",
            "zh": "给 我 列出 所有 比 每周 站 会长 的 会议",
            "de": "Zeigen Sie mir alle Meetings, die länger als das wöchentliche Stand-up-Meeting dauern sollen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )"
        },
        "question": {
            "en": "meetings after January 2 or after January 3",
            "zh": "1 月 2 日后 或 1 月 3 日后 的 会议",
            "de": "Sitzungen nach dem 2. Januar oder nach dem 3. Januar"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )"
        },
        "question": {
            "en": "meeting which is on Jan 3 or before",
            "zh": "在 一月 3 号 或 以前 的 会议",
            "de": "Meeting, das am 3. Januar oder früher stattfindet."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )"
        },
        "question": {
            "en": "show me meetings shorter than three hours",
            "zh": "给 我 列出 短于 三个 小时 的 会议",
            "de": "zeige mir Meetings kürzer als 3 Stunden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "what meeting ends at 10am or earlier",
            "zh": "什么 会议 在 上午 10 点 或 更 早 结束",
            "de": "Welche Sitzung endet um oder vor 10 Uhr?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me all meetings marked important beginning at 10 am",
            "zh": "给 我 列出 所有 在 早上 10 点 开始 的 ， 被 标记 为 重要 的 会议 。",
            "de": "Zeigen Sie mir alle als wichtig gekennzeichneten Besprechungen ab 10 Uhr"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )"
        },
        "question": {
            "en": "what is the longest meeting",
            "zh": "会议 时间 最长 的 会议 是 哪个",
            "de": "Welches ist die längste Sitzung?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "meetings that end at or before 10am or at or before 3pm",
            "zh": "在 上午 10 点 或者 下午 3 点 之前 结束 的 会议",
            "de": "Meetings, die um oder vor 10 Uhr oder um oder vor 15 Uhr enden."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "meetings that start at the same time or after the weekly stand-up meeting ends",
            "zh": "开始 时间 与 每周 例会 结束 时间 一样 或 之后 的 会议",
            "de": "Besprechungen, die zur gleichen Zeit oder nach dem Ende des wöchentlichen Stand-up-Meetings beginnen."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) )"
        },
        "question": {
            "en": "what is the location of the weekly stand-up",
            "zh": "每周 例会 的 地点 是 什么",
            "de": "Wo findet der wöchentliche Stand-up statt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )"
        },
        "question": {
            "en": "people that attend the weekly stand-up meeting or the annual review meeting",
            "zh": "参加 周 例会 或者 年度 总结 会议 的 人",
            "de": "Personen, die an dem wöchentlichen Stand-up-Meeting oder dem jährlichen Review-Meeting teilnehmen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )"
        },
        "question": {
            "en": "what meeting has the longest length",
            "zh": "时 长 最长 的 会议 是 哪个 ？",
            "de": "Welches Meeting hat die längste Dauer?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "what meetings are located at Greenberg cafe",
            "zh": "哪个 会议 是 在 Greenberg 咖啡厅 举行 的 ？",
            "de": "Welche Meetings finden im Greenberg Cafe statt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )"
        },
        "question": {
            "en": "meeting that starts when the weekly stand-up meeting ends",
            "zh": "在 每周 例会 结束 时 开始 的 会议",
            "de": "Meeting das startet wenn das wöchentliche stand-up Meeting endet"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "meetings in Greenberg cafe that end at 10am",
            "zh": "在 Greenberg 咖啡厅 举行 并且 在 早上 10 点 结束 的 会议",
            "de": "Meetings im Greenberg Cafe die um 10 Uhr morgens enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings happening on January 2nd",
            "zh": "给 我 列出 所有 一月 2 号 举行 的 会议",
            "de": "zeig mir alle Besprechungen die am 2 Januar stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "what meeting doesn't end at 10am",
            "zh": "哪 一个 会议 不是 在 早上 十点 结束 ？",
            "de": "Welches Meeting endet nicht um 10 Uhr morgens?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "show me all meeting that will end by 10am",
            "zh": "告诉 我 所有 早上 10 点前 结束 的 会议",
            "de": "Zeig mir alle Meetings die um 10 Uhr morgens enden werden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "meetings that start before 10am",
            "zh": "在 早上 十点 前 开始 的 会议",
            "de": "Besprechungen, die vor 10 Uhr beginnen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "meeting starts before end time of weekly stand-up",
            "zh": "在 周 例会 结束 之前 开始 的 会议",
            "de": "Meeting startet vor der Endzeit des Weekly Stand-up"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "three hour meeting on January 2nd",
            "zh": "在 一月 二号 的 三 小时 会议",
            "de": "Eine dreistündige Besprechung am 2. Januar"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "which people are attending meetings on January 2",
            "zh": "那些 人会 参加 一月 二号 的 会议 ？",
            "de": "Welche Leute nehmen an Besprechungen am 2. Januar teil?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "meetings that start at or after 10am",
            "zh": "在 早上 十点 或者 之后 开始 的 会议",
            "de": "Meetings die um oder nach 10 Uhr morgens starten"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "location of more than two meetings",
            "zh": "两个 以上 会议 的 地址",
            "de": "Ort von mehr als zwei Meetings"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "show me all meetings in Greenberg cafe on Jan 2",
            "zh": "列出 所有 一月 二号 在 格林 伯格 咖啡厅 发生 的 会议",
            "de": "Zeig mir alle Meetings im Greenberg Cafe am 2 Jan"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me any meetings labelled as important which are also three hours long",
            "zh": "给 我 看 所有 三 小时 长 并且 标记 为 重要 的 会议",
            "de": "Zeige mir alle Besprechungen, die als wichtig markiert sind und außerdem drei Stunden lang gehen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "show me all locations which have meetings ending at 10 am",
            "zh": "告诉 我 所有 在 上午 10 点 结束 会议 的 地点",
            "de": "Zeig mir alle Standorte an deren Besprechung um 10 Uhr enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )"
        },
        "question": {
            "en": "show me the meeting that has the latest end time",
            "zh": "给 我 看看 哪个 会议 最 晚 结束 。",
            "de": "Zeige mir die Besprechung, die die späteste Endzeit hat"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "who is attending the 10am meeting",
            "zh": "谁 参加 了 那个 早上 10 点 的 会议",
            "de": "Wer nimmt an der Besprechung um 10:00 Uhr morgens teil?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "show me meetings ending after 10am",
            "zh": "举出 早上 10 点 以后 结束 的 会议 。",
            "de": "Zeig mir Meetings die nach 10:00 Uhr enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me all meetings attended by Alice beginning at 10 am",
            "zh": "给 我 看 所有 爱丽丝 参加 的 在 早上 十点 开始 的 会议",
            "de": "Zeig mir alle Treffen, an denen Alice ab 10 Uhr teilnimmt"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )"
        },
        "question": {
            "en": "what meeting has and end time the same as weekly startup",
            "zh": "哪个 会议 跟 每周 动员会 同时 结束 ？",
            "de": "Welches Meeting hat die gleiche Endzeit wie das wöchentliche Startup?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "show me meetings that take three hours in Greenberg cafe",
            "zh": "举出 在 Greenberg 咖啡厅 举行 的 时长 3 小时 的 会议 。",
            "de": "Zeig mir Meetings die 3 Stunden lang im Greenberg Cafe stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( string attendee ) ) )"
        },
        "question": {
            "en": "which meeting has the fewest attendees",
            "zh": "哪 次 会议 参加 人数 最少",
            "de": "Welchs Meeting hat die wenigsten Teilnehmer?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "meeting ends before 10am or 3pm",
            "zh": "在 早上 10 点 或 下午 三点 前 结束 的 会议",
            "de": "Meeting endet vor 10:00 oder 15:00 Uhr"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )"
        },
        "question": {
            "en": "meeting which starts at 1000 am or 300 pm",
            "zh": "在 早上 10 点 或 下午 三点 开始 的 会议",
            "de": "Meeting, welches um 10:00 oder 15:00 Uhr startet"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "meetings attended by Alice in Greenberg cafe",
            "zh": "爱丽丝 在 格林 伯格 咖啡馆 参加 的 会议",
            "de": "Treffen, an denen Alice im Greenberg-Café teilnahm"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )"
        },
        "question": {
            "en": "show me meetings shorter than 3 hours",
            "zh": "给 我 列出 短于 3 小时 的 会议",
            "de": "Zeig mir Meetings die weniger als 3 Stunden dauern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )"
        },
        "question": {
            "en": "what location is the three hour meeting",
            "zh": "那个 3 小时 的 会议 是 在 哪里 举行 的 ？",
            "de": "An welchem Ort ist das drei Stunden Meeting?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "which January 2nd meetings is Alice attending",
            "zh": "爱丽丝 要 参加 哪 一个 一月 2 号 的 会议 ？",
            "de": "An welchen Treffen am 2. Januar nimmt Alice teil?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me all meetings that begin at 10am",
            "zh": "给 我 列出 所有 早上 10 点 开始 的 会议",
            "de": "Zeige mir alle Besprechungen die um 10 Uhr anfangen."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "find the meeting with Alice at Greenberg cafe",
            "zh": "找出 爱丽丝 参加 的 在 Greenberg 咖啡厅 举行 的 会议",
            "de": "Finde das Treffen mit Alice im Greenberg Cafe"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )"
        },
        "question": {
            "en": "what meeting has a date of Jan 2 or Jan 3",
            "zh": "哪个 会议 是 在 一月 二号 或者 一月 三号",
            "de": "Welche Besprechung hat einen Termin am 2. oder 3. Januar?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )"
        },
        "question": {
            "en": "meeting ends at 10 am or 3 pm",
            "zh": "在 早上 10 点 或 下午 3 点 结束 的 会议",
            "de": "Besprechungen die um 10 Uhr oder 15 Uhr enden."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "show me all meetings marked important which are also attended by Alice",
            "zh": "给 我 指出 爱丽丝 参加 的 所有 重要 会议",
            "de": "zeige mir alle Meetings, die als wichtig markiert sind und an denen auch Alice teilnimmt."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string is_important ) ) )"
        },
        "question": {
            "en": "show me important meetings at Greenberg cafe",
            "zh": "给 我 列出 在 Greenberg 咖啡厅 举行 的 重要 会议",
            "de": "Zeige mir alle wichtigen Besprechungen am Greenberg cafe."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )"
        },
        "question": {
            "en": "what is the end time of weekly stand-up",
            "zh": "每周 例会 的 结束 时间 是 什么",
            "de": "Was ist die Endzeit des wöchentlichen Stand-Ups?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "meeting with no more than 2 locations",
            "zh": "与 不 超过 2 个 地点 会面",
            "de": "Besprechungen mit nicht mehr als 2 Standorten."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "meeting which starts at or before 10 am",
            "zh": "在 上午 10 点 或者 以前 的 会议",
            "de": "Treffen, das um oder vor 10 Uhr beginnt."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me all meetings at Greenberg cafe ending at 10 am",
            "zh": "告诉 我 格林 伯格 咖啡馆 在 上午 10 点 结束 的 所有 会议",
            "de": "Zeig mir alle Meetings im Greenberg Cafe die um 10 Uhr morgens enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )"
        },
        "question": {
            "en": "what meeting is at Greenberg cafe",
            "zh": "哪个 会议 是 在 Greenberg 咖啡厅 举行 的 ？",
            "de": "Welches Meeting ist im Greenberg Cafe?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "location is same as the location of meeting on Jan 2",
            "zh": "位置 与 1 月 2 日 的 会议 地点 相同",
            "de": "Ort ist derselbe wie der Ort des Treffens am 2. Januar."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "what meetings are scheduled to run for three hours on Jan 2",
            "zh": "哪些 在 一月 2 号 的 会议 会 举行 3 个 小时 ？",
            "de": "Welche Meetings sind für den 2. Januar für drei Stunden geplant?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string is_important ) ) )"
        },
        "question": {
            "en": "show me all important meetings on Jan 2",
            "zh": "告诉 我 1 月 2 日 的 所有 重要 会议",
            "de": "Zeig mir alle wichtigen Meetings am 2 Jan"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "show me all meetings Alice has attended at the Greenberg cafe",
            "zh": "告诉 我 爱丽丝 在 Greenberg 咖啡馆 参加 的 所有 会议",
            "de": "Zeig mir alle Meetings an denen Alice im Greenberg Cafe teilgenommen hat"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "show me all meetings after January 2nd",
            "zh": "告诉 我 1 月 2 日 之后 的 所有 会议",
            "de": "zeige mir alle Meetings nach dem 2. Januar"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "person attending least number of meetings",
            "zh": "出席会议 次数 最少 的 人",
            "de": "Peron die an den wenigsten Meetings teilnimmt"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string date ) ) ) )"
        },
        "question": {
            "en": "what meeting has the earliest date",
            "zh": "哪个 会议 是 最早 的",
            "de": "Welches Meeting hat das früheste Datum?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "what meeting ends no earlier than 10am",
            "zh": "什么 会议 不早 于 上午 十点 结束 ？",
            "de": "Welches Meeting endet nicht vor 10 Uhr"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )"
        },
        "question": {
            "en": "what meetings occur on the same day as weekly stand-up",
            "zh": "哪个 会议 会 跟 每周 小汇报 同一天 进行",
            "de": "Welche Besprechungen finden am selben Tag wie die wöchentliche Stand-up-Sitzung statt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "what meetings take place in greenbug cafe",
            "zh": "哪个 会议 在 格林 伯格 咖啡馆 召开",
            "de": "Welche Meetings finden im Greenbug Cafe statt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )"
        },
        "question": {
            "en": "what meeting has a length smaller than three hours",
            "zh": "哪个 会议 是 短于 3 个 小时 的",
            "de": "Welche Besprechung hat eine Länge von weniger als drei Stunden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( string attendee ) ) )"
        },
        "question": {
            "en": "show me the meetings with the most attendees",
            "zh": "告诉 我 哪个 会议 是 有 最 多 的 参与者 的",
            "de": "Zeig mir die Meetings mit den meisten Teilnehmern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )"
        },
        "question": {
            "en": "what meeting is starting the same time as weekly stand-up",
            "zh": "哪个 会议 与 每周 例会 同时 开始 ？",
            "de": "Welches Treffen beginnt zur selben Uhrzeit wie die wöchentlichen Standup-Meetings"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me meetings starting at 10am that take 3 hours",
            "zh": "告诉 我 哪个 会议 是 在 早上 10 点 开始 而且 是 用 3 个 小时 的",
            "de": "Zeige mir die Besprechungen um 10:00 Uhr morgens, die drei Stunden dauern?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )"
        },
        "question": {
            "en": "location same as weekly meeting or annual review",
            "zh": "位置 与 每周 会议 或 年度 审查 相同",
            "de": "Der selbe Ort wie die wöchentliche Besprechung oder die Besprechung zum Jahresabschluss"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "meeting in which Alice is attending and ends at 10 am",
            "zh": "爱丽丝 参加 的 ， 在 早上 10 点 以后 开始 的 会议 。",
            "de": "Eine Besprechung, woran auch Alice teilnimmt, die um 10:00 Uhr morgens endet"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "what meeting start time is later than 10am",
            "zh": "哪个 会议 的 开始 时间 不 超过 早上 10 点",
            "de": "Welche Besprechung fängt später als 10:00 Uhr morgens an?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "meetings that are not attended by Alice",
            "zh": "爱丽丝 不 参加 的 会议",
            "de": "Meetings an denen Alice nicht teilnimmt"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( string location ) ) )"
        },
        "question": {
            "en": "what meeting has the fewest locations",
            "zh": "最少 地点 的 会议",
            "de": "Welches Meeting hat die wenigsten Standorte?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings ending after the weekly stand-up ends",
            "zh": "给 我 列出 所有 在 每周 站会 结束 后 结束 的 会议 。",
            "de": "Zeig mir alle Meetings die nach dem wöchentlichen Stand-up enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "what meeting is at Greenberg cafe and ends at 10am",
            "zh": "哪个 Greenberg 咖啡厅 的 会议 在 早上 10 点 结束",
            "de": "Welches Meeting ist im Greenberg Cafe und endet um 10 Uhr morgens?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "meeting is not at Greenberg cafe",
            "zh": "不 在 Greenberg 咖啡厅 开 的 会",
            "de": "Treffen ist nicht im Greenberg Cafe"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "what meetings have a length of three hours and Alice is attending",
            "zh": "哪些 会议 是 三个 小时 的 并且 爱丽丝 有 参加 的 ？",
            "de": "Welche Besprechungen haben eine Dauer von drei Stunden, an denen auch Alice teilnimmt?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "what meetings are scheduled for a date no earlier than Jan 2",
            "zh": "哪个 会议 是 安排 了 最迟在 一月 二日",
            "de": "Welche Mettings sind nach dem 2 Januar geplant?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "locations of meetings that end at 10am",
            "zh": "在 早上 10 点 结束 的 会议 的 地点",
            "de": "Orte von Meetings die um 10 Uhr morgens enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "what meetings end no later than the weekly stand-up meeting ends",
            "zh": "什么 会议 不迟于 每周 例行 会议 结束",
            "de": "Welche Besprechungen enden nicht später als die wöchentliche Stehbesprechung?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )"
        },
        "question": {
            "en": "what meeting is in either Greenberg cage or central office",
            "zh": "哪些 会议 是 在 Greenberg 咖啡 或 中央 办公室 ？",
            "de": "Welche Sitzung ist entweder im Greenberg cafe oder im Hauptbüro?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.location.greenberg_cafe en.location.central_office ) )"
        },
        "question": {
            "en": "show me all meetings happening at Greenberg cafe or central office",
            "zh": "告诉 我 在 格林 伯格 咖啡馆 或 中央 办公室 发生 的 所有 会议",
            "de": "Zeig mir alle Meetings die im Greenberg Cafe oder Zentralbüro stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ) ) )"
        },
        "question": {
            "en": "what is the average length of all meetings",
            "zh": "所有 会议 的 平均 时长 是 多少",
            "de": "Was ist die durchschnittliche Länge aller Sitzungen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )"
        },
        "question": {
            "en": "who is attending the three hour meeting",
            "zh": "谁 在 参加 那个 三 小时 会议 ？",
            "de": "Wer nimmt an der dreistündigen Besprechung teil?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) )"
        },
        "question": {
            "en": "what are some important meetings",
            "zh": "重要 的 会议 有 哪些 ？",
            "de": "Was sind einige wichtige Treffen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings which start at the same time or later than the weekly stand-up",
            "zh": "给 我 展示 所有 与 每周 例行 会议 时间 相同 或 更 晚 的 会议",
            "de": "Zeig mir alle Meetings welche entweder zur selben Zeit oder später als die wöchentlichen Stand-Ups anfangen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "meeting on Jan 2 which ends at 10 am",
            "zh": "在 1 月 2 号 举行 并且 在 早上 10 点 结束 的 会议",
            "de": "Sitzung am 2. Januar, die um 10 Uhr endet"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "what meeting starts earlier than 10am or 3pm",
            "zh": "什么 会议 早 于 上午 10 点 或 下午 3 点 开始",
            "de": "Welches Meeting fängt früher an als 10 Uhr morgens oder drei Uhr nachmittags"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me all meetings that end at 10am in Greenberg cafe",
            "zh": "告诉 我 所有 在 格林 伯格 咖啡馆 结束 于 上午 10 点 的 会议",
            "de": "Zeige mit alle Meetings die um 10 Uhr im Greenberg cafe enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "tell me the all meetings begins after 10am or 3pm",
            "zh": "给 我 列出 所有 在 早上 十点 和 下午 三点 之后 开始 的 会议 。",
            "de": "zeige mir alle Meetings die nach 10 oder 15 Uhr beginnen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ) )"
        },
        "question": {
            "en": "people that attend important meetings",
            "zh": "参加 重要 会议 的 人",
            "de": "Personen, die an wichtigen Besprechungen teilnehmen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "how many locations house meetings",
            "zh": "有 多少 个 地方 主办 会议",
            "de": "Wie viele Orte gibt es Hausmeetings"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "show me all meetings happening before January 2nd",
            "zh": "告诉 我 所有 1 月 2 号 以前 开始 的 会议",
            "de": "Zeige mir alle Meetings die vor dem 2. Januar stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )"
        },
        "question": {
            "en": "what is the date of weekly stand-up",
            "zh": "每周 的 例会 是 几号",
            "de": "Was ist das Datum des wöchentlichen Stand-up?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "create a meeting for Jan 2nd until 10am",
            "zh": "设立 一个 一月 二号 开 到 早上 十点 的 会议 。",
            "de": "Erstelle eine Besprechung für den 2. Januar bis 10:00 Uhr morgens"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "what meeting is on Jan 2",
            "zh": "哪个 会议 是 在 1 月 2 号 举行 的",
            "de": "Welches Treffen ist am 2. Januar"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )"
        },
        "question": {
            "en": "show me important meetings at Greenberg cafe",
            "zh": "给 我 看 下 在 格林 伯格 餐厅 的 重要 会议",
            "de": "Zeige mir wichtige Meetings im Greenberg Cafe"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )"
        },
        "question": {
            "en": "meeting starting at time of weekly stand-up",
            "zh": "在 周会 例会 那个 时间 开始 的 会议",
            "de": "Eine Besprechung, die zur gleichen Zeit wie die wöchentliche Stehbesprechung stattfindet"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )"
        },
        "question": {
            "en": "meetings held in the same location as the weekly stand-up meeting",
            "zh": "跟 周 例会 地点 一样 的 会议",
            "de": "Meetings die an der gleichen Location wie das wöchentliche Stand-up Meeting stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me all meetings which are either shorter or longer than three hours",
            "zh": "告诉 我 所有 小于 或者 超过 3 个 小时 的 会议",
            "de": "Zeige mir alle Meetings die entweder kürzer oder länger als drei Stunden sind"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) )"
        },
        "question": {
            "en": "what meeting lasts from one to three hours",
            "zh": "哪个 会议 持续 一到 三个 小时",
            "de": "Welches Treffen dauert ein bis drei Stunden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "what meeting has Alice attending on Jan 2",
            "zh": "1 月 2 号 爱丽丝 参加 过 什么 会议",
            "de": "an welcher Besprechung nimmt Alice am 2 Januar Teil"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )"
        },
        "question": {
            "en": "show me all meetings Alice has attended marked as important",
            "zh": "给 我 展示 所有 艾丽斯 去过 的 并且 标注 为 重要 的 会议",
            "de": "Zeig mir alle wichtigen Meetings an denen Alice teilgenommen hat"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )"
        },
        "question": {
            "en": "meetings that are longer than the weekly startup meeting",
            "zh": "比周 例会 时间 更长 的 会议",
            "de": "Besprechungen, die länger als die wöchentliche Startbesprechung sind"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me the important meetings that last three hours",
            "zh": "给 我 看 持续 三 小时 的 重要 的 会议",
            "de": "Zeig mir die wichtigen Meetings die drei Stunden dauern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )"
        },
        "question": {
            "en": "what meeting begins latest",
            "zh": "哪个 会议 最后 开始",
            "de": "Welches Meeting beginnt am spätesten?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string is_important ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me all meetings marked important ending at 10 am",
            "zh": "给 我 展示 所有 标注 了 重要 的 在 上午 10 点 结束 的 会议",
            "de": "Zeig mir alle Treffen, die als wichtig markiert sind und um 10 Uhr enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "what meeting ends at the same time as weekly stand-up or later",
            "zh": "哪个 会议 在 与 每周 例会 同时 或 更 晚 结束",
            "de": "Welches Meeting endet zur gleichen Zeit oder später als das wöchentliche stand-up-meeting"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings that Alice is attending on Jan 2",
            "zh": "告诉 我 所有 爱丽丝 要 在 1 月 2 号 参加 的 会议",
            "de": "Zeig mir alle Treffen, an denen Alice am 2. Januar teilnimmt"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )"
        },
        "question": {
            "en": "what meeting ends at the start time of weekly stand-up",
            "zh": "什么 会议 在 每周 站会 的 开始 时间 结束 ？",
            "de": "Welches Meeting endet zum Startzeitpunkt des wöchentlichen Stand-Ups?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "meetings held in less than two locations",
            "zh": "在 两个 地方 或 以下 举行 的 会议",
            "de": "Meetings, die an weniger als zwei Standorten stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )"
        },
        "question": {
            "en": "what important meeting has an end time of 10am",
            "zh": "什么 重要 的 会议 在 早上 十点 结束 ？",
            "de": "Welches wichtige Meeting endet um 10 Uhr vormittags"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )"
        },
        "question": {
            "en": "meetings that are on or before January 3",
            "zh": "1 月 3 日 或 之前 的 会议",
            "de": "Meetings, die am oder vor dem 3. Januar stattfinden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "what meeting has the same end time as that of weekly stand-up",
            "zh": "什么 会议 的 结束 时间 是 和 每周 站会 结束 时间 相同 的 ？",
            "de": "Welches Meeting endet um die selbe Zeit wie das wöchentliche Stand-Up-Meeting?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "show me meetings before 10am",
            "zh": "给 我 列出 所有 早上 10 点 之前 的 会议",
            "de": "zeig mir Treffen vor 10 Uhr"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( string attendee ) ) )"
        },
        "question": {
            "en": "what meeting has the most attendees",
            "zh": "什么 会议 有 最 多 的 参会 人员 ？",
            "de": "Welches Meeting hat die meisten Teilnehmer?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) )"
        },
        "question": {
            "en": "show me all meetings that run either three hours or one hour",
            "zh": "告诉 我 所有 三 小时 或 一 小时 的 会议",
            "de": "Zeige mir alle Meetings die entweder drei oder eine Stunde dauern."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me the meeting that starts and ends at 10 am",
            "zh": "告诉 我 上午 10 点 开始 和 结束 的 会议",
            "de": "Zeige mir das Meeting, das um 10 Uhr beginnt und endet."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings that end earlier than the week stand-up meeting ends",
            "zh": "给 我 列出 所有 在 每周 站会 结束 前 结束 的 会议 。",
            "de": "zeige mir alle Meetings die vor dem wöchentlichen stand-up Meeting enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string max ) ( string attendee ) ) )"
        },
        "question": {
            "en": "which meeting has the most people scheduled to attend",
            "zh": "哪个 会议 安排 人 最 多 ？",
            "de": "Für welches Meeting sind die meisten Teilnehmer geplant?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "what person is attending a meeting that ends at 10am",
            "zh": "哪个 人 参加 上午 十点 结束 的 会议 ？",
            "de": "Welche Person nimmt an einer Besprechung teil, die um 10:00 Uhr morgens endet?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )"
        },
        "question": {
            "en": "meetings on January 2 or January 3",
            "zh": "一月 二号 或 一月 三号 的 会议 。",
            "de": "Besprechungen am 2. oder 3. Januar"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "show me meetings that take 3 hours and start at 10am",
            "zh": "给 我 看 上午 十点 开始 时 长三 小时 的 会议 。",
            "de": "Zeig mir die Meetings die 3 Stunden dauern un um 10 Uhr morgens starten"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "Alice or bob is an attendee at the meeting",
            "zh": "Alice 或 Bob 是 参会 人 。",
            "de": "Alice oder Bob sind Teilnehmer der Besprechung"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings which are scheduled no later than January 3",
            "zh": "给 我 看 所有 一月 三号 前 的 会议 。",
            "de": "zeige mir alle Meetings, die spätestens am 3. Januar geplant sind."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) )"
        },
        "question": {
            "en": "who attends the weekly stand-up meeting",
            "zh": "哪些 人 参加 每周 例行 会议 ？",
            "de": "Wer nimmt am wöchentlichen Stand-up Meeting teil"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "show me all meetings starting at 10 am or after",
            "zh": "给 我 看 所有 上午 10 点及 更 早 开始 的 会议",
            "de": "Zeig mir alle Meetings die um 10 Uhr morgens oder danach beginnen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "meetings that end later than 10am",
            "zh": "上午 10 点 以后 结束 的 会议",
            "de": "Meetings die später als 10 Uhr morgens enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings which have only one location",
            "zh": "给 我 看 所有 只有 一个 地点 的 会议",
            "de": "Zeige mir alle Meetings, die nur einen Ort haben"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) )"
        },
        "question": {
            "en": "who has attended the weekly stand-up meeting",
            "zh": "谁 参加 了 周 例会",
            "de": "Wer hat an dem wöchentlichen Stand-up Meeting teilgenommen?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who are the people attending at least two different meetings",
            "zh": "参加 至少 两次 不同 会议 的 人 是 谁",
            "de": "Wer sind die Leute die an mindestens zwei verschiedenen Meetings teilnehmen?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )"
        },
        "question": {
            "en": "what meeting who starts right after weekly stand-up",
            "zh": "哪个 会议 在 周 例会 之后 马上 开始",
            "de": "Welches Meeting startet direkt nach dem wöchentlichen Stand-up?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "show me all meetings that have two or fewer attendees",
            "zh": "给 我 看 所有 与会者 不 多于 两个 人 的 会议 。",
            "de": "Zeig mir alle Meetings die zwei oder weniger Teilnehmer haben"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )"
        },
        "question": {
            "en": "what meeting ends before 3pm or 10am",
            "zh": "什么 会议 在 下午 三点 前 或者 早上 十点 前 结束 ？",
            "de": "Welches Meeting endet vor 3 Uhr nachmittags oder 10 Uhr morgens?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what meetings have no more than two different locations",
            "zh": "什么 会议 有 不 多于 两个 的 不同 开会地点",
            "de": "Welche Meetings haben nicht mehr als zwei verschiedene Standorte"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )"
        },
        "question": {
            "en": "meetings that are longer than three hours or longer than an hour",
            "zh": "长于 三 小时 或者 一 小时 的 会议",
            "de": "Besprechungen, die länger als drei Stunden oder länger als eine Stunde dauern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "show me all the meetings that have two or more participants",
            "zh": "告诉 我 所有 有 两个 及 以上 与会者 的 会议",
            "de": "Zeig mir alle Meetings die zwei oder mehr Teilnehmer haben"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me all meetings beginning at 10 am which are three hours long",
            "zh": "给 我 看 所有 在 早上 十点 开始 且 时长 为 三 小时 的 会议",
            "de": "Zeigen Sie mir alle Besprechungen, die um 10 Uhr beginnen und drei Stunden dauern"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string min ) ( string location ) ) )"
        },
        "question": {
            "en": "meeting with fewest locations",
            "zh": "有 最少 会议 地点 的 会议",
            "de": "Treffen mit den wenigsten Standorten"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "what three hour meeting is at Greenberg cafe",
            "zh": "什么 三 小时 的 会议 在 格林 伯格 咖啡馆",
            "de": "Welches drei Stunden Meeting ist im Greenberg Cafe?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )"
        },
        "question": {
            "en": "show me all attendees of the weekly stand-up meeting",
            "zh": "告诉 我 所有 非正式 周 例会 的 参与者",
            "de": "Zeige mir alle Teilnehmer des wöchentlichen Stand-up-Meetings."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me all meetings on January 2nd which are three hours long",
            "zh": "给 我 看 所有 在 1 月 2 号 举行 的 3 小时 会议",
            "de": "zeige mir alle Treffen am 2. Januar, die drei Stunden lang sind."
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )"
        },
        "question": {
            "en": "which important meeting starts at 10 in the morning",
            "zh": "哪个 重要 会议 在 上午 10 点 开始",
            "de": "welches wichtige Meeting startet um 10 morgens"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )"
        },
        "question": {
            "en": "show me all meetings which end at the same time or later than the weekly stand-up meeting begins",
            "zh": "告诉 我 所有 结束 时间 和 非正式 周 例会 开始 时间 一样 或者 更晚 的 会议",
            "de": "zeige mir alle Meetings die zur selben Zeit oder später enden als das wöchentliche Stand-up Meeting beginnt"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )"
        },
        "question": {
            "en": "show me meeting happening after the day of weekly stand-up",
            "zh": "告诉 我 在 非正式 周 例会 之后 召开 的 会议",
            "de": "Zeige mir die Besprechung am Folgetag des wöchentlichen Stand-Up Meetings"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "find me a meeting that ends 10am or later",
            "zh": "帮 我 找到 在 上午 10 点 或 之后 结束 的 一个 会议",
            "de": "finde mir ein Meeting das um 10 Uhr oder später endet"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "what meeting starts at 10am and ends at 10am q",
            "zh": "哪个 会议 在 早上 十点 开始 早上 十点 结束",
            "de": "welches Meeting beginnt um 10 Uhr und endet um 10 Uhr"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "what meeting was on or before Jan 2",
            "zh": "哪个 会议 在 1 月 2 号 或者 以前 举行 ？",
            "de": "Welche Besprechung hat am 2. Januar oder vorher stattgefunden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who is the person attending more than two meetings",
            "zh": "哪个 人 参加 2 个 以上 的 会议 ？",
            "de": "welche Person ist bei mehr als zwei Meetings anwesend"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string end_time ) ( string = ) ( time 10 0 ) ) )"
        },
        "question": {
            "en": "meeting at Greenberg cafe ends at 1000 am",
            "zh": "在 Greenberg 咖啡厅 举行 的 并且 在 早上 10 点 结束 的 会议",
            "de": "Das Meeting im Greenberg Cafe endet um 10 Uhr"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "show me all meetings ending at or after 10 am",
            "zh": "给 我 看 所有 在 早上 十点 或 之后 结束 的 会议",
            "de": "zeige mir alle Besprechungen, die um oder nach 10 Uhr enden"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )"
        },
        "question": {
            "en": "what important meeting has a start time at 10am",
            "zh": "什么 重要 会议 的 开始 时间 是 上午 10 点",
            "de": "welches wichtige Meeting beginnt um 10 Uhr"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "show me all meetings with Alice",
            "zh": "告诉 我 与 爱丽丝 的 所有 会面",
            "de": "Zeig mir alle Meetings mit Alice"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )"
        },
        "question": {
            "en": "show me meetings after the weekly stand-up day",
            "zh": "给 我 列出 在 每周 站会 那天 之后 举行 的 会议",
            "de": "Zeig mir alle Meetings nach dem wöchentlichen stand-up day"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string !type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )"
        },
        "question": {
            "en": "location of meetings that start at 10am",
            "zh": "在 早上 十点 开始 的 会议 的 地点",
            "de": "Ort der Besprechungen, die um 10 Uhr beginnen"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )"
        },
        "question": {
            "en": "what meeting has length shorter than one to three hours",
            "zh": "什么 会议 的 长度 短于 一到 三个 小时",
            "de": "Welche Besprechung dauert weniger als ein bis drei Stunden?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string location ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what meeting has less than two locations",
            "zh": "什么 会议 有 少于 两个 的 地点 ？",
            "de": "Welches Treffen hat weniger als zwei Standorte"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )"
        },
        "question": {
            "en": "what meeting has a date earlier than weekly startup",
            "zh": "那个 会议 的 日期 是 早于 每周 站会 的 ？",
            "de": "Welches Meeting hat ein Datum früher als das wöchentliche startup?"
        }
    },
    {
        "domain": "calendar",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string !type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )"
        },
        "question": {
            "en": "show me all three hour meetings that Alice is attending",
            "zh": "告诉 我 爱丽丝 正在 参加 的 所有 三个 小时 的 会议",
            "de": "Zeig mir alle drei Stunden Meetings an denen Alice teilnimmt"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "neighborhoods with more than two apartment complexes",
            "zh": "有 超过 2 栋 公寓 的 街区",
            "de": "Nachbarschaft mit mehr als zwei Apartmentkomplexen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "housing allowing dogs that was posted on January 2",
            "zh": "1 月 2 号 发布 允许 养狗 的 房子",
            "de": "Hausanzeige die Hunde erlaubt und am 2. Januar veröffentlicht wurde"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )"
        },
        "question": {
            "en": "which housing unit has the rent of 123 sesame street",
            "zh": "哪间 房 的 房租 跟 123 芝麻街 的 房租 一样",
            "de": "welche Wohneinheit hat die Miete von 123 Sesamstraße?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )"
        },
        "question": {
            "en": "which housing unit is available for a rent of 1500 2000 dollars",
            "zh": "哪个 租金 在 1500 到 2000 美金 之间 的 房子 是 可选 的",
            "de": "Welche Wohneinheit ist für einen Mietpreis von 1500 2000 Dollar verfügbar?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "housing unit whose monthly rent is 1500 dollars",
            "zh": "房租 在 1500 美金 的 房子",
            "de": "Wohneinheit, deren monatliche Miete 1500 Dollar beträgt"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )"
        },
        "question": {
            "en": "housing unit at most 800 or 1000 square feet",
            "zh": "最多 800 或者 1000 平方英尺 的 房子",
            "de": "Gehäuseeinheit mit maximal 800 oder 1000 Quadratfuß Fläche"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "find pet friendly housing units",
            "zh": "找到 宠物 友好 的 住房 单位",
            "de": "Finde haustierfreundliche Wohneinheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "housing units with a posting date of January 2nd that are located in midtown west",
            "zh": "位于 中 城区 西 的 在 一月 二号 发布 的 房屋 单元",
            "de": "Wohneinheiten mit einem Buchungsdatum vom 2. Januar, die sich in Midtown West befinden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( string min ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what kind of housing has the least number of units",
            "zh": "什么样 的 房子 有 最少 的 单元 ？",
            "de": "Welche Art Haus hat die kleinste Anzahl an Wohnungen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "find 800 square feet housing units",
            "zh": "找到 800 平方尺 的 房屋 单元",
            "de": "Finde 800 Quadratfuß große Wohneinheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "housing that are either apartments or houses for rent",
            "zh": "找到 可以 出租 的 公寓 或者 别墅",
            "de": "Behausungen zur Miete, die entweder Wohnungen oder Häuser sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_room ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "which housing provides a private room where dogs are allowed",
            "zh": "哪个 住房 提供 允许 携带 狗 的 私人 房间",
            "de": "Welche Unterkunft bietet einen privaten Raum, in dem Hunde erlaubt sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "which 1500 monthly rentals come with private room",
            "zh": "哪个 月租 是 1500 元 的 房子 有 私人 房间 ？",
            "de": "Welche Mietobjekte von 1500 monatlich haben einen Privatraum"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ) ) )"
        },
        "question": {
            "en": "what is the average monthly rent",
            "zh": "平均 月租 是 多少 ？",
            "de": "Was ist die durchschnittliche monatliche Miete"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )"
        },
        "question": {
            "en": "housing unit as costly as the rent of the homes in 123 sesame street",
            "zh": "和 123 芝麻街 的 租金 花费 差不多 的 房屋 单元",
            "de": "Wohneinheit, die genauso teuer ist wie die Miete der Wohnungen in der 123 Sesamstraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "private room for 1500 a month",
            "zh": "1500 每个 月 的 私人 房间",
            "de": "Privatraum für 1500 monatlich"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "housing of more than two types",
            "zh": "超过 两种 房型 的 房子",
            "de": "Mehr als zwei Arten von Wohnungen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )"
        },
        "question": {
            "en": "housing unit smaller than 800 or 1000 square feet",
            "zh": "比 800 或者 1000 平方尺 小 的 房子 单元",
            "de": "Wohneinheiten die kleiner sind als 800 oder 1000 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )"
        },
        "question": {
            "en": "which housing unit with the highest rent",
            "zh": "哪 一个 房屋 单元 有 最高 的 房租 ？",
            "de": "Welche Wohneinheit hat die höchste Miete?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )"
        },
        "question": {
            "en": "housing units that are smaller than 123 sesame street",
            "zh": "比 123 芝麻街 要 小 的 房屋 单元",
            "de": "Wohneinheiten, die kleiner als die in der Sesame Street 123 sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "housing with private bath that was posted on January 2",
            "zh": "在 一月 二号 发布 的 有 私人 浴室 的 房子",
            "de": "Wohnungen mit privatem Badezimmer, die am 2. Januar gepostet wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )"
        },
        "question": {
            "en": "find housing units with rental charges lesser than that of 123 sesame street",
            "zh": "找到 比 123 芝麻街 收 的 租金 少 的 房屋 单元",
            "de": "Finden Sie Wohneinheiten mit geringeren Mietkosten als in der Sesamstraße 123"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )"
        },
        "question": {
            "en": "housing units bigger than homes on 123 sesame street",
            "zh": "比 123 芝麻街 上 的 房子 大 的 房屋 单元",
            "de": "Wohneinheiten welche größer sind als die Häuser der 123 Sesamestraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )"
        },
        "question": {
            "en": "housing unit that is the same as the ones on 123 sesame street or 900 mission ave",
            "zh": "和 123 芝麻街 或者 900mission 街上 的 房子 相同 的 房子",
            "de": "Wohneinheit, die mit der in der Sesamstraße 123 oder der Mission Avenue 900 identisch ist"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "which housing unit has a private bath and an area of 800 square feet",
            "zh": "哪个 房屋 单元 有 私人 浴室 并且 有 800 平方尺 的 面积 ？",
            "de": "Welche Wohneinheit hat ein privates Badezimmer und eine Fläche von 800 Quadratmetern?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "housing units that are posted on January end and have a total size of 800 square feet",
            "zh": "在 1 月底 发布 的 有 800 平方英尺 的 房子",
            "de": "Wohneinheiten welche Ende Januar gepostet wurden und eine Gesamtgröße von 800 Quadratfuß besitzen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ) )"
        },
        "question": {
            "en": "neighborhoods with cat friendly housing",
            "zh": "社区 中有 可以 养猫 的 房子",
            "de": "Wohngegenden mit katzenfreundlichen Wohnungen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )"
        },
        "question": {
            "en": "housing with monthly rent less than 1500 dollars",
            "zh": "月租 少于 1500 美元 的 房子",
            "de": "Wohnungen mit einer monatlichen Miete von weniger als 1500 Dollar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "housing units with private room",
            "zh": "有 私人 房间 的 房屋 单元",
            "de": "Wohneinheiten mit Privatraum"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )"
        },
        "question": {
            "en": "housing that is smaller than 123 sesame street",
            "zh": "比 芝麻街 123 号 小 的 房子",
            "de": "Wohnung die kleiner ist als die 123 sesame street."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "housing near at least two neighborhoods",
            "zh": "至少 和 两个 社区 临近 的 房子",
            "de": "Wohnraum in der Nähe von mindestens zwei Nachbarschaften"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( string housing_type ) ) )"
        },
        "question": {
            "en": "which housing has the most amount of housing types",
            "zh": "哪个 住房 拥有 最多 的 住房 类型",
            "de": "Welche Wohnung hat die höchste Anzahl an Wohnungstypen?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "find housing units with a private room and is of the housing type apartment",
            "zh": "找到 有 私人 房间 并且 房屋 类型 是 公寓 的 房屋 单元",
            "de": "Finde Wohneinheiten des Wohnungstyps Apartment mit einem Privatzimmer"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )"
        },
        "question": {
            "en": "apartments for 1500",
            "zh": "1500 元 的 公寓",
            "de": "Appartements für 1500"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ) ) )"
        },
        "question": {
            "en": "what is the total area of a housing unit",
            "zh": "一个 住房 单位 的 总面积 是 什么",
            "de": "Was ist die Gesamtfläche einer Wohneinheit"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "find 800 square feet housing units with 1500 dollars as rent",
            "zh": "找到 800 平方尺 且 租金 是 1500 美元 的 房屋 单元",
            "de": "Finden Sie 800 Quadratfuß große Wohneinheiten mit einer Miete von 1500 Dollar."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )"
        },
        "question": {
            "en": "find the housing unit with the least monthly rent",
            "zh": "找到 月租 最少 的 住房 单元",
            "de": "Finde die Wohneinheit mit der niedrigsten monatlichen Miete"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "show total number of all units",
            "zh": "列出 所有 单元 的 总数",
            "de": "Zeige die Gesamtanzahl aller Einheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "what housing unit has a price of 1500 dollars and allows dogs",
            "zh": "哪个 房子 价格 是 在 1500 美元 并且 可以 养狗 的 ？",
            "de": "Welche Wohneinheit hat einen Preis von 1500 Dollar und erlaubt Hunde"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhood contains two housing units",
            "zh": "哪个 居民区 包含 两个 住房 单元",
            "de": "Welche Nachbarschaft verfügt über zwei Unterkünfte?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "seeking housing with rent at 1500",
            "zh": "寻找 租金 为 1500 的 房子",
            "de": "suche Wohnung mit 1500 Miete"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )"
        },
        "question": {
            "en": "housing units that are 800 square feet",
            "zh": "800 平方英尺 的 住房 单元",
            "de": "Wohnung mit 800 Quadratfuß Größe"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "housing that allows cats that posted on January 2",
            "zh": "在 一月 2 号 发布 并 可以 养猫 的 房子",
            "de": "Welche Unterkünfte, die am 2. Januar veröffentlicht wurden, erlauben Katzen?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "exclude housing similar to 123 sesame street",
            "zh": "把 和 123 芝麻街 相似 的 房子 排除",
            "de": "Schließe Unterkünfte ähnlich der 123 Sesamstraße aus"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "what housing unit posted on Jan 2 allows dogs",
            "zh": "哪个 在 一月 二号 发布 的 住房 单元 是 允许 养狗 的",
            "de": "Welche Unterkunft, die am 2. Januar veröffentlicht wurde, erlaubt Hunde?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )"
        },
        "question": {
            "en": "find housing units with size between 800 and 1000 square feet",
            "zh": "找到 大小 在 800 到 1000 平方英尺 的 住房 单元",
            "de": "Finde Wohneinheiten mit einer Größe zwischen 800 und 1000 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )"
        },
        "question": {
            "en": "housing unit that is 800 square feet or larger in size",
            "zh": "面积 为 800 平方英尺 或 更 大 的 住房 单元",
            "de": "Wohneinheit die 800 Quadratfuß oder größer ist"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "which housing unit in midtown west permits dogs",
            "zh": "在 中西部 哪个 住宅 单位 允许 养狗",
            "de": "Welche Wohneinheit in Midtown West erlaubt Hunde?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "housing available for 1500 month",
            "zh": "租金 是 1500 元 每月 的 可用 房",
            "de": "Wohnung erhältlich für 1500 im Monat"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "which housing unit permits cats and has a private room",
            "zh": "哪个 公寓 允许 养猫 ， 而且 有 一个 私人 房间",
            "de": "Welche Wohneinheit erlaubt Katzen und hat ein eigenes Zimmer"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "housing unit with a private bath",
            "zh": "带 私人 浴室 的 住房 单元",
            "de": "Wohneinheit mit eigenem Bad"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) ) )"
        },
        "question": {
            "en": "housing unit in the neighborhood of 123 sesame street",
            "zh": "sesame 街 123 号 附近 的 住房 单元",
            "de": "Wohneinheit in der Nachbarschaft von 123 Sesamstraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "housing units in the midtown west area",
            "zh": "市中心 西区 的 住宅 单元",
            "de": "Wohneinheiten im Midtown-West-Bereich"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "housing posted on January 2 that rents out for 1500 dollar per month",
            "zh": "1 月 2 日 公布 的 每 月租金 为 1500 美元 的 住房",
            "de": "Häuser die am 2ten Januar veröffentlicht wurden und monatlich 1500 Dollar kosten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )"
        },
        "question": {
            "en": "what kinds of housing is there in midtown west",
            "zh": "中 城西区 有 哪些 房子 ？",
            "de": "Welche Arten von Wohnungen gibt es in Midtown West?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "housing with private bath posted on January 2",
            "zh": "1 月 2 日 发布 的 带 私人 浴室 的 住房",
            "de": "Welche Häuser haben ein Privatbad und wurden am 2ten Januar veröffentlicht?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )"
        },
        "question": {
            "en": "neighborhoods with apartments",
            "zh": "附近 都 是 公寓 的 街区",
            "de": "Gegenden mit Appartments"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "units with 1500 dollar rent",
            "zh": "超过 1500 美金 房租 的 房子",
            "de": "Wohnungen mit 1500 Dollar Miete"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( string min ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what housing units have a small amount of housing units",
            "zh": "哪 种 房型 的 房间 少",
            "de": "Welche Gebäudeeinheiten haben eine kleine Anzahl von Wohnungen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( string neighborhood ) ) )"
        },
        "question": {
            "en": "which area has the least number of housing units",
            "zh": "哪个 区域 的 住房 单元 数量 最少",
            "de": "Welche Gegend hat die niedrigste Anzahl an Wohneinheiten?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string housing_type ) ( string = ) en.housing.apartment ) )"
        },
        "question": {
            "en": "apartments in midtown west",
            "zh": "位于 市中心 西部 的 公寓",
            "de": "Wohnungen in Midtown West"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "housing 800 sf in size posted on January 2",
            "zh": "在 一月 二号 发布 的 800 平方英尺 的 房子",
            "de": "800sf große Unterkunft am 2. Januar veröffentlicht"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "which housing unit permits cats inside it and has a private room",
            "zh": "哪个 住房 单元 允许 养猫 并且 有 私人 房间",
            "de": "Welche Wohnung erlaubt Katzen und besitzt einen Privatraum"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "list available neighborhoods besides 123 sesame street",
            "zh": "列出 除了 在 123 芝麻街 上 可以 租到 的 居民区",
            "de": "Liste verfügbare Nachbarschaften neben 123 Sesamstraße auf"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "show me places with private rooms where dogs are welcome",
            "zh": "给 我 看 允许 养狗 的 私人 房间",
            "de": "Zeigen Sie mir Orte mit privaten Räumen, in denen Hunde willkommen sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "housing neighborhood that was posted on January 2",
            "zh": "在 一月 二号 发布 的 住房 居民区",
            "de": "Wohngegend, die am 2. Januar veröffentlicht wurde"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "which housing unit in midtown area has a monthly rent of 1500 dollars",
            "zh": "在 市中心 房租 1500 美金 的 住房",
            "de": "Welche Wohneinheit in Midtown hat eine monatliche Miete von 1500 Dollar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )"
        },
        "question": {
            "en": "what is the date on which 123 sesame street was posted",
            "zh": "123sesamestreet 的 发布 日期 是 什么 时候",
            "de": "Was ist das Datum an dem 123 Sesamstraße gepostet wurde?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )"
        },
        "question": {
            "en": "find housing units in the neighborhoods of midtown west or chelsea",
            "zh": "找到 位于 市中心 西部 或 切尔西 附近 的 住房 单位",
            "de": "Finde Wohneinheiten in der Nachbarschaft von Midtown West oder Chelsea"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "find housing units with a private room and is of size 800 square feet",
            "zh": "有 800 平方英尺 带 私人 房间 的 房子",
            "de": "Finde Wohnungen mit einem privaten Raum und einer Größe von 800sq"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "housing in midtown west with 1500 month rent",
            "zh": "在 市中心 西边 房租 1500 美金 的 房子",
            "de": "Wohnung in der westlichen Innenstadt mit 1500 monatlicher Miete."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ) )"
        },
        "question": {
            "en": "show me the same kind of housing as 123 sesame street",
            "zh": "跟 我 看 跟 123sesame 大街 一样 类型 的 房子",
            "de": "Zeige mir die gleiche Art von Unterkunft wie 123 Sesamstraße."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "dog friendly hosing that is 800 square feet",
            "zh": "可以 养狗 的 800 平方英尺 的 房子",
            "de": "Hundefreundliche Wohnung mit einer Größe von 800sq."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "neighborhood with less than two housing",
            "zh": "少于 2 个 房子 的 街区",
            "de": "Nachbarschaft mit weniger als zwei Wohnungen."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )"
        },
        "question": {
            "en": "dog friendly apartments",
            "zh": "可以 养狗 的 公寓",
            "de": "Hundefreundliche Apartments,"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "housing in midtown west that costs 1500 month",
            "zh": "在 市中心 西边 1500 房租 的 房子",
            "de": "Welche Wohnungen sind in midtown west und kosten 1500 monatlich?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) )"
        },
        "question": {
            "en": "find housing units with rental charges between 1500 and 2000 dollars",
            "zh": "找到 租金 1500 至 2000 美元 的 住房 单位",
            "de": "Finde Wohnungen mit Mietzahlungen zwischen 1500 und 2000 Dollar."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "apartment complexes with the most units available",
            "zh": "有 最 多 可租 单元 的 公寓",
            "de": "Apartmentkomplexe mit den meisten verfügbaren Einheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_room ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )"
        },
        "question": {
            "en": "find apartments with a private room",
            "zh": "找 一个 有 私人 房间 的 公寓",
            "de": "Finde Apartments mit einem privaten Raum."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )"
        },
        "question": {
            "en": "what neighborhoods have apartments",
            "zh": "那个 居民区 有 公寓",
            "de": "Welche Viertel haben Wohnungen?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "housing units with a private bath and a 1500 dollar monthly rent",
            "zh": "有 私人 卫浴 并且 月租 1500 的 住房 单元",
            "de": "Wohneinheiten mit eigenem Bad und 1500 Dollar Monatsmiete"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "which housing has two types",
            "zh": "哪 种 住房 有 两种 类型",
            "de": "Welches Gehäuse hat zwei Arten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "neighborhood that has at least two listings",
            "zh": "有 至少 两个 房源 的 社区",
            "de": "Nachbarschaft, die mindestens zwei Inserate hat"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "what housing that was posted on January 2 has the same rent as 123 sesame street",
            "zh": "哪个 房子 是 在 一月 2 号 发布 的 并且 租金 跟 123 芝麻街 是 一样 的 ？",
            "de": "Welche Unterkunft, gepostet am 2. Januar, hat dieselbe Miete wie 123 Sesamstraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "which housing unit offers a private room and a private bath",
            "zh": "哪个 房子 有 私人 房间 及 私人 卫生间 ？",
            "de": "Welche Wohneinheit bietet ein eigenes Zimmer und ein eigenes Bad"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( string housing_type ) ) )"
        },
        "question": {
            "en": "building with the most kinds of units",
            "zh": "有 最 多 种类 的 单元 的 楼",
            "de": "Gebäude mit den meisten Arten von Einheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "most recently posted housing",
            "zh": "最近 发布 的 住房",
            "de": "zuletzt gepostete Wohnungen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )"
        },
        "question": {
            "en": "housing that is bigger than 800 square feet",
            "zh": "大于 八百 平方英尺 的 房子",
            "de": "Häuser die größer sind als 800 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "housing with rent at 1500",
            "zh": "租金 是 1500 的 房子",
            "de": "Wohnung mit einer Mieter von 1500"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "what housing unit posted on Jan 2 allows cats",
            "zh": "1 月 2 日 发布 的 哪个 住房 单位 允许 养猫",
            "de": "Welche Wohneinheit, die am 2. Januar gepostet wurde, erlaubt Katzen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what kind of housing is at two or less housing units",
            "zh": "哪 种 房子 是 有 两个 或 以下 的 居住单元",
            "de": "Welche Art von Wohnimmobilie hat zwei oder weniger Wohneinheiten?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "unit is 800 square feet",
            "zh": "单位 是 800 平方英尺",
            "de": "Einheit mit 800 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )"
        },
        "question": {
            "en": "housing unit that costs 1500 or 200 dollars in rent",
            "zh": "租金 在 1500 到 2000 之间 的 房子",
            "de": "Wohneinheit, die 1500 oder 200 Dollar Miete kostet"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "what is the housing type that charges 1500 dollars as monthly rent",
            "zh": "月租金 是 一千五 的 房子 是 什么 类型 的",
            "de": "Was ist der Wohnungstyp, der 1500 Dollar als monatliche Miete berechnet"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ) )"
        },
        "question": {
            "en": "neighborhoods with housing that have a private bathroom",
            "zh": "有带 私人 浴室 的 房子 的 社区",
            "de": "Viertel mit Wohnungen, die eine eigenes Badezimmer haben"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "housing units with monthly rents of 1500 dollars that posted on January 2",
            "zh": "1 月 2 日 发布 的 月租金 为 1500 美元 的 住房 单位",
            "de": "Wohneinheiten mit Monatsmieten von 1500 Dollar die am 2. Januar annonciert wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )"
        },
        "question": {
            "en": "looking for housing in midtown west or chelsea area",
            "zh": "寻找 在 中 城区 西 或者 切尔西 地区 的 房子",
            "de": "suche Wohnung in Midtown West oder Chelsea"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "find housing with a private bath",
            "zh": "找到 带 私人 浴室 的 住房",
            "de": "Finde eine Unterkunft mit eigenem Bad"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "housing types of more than two units",
            "zh": "有 超过 两个 房间 的 房型",
            "de": "Gebäudetypen mit mehr als zwei Einheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "housing unit with a private bath and room",
            "zh": "有 私人 浴室 和 房间 的 房子",
            "de": "Wohneinheit mit eigenem Bad und Zimmer"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "housing apartments that costs 1500 dollars",
            "zh": "1500 美金 的 公寓",
            "de": "Wohnapartments die 1500 Dollar kosten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "find 800 square feet housing units that allow cats",
            "zh": "找 800 平方 允许 养猫 的 房子",
            "de": "Finde 800 Quadratfuß Wohneinheiten die Katzen erlauben"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )"
        },
        "question": {
            "en": "housing unit that costs as much rent as the homes in 123 sesame street",
            "zh": "跟 芝麻街 123 号 房租 一样 的 房子",
            "de": "Wohneinheit, die so viel Miete kostet wie die Häuser in der Sesamstraße 123"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ) ) )"
        },
        "question": {
            "en": "what is the average monthly rent of housing units",
            "zh": "房屋 单元 的 平均 月租费 是 多少 ？",
            "de": "Wie ist der durchschnittliche monatliche Mietpreis von Wohneinheiten?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has two housing units",
            "zh": "有 超过 2 个 房子 的 街区 是 哪个",
            "de": "Welche Nachbarschaft hat zwei Wohneinheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )"
        },
        "question": {
            "en": "housing with rent less than 1500 or less than 2000",
            "zh": "租金 低于 1500 或 低于 2000 的 住房",
            "de": "Wohnraum mit Mietpreisen von weniger als 1500 oder weniger als 2000"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )"
        },
        "question": {
            "en": "what type of housing unit posted Jan 2nd",
            "zh": "1 月 2 日 发布 了 什么 类型 的 住房 单位",
            "de": "Welche Art von Wohneinheit wurde am 2. Januar gepostet?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "housing units that have a private bath",
            "zh": "有 私人 浴室 的 房子",
            "de": "Wohneinheiten die ein privates Bad haben"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "cats permitted 1500 rent monthly",
            "zh": "允许 养猫 月租 1500",
            "de": "Katzen erlaubt 1500 Miete monatlich"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )"
        },
        "question": {
            "en": "housing that is more expensive than 123 sesame street",
            "zh": "比 芝麻街 123 号 更 贵 的 房子",
            "de": "Wohnungen, die teurer sind als 123 Sesamstraße."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )"
        },
        "question": {
            "en": "where are the biggest apartments",
            "zh": "最大 的 公寓 在 哪里 ？",
            "de": "Wo sind die größten Wohnungen?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "800 square feet housing unit which allows dogs",
            "zh": "允许 养狗 的 面积 800 平方英尺 的 住房 单元",
            "de": "800 Quadratfuß große Wohneinheit in der Hunde erlaubt sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ) ) )"
        },
        "question": {
            "en": "what is the average monthly rent of the housing units",
            "zh": "住房 单元 的 平均 的 月租金 是 是 多少",
            "de": "wie hoch ist die durchschnittliche Monatsmiete der Wohneinheiten?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "apartment in the midtown west neighborhood",
            "zh": "位于 市中心 西区 的 公寓",
            "de": "Wohnung in der Nachbarschaft von Midtown West"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "which housing unit permits cats inside it and has the facility of a private bath",
            "zh": "哪个 住房 单元 允许 猫 进入 并且 有 一个 私人 卫浴",
            "de": "Welche Wohnung erlaubt im Innern Katzen und hat ein privates Bad?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "apartment posted at a later date than 123 sesame street",
            "zh": "比 sesame 大街 123 号 发布 更晚 的 公寓",
            "de": "Ein Appartement, das zu einem späteren Datum annonciert wurde, als das in der Sesamstraße 123."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )"
        },
        "question": {
            "en": "which housing unit does not have apartment type of house",
            "zh": "哪个 住房 单元 没有 公寓 类型 的 房子",
            "de": "Welche Wohneinheit hat nicht den Wohnungstyp Haus?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "housing in midtown west with 800 square feet",
            "zh": "800 平方英尺 在 市中心 西区 的 房子",
            "de": "Behausung in Midtown West mit 800 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ) ) )"
        },
        "question": {
            "en": "what is the average area of a housing unit",
            "zh": "一个 房屋 单元 的 平均 面积 是 多少 ？",
            "de": "Was ist die durchschnittliche Fläche einer Wohneinheit"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "which housing unit with an area of 800 square feet permits cats in it",
            "zh": "哪个 房子 有 800 平方英尺 而且 允许 养猫",
            "de": "In welcher Wohneinheit mit einer Fläche von 800 Quadratfuß sind Katzen erlaubt?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "which unit allows dogs and has a private bath",
            "zh": "允许 养狗 ， 有 私密 浴室 的 住房 。",
            "de": "welche Einheit erlaubt Hunde und hat ein privates Badezimmer"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which neighborhood has two housing units maximum",
            "zh": "最多 有 两个 住房 单元 的 小区 。",
            "de": "Welche Nachbarschaft hat maximal zwei Wohneinheiten?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) )"
        },
        "question": {
            "en": "unit on 123 sesame street or 900 mission avenue",
            "zh": "在 芝麻街 123 号 或 使命 街 900 号 的 住房 。",
            "de": "Einheit in 123 Sesame Street oder 900 Mission Avenue"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ) )"
        },
        "question": {
            "en": "what kinds of housing allow dogs",
            "zh": "什么样 的 房子 允许 养狗 ？",
            "de": "In welchen Wohnungsarten sind Hunde erlaubt?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )"
        },
        "question": {
            "en": "housing that is the same size or smaller than 123 sesame street",
            "zh": "面积 小于 或 等于 芝麻街 123 的 住房 。",
            "de": "Wohnungen die so groß oder kleiner als Sesamstraße 123 sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "which housing units permits dogs and offers a private room",
            "zh": "哪 种 房子 允许 养狗 而且 有 私人 房间",
            "de": "Welche Wohneinheiten erlaubt Hunde und bietet ein eigenes Zimmer"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "housing units that have the most housing types",
            "zh": "有 最 多 房子 类型 的 房屋 单元",
            "de": "Wohnungen mit den meisten Wohnarten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "housing with 1500 rent and allows dogs",
            "zh": "房租 是 1500 元 并且 允许 养狗 的 房子",
            "de": "Wohnungen für 1500, die Hunde erlauben?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) ) )"
        },
        "question": {
            "en": "what neighborhood housing units allows dogs",
            "zh": "哪个 居民区 的 住房 单元 允许 养狗",
            "de": "Welche Wohneinheiten in der Nachbarschaft erlauben Hunde?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "800 square feet apartment type housing unit",
            "zh": "800 平方英尺 的 公寓式 住房 单元",
            "de": "800 Quadratfuß Apartment-Wohneinheit"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )"
        },
        "question": {
            "en": "what are the neighborhoods of 123 sesame street or 900 mission ave",
            "zh": "123 芝麻街 或者 900 任务 街 所在 的 居民区 是 什么",
            "de": "Was sind die Nachbarschaften von 123 Sesamstraße oder 900 Mission Ave."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "find housing units with rent as 1500 dollars",
            "zh": "找到 1500 美元 房租 的 房屋 单元",
            "de": "Finde Wohneinheiten mit einer Miete von 1500 Dollar"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "housing unit posted January 2 with the same rent as 123 sesame street",
            "zh": "在 一月 二号 发布 而且 和 123 芝麻街 有 相同 租金 的 房屋 单元",
            "de": "Wohneinheit gepostet am 2. Januar mit der gleichen Miete wie 123 Sesamstraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "find apartments that are pet friendly",
            "zh": "找到 允许 养 宠物 的 公寓",
            "de": "Finde Wohnungen die tierfreundlich sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_room ) ) ) )"
        },
        "question": {
            "en": "which housing unit in this area has a private room",
            "zh": "该 地区 的 哪个 住房 单元 有 私人 房间",
            "de": "Welche Wohneinheit in dieser Umgebung hat ein Privatzimmer?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "what housing units allow dogs",
            "zh": "哪个 住房 单元 允许 养狗",
            "de": "Welche Wohneinheiten erlauben Hunde?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )"
        },
        "question": {
            "en": "which housing have more than 800 square feet of space",
            "zh": "哪个 房屋 的 面积 超过 800 平方英尺",
            "de": "Welche Behausung hat mehr als 800 Quadratfuß an Platz?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string ! = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "housing size other than 800 square feet",
            "zh": "大小 不是 800 平方英尺 的 住房",
            "de": "Gehäusegröße abweichend von 800 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )"
        },
        "question": {
            "en": "most expensive housing",
            "zh": "最贵 的 房子",
            "de": "teuerster Wohnraum"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )"
        },
        "question": {
            "en": "which housing unit is available for a rent of 1500 or 2000 dollars per month",
            "zh": "哪个 租金 在 1500 或者 2000 美金 的 房子 是 可以 现在 选择 的",
            "de": "welche Wohneinheit ist für eine Miete von 1500 oder 2000 Dollar pro Monat verfügbar?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )"
        },
        "question": {
            "en": "apartments bigger than 800 square feet",
            "zh": "大于 800 平方英尺 的 公寓",
            "de": "Appartements größer als 800 Quadratfuß"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "earliest posted housing",
            "zh": "最早 发布 的 房子",
            "de": "Am frühesten gepostete Behausung"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )"
        },
        "question": {
            "en": "find housing units of the type apartment or condo",
            "zh": "找到 公寓 或者 复式 类型 的 房子",
            "de": "Finde Wohneinheiten vom Typ Apartment oder Condo"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )"
        },
        "question": {
            "en": "which nearby area has a housing unit of 800 square feet by area",
            "zh": "哪个 附近 区域 有 面积 大于 800 平方公尺 的 住房 单元",
            "de": "Welche Nahe Gegend hat eine Wohneinheit von 800 Quadratfuß Fläche"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "neighborhoods that do not contain 123 sesame street",
            "zh": "不 包含 123 芝麻街 的 街区",
            "de": "Nachbarschaften, die 123 Sesamstraße nicht enthalten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "which housing unit was posted after the posting date of 123 sesame street",
            "zh": "哪个 住房 单元 是 在 123 芝麻街 发布 日 之后 发布 的",
            "de": "Welche Wohneinheit wurde veröffentlicht nachdem die 123 sesame street veröffentlicht wurde?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )"
        },
        "question": {
            "en": "what is the smallest housing",
            "zh": "最小 的 房子 是 哪个 ？",
            "de": "Was ist das kleinste Haus?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )"
        },
        "question": {
            "en": "what housing has the same posting date as those in 123 sesame street",
            "zh": "什么 房子 的 发布 日期 和 123 芝麻街 的 发布 日期 相同 ？",
            "de": "Welche Wohnungen haben das selbe Veröffentlichungstag wie 123 sesame street?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "which housing unit with an area of 800 square feet permits cats and dogs inside it",
            "zh": "哪个 房子 是 大小 800 平方尺 并 可以 养猫 养狗 的 ？",
            "de": "Welche Wohneinheit mit einer Fläche von 800 Quadratfuß erlaubt Katzen und Hunde in ihr?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )"
        },
        "question": {
            "en": "what housing units are in midtown west",
            "zh": "什么 住房 单位 在 市中心 西部",
            "de": "Welche Wohneinheiten sind in Midtown West"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( string neighborhood ) ) )"
        },
        "question": {
            "en": "units with the most neighborhoods",
            "zh": "有 最 多 社区 的 单元",
            "de": "Einheiten mit den meisten Nachbarschaften"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "housing with 1500 dollar rent that was posted on January 2",
            "zh": "1 月 2 日 发布 的 1500 美元 租金 住房",
            "de": "Einheiten mit 1500 Dollar Miete, die am 2. Januar veröffentlicht wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ) ) )"
        },
        "question": {
            "en": "what is the total monthly rent",
            "zh": "每月 总 租金 是 多少 ？",
            "de": "Wie hoch ist die monatliche Gesamtmiete?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )"
        },
        "question": {
            "en": "neighborhoods in 123 sesame street or 900 mission ave",
            "zh": "123 芝麻街 或 900 任务 大街 的 街区",
            "de": "Nachbarschaften in 123 Sesamstraße oder 900 Mission Avenue"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )"
        },
        "question": {
            "en": "unit with same rent as 123 sesame street",
            "zh": "和 123 芝麻街 同样 租金 的 单位",
            "de": "Einheit mit der gleichen Miete wie 123 Sesamstraße"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what neighborhood has two or less housing units",
            "zh": "哪个 邻里 街道 有 2 个 或 更 少 的 单位",
            "de": "Welche Nachbarschaft hat zwei oder weniger Wohneinheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )"
        },
        "question": {
            "en": "apartments between 800 and 1000 square feet",
            "zh": "800 至 1000 平方英尺 的 公寓",
            "de": "Wohnungen zwischen 800 und 1000 Quadratfuß?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "a neighborhood with two house units",
            "zh": "一个 有 两个 房屋 的 社区",
            "de": "Eine Nachbarschaft mit zwei Hauseinheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( string min ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "apartments with the least amount of units",
            "zh": "单元 最少 的 公寓",
            "de": "Wohnungen mit der geringsten Anzahl an Einheiten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )"
        },
        "question": {
            "en": "what housing is posted either Jan 2nd or Feb. 3rd",
            "zh": "哪个 住房 是 1 月 2 日 或 2 月 3 日 发布 的",
            "de": "Welche Häuser wurden entweder am 2ten Januar oder am 3ten Februar veröffentlicht?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )"
        },
        "question": {
            "en": "what is the neighborhood area of that apartment",
            "zh": "那个 公寓 在 哪个 社区 ？",
            "de": "Was ist die Nachbarschaftsgegend von diesem Apartment?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) ) )"
        },
        "question": {
            "en": "housing in the same neighborhood at 123 sesame street",
            "zh": "和 123 芝麻街 在 相同 社区 的 房子",
            "de": "Welche Häuser haben die gleiche Gegend wie die 123 sesame street?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )"
        },
        "question": {
            "en": "housing that is cheaper than 123 sesame street",
            "zh": "比 芝麻街 123 号 便宜 的 房子",
            "de": "Wohnungen, die billiger sind als 123 Sesamstraße."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "find housing units with rent as 1500 dollars per month",
            "zh": "找到 每 月租金 1500 美元 的 房子",
            "de": "Finde Wohneinheiten mit einer Miete von 1500 Dollar pro Monat"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "housing with monthly rent of 1500 dollars that was posted on January 2",
            "zh": "1 月 2 日 发布 的 月租金 为 1500 美元 的 住房",
            "de": "Gehäuse mit monatlicher Miete von 1500 Dollar, die am 2. Januar veröffentlicht wurde."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "any units costing more than 1500 a month",
            "zh": "任何 高于 1500 每个 月 的 单元 （ 房子 ）",
            "de": "Einheiten, die mehr als 1500 pro Monat kosten"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )"
        },
        "question": {
            "en": "which neighborhoods have housing with monthly rent of 1500 dollars",
            "zh": "哪个 街区 有 月租 1500 美元 的 住房",
            "de": "Welche Gegenden haben Häuser die monatliche eine Miete von 1500 Dollar haben?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the housing unit number",
            "zh": "住房 单元 号 是 多少 ？",
            "de": "was ist die Nummer der Wohneinheit?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string allows_dogs ) ) )"
        },
        "question": {
            "en": "looking for a pet friendly unit",
            "zh": "寻找 允许 宠物 的 住房 单元 。",
            "de": "Suche nach einer tierfreundlichen Einheit?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "apartments posted after January 2",
            "zh": "在 一月 二 日后 发布 的 公寓",
            "de": "Appartements die nach dem 2. Januar gepostet wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "housing unit whose monthly rent is not 1500 dollars",
            "zh": "月租金 不 等于 １ ５ ０ ０ 美元 的 住房 单元",
            "de": "Wohneinheit, deren Monatsmiete nicht 1500 Dollar beträgt."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )"
        },
        "question": {
            "en": "housing unit posted at the latest January 2 or February 3",
            "zh": "最晚 在 一月 二号 或者 二月 三号 发布 的 住房 单元",
            "de": "Wohneinheit, die spätestens am 2. Januar oder 3. Februar gepostet wurde."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string ! = ) ( number 800 en.square_feet ) ) )"
        },
        "question": {
            "en": "which housing unit has less than 800 square feet",
            "zh": "哪些 住房 单元 是 小于 800 平方英尺 的",
            "de": "Welche Wohneinheit hat weniger als 800 Quadratfuß?"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what housing unit is in over two neighborhoods",
            "zh": "哪个 房屋 单位 是 横跨 两个 社区 以上 的",
            "de": "welche Wohneinheit ist in mehr als zwei Stadtteilen"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "housing that allows cats posted on January 2",
            "zh": "允许 养猫 并且 发布 在 一月 二号 的 房子",
            "de": "Einheiten die Katzen erlauben und am 2. Januar gepostet wurden"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string !type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "looking for a 2 family house",
            "zh": "寻找 容纳 两个 家庭 的 住房 。",
            "de": "Suche nach einem Zweifamilienhaus"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )"
        },
        "question": {
            "en": "what housing units that are at least the size of 123 sesame street",
            "zh": "最少 跟 123Sesame 街 一样 大小 的 房子",
            "de": "welche Wohneinheit die mindestens so groß sind wie Sesamstraße 123"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )"
        },
        "question": {
            "en": "what 800 square foot housing posted Jan 2nd",
            "zh": "有 哪些 800 平方英尺 的 房子 是 在 一月 二日 发布 的",
            "de": "welche 800 Quadratfuß große Wohneinheit wurde am 2. Januar gepostet"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string allows_cats ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "housing that is 1500month and cats are allowed",
            "zh": "房租 在 1500 一个月 而且 可以 养猫 的",
            "de": "Wohneinheit die 1500 im Monat kostet und in der Katzen erlaubt sind"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )"
        },
        "question": {
            "en": "the neighborhood of apartment 123 sesame street",
            "zh": "芝麻街 123 号 的 社区",
            "de": "Die Nachbarschaft der Wohnung Sesamestraße 123"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )"
        },
        "question": {
            "en": "apartment that is below 1000 or 800 square feet",
            "zh": "低于 1000 或 800 平方英尺 的 公寓",
            "de": "Appartment welches kleiner als 1000 oder 800 Quadratfuß ist"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )"
        },
        "question": {
            "en": "find housing units with the same posting date as 123 sesame street",
            "zh": "寻找 跟 123sesame 街 同一天 发布 的 房子",
            "de": "Finde Wohneinheiten mit dem selben Veröffentlichkeitsdatum wie Sesamestraße 123"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )"
        },
        "question": {
            "en": "housing unit which is an apartment with a monthly rent of 1500 dollars",
            "zh": "有 一个 每 月租金 1500 美元 套间 的 房子",
            "de": "Wohneinheit, die eine Wohnung mit einer monatlichen Miete von 1500 Dollar ist"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string has_private_bath ) ) ( string has_private_room ) ) )"
        },
        "question": {
            "en": "housing unit with private bath as well as private room",
            "zh": "有 私人 房间 和 私人 浴室 的 房子",
            "de": "Wohneinheit mit privatem Bad sowie privatem Raum"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string allows_cats ) ) )"
        },
        "question": {
            "en": "apartment that allows cats",
            "zh": "可以 养猫 的 公寓",
            "de": "Appartement, das Katzen erlaubt."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_bath ) ) )"
        },
        "question": {
            "en": "private bath in midtown west",
            "zh": "在 市中心 西部 的 私人 浴室",
            "de": "Privates Bad in Midtown West"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string !type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the neighborhood that has the least number of housing units",
            "zh": "找到 住房 单元 数量 最少 的 社区",
            "de": "Finden Sie die Nachbarschaft mit der geringsten Anzahl von Wohneinheiten."
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string max ) ( string neighborhood ) ) )"
        },
        "question": {
            "en": "apartments with the most neighborhoods around it",
            "zh": "有 最 多 居民区 在 周围 的 公寓",
            "de": "Appartements mit den meisten Nachbarschaften in der Umgebung"
        }
    },
    {
        "domain": "housing",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string !type ) ) ( string size ) ) ) )"
        },
        "question": {
            "en": "what is the size of the apartment",
            "zh": "公寓 的 面积 是 多少",
            "de": "Was ist die Größe von dem Apartment?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what article has the most number of articles cited",
            "zh": "哪个 文章 摘取 了 最 多 的 文献",
            "de": "Welcher Artikel hat die meisten Artikel zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "person who has not published article in multivariate data analysis",
            "zh": "没有 在 多 变量 数据分析 中 发表文章 的 人",
            "de": "Person, die keinen Artikel in der multivariaten Datenanalyse veröffentlicht hat"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what person is not the author of multivariate data analysis",
            "zh": "什么 人 不是 多 变量 数据分析 的 作者",
            "de": "Welche Person ist nicht der Autor von multivariater Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "article cited by two articles",
            "zh": "被 两篇 文章 引用 的 文章",
            "de": "In zwei Artikeln zitierter Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "articles that do not cite multivariate data analysis",
            "zh": "没有 引用 多 变量 数据分析 的 文章",
            "de": "Artikel, die keine multivariate Datenanalyse zitieren."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "articles published in the annals of statistics citing multivariate data analysis",
            "zh": "在 统计 年刊 发布 并且 引用 了 多类 数据分析 的 文章",
            "de": "Artikel, die in den Annalen der Statistik veröffentlicht wurden und sich auf multivariate Datenanalyse beziehen."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )"
        },
        "question": {
            "en": "article that has the smallest publication date",
            "zh": "最早 发布 的 文章",
            "de": "Artikel mit dem kleinsten Erscheinungsdatum"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "article that has at most two authors",
            "zh": "最多 有 两位 作者 的 文章",
            "de": "Artikel, der von höchstens zwei Personen verfasst wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "article citing an article citing multivariate data analysis",
            "zh": "文章 引用 了 一篇 引用 多 变量 数据分析 的 文章",
            "de": "Artikel, der einen Artikel zitiert, der eine multivariate Datenanalyse zitiert."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what venue has fewer than two articles",
            "zh": "哪个 会 有 少于 两篇 文章",
            "de": "Welcher Veranstaltungsort hat weniger als zwei Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "publisher of article citing multivariate data analysis",
            "zh": "引用 多 变量 数据分析 的 文章 出版商",
            "de": "Herausgeber eines Artikels, der multivariate datenanalyse zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )"
        },
        "question": {
            "en": "article written by Efron that won an award",
            "zh": "efron 写 的 并且 得奖 的 文章",
            "de": "Artikel von Efron, der ausgezeichnet wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "writers who didn't write multivariate data analysis",
            "zh": "没有 写 多元 数据分析 的 作者",
            "de": "Autor*innen, die keine multivariate Datenanalyse verfasst haben"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "article that cites the most number of articles",
            "zh": "引用 最 多 文章 的 文章",
            "de": "Artikel, der die größte Anzahl an Artikeln zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )"
        },
        "question": {
            "en": "articles that cite articles published in annals of statistics",
            "zh": "引用 统计 年鉴 中 发表文章 的 文章",
            "de": "Artikel, die Artikel zitieren, die in den Annalen der Statistik veröffentlicht wurden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "what article is cited by an Efron article",
            "zh": "哪个 文章 是 被 一篇 Efron 文章 引用 的 ？",
            "de": "Welcher Artikel wird in einem Efron-Artikel zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what article cites another article with a publication date of 2004",
            "zh": "什么 文章 引用 了 另 一篇 发表 日期 为 2004 年 的 文章",
            "de": "welcher Artikel zitiert einen anderen Artikel mit einem Erscheinungsdatum von 2004?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "article with more than two venues",
            "zh": "有 两个 以上 场地 的 文章",
            "de": "Artikel mit mehr als zwei Veranstaltungsorten"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "publications containing articles that cite multivariate data analysis",
            "zh": "包含 引用 多 变量 数据分析 的 文章 的 出版物",
            "de": "Veröffentlichungen mit Artikeln, in denen multivariate Datenanalysen zitiert werden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ) )"
        },
        "question": {
            "en": "articles that cite award winning articles",
            "zh": "引用 获奖 文章 的 文章",
            "de": "Artikel, die preisgekrönte Artikel zitieren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what article is in annals of statistics and is cited by multivariate data analysis",
            "zh": "哪 篇文章 在 统计 年刊 上且 被 多 变量 数据分析 引用",
            "de": "Welcher Artikel ist in Annalen der Statistik und wird durch multivariate Datenanalyse zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string author ) ( string = ) en.person.efron ) )"
        },
        "question": {
            "en": "Efron articles published in 2004",
            "zh": "艾佛龙 在 2004 年 发表 的 的 文章",
            "de": "Efron-Artikel aus dem Jahr 2004"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( string venue ) ) )"
        },
        "question": {
            "en": "articles published in the most venues",
            "zh": "在 大多数 场地 发表 的 文章",
            "de": "Artikel, die an den meisten Orten veröffentlicht wurden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )"
        },
        "question": {
            "en": "find an article by Efron or Lakoff",
            "zh": "找到 Efron 或 Lakoff 的 文章",
            "de": "einen Artikel von Efron oder Lakoff finden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "articles found in annals of statistics",
            "zh": "在 统计 年录 上 找到 的 文章 吗 ？",
            "de": "Artikel in den Annalen der Statistiken"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "article that cites multivariate data analysis",
            "zh": "引用 了 多 变量 数据分析 的 文章",
            "de": "Artikel, der multivariate Datenanalyse zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which venue is of less than two articles",
            "zh": "那个 场地 少于 两篇 文章",
            "de": "Welcher Ort hat weniger als zwei Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "number of publications",
            "zh": "出版物 数量",
            "de": "Anzahl der Veröffentlichungen"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )"
        },
        "question": {
            "en": "articles published on the same day as multivariate data analysis",
            "zh": "与 多 变量 数据分析 同日 发表 的 文章",
            "de": "Artikel, die am selben Tag wie die multivariate Datenanalyse veröffentlicht wurden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )"
        },
        "question": {
            "en": "articles published before multivariate data analysis",
            "zh": "比 多元化 数据分析 早 发布 的 文章",
            "de": "Artikel, die vor der multivariaten Datenanalyse veröffentlicht wurden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "venue of at most two articles",
            "zh": "会场 最 多 发表 两篇 文章",
            "de": "Veranstaltungsort von höchstens zwei Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "what article was published before 2010",
            "zh": "哪些 是 2010 年前 出版 的 文章",
            "de": "Welcher Artikel wurde vor 2010 veröffentlicht?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )"
        },
        "question": {
            "en": "articles published most recently",
            "zh": "最近 发表 的 文章",
            "de": "Neueste Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "what article citing multivariate data analysis was in annals of statistics",
            "zh": "哪篇 引用 多样 数据分析 的 文章 是 在 统计 年 录里 的 ？",
            "de": "Welcher Artikel, in dem multivariate Datenanalysen zitiert wurden, befand sich in den Annalen der Statistik"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( call SW.concat en.venue.annals_of_statistics en.venue.computational_linguistics ) ) )"
        },
        "question": {
            "en": "what article is about a venue of annals of statistics or computational linguistics",
            "zh": "哪 篇文章 是 关于 统计 年录 地点 或 计算 语言 地点 的 ？",
            "de": "Welcher Artikel ist über eine Tagung von Annalen von Statistiken oder rechnerische Linguistiken?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) )"
        },
        "question": {
            "en": "articles by Efron",
            "zh": "Efron 的 文章",
            "de": "Artikel von Efron"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ) )"
        },
        "question": {
            "en": "awarded articles",
            "zh": "获奖 文章",
            "de": "preisgekrönte Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )"
        },
        "question": {
            "en": "what article written by Efron won an award",
            "zh": "埃夫隆 哪 篇文章 获 了 奖",
            "de": "welcher Artikel von Efron wurde ausgezeichnet?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "person who is not author of multivariate data analysis",
            "zh": "哪位 不是 多元化 数据分析 的 作者",
            "de": "Person, die nicht Autor der multivariaten Datenanalyse ist."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( string author ) ) )"
        },
        "question": {
            "en": "articles written by the most writers",
            "zh": "被 最 多 作者 写出 的 文章",
            "de": "Artikel die von den meisten geschrieben wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "name a venue of no more than two articles",
            "zh": "说出 一个 不 多于 两篇 文章 的 会",
            "de": "Nennen Sie einen Veranstaltungsort mit nicht mehr als zwei Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "which is the article that cites multivariate data analysis that was published in the annals of statistics",
            "zh": "哪 篇文章 引用 了 多元 数据分析 被 发表 在 了 统计 年鉴 上",
            "de": "Welcher Artikel zitiert multivariante Datenanalyse und wurde in der Geschichte der Statistik veröffentlicht"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "articles that do not appear in the same publications as multivariate data analysis",
            "zh": "哪 篇文章 不是 在 多元化 数据分析 的 刊物 里",
            "de": "Artikel die nicht in den gleichen Publikationen wie die multivariate Datenanalyse erscheinen"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )"
        },
        "question": {
            "en": "articles published on or after the publication date of multivariate data analysis",
            "zh": "在 多源 数据分析 出版 日 或者 之后 发表 的 文章",
            "de": "Artikel, die am oder nach dem Veröffentlichkeitsdatum der multivariaten Datenanalyse veröffentlicht wurden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "find an article not in annals of statistics",
            "zh": "找到 一篇 不 在 统计 年刊 中 的 文章",
            "de": "Finde einen Artikel, der nicht in den Annalen der statistik enthalten ist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the venue that is mentioned in more than two articles",
            "zh": "被 多于 两篇 文章 提到 的 场景",
            "de": "Welcher Veranstaltungsort wird in mehr als zwei Artikeln erwähnt?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "name an article about multivariate data analysis",
            "zh": "命名 一篇 关于 多 变量 数据分析 的 文章",
            "de": "Nenne einen Artikel über multivariable Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "writer of multivariate data analysis",
            "zh": "多元 数据分析 的 作者",
            "de": "Autor multivariater Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "author citing multivariate data analysis in article",
            "zh": "在 文章 里面 引用 了 多元 数据分析 的 作者",
            "de": "Autor zitiert multivariate Datenanalyse im Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "what article cites articles about multivariate data analysis",
            "zh": "什么 文章 引用 了 关于 多 变量 数据分析 的 文章",
            "de": "welcher Artikel zitiert Artikel über multivariate Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "find an article published in 2004 or later",
            "zh": "找到 2004 年 或 之后 发表 的 文章",
            "de": "Finden Sie einen Artikel, der im Jahr 2004 oder später veröffentlicht wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "article that cites the multivariate data analysis article",
            "zh": "引用 了 多元 数据分析 文章 的 文章",
            "de": "Artikel, in dem der Artikel zur multivariaten Datenanalyse zitiert wird"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string author ) ( string = ) en.person.efron ) )"
        },
        "question": {
            "en": "what article written by Efron has a publication date of 2004",
            "zh": "哪些 Efron 在 2004 发表 的 文章",
            "de": "welcher Artikel von Efron wurde 2004 veröffentlicht"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "find an article that cites multivariate data analysis",
            "zh": "找到 一篇 引用 多元 数据分析 的 文章",
            "de": "Suchen Sie nach einem Artikel, in dem die multivariate Datenanalyse zitiert wird"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "articles about annals of statistics",
            "zh": "关于 统计 年鉴 的 文章",
            "de": "Artikel über Annalen der Statistik"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "who has not written a multivariate data analysis",
            "zh": "谁 没有 写过 多元 数据分析 ？",
            "de": "wer hat keine multivariante Datenanalyse geschrieben"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find an article with two authors",
            "zh": "找到 一篇 有 两个 作者 的 文章",
            "de": "Finde einen Artikel mit zwei Autoren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what article cited by multivariate data analysis won an award",
            "zh": "哪篇 引用 了 多 变量 数据分析 的 文章 获 了 奖",
            "de": "welcher Artikel der von der multivarianten Datenanalyse zitiert wurde gewann einen Preis"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "which authors cite multivariate data analysis in their articles",
            "zh": "哪位 作者 在 文章 中 引用 了 多 变量 数据分析",
            "de": "Welche Autoren zitieren in ihren Artikeln multivariate Datenanalysen?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "article that cites multivariate data analysis and whose publication date is 2004",
            "zh": "哪些 文章 引用 了 多元化 数据分析 且 在 2004 发布 的",
            "de": "Artikel, der multivariate Datenanalyse zitiert und dessen Veröffentlichungsdatum 2004 ist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what are some articles with publications dates between 2004 and 2010",
            "zh": "哪些 文章 是 在 2004 到 2010 发表 的",
            "de": "welche Artikel mit Publikationsdaten zwischen 2004 und 2010 gibt es?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )"
        },
        "question": {
            "en": "articles written by Efron",
            "zh": "埃夫隆 写 的 文章",
            "de": "Artikel von Efron"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what article has less than two citations",
            "zh": "什么 文章 引用 不到 两个",
            "de": "Welcher Artikel wurde weniger als zwei Mal zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "name an article about multivariate data analysis in the annals of statistics",
            "zh": "在 统计 年鉴 中 指出 一篇 关于 多 变量 数据分析 的 文章",
            "de": "Nennen Sie einen Artikel über multivariate Datenanalyse aus den Annalen der Statistik"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what article discusses the multivariate data analysis of cities",
            "zh": "什么 文章 讨论 了 城市 的 多元 数据分析",
            "de": "welcher Artikel beschreibt die multivariate Datenanalyse von Städten"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "author with the least number of articles",
            "zh": "文章 数量 最少 的 作者",
            "de": "Autor mit den wenigsten Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "venues of articles cited by multivariate data analysis",
            "zh": "多 变量 数据分析 引用 的 文章 出处",
            "de": "Veranstaltungsorte von Artikeln, die durch multivariate Datenanalyse zitiert wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "articles published in multiple places",
            "zh": "在 多个 地点 发布 的 文章",
            "de": "Artikel, die an mehreren Stellen veröffentlicht wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "what article published in 2004 cited multivariate data analysis",
            "zh": "哪个 文章 在 2004 年 发布 并且 引用 了 多 变量 数据分析",
            "de": "welcher Artikel aus dem Jahr 2004 zitierte die multivariate Datenanalyse."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( call SW.concat en.venue.annals_of_statistics en.venue.computational_linguistics ) ) )"
        },
        "question": {
            "en": "articles published in annals of statistics or computational linguistics",
            "zh": "在 统计 年刊 或者 计算 语言学 上 发表 的 文章",
            "de": "Artikel, die in Annalen der Statistik oder der Computerlinguistik veröffentlicht wurden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "the article cites that the author is Efron",
            "zh": "文章 引用 了 作者 是 Efron",
            "de": "der Artikel zitiert, dass der Autor Efron ist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "name an author whose publication date is 2004",
            "zh": "找出 一篇 2004 的 发表 的 文章 的 作者",
            "de": "Nenne eine Autor eines Textes, dessen Erscheinungsdatum 2004 ist."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what author has written the most articles",
            "zh": "那个 作者 写过 最多 文章",
            "de": "Welcher Autor hat die meisten Artikel geschrieben?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "articles cited by two or more articles",
            "zh": "被 两个 或者 更 多 文章 引用 的 文章",
            "de": "Artikel, die in zwei oder mehr Artikeln zitiert werden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "name an author of an article about multivariate data analysis",
            "zh": "说出 一个 关于 多元 数据分析 的 文章 的 作者",
            "de": "Nenne eine Autor eines Artikels über multivariate Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ) )"
        },
        "question": {
            "en": "what venue is about an article that won an award",
            "zh": "哪 一个 场馆 是 关于 一个 获 了 奖 的 文章",
            "de": "Welcher Veranstaltungsort handelt von einem preisgekrönten Artikel?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "author of the article that cites multivariate data analysis",
            "zh": "引用 多 变量 数据分析 的 文章 的 作者",
            "de": "Autor eines Artikels, der multivariate Datenanalyse zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "article by three or more authors",
            "zh": "有 3 个 或 以上 作者 的 文章",
            "de": "Artikel von drei oder mehr Autoren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "what article cites an article that cites multivariate data analysis",
            "zh": "什么 文章 引用 了 引用 多 变量 数据分析 的 文章",
            "de": "In welchem Artikel wird ein Artikel zitiert, in dem multivariate Datenanalyse zitiert wird?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "find an article published in 2004 in annals of statistics",
            "zh": "在 2004 年 的 统计 年鉴 中 找到 一篇 文章",
            "de": "finden einen Artikel der in 2004 in Statistik veröffentlich wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "article published by Efron in 2004",
            "zh": "Efron 于 2004 年 发表 的 文章",
            "de": "Artikel von Efron im Jahr 2004 veröffentlicht"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who has authored fewer than two articles",
            "zh": "谁 撰写 了 不到 两篇 文章",
            "de": "Wer hat weniger als zwei Artikel geschrieben"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "what article does not have a publication date of 2004",
            "zh": "哪些 文章 不是 在 2004 年 出版 的",
            "de": "welcher Artikel hat kein Erscheinungsdatum von 2004?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "article that references the most number of articles",
            "zh": "引用 最 多 文章 的 文章",
            "de": "Artikel, der auf die meisten Artikel verweist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "articles published 2004 or more recent",
            "zh": "2004 年 或 更 近期 发表 的 文章",
            "de": "Artikel die 2004 oder später veröffentlich wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what article has over two venues",
            "zh": "什么 文章 有 超过 两个 场地",
            "de": "Welcher Artikel hat über zwei Veranstaltungsorte"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( string author ) ) )"
        },
        "question": {
            "en": "what article has the fewest authors",
            "zh": "什么 文章 的 作者 最少",
            "de": "welcher Artikel hat die wenigsten Autoren?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "article whose publication date is at most 2004",
            "zh": "发表 日期 最多为 2004 年 的 文章",
            "de": "Artikel, dessen Erscheinungsdatum höchstens 2004 ist."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "articles published in 2004 cited in multivariate data analysis",
            "zh": "在 多样 数据分析 里 引用 的 ， 2004 出版 的 那些 篇文章 吗 ？",
            "de": "2004 veröffentlichte Artikel zitiert in der multivariaten Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )"
        },
        "question": {
            "en": "what article by Efron cites multivariate data analysis",
            "zh": "什么 Efron 文章 引用 多样 数据分析 ？",
            "de": "Welcher Artikel von Efron zitiert die multivariate Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what article has over two venues",
            "zh": "什么 文章 拥有 2 个 发表 场地",
            "de": "Welcher Artikel hat mehr als zwei Veröffentlichungsorte?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "writer of multivariate data analysis",
            "zh": "多元 数据分析 的 作者",
            "de": "Autor multivariater Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "articles about cities published after 2004",
            "zh": "2004 后 出版 的 关于 城市 的 那些 篇文章 吗 ？",
            "de": "Artikel über Städte, die nach 2004 veröffentlicht wurden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "author of only one article",
            "zh": "只有 一篇 文章 的 作者",
            "de": "Autor von nur einem Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )"
        },
        "question": {
            "en": "what article won an award and whose venue is annals and statistics",
            "zh": "哪 篇文章 获 了 奖 并且 场馆 是 统建 年鉴",
            "de": "Welcher Artikel gewann eine Auszeichnung, der von Annalen und Statistiken handelt?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "what are some articles about annals of statistics",
            "zh": "什么 是 一些 关于 统计 年录 的 文章 ？",
            "de": "Was sind einige Artikel über Annalen der Statistik"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )"
        },
        "question": {
            "en": "articles written by Efron or Lakoff",
            "zh": "Efron 或 Lakoff 撰写 的 文章",
            "de": "Artikel von Efron oder Lakoff"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which author has published at least two articles",
            "zh": "哪个 作者 发表 了 至少 两篇 文章",
            "de": "Welcher Autor hat mindestens zwei Artikel veröffentlicht?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "who is the author of an article citing multivariate data analysis",
            "zh": "引用 多 变量 数据分析 的 文章 的 作者 是 谁",
            "de": "Wer ist der Author eines Artikels über multivariate Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "articles published in 2004 or 2010",
            "zh": "在 2004 年 或 2010 年 发表 的 文章",
            "de": "Artikel, die 2004 oder 2010 veröffentlicht wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "articles citing multivariate data analysis and cited by multivariate data analysis",
            "zh": "引用 了 多 变量 数据分析 并且 被 多 变量 数据分析 引用 了 的 文章",
            "de": "Artikel, die sich auf die multivariate Datenanalyse beziehen und von der multivariaten Datenanalyse zitiert werden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "name an article by the author Efron",
            "zh": "说出 一篇 作者 是 艾佛龙 的 文章",
            "de": "Nenne einen Artikel des Autors Efron."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "article with minimum two venue",
            "zh": "有 两个 以上 出版 地 的 文章",
            "de": "Artikel mit mindestens zwei Veranstaltungsorten"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what publications contain multivariate data analysis",
            "zh": "哪些 出版物 包含 多 变量 数据分析",
            "de": "Welche Publikationen enthalten multivariate Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )"
        },
        "question": {
            "en": "award winning articles by Efron",
            "zh": "Efron 写 的 获奖 文章",
            "de": "preisgekrönte Artikel von Efron"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what Efron article was cited by multivariate data analysis",
            "zh": "哪篇 Efron 写 的 文章 被 多 变量 数据分析 引用 过 ？",
            "de": "welcher Efron-Artikel wurde durch multivariate Datenanalyse zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string min ) ( string venue ) ) )"
        },
        "question": {
            "en": "what article has the least number of venues",
            "zh": "哪一篇 文章 是 有 最少 的 出版 地 的 ？",
            "de": "welcher Artikel hat die geringste Anzahl von Veranstaltungsorten?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "author of less than two articles",
            "zh": "少于 两篇 文章 的 作者",
            "de": "Autor von weniger als zwei Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the article with the fewest citations",
            "zh": "找到 引用 最少 的 文章",
            "de": "Finde den Artikel mit den wenigsten Zitationen"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "article cited by article written by Efron",
            "zh": "找到 被 Efron 写 的 文章 引用 的 文章",
            "de": "Artikel, der in einem von Efron verfassten Text zitiert wird"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "award winning article that cites multivariate data analysis",
            "zh": "引用 了 多元 数据分析 的 获奖 文章",
            "de": "preisgekrönter Artikel, der multivariate Datenanalyse zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string min ) ( string venue ) ) )"
        },
        "question": {
            "en": "articles that has the minimum number of venues stated",
            "zh": "出版 渠道 最少 的 文章",
            "de": "Artikel mit der angegebenen Mindestanzahl an Veranstaltungsorten"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )"
        },
        "question": {
            "en": "authors of articles published in annals of statistics",
            "zh": "在 统计 年鉴 中 发表 的 文章 的 作者",
            "de": "Autoren von Artikeln, die in den Annalen der Statistik veröffentlicht wurden."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which article cites the most articles",
            "zh": "哪 篇文章 引用 的 文章 最 多",
            "de": "Welcher Artikel zitiert die meisten Artikel?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "author who have written two or more articles",
            "zh": "写过 两篇 或 两篇 以上 文章 的 作者",
            "de": "Autor, der mehr als zwei Artikel geschrieben hat"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string min ) ( string author ) ) )"
        },
        "question": {
            "en": "articles with the least number of authors",
            "zh": "作者 数量 最少 的 文章",
            "de": "Artikel mit der geringsten Anzahl an Autoren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find an article with two or more authors",
            "zh": "寻找 有 两个 或 以上 作者 的 文章",
            "de": "Finde einen Artikel mit zwei oder mehr Autoren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "articles that cities articles by Efron",
            "zh": "引用 了 Efron 文章 的 文章",
            "de": "Artikel, die Artikel von Efron zitieren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "what articles are written by Efron",
            "zh": "哪些 文章 是 艾佛龙 写 的",
            "de": "Welche Artikel wurden von Efron geschrieben?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "name a publication containing an article about multivariate data analysis",
            "zh": "给 我 举例 一个 包含 了 关于 多样 数据分析 的 文章 的 出版物",
            "de": "Nenne eine Publikation, die einen Artikel über multivariate Datenanalyse enthält"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "who is the author of multivariate data analysis article",
            "zh": "谁 是 多样 数据分析 文章 的 作者 ？",
            "de": "Wer ist der Autor des Artikels zur multivariaten Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "publication that two articles are published in",
            "zh": "发表 两篇 文章 的 出版物",
            "de": "Publikation, die in zwei Artikeln veröffentlicht wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what is a venue that is not multivariate data analysis related",
            "zh": "什么 是 不 与 多样 数据分析 相关 的 媒体 ？",
            "de": "Was ist ein Ort der nicht in Bezug zur multivariaten Datenanalyse steht?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "what articles publication date is in 2004 and cites multivariate data analysis",
            "zh": "什么 文章 的 出版日期 是 在 2004 且 引用 多样 数据分析 ？",
            "de": "Welche Artikel haben das Veröffentlichungsdatum 2004 und zitieren die multivariate Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )"
        },
        "question": {
            "en": "articles published after multivariate data analysis",
            "zh": "在 多样 数据分析 之后 发表 的 文章",
            "de": "Artikel, die nach mehrdimensionaler Datenanalyse veröffentlicht wurden"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "article cited by multivariate data analysis and published in 2004",
            "zh": "在 2004 年 发布 并 被 多样 数据分析 引用 的 文章",
            "de": "Artikel zitiert durch multivariate Datenanalyse und veröffentlicht 2004"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ) )"
        },
        "question": {
            "en": "article that cites article whose author is Efron",
            "zh": "引用 了 埃夫隆 文章 的 （ 那篇 ） 文章",
            "de": "Artikel, der Artikel zitiert, dessen Autor Efron ist"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "Efron articles citing multivariate data analysis",
            "zh": "Efron 的 引用 多 变量 数据分析 的 文章",
            "de": "Artikel von Efron, die die multivariate Datenanalyse zitieren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( call SW.concat en.venue.annals_of_statistics en.venue.computational_linguistics ) ) )"
        },
        "question": {
            "en": "find an article in either annals of statistics or computational linguistics",
            "zh": "找到 一篇 统计学 季刊 或者 计算 语言 杂志 中 的 文章",
            "de": "Finden Sie einen Artikel in Annalen der Statistik oder Computerlinguistik"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ) )"
        },
        "question": {
            "en": "venue that won an award based on the article",
            "zh": "基于 这 篇文章 的 获奖 的 地方",
            "de": "Veranstaltungsort, der aufgrund des Artikels ausgezeichnet wurde"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what article has at least two authors",
            "zh": "什么 文章 至少 有 两位 作者",
            "de": "Welcher Artikel hat mindestens zwei Autoren?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.venue.annals_of_statistics en.venue.computational_linguistics ) )"
        },
        "question": {
            "en": "list articles on annals of statistics or computational linguistics",
            "zh": "列出 关于 统计 或 计算 语言学 史 的 文章",
            "de": "Liste Artikel zu Annalen der Statistik oder Computerlinguistik auf"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "article that has maximum two venues",
            "zh": "有 最 多 两个 举行 场所 的 文章",
            "de": "Artikel, der maximal zwei Veranstaltungsorte hat"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what venue is of more than two articles",
            "zh": "哪个 会场 有 两篇 以上 的 文章 ？",
            "de": "Welcher Veröffentlichungsort hat mehr als zwei Artikel?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "venue of article that cites multivariate data analysis",
            "zh": "引用 多 变量 数据分析 文章 的 场所",
            "de": "Veranstaltungsort des Artikels, der multivariate Datenanalyse zitiert"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which articles cite two articles",
            "zh": "哪 篇文章 引用 了 两篇 文章",
            "de": "Welche Artikel zitieren zwei Artikel"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "articles in the annals of statistics that cite multivariate data analysis",
            "zh": "引用 多 变量 数据分析 的 统计 年鉴 中 的 文章",
            "de": "Artikel in den Annalen der Statistik die multivariate Datenanalyse zitieren."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "publication that has included the most articles",
            "zh": "包含 最 多 文章 的 出版物",
            "de": "Veröffentlichung mit den meisten Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what article has two authors",
            "zh": "什么 文章 有 两位 作者",
            "de": "Welcher Artikel hat zwei Autoren?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )"
        },
        "question": {
            "en": "what Efron article is cited in multivariate data analysis",
            "zh": "哪篇 艾佛龙 的 文章 被 多元 数据分析 引用 了",
            "de": "Welcher Artikel von Efron ist in der multivariaten Datenanalyse zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the venue of at least two articles",
            "zh": "哪个 出版 地有 至少 两篇 文章",
            "de": "Welches ist der Veröffentlichungsort von mindestens zwei Artikeln."
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what author has written more than two articles",
            "zh": "什么 作者 已写 了 多于 两篇 文章 ？",
            "de": "Welche Autoren/Autorinnen haben mehr als zwei Artikel geschrieben?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "article cited bymultivariate data analysis",
            "zh": "多 变量 数据分析 引用 的 文章",
            "de": "Welcher Artikel zitiert \"bymultivariate\" Datenanalyse?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "articles by Efron cited in multivariate data analysis",
            "zh": "被 多元 数据分析 引用 的 艾佛龙 的 文章",
            "de": "Welche Artikel von Efron werden in \"multivariate data analysis\" zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "article cited by less than two articles",
            "zh": "文章 引用 不到 两篇 文章",
            "de": "Welcher Artikel wird von weniger als zwei anderen Artikeln zitiert?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "articles that city multivariate data analysis articles",
            "zh": "引用 多元 数据分析 的 文章",
            "de": "Welche Artikel \"city\" Artikel mit \"multivariate data analysis\"?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )"
        },
        "question": {
            "en": "articles on multivariate data analysis that won an award",
            "zh": "关于 多元 数据分析 的 获奖 文章",
            "de": "preisgekrönte Artikel zur multivariaten Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "what annals of statistics article cites multivariate data analysis",
            "zh": "哪篇 统计 年刊 的 文章 引用 了 多元 数据分析",
            "de": "Welche Statistikannalen zitieren multivariable Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "what venue contains the article about city multivariate data analysis",
            "zh": "什么 地方 包含 关于 城市 多元 数据分析 的 文章",
            "de": "Welche \"venues\" enthalten den Artikel über \"city\" \"multivariate data analysis\""
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "articles published after 2004 or after 2010",
            "zh": "2004 年 后 或 2010 年 后 发表 的 文章",
            "de": "Welche Artikel wurden nach 2004 oder 2010 veröffentlicht?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "writer of fewer than two articles",
            "zh": "少于 两篇 文章 的 作者",
            "de": "Autor von weniger als zwei Artikeln"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what article was in two venues",
            "zh": "什么 文章 在 两个 场地",
            "de": "Welcher Artikel war an zwei Orten"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string venue ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "articles about more than two venues",
            "zh": "关于 两个 以上 场地 的 文章",
            "de": "Artikel über mehr als zwei Veranstaltungsorte"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the number of the article",
            "zh": "文章 的 号码 是 多少",
            "de": "Wie lautet die Nummer des Artikels?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )"
        },
        "question": {
            "en": "writer of multivariate data analysis",
            "zh": "多元 数据分析 的 作者",
            "de": "Autor multivariater Datenanalyse"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string !type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is a venue of two articles",
            "zh": "什么 是 两篇 文章 的 场地",
            "de": "Was ist der Ort von zwei Artikeln?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "who is the author of an article cited by multivariate data analysis",
            "zh": "谁 是 多 变量 数据分析 引用 的 文章 的 作者",
            "de": "Wer hat den Artikel geschrieben, der durch die multivariate Datenanalyse zitiert wurde?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string won_award ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "which article won an award and has its venue as annals of statistics",
            "zh": "哪 篇文章 获 了 奖 并且 发布 在 了 统计 年刊 上",
            "de": "Welcher Artikel mit demselben Veröffentlichungsort wie Annalen der Statistik wurde ausgezeichnet?"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )"
        },
        "question": {
            "en": "name an article about multivariate data analysis from the annals of statistics",
            "zh": "说出 一篇 关于 统计 年刊 中 多元 数据分析 的 文章",
            "de": "Nennen Sie einen Artikel über multivariate Datenanalyse aus den Annalen der Statistik"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string author ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "articles with two or more authors",
            "zh": "有 两个 或 更 多 作者 的 文章",
            "de": "Artikel mit zwei oder mehr Autoren"
        }
    },
    {
        "domain": "publications",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string !type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )"
        },
        "question": {
            "en": "articles that cite multivariate data analysis",
            "zh": "引用 多 变量 数据分析 的 文章",
            "de": "Artikel, die multivariate Datenanalyse zitieren"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )"
        },
        "question": {
            "en": "is there any block with a height of either 3 or 6 inches",
            "zh": "是否 有 任何 高度 为 3 或 6 英寸 的 块",
            "de": "Gibt es einen Block mit einer Höhe von entweder 3 oder 6 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me a pyramid block that is 3 inches tall",
            "zh": "請給 我 找 一塊 金字塔 型 的 磚頭 是 三 吋 高",
            "de": "Finde einen Pyramidenblock, der drei Zoll hoch ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "block whose height is 3 inches and whose shape is a pyramid",
            "zh": "高为 三 英尺 形状 为 金字塔 的 区块",
            "de": "Block, dessen Höhe 3 Zoll ist und dessen Form eine Pyramide ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "block above a pyramid shaped block",
            "zh": "在 一个 金字塔 形状 区块 上方 的 区块",
            "de": "Block über einem pyramidenförmigen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "get a 3inch block above block 1",
            "zh": "取得 一个 在 块 1 上方 的 3 英寸 的 块",
            "de": "Bewege einen drei-Zoll-Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ) )"
        },
        "question": {
            "en": "below special block",
            "zh": "在 特殊 区块 之下",
            "de": "unterhalb des Spezialblocks"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "block whose height is at most width of block 1",
            "zh": "高度 至多是 区块 一 的 宽度 的 区块",
            "de": "Block, dessen Höhe höchstens der Breite von Block 1 entspricht"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )"
        },
        "question": {
            "en": "block whose height is length of block 1",
            "zh": "高度 为块 1 长度 的 块",
            "de": "Block, dessen Höhe die Länge von Block 1 ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block whose width is 3 inches and that is below block 1",
            "zh": "宽度 为 3 英寸 并且 在 块 1 下面 的 块",
            "de": "Block, dessen Breite 3 Zoll beträgt und der unterhalb von Block 1 liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) )"
        },
        "question": {
            "en": "a special block",
            "zh": "一个 特殊 的 块",
            "de": "ein Spezialblock"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "locate the block with a height that equals more than the width of block 1",
            "zh": "找出 高度 大于 等于 块 1 宽度 的 块",
            "de": "Suchen Sie den Block mit einer Höhe, die größer als die Breite von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me the block that is left of the block that block 1 is right of",
            "zh": "帮 我 找到 块 1 在 其 右边 的 块 的 左边 的 块 。",
            "de": "Finde den Block der links von dem Block der sich rechts von dem ersten Block befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "pyramid block to left of block 1",
            "zh": "在 块 1 左边 的 四 棱锥 块",
            "de": "Pyramidenblock links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "what block is not as long as block 1 is tall",
            "zh": "哪个 块 的 长度 比块 1 的 高度 小 的 ？",
            "de": "welcher Block ist nicht so lang wie Block 1 hoch ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "identify a block with a width of 3 inches",
            "zh": "找出 宽度 为 3 英寸 的 块",
            "de": "Finden Sie einen Block mit einer Breite von 5,08cm."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find a block between block 1 and a block below block 1",
            "zh": "找出 块 1 及 一个 块 一 下面 的 块 之间 的 一个 块",
            "de": "Suchen Sie einen Block zwischen Block 1 und einem Block unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block is not above block 1",
            "zh": "哪个 块 不是 在 块 1 上方 的 ？",
            "de": "Welcher Block ist nicht oberhalb von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "find me a block as long or longer then block 1 is wide",
            "zh": "帮 我 找到 一个 长度 比 跟 块 1 宽度 一样 或 更长 的 块",
            "de": "finde mich einen Block so lange oder länger als Block 1 breit ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "what block is below the block that block 1 is to the right of",
            "zh": "哪个 块 是 在 块 1 在 其 右方 的 块 的 下方 的 ？",
            "de": "welcher Block ist unter dem Block der rechts von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block on the right",
            "zh": "选择 右边 的 块",
            "de": "Wähle den Block rechts aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me the block that is both above and to the right of block 1",
            "zh": "帮 我 找到 一个 在 块 1 右上方 的 块",
            "de": "Finden Sie den Block, der sowohl oberhalb als auch rechts von Block 1 ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all the 3 inch wide and tall blocks",
            "zh": "帮 我 找到 所有 3 英寸 宽 3 英寸 高 的 块",
            "de": "Finde alle Blöcke, die drei Zoll breit und drei Zoll hoch sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "choose a block that is to the left of block 1 and 2",
            "zh": "选择 在 块 1 和 2 左边 的 块",
            "de": "Wählen Sie einen Block links von Block 1 und 2 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "special block left of block 1",
            "zh": "在 块 1 左边 的 特殊 块",
            "de": "Sonderblock links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "find me all blocks at most as wide at block 1 is tall",
            "zh": "帮 我 找到 所有 宽度 跟块 1 高度 是 一样 的 块",
            "de": "Finde alle Blöcke, die höchstens so breit sind, wie Block eins hoch ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me all blocks left of 3 inch wide blocks",
            "zh": "帮 我 找到 所有 在 3 英寸 宽 的 块 的 左方 的 块",
            "de": "Finde alle Blöcke zur linken von drei Zoll breiten Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks left and above block 1",
            "zh": "帮 我 找到 所有 在 块 1 左上方 的 块",
            "de": "Finde alle blöcke links von und über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "find me all special blocks that block 1 is below",
            "zh": "帮 我 找到 所有 块 1 在 其 下方 的 特殊 块",
            "de": "Finde alle Spezialblöcke, die höher liegen als Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "block taller than the width of block 1",
            "zh": "高度 大于 方块 1 宽度 的 方块",
            "de": "Block hoeher als die Breite von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "3 inch long block below block",
            "zh": "方块 下面 的 三 英寸 长 方块",
            "de": "3 Zoll langer Block unter Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "is there a block to the right of more than two other blocks",
            "zh": "是否 在 两个 以上 的 其他 木块 右边 有 一个 木块",
            "de": "Gibt es ein Block rechts von mehr als 2 anderen Blocks?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me a block that is above the most blocks",
            "zh": "帮 我 找到 一个 在 大多数 木块 上面 的 木块",
            "de": "Finde einen Block, der sich über den meisten Blöcken befindet."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block that is not left of block 1",
            "zh": "一个 不 在 一号 木块 左边 的 木块",
            "de": "Block der nicht links von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "3 inches wide block below block 1",
            "zh": "在 方块 1 下面 的 三 英寸 长 的 方块",
            "de": "3 Zoll breiter Block unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks with 2 blocks to the left",
            "zh": "帮 我 找到 所有 左侧 有 两个 木块 的 木块",
            "de": "Finde alle Blöcke mit zwei Blöcken zur Linken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "choose a block that is right of block 1",
            "zh": "选择 一个一号 木块 右边 的 木块",
            "de": "Wählen Sie einen Block rechts von Block 1 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )"
        },
        "question": {
            "en": "find me all blocks with the same color as block 1",
            "zh": "帮 我 找到 所有 和 一号 木块 颜色 一样 的 木块",
            "de": "Finde alle Blöcke der gleichen farbe wie Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what brick has more than 2 bricks to its right",
            "zh": "哪个 砖 右侧 有 两个 以上 的 砖",
            "de": "Welcher Stein hat mehr als zwei Steine zu seiner rechten?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "find me all the bricks taller than the width of block 1",
            "zh": "找到 我 所有 比块 1 的 宽度 更 高 的 砖块",
            "de": "Finde alle Ziegel, die höher sind als die Breite von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "which block is to the right of block 1",
            "zh": "哪个 块 位于 块 1 的 右侧",
            "de": "Welcher Block ist rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "block whose height is at least the length of block 1",
            "zh": "高度 至少 等于 块 1 长度 的 块",
            "de": "Block, dessen Höhe mindestens der Länge von Block 1 entspricht"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ) )"
        },
        "question": {
            "en": "find a block with a special block to the left of it",
            "zh": "找到 一个 有 特别 块 在 其 左边 的 块",
            "de": "Finde einen Block mit einem Spezialblock zur Linken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "select the block that is equal or bigger than block 1",
            "zh": "选择 一个 大于 等于 块 1 的 块",
            "de": "Wählen Sie den Block aus, der gleich oder größer als Block 1 ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose a block that is above block 2",
            "zh": "选择 一个 在 块 2 上方 的 块",
            "de": "Wähle einen Block über Block 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "what block is above the block that block 1 is to the right of",
            "zh": "哪个 区块 是 在 有 区块 一在 其 右方 的 区块 的 上方 的",
            "de": "Welcher Block ist über den Block der rechts von Block 1 ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string ! = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all blocks not 3 inches wide",
            "zh": "找到 所有 不是 三 英寸 宽 的 块",
            "de": "Finde alle Blöcke, die nicht drei Zoll breit sind."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose a block below block 2",
            "zh": "选择 一个 在 块 2 下方 的 块",
            "de": "Wähle einen Block unter Block 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "which block is bigger than block 1",
            "zh": "哪个 块 是 大于 块 1 的 ？",
            "de": "Welcher Block ist größer als Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me all blocks above 3 inch wide blocks",
            "zh": "找到 3 英寸 宽 的 块 以上 的 所有 块",
            "de": "Finde alle Blöcke über drei Zoll breiten Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "which brick is no taller than brick 1 is long",
            "zh": "哪 块砖 的 高度 是 比块 1 的 长度 短 的 ？",
            "de": "Welcher Ziegel ist nicht höher als Ziegel 1 lang ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "block left of 3 inch block",
            "zh": "在 三 英寸 的 块 左边 的 块",
            "de": "Block links von 3-Zoll-Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "locate the block with a height that is equal to or greater than the height of block 1",
            "zh": "找到 高度 等于 或 大于 块 1 高度 的 块",
            "de": "Lokalisiere den Block mit einer Höhe die gleich oder größer ist als die Höhe von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string color ) ) )"
        },
        "question": {
            "en": "find me the most colorful block",
            "zh": "帮 我 找到 颜色 最多 的 块",
            "de": "Finde den buntesten Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select block that is below block 1 and block that is above block 1",
            "zh": "选择 块 1 下方 的 块 和 块 1 上方 的 块",
            "de": "Wähle einen Block unter und einen Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block is both above and below block one",
            "zh": "哪个 块 是 既 在 块 1 上方 又 在 块 1 下方 的 ？",
            "de": "Welcher Block ist sowohl über als auch unter Block Eins?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks 2 left of block 1",
            "zh": "找到 块 1 左边 的 所有 块 2",
            "de": "Finde alle Blocks 2 links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "block that is below block 1 and whose length is 3 inches",
            "zh": "在 方块 1 下面 的 有 3 英寸 宽 的 方块",
            "de": "Block, der unter Block 1 liegt und dessen Länge 3 Zoll beträgt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "select the brick right and above block 1",
            "zh": "选择 在 方块 1 右 上面 的 方块",
            "de": "Wähle den Ziegel rechts und über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks right and below block 1",
            "zh": "找 给 我 所有 在 方块 1 右 下面 的 方块",
            "de": "Finde alle Blöcke rechts und unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block that is to the right of block 1",
            "zh": "选择 块 1 右侧 的 块",
            "de": "Wähle den Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.shape.pyramid en.shape.cube ) )"
        },
        "question": {
            "en": "choose a pyramid or a cube",
            "zh": "选择 一个 四 棱锥 或 方块",
            "de": "Wähle eine Pyramide oder einen Würfel"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block that is below block 1 and that is below block 1",
            "zh": "在 方块 1 下面 和 方块 1 下面 的",
            "de": "Block, der unter Block 1 liegt, und der unter Block 1 liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block above 1 block and below 1 block",
            "zh": "在 块 1 以上 及 以下 的 块",
            "de": "Block über und unter einem Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "block that's less than block 2",
            "zh": "少于 方块 2 的 方块",
            "de": "Block, der weniger als Block 2 ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find a block that is above at least two other blocks",
            "zh": "找到 至少 在 另外 两个 块 上方 的 块",
            "de": "Finde einen Block der über mindestens zwei anderen Blocks ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what block is to the right of the most blocks",
            "zh": "在 右面 最 多 方块 的 是 哪个",
            "de": "Welcher Block ist rechts von den meisten Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "which pyramid shaped block is special",
            "zh": "哪个 金字塔 形状 的 块 是 特殊 的",
            "de": "Welcher pyramidenförmige Block ist etwas Besonderes?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block that is below at least two blocks",
            "zh": "在 至少 两个 块 以下 的 块",
            "de": "Block, der unter mindestens zwei Blöcken liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks that block 1 is below and right of",
            "zh": "找到 块 1 下方 和 右边 的 所有 块",
            "de": "Finde alle Blöcke, von denen Block 1 rechts und darunter liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block surrounding block 1",
            "zh": "环绕着 块 1 的 块",
            "de": "Block, der Block 1 umgibt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )"
        },
        "question": {
            "en": "select the longest block",
            "zh": "选择 最长 的 方块",
            "de": "wähle den längsten Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "what special block is at the right of block 1",
            "zh": "哪个 特殊 快 是 在 块 1 右边 的 ？",
            "de": "Welcher Sonderblock befindet sich rechts von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all 3 inch long blocks that block 1 is above",
            "zh": "找到 一个 三 英寸 长 的 块 并且 块 1 是 在 它 上方 的 。",
            "de": "Finde alle drei Zoll langen Blöcke über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "find the block to the left of the pyramid shaped block",
            "zh": "找到 金字塔 形状 块 左侧 的 块",
            "de": "Finde den Block links neben dem pyramidenförmigen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string shape ) ) )"
        },
        "question": {
            "en": "select the brick with the least number of shapes",
            "zh": "选择 有 最少 种 形状 的 砖",
            "de": "Wähle den Stein mit der geringsten Anzahl von Formen aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block at the right of block 1",
            "zh": "选择 块 1 右侧 的 块",
            "de": "Wählen Sie den Block rechts von Block 1 aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )"
        },
        "question": {
            "en": "which block is as wide as block 1 is high",
            "zh": "哪个 方块 的 宽 跟 方块 1 的 高 是 一样 的",
            "de": "Welcher Block ist genauso breit wie Block 1 hoch ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me the block that is to the left and above block 1",
            "zh": "为 我 找到 一个 在 木块 1 左上方 的 木块",
            "de": "Finde den Block links über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )"
        },
        "question": {
            "en": "find me a block with length equal to block 1s height",
            "zh": "帮 我 找到 一个 长度 等于 区块 一 高度 的 区块",
            "de": "Finde einen Block, dessen Länge gleich der Höhe von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks above special blocks",
            "zh": "找到 特殊 区块 上方 的 所有 区块",
            "de": "Finde alle Blöcke über Spezialblöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "3 inch wide block to the left of block 1",
            "zh": "在 方块 1 左边 那个 3 英尺 的 方块",
            "de": "3 Zoll breiter Block links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find a block with less than two shapes",
            "zh": "找到 一个 少于 两个 形状 的 块",
            "de": "Finde einen Block mit weniger als zwei Formen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "select the block that block 1 is above and to the left of",
            "zh": "选择 在 模块 一 右下方 的 模块",
            "de": "Wähle den Block, von dem aus Block eins sich oben links befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me a block to the left of at least two blocks",
            "zh": "找到 一个 右边 至少 有 2 个 方块 的 方块",
            "de": "Finde einen Block links von mindestens zwei Blocks"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "block left of special block 1",
            "zh": "在 特殊 方块 1 左边 的 方块",
            "de": "Block links von Spezialblock 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block is not to the right of block 1",
            "zh": "什么 块 不 在 块 1 的 右边",
            "de": "Welcher Block ist nicht rechts von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )"
        },
        "question": {
            "en": "find me all the 3 inch long special blocks",
            "zh": "找到 我 所有 的 3 英寸 长 的 特殊 块",
            "de": "Finde alle 3 Zoll langen spezialblocks."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the block that is below and to the left of block 1",
            "zh": "找到 在 方块 1 左下方 的 方块",
            "de": "Finde den Block der unter und links von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string color ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find a block with a maximum of two colors on it",
            "zh": "找到 一个 最多 有 两种 颜色 的 块",
            "de": "Finde einen Block mit maximal zwei Farben."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "what block is below block 1 and 3 inches long",
            "zh": "什么 块 在 块 1 下方 且 长为 3 英寸",
            "de": "Welcher Block ist unter Block 1 und 3 Zoll lang."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string color ) ) )"
        },
        "question": {
            "en": "which brick has the least number of colors",
            "zh": "哪 块砖 的 颜色 最少",
            "de": "Welcher Ziegel hat die wenigsten Farben?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find the block that is below to the right of block 1",
            "zh": "找到 位于 一号 木块 右下方 的 木块",
            "de": "Finde den Block der unten rechts von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block is block 1 not to the right of",
            "zh": "什么 模块 不 在 模块 一 的 左边",
            "de": "Von welchem Block aus liegt Block eins nicht rechts?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "locate a block that is located to the right of the maximum number of blocks",
            "zh": "定位 一个 在 数量 最 多 木块 右边 的 木块",
            "de": "finde einen Block der rechts der maximalen Anzahl an Blocks ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string color ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "select the block that has greater than two colors",
            "zh": "选择 颜色 超过 两种 的 木块",
            "de": "wähle den Block der mehr als zwei Farben hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "what block is to the right of the pyramid shaped block",
            "zh": "什么 块 在 锥形 块 的 右边",
            "de": "Welcher Block befindet sich rechts neben dem pyramidenförmigen Block?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all special blocks that are to the right of block 1",
            "zh": "帮 我 找到 一号 木块 右边 全部 的 特殊 木块",
            "de": "Finde alle Sonderblöcke rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "what blocks length is less than or equal to block 1s height",
            "zh": "什么 木块 的 长度 小于 或者 等于 一号 木块 的 高度",
            "de": "Die Länge welchen Blockes ist kleiner oder gleich der Höhe von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block is to the left of the block that block 1 is to the right of",
            "zh": "哪个 块 的 右侧 是 块 1 的 左侧",
            "de": "Welcher Block ist links vom Block zu dessen rechten Block 1 ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks with more than 2 blocks below it",
            "zh": "帮 我 找到 位于 超过 两个 方块 上方 的 所有 方块",
            "de": "Finde alle Blöcke mit mehr als zwei Blöcken darunter"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "find a block below either block 1 or block 2",
            "zh": "找到 一个 上方 不是 块 1 就是 块 2 的 块",
            "de": "finde einen Block unter Block 1 oder Block 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "select a block with width equal or greater than block 1 is long",
            "zh": "选择 一个 宽度 等于 或者 大于 一号 木块 长度 的 木块",
            "de": "Welcher Block hat eine breite die gleich oder größer ist als Block 1 lang ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "block below block with pyramid shape",
            "zh": "在 金字塔 形状 木块 下面 的 木块",
            "de": "Block unter Block mit Pyramidenform"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "choose a block that is left of a 3 inch brick",
            "zh": "选择 一个 在 3 英寸 砖 左边 的 木块",
            "de": "Wähle einen Block der links von einem 3 Inch Stein ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block above and below block 1",
            "zh": "位于 块 1 上方 和 下方 的 障碍物",
            "de": "Block über und unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string color ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what block has two or more colors",
            "zh": "什么 木块 有 两种 或 以上 颜色",
            "de": "Welcher Block hat Zwei oder mehr Farben?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "3 inch block above block 1",
            "zh": "在 方块 1 上面 3 英寸 的 方块",
            "de": "3 Zoll Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "find all 3 inch pyramid blocks",
            "zh": "找到 所有 3 英寸 金字塔 形状 的 木块",
            "de": "Finde alle 3-Zoll-Pyramidenblöcke"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "which blocks are not above block 1",
            "zh": "哪些 方块 不 在 方块 1 的 上面 ？",
            "de": "Welcher Block sind nicht über Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "is there a block that is on top of more than two other blocks",
            "zh": "有没有 一个 区块 是 在 多于 两个 其他 区块 的 上方 的",
            "de": "Gibt es einen Block, der über mehr als zwei anderen Blöcken liegt?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "look right of block 1 and get the 3 inch tall block",
            "zh": "看 方块 1 的 右边 并 拿到 那个 3 英寸 高 的 方块",
            "de": "Schau rechts von Block 1 und nimm den drei Zoll hohen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "which brick is above the brick that is below brick 1",
            "zh": "哪 一个 砖块 是 在 砖块 1 下面 的 方块 上面 的 ？",
            "de": "Welcher Stein ist über dem Stein der unter Stein 1 ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "find me all blocks right of block 1 or 2",
            "zh": "给 我 找到 所有 在 方块 1 或者 2 右边 的 方块",
            "de": "Finde alle Blocks rechts von Block 1 oder 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )"
        },
        "question": {
            "en": "what is the shape of block 1",
            "zh": "方块 1 的 形状 是 什么 ？",
            "de": "Welche Form hat Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find block that is below and to the right of block 1",
            "zh": "找到 在 方块 一 下面 和 右边 的 方块",
            "de": "Finde den Block der unter und zur rechten von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "block with more than 2 shapes",
            "zh": "有 多于 两种 形状 的 方块",
            "de": "Block mit mehr als 2 Formen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string ! = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "select all blocks that don't have a width of 3 inches",
            "zh": "选择 所有 宽度 不是 3 英寸 的 方块",
            "de": "Wähle alle Blöcke aus, die nicht drei Zoll breit sind."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "which brick is to the left of brick 1 that is at least 3 inches long",
            "zh": "哪个 砖块 是 在 砖块 一 的 左边 并且 至少 三 英尺 长",
            "de": "Welcher Ziegel ist links von Ziegel 1 und ist mindestens 3 Zoll lang?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block that is right of the least number of blocks",
            "zh": "方块 是 在 最少 数量 的 方块 的 右边",
            "de": "Block der rechts von der niedrigsten Anzahl an Blocks ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all blocks 3 inches tall",
            "zh": "帮 我 找到 所有 3 英尺 高 的 方块",
            "de": "Finde alle drei Zoll hohen Blöcke"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what brick has two bricks to its left",
            "zh": "什么 砖 左边 有 两块 砖",
            "de": "Welcher Stein hat zwei Steine zu seiner linken?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "find a block as long or longer than block 1",
            "zh": "找到 跟 1 号 方块 一样 或者 更长 的 方块",
            "de": "Finde einen Block, der genauso lang wie oder länger als Block 1 ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks 1 is right and above",
            "zh": "找到 所有 1 号 方块 左下方 的 方块",
            "de": "Finde alle Blöcke von denen 1 rechts oben liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose the block to the right of block 2",
            "zh": "选择 块 2 右侧 的 块",
            "de": "wähle den Block rechts von Block 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )"
        },
        "question": {
            "en": "block whose length is 3 inches and that is special",
            "zh": "特殊 的 3 英尺 长 的 方块",
            "de": "Block, dessen Länge 3 Zoll beträgt und der speziell ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "block that has less than two shape",
            "zh": "具有 少于 两个 形状 的 块",
            "de": "Block, der weniger als zwei Formen hat."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )"
        },
        "question": {
            "en": "select all blocks with the same width as block 1",
            "zh": "选择 宽度 与 块 1 相同 的 所有 块",
            "de": "Wähle alle Blöcke an die die selber breite haben wie Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "pyramid shaped block left of block 1",
            "zh": "块 1 左侧 的 金字塔 形块",
            "de": "pyramidenförmiger Block links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all pyramid blocks above block 1",
            "zh": "找到 块 1 上方 的 所有 金字塔 块",
            "de": "Finde alle Pyramiden Blöcke über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "choose a block that is above block 1 or 2",
            "zh": "选择 块 1 或块 2 上方 的 块",
            "de": "Wähle einen Block, der über Block 1 oder 2 liegt."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string color ) ) )"
        },
        "question": {
            "en": "block that has the most number of color",
            "zh": "有 最 多 颜色 的 块",
            "de": "Block mit der größten Anzahl von Farben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "which brick is at least as long as brick 1 is tall",
            "zh": "哪 块砖 的 长度 至少 有 砖块 1 的 高度 那么 长 ？",
            "de": "Welcher Baustein ist mindestens so lang wie Baustein 1 hoch ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "block left of 3 inch block",
            "zh": "在 3 英寸 的 块 左边 的 块",
            "de": "Block links vom 3 Zoll Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string is_special ) ) )"
        },
        "question": {
            "en": "choose a block that is special",
            "zh": "选择 一个 特殊 的 块",
            "de": "Wähle einen Block, der speziell ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "what block is 2 blocks below block 1",
            "zh": "什么 块 是 块 1 下面 的 2 个块",
            "de": "Welcher Block ist 2 Blöcke unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "block left of block one and shaped like a pyramid",
            "zh": "在 区块 一 左边 金字塔 形状 的 区块",
            "de": "Block links von Block eins und wie eine Pyramide geformt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ) )"
        },
        "question": {
            "en": "find the block on the left side of the special block",
            "zh": "找到 特殊 块 左侧 的 块",
            "de": "Finde den Block auf der linken Seite des Spezialblocks"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block that more than two block is above",
            "zh": "上方 有 多于 两个 方块 的 方块",
            "de": "Block der mehr als Zwei Blöcke über sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.shape.pyramid en.shape.cube ) )"
        },
        "question": {
            "en": "find a block shaped like a pyramid or a cube",
            "zh": "找到 一个 形状 像 金字塔 或 立方体 的 块",
            "de": "Finde einen Block in Form einer Pyramide oder eines Würfels"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find a block located to the right of two other blocks",
            "zh": "找到 位于 另外 两个 块 右侧 的 块",
            "de": "Finde einen Block, der sich rechts von zwei anderen Blocks befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "what pyramid shaped block is at right of block 1",
            "zh": "什么 金字塔 形状 的 块 位于 块 1 的 右侧",
            "de": "Welcher pyramidenförmige Block befindet sich rechts von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "block below block 1 and 3 inches in height",
            "zh": "在 方块 1 下面 并且 3 英尺 高",
            "de": "Block unter Block 1 und 3 Inches hoch"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks that block 1 is right and left of",
            "zh": "找到 块 1 左右 的 所有 块",
            "de": "Finde alle Blöcke, von denen Block 1 rechts und links ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "pyramid above block 1",
            "zh": "块 1 上方 的 金字塔",
            "de": "Pyramide über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose a block that is under the most populous amount of blocks",
            "zh": "选择 一块 上 方块 数最多 的 块",
            "de": "Wähle einen Block, der sich unter der bevölkerungsreichsten Anzahl von Blöcken befindet."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "choose a block that is the same or below brick 1",
            "zh": "选择 一块 和 砖块 1 一样 或者 在 砖块 1 下面 的 块",
            "de": "Wähle einen Block, der der gleiche ist oder unterhalb Stein 1 liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )"
        },
        "question": {
            "en": "a special 3 inch high block",
            "zh": "一个 特殊 的 3 英寸 高 的 块",
            "de": "Ein spezieller 3 Zoll hoher Block."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "select the block that is above and right of block 1",
            "zh": "选择 一个 方块 1 号 右上方 的 方块",
            "de": "Wähle den Block, der oberhalb und rechts von Block 1 ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "pyramid left of block 1",
            "zh": "在 1 号 块状 左边 的 棱锥 体",
            "de": "Pyramide links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "3 inches long pyramid shaped block",
            "zh": "一个 3 英寸 长 的 棱锥 体型 的 块状",
            "de": "3 Zoll langer pyramidenförmiger Block."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "beneath block 1 is a block with a height of 3 inches find it",
            "zh": "在 块 1 下面 是 一个 高度 为 3 英寸 的 块 找到 它",
            "de": "Unterhalb von Block 1 ist ein Block mit einer Höhe von drei Zoll, finde ihn."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block  has a height of 3 inches and that block 1 is above",
            "zh": "哪个 块状 物高 3 英寸 并且 1 号 块状 物在 它 上面",
            "de": "Welcher Block hat eine Höhe von 3 Zoll und hat Block 1 über sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "which brick is to the right of the brick that is 3 inches high",
            "zh": "哪 块砖 在 那个 三 英寸 高 的 砖 的 右侧 ？",
            "de": "Welcher Baustein ist rechts des Bausteins, der 3 Zoll hoch ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block whose shape is a pyramid and that is below block 1",
            "zh": "棱锥 体型 的 在 1 号 块状 物 下面 的 那个 块状 物",
            "de": "Block, dessen Form eine Pyramide ist und der unter Block 1 liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "find a block with width less than or equal to block 1",
            "zh": "找到 宽度 小于 或 等于 块 1 的 块",
            "de": "Finde einen Block mit einer Breite kleiner oder gleich Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks left of which block 1 is below",
            "zh": "找到 所有 在 方块 1 下面 那个 方块 左边 的 方块",
            "de": "Finde alle Blöcke links von denen, unter denen Block 1 liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks right of block 1 which block 1 is left of",
            "zh": "找到 所有 方块 1 号 右边 的 方块",
            "de": "finde mir alle Blöcke rechts von Block 1 wovon Block 1 links ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "which brick is no longer than brick 1 is high",
            "zh": "哪块 砖头 没有 1 号 砖头 长 但 高",
            "de": "Welcher Baustein ist nicht länger als Baustein 1 hoch ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose a block under block 2",
            "zh": "选择 在 方块 2 下面 的 方块",
            "de": "wähle einen Block unter Block 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks taller than the length of block 1",
            "zh": "找 给 我 高于 方块 1 长度 的 方块",
            "de": "finde alle Blöcke höher als die Länge von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the block buried under the smallest number of other blocks",
            "zh": "找到 埋 在 最小 数量 的 其他 块 下 的 块",
            "de": "Finde den Block, der unter der kleinsten Anzahl von anderen Blöcken begraben ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select a block that is not below block 1",
            "zh": "选择 不 低于 块 1 的 块",
            "de": "Wähle einen Block aus, der sich nicht unterhalb von Block 1 befindet."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "what block is to the left of the pyramid shaped block",
            "zh": "哪个 方块 是 在 锥形 方块 的 左面",
            "de": "Welcher Block befindet sich links vom pyramidenförmigen Block?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "block less wider than the length of block 1",
            "zh": "短于 方块 1 长度 的 方块",
            "de": "Block der weniger breit ist als Block 1 lang ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "3 inch block above block 1",
            "zh": "在 方块 1 上面 高 3 英寸 的 方块",
            "de": "3 Zoll Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "which brick has a width smaller than the width of brick 1",
            "zh": "哪 块砖 的 宽度 小于 砖 1 的 宽度",
            "de": "Welcher Baustein hat eine geringere Breite als die Breite von Baustein 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )"
        },
        "question": {
            "en": "find the block with maximum length of 6 inches",
            "zh": "找到 最大 长度 为 6 英寸 的 块",
            "de": "Finde den Block mit einer Maximallänge von 6 Zoll."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "choose the brick to the right of the brick above brick 1",
            "zh": "选择 在 方块 1 右 上面 的 方块",
            "de": "wähle den Stein rechts neben dem Stein über dem Stein 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )"
        },
        "question": {
            "en": "block either 3 inches or 6 inches long",
            "zh": "3 英寸 或 6 英寸 长 的 块",
            "de": "Welcher Block ist entweder 3 oder 6 Zoll lang?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "what block is 3 inches wide by 3 inches tall",
            "zh": "什么 块 是 3 英寸 宽 ， 3 英寸 高",
            "de": "Welcher Block ist 3 mal 3 Zoll groß"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "get me the blocks to the left of the block above block 1",
            "zh": "给 我 那些 在 块 一 上方 的 块 的 左边 的 块",
            "de": "Bring mir die Blöcke links vom Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "block below blocks 1 and 2",
            "zh": "在 1 号 和 2 号 方块 下面 的 方块",
            "de": "Block unter den Blöcken 1 und 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "pyramid to left of block 1",
            "zh": "在 1 号 方块 左边 的 金字塔",
            "de": "Pyramide links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "what block is 3 inches long and has block 1 on its left",
            "zh": "哪个 块 是 三 英寸 长 并且 块 1 是 在 它 左边 的 ？",
            "de": "Welcher Block ist 3 Zoll lang und hat Block 1 auf seiner linken Seite"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the pyramid shaped brick below brick 1",
            "zh": "选择 在 区块 一 下面 金字塔 形状 的 砖块",
            "de": "Wähle den pyramidenförmigen Stein unter Stein 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "what block is 3 inches wide",
            "zh": "什么 块 是 3 英寸 宽",
            "de": "Welcher Block ist 3 Zoll breit?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "find a block with a height smaller than the height of block 1",
            "zh": "找到 一个 高度 小于 块 1 高度 的 块",
            "de": "Finde einen Block mit einer niedrigeren Höhe als die Höhe von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "select the block that is left of block 1",
            "zh": "选择 在 块 1 左边 的 块",
            "de": "Wähle den Block der links von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "3 inch tall block under first block",
            "zh": "在 第一个 方块 下面 3 英寸 高 的 方块",
            "de": "3 Zoll großer Block unter dem ersten Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the block that is below and to the right of block 1",
            "zh": "找到 块 1 下方 和 右侧 的 块",
            "de": "Finde den Block der unter und rechts von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )"
        },
        "question": {
            "en": "find a block with the same length as block 1",
            "zh": "找到 与 块 1 长度 相同 的 块",
            "de": "Finde einen Block mit der gleichen Länge wie Block 1."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "block whose width is at least the width of block 1",
            "zh": "至少 跟 1 号 方块 宽度 一样 的 方块",
            "de": "Block, dessen Breite mindestens der Breite von Block 1 entspricht"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "blocks that have block 1 or block 2 at left",
            "zh": "左边 有块 1 或块 2 的 块",
            "de": "Blöcke die Block 1 oder Block 2 zur Linken haben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks that has less than 2 blocks to the left",
            "zh": "给 我 找到 所有 那些 有 少于 两个 板块 在 它们 左侧 的 板块 吗 ？",
            "de": "finde mir alle Blöcke die weniger als 2 Blöcke zur Linken haben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block that at least two block is below",
            "zh": "至少 在 两块 下面 的 方块",
            "de": "Block, der mindestens zwei Blöcke unter sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "left of block 1",
            "zh": "第 1 块 左边",
            "de": "Links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find a block that is below block 1",
            "zh": "找到 块 1 下面 的 块",
            "de": "Finde einen Block der unter Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.shape.pyramid en.shape.cube ) )"
        },
        "question": {
            "en": "select a pyramid or cube shaped block",
            "zh": "选择 金字塔 或 立方体 形状 的 块",
            "de": "Wählen Sie eine Pyramide oder einen würfelförmigen Block aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all special blocks with length less than 3 inches",
            "zh": "帮 我 找到 所有 长度 少于 3 英寸 的 特殊 木块",
            "de": "Finde alle Spezialblöcke mit einer Länge von weniger als 3 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which block has at least two blocks above it",
            "zh": "哪个 区块 有 至少 两个 区块 在 其 上方",
            "de": "Welcher Block hat mindestens Zwei Blöcke über sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "block that is below block 1 and that is special",
            "zh": "在 一号 木块 下面 木块 是 特殊 的",
            "de": "Block der unter Block 1 und speziell ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "find me the block whose shape is a pyramid",
            "zh": "帮 我 找到 形状 是 金字塔 的 木块",
            "de": "Finde den Block dessen Form eine Pyramide ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "choose a smallest block than block 1",
            "zh": "选择 比 区块 一 最小 的 区块",
            "de": "Wähle einen kleineren Block als Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )"
        },
        "question": {
            "en": "select the tallest block",
            "zh": "选择 最高 的 木块",
            "de": "Wähle den größten Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me a block with at most two blocks below it",
            "zh": "帮 我 找到 一个 有 最 多 两个 区块 在 其 下方 的 区块",
            "de": "Suche mir einen Block mit höchstens zwei Blöcken darunter"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me the special block to the right of block 1",
            "zh": "帮 我 找到 在 区块 一 右边 的 特殊 区块",
            "de": "Finde den Spezialblock zur rechten von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "which brick is no wider than brick 1 is tall",
            "zh": "哪一块 砖 的 宽度 小于 1 号 砖 的 高度",
            "de": "Welcher Stein ist nicht breiter als Block 1 groß ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "which special brick is to the left of brick 1",
            "zh": "哪一块 特殊 砖 在 一号 砖 的 左边",
            "de": "Welcher Spezialstein ist links von Stein 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find the block on the right side of the block on the right side of block 1",
            "zh": "找到 块 1 右侧 块 右侧 的 块",
            "de": "Finde den Block auf der rechten Seite von dem Block auf der rechten Seite von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block that has a height of 3 inches and is above block 1",
            "zh": "选择 在 模块 1 上方 高度 为 3 英寸 的 模块 。",
            "de": "Wählen Sie den Block aus, der 3 Zoll hoch ist und über Block 1 liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "which brick is at least as long as brick 1",
            "zh": "哪一块 砖 至少 和 1 号 砖 一样 长 ？",
            "de": "Welcher Stein ist mindestens so lang wie Stein 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block that is left of block which is below block 1",
            "zh": "在 模块 1 下方 的 模块 左边 的 模块 。",
            "de": "Block, der sich links vom Block befindet, der sich unter Block 1 befindet."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "left of 3 inch block",
            "zh": "3 英寸 模块 的 左边 。",
            "de": "links vom 3 Zoll Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which block is furthest to the right",
            "zh": "哪一块 模块 在 最 右边 ？",
            "de": "Welcher Block liegt am weitesten rechts?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "what 3inch wide brick is pyramid shaped",
            "zh": "哪一块 3 英寸 宽 的 砖 是 金字塔 形 ？",
            "de": "welcher 3 Zoll breite Ziegel ist pyramidenförmig?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose a block that is no higher than 2 blocks",
            "zh": "选择 一个 高度 不 高于 两块 的 块",
            "de": "Wählen Sie einen Block, der nicht höher als 2 Blöcke ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find a special block above block 1",
            "zh": "在 块 1 上方 找到 一个 特殊 块",
            "de": "Finde einen speziellen Block über Block 1."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )"
        },
        "question": {
            "en": "what is the color of block 1",
            "zh": "块 1 的 颜色 是 什么",
            "de": "Was ist die Farbe von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )"
        },
        "question": {
            "en": "what is the length of brick 1",
            "zh": "砖 1 的 长度 多少",
            "de": "Was ist die Länge von Ziegel 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "find me all the 3 inch tall pyramid blocks",
            "zh": "帮 我 找到 所有 3 英寸 高 的 金字塔 木块",
            "de": "Finde alle 3 Zoll großen Pyramidenblöcke."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "what pyramid shaped blocks are below block 1",
            "zh": "什么 金字塔 形状 的 木块 在 一号 木块 下面",
            "de": "Welche pyramidenförmigen Blöcke befinden sich unter Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all 3 inch long blocks above block 1",
            "zh": "帮 我 找到 所有 在 一号 木块 上面 3 英寸 长 的 木块",
            "de": "Finde alle 3 Zoll langen Blöcke über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks above 2 blocks",
            "zh": "帮 我 找到 所有 在 两块 木块 上面 的 木块",
            "de": "Finde mir alle Blöcke über 2 Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find the block with a height and length of 3 inches",
            "zh": "找到 高度 和 长度 为 3 英寸 的 块",
            "de": "Finden Sie den Block mit einer Höhe und Länge von 3 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ) ) )"
        },
        "question": {
            "en": "what is the average width of a block",
            "zh": "块 的 平均 宽度 是 多少 ？",
            "de": "Was ist die durchschnittliche Breite eines Blocks"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "find a special pyramid shaped block",
            "zh": "找到 一个 特殊 的 金字塔 形块",
            "de": "Finde einen speziellen pyramidenförmigen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "block right of 3 inches long block 1",
            "zh": "阻挡 在 3 寸长 的 一号 木块 右边",
            "de": "Der Block rechts vom 3 Zoll langen Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what block has the least blocks to the left of it",
            "zh": "哪个 木块 左边 的 木块 最少",
            "de": "Welcher Block hat die wenigsten Blöcke links neben sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "is there a block under one or two blocks at most",
            "zh": "有没有 一个 块 是 最 多 在 1 个 或 两个 块 之下 的 ？",
            "de": "Gibt es einen Block unter höchstens ein oder zwei Blöcken?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "above block to right of block 1",
            "zh": "在 块 1 右方 的 块 的 上方 的 块",
            "de": "Über dem Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "block whose width is 3 inches and whose length is 3 inches",
            "zh": "长度 是 3 英寸 和 宽度 是 3 英寸 的 块",
            "de": "Block der 3 Inch breit und 3 Inch lang ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "right of and above block 1",
            "zh": "块 1 的 右上方",
            "de": "rechts von und über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block that is 3 inches long and to the right of block 1",
            "zh": "选择 在 块 1 右边 的 3 英寸 长 的 块",
            "de": "Wähle den Block, der 3 Zoll lang und rechts von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "block that is below block whose shape is a pyramid",
            "zh": "在 金字塔 形状 区块 下面 的 区块",
            "de": "Block, der sich unter dem Block befindet, dessen Form eine Pyramide ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all 3 inch high and 3 inch wide blocks",
            "zh": "帮 我 找到 所有 3 英寸 高 的 和 3 英寸 宽 的 块",
            "de": "Finde alle 3 Zoll hohen und 3 Zoll breiten Blöcke für mich."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "find me a block thicker than the length of block 1",
            "zh": "帮 我 找到 比块 1 长度 要厚 的 块",
            "de": "Finde einen Block, der dicker als die Länge von Block 1 ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "is there a block to the right of just one block only",
            "zh": "找到 一个 只有 一个 块 在 其 右方 的 块",
            "de": "Gibt es einen Block rechts von nur einem Block?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block that not is left of block 1",
            "zh": "不 在 块 1 左边 的 块",
            "de": "Block, der nicht links von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find the block to the left of the block that is 3 inches in diameter",
            "zh": "找到 直径 是 3 英寸 的 块 左边 的 块",
            "de": "Finde den Block links des Blockes mit einem Durchmesser von 3 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find the block that is 3 inches wide",
            "zh": "找到 3 英寸 宽 的 那个 块",
            "de": "Finde den 3 Zoll breiten Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )"
        },
        "question": {
            "en": "what blocks length is greater than 3 to 6 inches",
            "zh": "哪些 块 的 长度 为 3 到 6 英寸 ？",
            "de": "Die Länge welchen Blockes ist mehr als 3 bis 6 Zoll?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "select the block on the left corner",
            "zh": "选择 在 左边 角落 的 块",
            "de": "Wähle den Block in der linken Ecke"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me a block that is below any block that is 3 inches",
            "zh": "帮 我 找到 一个 位于 任意 3 英寸 区块 下方 的 区块",
            "de": "finde mir einen Block der unter jedem Block ist der 3 inch ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the block that is left of block 1",
            "zh": "找到 块 1 左侧 的 块",
            "de": "Finde den Block, der links von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )"
        },
        "question": {
            "en": "block below either block 1 or block 2",
            "zh": "在 块 1 或块 2 下方 的 块",
            "de": "Block unter entweder Block 1 oder Block 2"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose a block that is under the least number of bricks",
            "zh": "选择 一个 位于 最少 数量 砖块 之下 的 块",
            "de": "wähle einen Block der unter den wenigsten Blöcken ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "right of block one with pyramid shape",
            "zh": "在 金字塔 型 的 区块 一 的 右边",
            "de": "Rechts neben Block 1 mit der Pyramidenform"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "block a 3 inch long block",
            "zh": "挡住 一个 三 英寸 长 的 块",
            "de": "Blockieren Sie einen 3 Zoll langen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "which brick is below the brick below brick 1",
            "zh": "哪个 方块 是 在 1 号 方块 下面 方块 的 下面",
            "de": "Welcher Stein ist unter dem Stein unter Stein 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "what block is 3 inches wide and 3 inches tall",
            "zh": "哪个 方块 有 3 英尺 宽 和 3 英尺 高",
            "de": "Welcher Block ist 3 Zoll breit und 3 Zoll groß"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me all blocks with width less than 3 inches",
            "zh": "帮 我 找到 所有 小于 3 英尺 宽 的 方块",
            "de": "Finde alle Blöcke die weniger als 3 Zoll breit sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which brick is to the right of less than two bricks",
            "zh": "哪 块砖 在 不到 两块 砖 的 右边",
            "de": "Welcher Stein ist rechts von weniger als zwei Steinen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "which block of 3 inches height is above the block 1",
            "zh": "哪个 三 英寸 高 的 板块 是 在 第一 板块 上面 ？",
            "de": "Welcher Block mit einer Höhe von 3 Zoll ist oberhalb von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all 3 inch wide blocks left of block 1",
            "zh": "能 给 我 找到 所有 在 第一 板块 左侧 三 英寸 宽 的 版块 吗 ？",
            "de": "finde alle 3 Zoll breiten Blöcke Links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block that is above block 1",
            "zh": "选择 块 1 上方 的 块",
            "de": "Wähle den Block aus der über Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "find me the block that is to the left of block 1 and special",
            "zh": "找到 1 号 方块 左边 的 特殊 方块",
            "de": "Finde den speziellen Block links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) )"
        },
        "question": {
            "en": "find me all the special blocks",
            "zh": "能 给 我 找到 所有 特殊 的 板块 吗 ？",
            "de": "Finde alle Spezialblöcke für mich."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select block 1 and all of the blocks below it",
            "zh": "选择 块 1 及其 下面 的 所有 块",
            "de": "Wählen Sie Block 1 und alle darunter liegenden Blöcke aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )"
        },
        "question": {
            "en": "what is the width of block 1",
            "zh": "块 1 的 宽度 是 多少",
            "de": "Was ist die Breite von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "block that is special and whose shape is a pyramid",
            "zh": "一个 金字塔 形状 的 特殊 方块",
            "de": "Block, der speziell und dessen Form eine Pyramide ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ) )"
        },
        "question": {
            "en": "which block is above the special block",
            "zh": "哪个 块 在 特殊 块 之上",
            "de": "Welcher Block ist über dem speziellen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks that have 2 blocks to the right of it",
            "zh": "找到 所有 右边 有 2 个 方块 的 方块",
            "de": "finde alle Blöcke die 2 Blocks rechts von sich haben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "which brick has a length shorter than the height of brick 1",
            "zh": "哪 块砖 的 长度 比砖 1 的 高度 短",
            "de": "Welcher Ziegel hat eine Länge die kürzer ist als die Höhe von Ziegel 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me the block that has a height of 3 inches",
            "zh": "找到 高度 有 3 英尺 的 方块",
            "de": "finde einen Block der eine Höhe von 3 Zoll hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "block left of block 1 that's 3 inches high",
            "zh": "在 方块 1 的 左面 且 3 英寸 高 的 方块",
            "de": "Block links von Block 1, der 3 Zoll hoch ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "which brick is 3 inches wide and below brick 1",
            "zh": "哪 块砖 是 三 英寸 宽且 在 第一 块砖 的 下面 ？",
            "de": "Welcher Ziegel ist 3 Zoll breit und unter Ziegel 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks left of block 1",
            "zh": "给 我 找 所有 在 方块 1 左面 的 方块",
            "de": "finde alle Blocks Links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which block has at least two blocks below it",
            "zh": "哪个 方块 的 下面 至少 有 2 个 方块",
            "de": "welcher Block hat mindestens zwei Blöcke unter sich"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "3 inch block above block 1",
            "zh": "在 1 号 方块 上面 3 英尺 的 方块",
            "de": "3 Zoll Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks which block 1 is not above",
            "zh": "帮 我 找到 所有 块 1 不 在 他们 上方 的 块",
            "de": "finde alle Blocks die Block 1 nicht über sich haben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )"
        },
        "question": {
            "en": "find blocks that are at least 3 inches high or 6 inches high",
            "zh": "找到 高度 至少 是 3 英寸 或者 6 英寸 的 块",
            "de": "Finde Blöcke die mindestens 3 Zoll hoch oder 6 Zoll hoch sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "block not longer than block 1",
            "zh": "不比块 1 长 的 块",
            "de": "Block nicht länger als Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the 3 inches in length block that is on the left side  of block 1",
            "zh": "找到 块 1 左侧 3 英寸 长 的 块",
            "de": "Finde den Block mit einer Länge von 3 Zoll, der sich links von Block 1 befindet."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )"
        },
        "question": {
            "en": "color of block 1",
            "zh": "块 1 的 颜色",
            "de": "Farbe von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )"
        },
        "question": {
            "en": "which brick is the same width as brick 1",
            "zh": "哪个 块 跟 块 1 是 有 一样 宽度 的 ？",
            "de": "Welcher Stein hat die gleiche Breite wie Stein 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "what blocks have a width larger than the height of block 1",
            "zh": "哪些 块 的 宽度 大于 块 1 的 高度",
            "de": "Welche Blöcke haben eine Breite größer als die Höhe von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks that is as long as block 1 is tall",
            "zh": "帮 我 找到 所有 跟块 1 高度 一样 长 的 块",
            "de": "Finde alle Blöcke, die so lang sind, wie Block 1 hoch ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find the block below the block that is 3 inches in width",
            "zh": "找到 在 那个 3 英寸 宽 的 块 下面 的 块",
            "de": "Finde den Block unterhalb des Blockes, welcher 3 Zoll breit ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "which brick is not shaped like a pyramid",
            "zh": "哪个 砖块 的 形状 不是 金字塔 形 ？",
            "de": "Welcher Stein ist nicht wie eine Pyramide geformt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block below block which is below block 1",
            "zh": "在 方块 一 下面 的 方块 的 下面 的 方块",
            "de": "Block unter Block, der unter Block 1 liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks that block 1 is below",
            "zh": "帮 我 找出 所有 块 1 在 它们 下面 的 块",
            "de": "Finde für mich alle Blöcke unter denen sich Block 1 befindet."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the block above 2 blocks",
            "zh": "找到 在 两个 块 上面 的 块",
            "de": "Finde den Block über 2 Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what block is below two or more blocks",
            "zh": "哪个 板块 是 在 两个 或 三个 板块 之下 ？",
            "de": "Welcher Block ist unter zwei oder mehr Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find 3 inch block left of block 1",
            "zh": "找到 块 1 左边 三 英寸 的 块",
            "de": "Finde einen 3 Zoll Block links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "choose a block that is the same length as block 1",
            "zh": "找到 跟块 1 一样 长 的 块",
            "de": "Wählen Sie einen Block mit der gleichen Länge wie Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block is special and left of block 1",
            "zh": "哪个 块 是 特殊 的 而且 在 块 1 左边 的 ？",
            "de": "Welcher Block ist speziell und links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )"
        },
        "question": {
            "en": "which brick is longer than 3 or 6 inches",
            "zh": "哪 块砖 是 长于 3 或 6 英寸 的 ？",
            "de": "Welcher Stein ist länger als 3 oder 6 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "block that is special and whose height is 3 inches",
            "zh": "特殊 的 且 高度 为 3 英寸 的 块",
            "de": "Block, der speziell ist und dessen Höhe 3 Zoll beträgt."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "which brick is at least as wide as brick 1",
            "zh": "哪 块砖 至少 跟 砖 1 是 同样 宽 的 ？",
            "de": "Welcher Ziegel ist mindestens so breit wie Ziegel 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks 2 blocks to the right of block 1",
            "zh": "帮 我 找到 所有 在 块 1 右边 隔 两个 块 的 块",
            "de": "Finde alle Blöcke die Zwei Blöcke rechts von Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ) ) )"
        },
        "question": {
            "en": "average length of block",
            "zh": "块 的 平均 长度",
            "de": "durchschnittliche Länge des Blocks"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me the block that has a height of 3 inches and is above block 1",
            "zh": "找到 所有 高度 为 3 英寸 并且 在 块 1 上方 的 块",
            "de": "Finde den Block, welcher eine höhe von 3 zoll hat und über Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block is special and is to the left of block 1",
            "zh": "什么 块 是 在 块 1 的 左方 并且 是 特殊 的",
            "de": "Welcher Block ist speziell und links von Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "3 inch block above block 1",
            "zh": "在 块 1 上方 的 3 英寸 块",
            "de": "3 Zoll Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "find the block that block 1 is below and that has a shape of a pyramid",
            "zh": "找到 那个 四棱 锥形 并且 块 1 是 在 其 之下 的 块",
            "de": "Finden Sie den Block, unter dem sich Block 1 befindet und der die Form einer Pyramide hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "what block is above and to the right of block 1",
            "zh": "哪个 块 是 在 块 1 的 右上方 的 ？",
            "de": "Welcher Block ist über und rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "select the block that is block 1 is left of and that is special",
            "zh": "选择 那个 块 一 是 在 其 左边 的 并且 是 特殊 的 块",
            "de": "Wähle den Block von dem Block 1 links ist und der speziell ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "select the brick with the most blocks above it",
            "zh": "选择 上面 块 数最多 的 砖块",
            "de": "Wähle den Stein mit den meisten Blöcken darüber aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "block with two or more shapes",
            "zh": "具有 两种 或 更 多 形状 的 块",
            "de": "Block mit zwei oder mehr Formen"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "select the block that is right of the block that block 1 is to the left of",
            "zh": "选取 那个 有 方块 一在 左方 的 方块 ， 它 右方 的 方块",
            "de": "Wähle den Block der rechts von dem Block ist, welcher links von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find a block that is not below block 1",
            "zh": "找出 一个 不 在 方块 一下 方 的 方块",
            "de": "Finde einen Block der nicht unter Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "3 inch block below block 1",
            "zh": "方块 一下 方 的 三 英寸 方块",
            "de": "3 Zoll Block unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what blocks are above more than two blocks",
            "zh": "哪些 方块 是 在 多于 两个 方块 的 上方 的",
            "de": "Welche Blöcke sind über mehr als zwei Blöcken?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "find me all pyramid blocks left of block 1",
            "zh": "找到 块 1 左边 的 所有 金字塔 块",
            "de": "Finde alle Pyramidenblöcke links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "choose a block that is 3 inches tall",
            "zh": "选择 一个 三 英寸 高 的 方块",
            "de": "Wähle einen Block der 3 Zoll hoch ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string color ) ) )"
        },
        "question": {
            "en": "find the block with the greatest number of colors on it",
            "zh": "找出 上面 有 最 多 颜色 的 方块",
            "de": "Finde den Block mit der größten Anzahl an Farben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string width ) ) ) )"
        },
        "question": {
            "en": "which brick is the widest",
            "zh": "哪 一个 砖头 是 最 宽 的",
            "de": "Welcher Stein ist der breiteste?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find the 3 inch tall special block",
            "zh": "找出 那个 三 英寸 高 的 特殊 方块",
            "de": "Finden Sie den 3 Zoll hohen Spezialblock."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block has block 1 above and below",
            "zh": "哪个 方块 是 在 方块 1 的 上面 和 下面",
            "de": "Welcher Block hat Block 1 über und unter sich"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "block that is left of at most two block",
            "zh": "在 最 多 两个 块 左方 的 块",
            "de": "Block der links von maximal zwei Blöcken ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all 3 inch long blocks that block 1 is below",
            "zh": "帮 我 找到 块 1 在 其 下方 的 3 英寸 长 的 块",
            "de": "Finde alle 3 Zoll langen Blöcke die unter Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )"
        },
        "question": {
            "en": "choose a block that is special and shaped like a pyramid",
            "zh": "选 一个 特殊 的 且 造型 像 金字塔 的 板块 吧 ？",
            "de": "Wähle einen Block, der speziell ist und die Form einer Pyramide hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string width ) ) ) )"
        },
        "question": {
            "en": "find the widest block",
            "zh": "找到 最 宽 的 块",
            "de": "finde den breitesten Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ) ) )"
        },
        "question": {
            "en": "what is the average length of a block",
            "zh": "块 的 平均 长度 是 多少",
            "de": "Was ist die durchschnittliche Länge eines Blocks"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which brick has two bricks to its right",
            "zh": "哪 块砖 右边 有 两块 砖",
            "de": "Welcher Stein hat zwei Steine zu seiner Rechten?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string color ) ) )"
        },
        "question": {
            "en": "what block has the least number of colors",
            "zh": "什么 块 具有 最少 数量 的 颜色",
            "de": "Welcher Block hat die geringste Anzahl von Farben?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "block whose length is 3 inches and whose width is 3 inches",
            "zh": "长度 为 3 英寸 ， 宽度 为 3 英寸 的 块",
            "de": "Block, dessen Länge 3 Zoll und dessen Breite 3 Zoll beträgt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "below and to the right of block 1",
            "zh": "在 块 1 的 下方 和 右侧",
            "de": "unterhalb und rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "select all which is less than the width of block 1",
            "zh": "选择 所有 宽度 小于 块 1 的 块",
            "de": "wähle alle die weniger breit sind als Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find me all 3 inch long blocks right of block 1",
            "zh": "找到 我 在 块 1 右侧 的 所有 3 英寸 长 的 块",
            "de": "Finde alle 3 Zoll langen Blöcke rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )"
        },
        "question": {
            "en": "what block has below it a block in the shape of a pyramid",
            "zh": "哪个 方块 的 下面 有 一个 金字塔 形状 的 方块",
            "de": "welcher Block hat unter sich einen Block in Pyramidenform"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "find a pyramid shaped block",
            "zh": "找到 一个 金字塔 形状 的 块",
            "de": "Finde einen pyramidenförmigen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )"
        },
        "question": {
            "en": "find me all blocks as wide as block 1 is tall",
            "zh": "帮 我 找到 所有 宽度 跟块 1 的 高度 是 一样 的 块",
            "de": "finde für mich alle Blöcke die so breit sind with Block 1 groß ist."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string color ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what block has two color",
            "zh": "什么 块 有 两种 颜色",
            "de": "Welcher Block hat zwei Farben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all special blocks below block 1",
            "zh": "找到 块 1 下面 的 所有 特殊 块",
            "de": "Finde alle speziellen Blöcke unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string ! = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find a block that is not 3 inches wide",
            "zh": "找到 一个 不是 3 英寸 宽 的 块",
            "de": "Finde einen Block, der nicht 3 Zoll breit ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "select the block that is 3 inches and is left of block 1",
            "zh": "选择 3 英寸 的 块 ， 并 在 块 1 的 左侧",
            "de": "Wähle den block, der 3 Zoll und links von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks at block 1",
            "zh": "帮 我 找到 所有 在 块 1 的 块",
            "de": "Finde alle Blöcke bei Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find a 3inch long block located to the left of block 1",
            "zh": "找到 在 1 号 方块 左边 3 英尺 长 的 方块",
            "de": "Finde einen 3 Zoll langen Block der sich links von Block 1 befindet"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "which pyramid shaped brick is below brick 1",
            "zh": "哪个 金字塔 形状 的 区块 是 在 区块 一 以下",
            "de": "Welcher pyramidenförmige Stein befindet sich unter Stein 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the block whose width is 3 inches and is on the right side of block 1",
            "zh": "找到 在 1 号 方块 右边 3 英尺 宽 的 方块",
            "de": "Finde den Block welcher 3 Zoll breit ist und sich auf der rechten Seite von Block 1 befindet."
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me the block that is to the right of block 1",
            "zh": "找到 在 1 号 方块 右边 的 方块",
            "de": "Finde den Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose the block to the right of the other block",
            "zh": "选择 在 另外 一个 区块 右边 的 区块",
            "de": "wähle den Block Rechts vom anderen Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "block whose height is not more than block 1",
            "zh": "没有 1 号 方块 高 的 方块",
            "de": "Block, der nicht höher als Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me a block with block 1 above it",
            "zh": "找到 1 号 方块 下面 的 方块",
            "de": "finde einen Block der Block 1 über sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find a block with block 1 below it",
            "zh": "找到 1 号 方块 上面 的 方块",
            "de": "finde einen Block der Block 1 unter sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )"
        },
        "question": {
            "en": "which block is wider than 3 or 6 inches",
            "zh": "哪个 区块 是 宽 于 三 英尺 或者 六 英尺 的",
            "de": "Welcher Block ist breiter als 3 oder 6 Zoll"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ) )"
        },
        "question": {
            "en": "choose the block to the right of the unique block",
            "zh": "选择 在 特殊 区块 右边 的 区块",
            "de": "Wähle den Block der rechts vom einzigartigen Block ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me a block at least 3 inches long",
            "zh": "帮 我 找个 至少 3 英尺 的 木块",
            "de": "Finde einen Block der mindestens 3 Zoll lang ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "which 3 inch brick is below brick 1",
            "zh": "哪个 三 英寸 的 砖块 是 在 砖块 一 下面 的",
            "de": "Welcher 3 Zoll Ziegelstein ist unter Ziegelstein 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find a block that is to the left and below block 1",
            "zh": "找到 块 1 左侧 和 下方 的 块",
            "de": "Finde einen Block der links und unter Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( string color ) ) )"
        },
        "question": {
            "en": "which is the least colorful block",
            "zh": "哪一块 木块 是 最 不 多彩的",
            "de": "Welcher ist der am wenigsten farbenfrohe Block?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "which brick is longer than brick 1 is tall",
            "zh": "哪個 磚比磚 1 長 ， 高",
            "de": "Welcher Ziegel ist länger als Ziegel 1 hoch ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks at the same level as block 1",
            "zh": "帮 我 找到 所有 跟 1 号 木块 一个 高度 的 木块",
            "de": "Finde alle Blocks auf der gleichen Höhe wie Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the block that is to the right of and below block 1",
            "zh": "找到 块 1 右下方 的 块",
            "de": "Finde den Block der rechts von und unter Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "2 blocks below block 1",
            "zh": "两个 木块 在 1 号 木块 下面",
            "de": "2 Blöcke unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "select the brick with the least number of blocks to the right",
            "zh": "选择 右边 数量 最少 的 砖块",
            "de": "Wähle den Stein mit der niedrigsten Zahl an Blocks zur rechten"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks left of what block 1 is right of",
            "zh": "帮 我 找到 所有 区块 一在 其 右方 的 东西 的 左边 的 区块",
            "de": "Finde alle Blöcke links von etwas von dem Block 1 rechts ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me a block that is to the right of the block that is below block 1",
            "zh": "帮 我 找到 一个 在 那个 块 1 下方 的 块 的 右边 的 块",
            "de": "Finde einen Block der rechts vom Block ist der unter Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what block is above two other blocks",
            "zh": "哪个 方块 是 在 另外 两个 方块 上面",
            "de": "Welcher Block liegt über zwei anderen Blöcken?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )"
        },
        "question": {
            "en": "block whose height is less than width of block 1",
            "zh": "高度 比块 1 宽度 小 的 块",
            "de": "Block der weniger hoch als Block 1 breit ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "what brick is 3 inches long and 3 inches wide",
            "zh": "什么 砖 是 三 英寸 长 和 三 英寸 宽 ？",
            "de": "Welcher Ziegel ist 3 Zoll lang und 3 Zoll breit?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string is_special ) ) ) )"
        },
        "question": {
            "en": "find me all special blocks right of something",
            "zh": "帮 我 找到 所有 在 某些 东西 右边 的 特殊 块",
            "de": "Finde alle Spezialblocks rechts von etwas"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "block whose height is 3 inches",
            "zh": "高度 为 3 英寸 的 块",
            "de": "Block, dessen Höhe 3 Zoll ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "pyramid to right of block 1",
            "zh": "在 块 1 右方 的 四 棱锥",
            "de": "Pyramide rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what brick is above brick 1",
            "zh": "哪个 方块 在 方块 1 上面",
            "de": "Welcher Stein ist über Stein 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )"
        },
        "question": {
            "en": "which block has the largest length",
            "zh": "哪个 块 的 长度 最大",
            "de": "Welcher Block hat die größte Länge"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "select the block to the right of the block that is 3 inches long",
            "zh": "选择 3 英尺 长 方块 右边 的 方块",
            "de": "Wählen Sie den Block rechts neben dem 3 Zoll langen Block aus"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks that block 1 is left and above of",
            "zh": "帮 我 找到 所有 块 1 在 其 左上方 的 块",
            "de": "Finde alle Blöcke, die Block 1 links von sich und über sich haben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ) ) )"
        },
        "question": {
            "en": "what is the total length of the brick",
            "zh": "那 块砖 的 总长 是 多少 ？",
            "de": "Was ist die Gesamtlänge des Ziegels"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block that block 1 is above",
            "zh": "选择 区块 一在 其 上方 的 区块",
            "de": "Wähle den Block aus der über Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )"
        },
        "question": {
            "en": "block whose shape is shape of block 1",
            "zh": "跟块 1 同样 形状 的 块",
            "de": "Block dessen Form die Form von Block 1 hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )"
        },
        "question": {
            "en": "block whose length is smaller than 3 inches or 6 inches",
            "zh": "长度 小于 3 英寸 或 6 英寸 的 块",
            "de": "Block, der kürzer als 3 oder 6 Zoll ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "find the block that is to the left of block 1 whose shape is that of a pyramid",
            "zh": "找到 金字塔 形状 在 区块 一 左边 的 区块",
            "de": "Welcher Block ist links von Block 1 und hat die Form einer Pyramide?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "pyramid block above block 1",
            "zh": "块 1 上方 的 金字塔 块",
            "de": "Pyramidenblock über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "a special block below block 1",
            "zh": "块 1 下方 的 特殊 块",
            "de": "ein spezieller Block unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what block is above at two or more blocks",
            "zh": "哪个 块 是 在 两个 或 更 多 的 块 上方 的 ？",
            "de": "Welcher Block ist über Zwei oder mehr Blöcken?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "block whose width is 3 inches",
            "zh": "三 英寸 宽 的 块",
            "de": "Block, dessen Breite 3 Zoll ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks at least as tall as block 1",
            "zh": "帮 我 找到 所有 至少 跟块 1 一样 高 的 块",
            "de": "finde alle Blöcke die mindestens so groß sind wie Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what block has less than two blocks below it",
            "zh": "什么 块 下面 少于 两个 块",
            "de": "Welcher Block hat weniger als zwei Blöcke unter sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block that is not block 1 is below",
            "zh": "下面 是 哪个 块 不是 块 1",
            "de": "Welcher Block, der nicht Block 1 ist, ist darunter"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "what block is at least as tall as block 1",
            "zh": "什么 块 至少 和 块 1 一样 高",
            "de": "Welcher Block ist mindestens so groß wie Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string left ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the blocks that are left of and below block 1",
            "zh": "选择 块 1 左下方 的 块",
            "de": "Wähle die Blöcke, die links von und unter Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "select the special block right to block 1",
            "zh": "选择 1 号 方块 右边 的 特殊 方块",
            "de": "Wähle den Spezialblock rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "select the 3 inch long block that is left of block 1",
            "zh": "选择 块 1 左侧 的 3 英寸 长块",
            "de": "Wähle den 3 Zoll langen Block, der links von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "block above and left from block 1",
            "zh": "在 方块 1 左 上面 的 方块",
            "de": "Block über und links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "3 inch block right of block 1",
            "zh": "块 1 右边 3 英寸 块",
            "de": "3 Zoll Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )"
        },
        "question": {
            "en": "locate a block that is longer than block 1 is tall",
            "zh": "找到 一个 长于 块 1 高度 的 块",
            "de": "Finde einen Block der länger ist als Block 1 hoch ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks above 3 inch tall blocks",
            "zh": "帮 我 找到 所有 在 3 英寸 高 的 块 上方 的 块",
            "de": "Finde alle Blöcke über 3 Zoll großen Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )"
        },
        "question": {
            "en": "special block right of block 1",
            "zh": "在 块 1 右方 的 特殊 块",
            "de": "Spezieller Block rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all blocks right and below block 1",
            "zh": "帮 我 找到 所有 在 块 1 右下方 的 块",
            "de": "Finde alle Blöcke rechts von und unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what block is below the fewest blocks",
            "zh": "哪个 区块 是 在 最少 的 区块 下方",
            "de": "Welcher Block ist unter den wenigsten Blöcken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block has block 1 below and left",
            "zh": "哪个 区块 有 区块 一在 其 左下方",
            "de": "Welcher Block hat Block 1 links unter sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "what block is below the block that block 1 is above",
            "zh": "哪个 块 是 在 块 1 在 其 上方 的 块 下方 的 块 ？",
            "de": "welcher Block ist unter dem Block der Block 1 über sich hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find me all the 3 inches long blocks and below block 1",
            "zh": "帮 我 找到 所有 三 英寸 长 的 ， 在 块 1 下方 的 块 ·",
            "de": "Finde alle 3 Zoll langen Blöcke die unter Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "3 inch tall block left of block 1",
            "zh": "第 1 区 左侧 3 英寸 高 的 区块",
            "de": "3 Zoll großer Block links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "what block is below the 3 inch wide block",
            "zh": "什么 块 在 3 英寸 宽 的 块 下面",
            "de": "Welcher Block ist unter dem 3 Zoll breiten Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "block above 3 inch wide block",
            "zh": "在 三 英尺 宽 的 区块 的 上方 的 区块",
            "de": "Block über 3 Zoll breitem Block"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "select the block whose length is 3 inches and that is to the left of block 1",
            "zh": "选择 在 模块 1 左边 长度 为 3 英寸 的 模块 。",
            "de": "Wähle den 3 Zoll langen Block links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "what block has block 1 below and to the left",
            "zh": "那么 模块 在 模块 1 的 右上方 ？",
            "de": "Welcher Block hat Block 1 unter und links von sich?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me the block that is below and to the right of block 1",
            "zh": "找出 在 第一块 右下方 的 块",
            "de": "Finde den Block, der unter und rechts von Block 1 ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "left of block 1",
            "zh": "模块 1 的 左边 。",
            "de": "links von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )"
        },
        "question": {
            "en": "find a block that has the length of block 1",
            "zh": "找出 和 模块 1 长度 相同 的 一个 模块 。",
            "de": "Finde einen Block mit der Länge von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "find the 3 inch wide block below block 1",
            "zh": "找出 3 英寸 宽 在 模块 1 下方 的 模块 。",
            "de": "Finde den 3 Zoll breiten Block unter Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )"
        },
        "question": {
            "en": "what block is at least as long as block 1",
            "zh": "什么 块 至少 与 块 1 一样 长",
            "de": "Welcher Block ist mindestens so lang wie Block 1?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "find me all blocks that block 1 is right and above of",
            "zh": "找出 所有 在 第一块 左下方 的 块",
            "de": "Finde alle Blöcke die Block 1 rechts und über sich haben"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )"
        },
        "question": {
            "en": "is there a block that is as long as block 1 is high",
            "zh": "有 和 第一块 一样 长 一样 高 的 块 吗 ？",
            "de": "Gibt es einen Block der so lang ist wie Block 1 hoch ist?"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )"
        },
        "question": {
            "en": "find me all the blocks shorter than 3 inches",
            "zh": "找出 所有 短于 3 英寸 的 块",
            "de": "Finde alle Blöcke die kürzer als 3 Zoll sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "select the block that to the left of the most blocks",
            "zh": "选取 位于 大部分 方块 左方 的 方块",
            "de": "Wähle den Block der links von den meisten Blöcken ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )"
        },
        "question": {
            "en": "block above and right from block 1",
            "zh": "在 方块 一 右上方 的 方块",
            "de": "Block über und rechts von Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the block on top of at least two other blocks",
            "zh": "找出 位于 至少 另外 两个 方块 上面 的 方块",
            "de": "Finde den Block der auf mindestens zwei anderen Blöcken ist"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string max ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "choose a block that is above the most bricks",
            "zh": "选择 一个 位于 大部分 方块 上方 的 方块",
            "de": "Wähle einen Block, der über den meisten Steinen liegt"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string ! = ) en.block.block1 ) )"
        },
        "question": {
            "en": "find the blocks that are not to the right of block 1",
            "zh": "找到 不 在 块 1 右侧 的 块",
            "de": "Finde die Blöcke, die nicht rechts von Block 1 sind"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "what pyramid shaped block above block 1",
            "zh": "哪 一个 锥形 方块 在 方块 一 的 上方",
            "de": "welcher pyramidenförmige Block über Block 1"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )"
        },
        "question": {
            "en": "look left for block 1 and get the pyramid block",
            "zh": "向左看 找出 方块 一并 取得 锥形 方块",
            "de": "Suchen Sie links nach Block 1 und erhalten Sie den Pyramidenblock"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string above ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )"
        },
        "question": {
            "en": "find me the block that is above block 1 and is in the shape of a pyramid",
            "zh": "给 我 找 位于 方块 一 上方 的 锥形 方块",
            "de": "Finde den Block über Block 1, der die Form einer Pyramide hat"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all blocks with more than 2 blocks to its left",
            "zh": "给 我 找 左方 有 多于 两个 方块 的 所有 方块",
            "de": "Finde alle Blöcke mit mehr als 2 Blocken zu dessen linken"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )"
        },
        "question": {
            "en": "block as wide as height of block 1",
            "zh": "宽度 与 方块 一 高度 一样 的 方块",
            "de": "Block so breit wie Block 1 hoch"
        }
    },
    {
        "domain": "blocks",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string !type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string length ) ( string = ) ( number 3 en.inch ) ) )"
        },
        "question": {
            "en": "choose a brick 3 inches long that is shaped like a pyramid",
            "zh": "选择 一个 3 英尺 长且 形状 是 锥形 的 方块",
            "de": "Wähle einen Ziegel, der 3 Zoll lang ist und geformt ist wie eine Pyramide."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find the gender of employees who have a start date greater than 2004",
            "zh": "找到 在 2004 年 之后 开始 工作 的 员工 的 性别",
            "de": "Finde das Geschlecht der Angestellten, welche nach dem Jahr 2004 angefangen haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "gender of employees who began working by 2004",
            "zh": "在 2004 年 之前 开始 工作 的 员工 的 性别",
            "de": "Geschlecht der Angestellten, die vor 2004 angefangen haben zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find persons who are friends with students who started after 2004",
            "zh": "找到 与 2004 年 之后 开始 的 学生 成为 朋友 的 人",
            "de": "Finde Leute, die mit Studenten befreundet sind, die nach 2004 angefangen haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "who has been a student longer than Alice has been employed",
            "zh": "谁 作为 学生 的 时间 比 爱丽丝 被 雇用 的 时间 长 ？",
            "de": "Wer ist länger Student, als Alice angestellt ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student has the latest start date",
            "zh": "哪个 学生 有 最迟 的 开始 日期",
            "de": "Welcher Schüler hat das späteste Startdatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is not before 2004",
            "zh": "结束 日期 不 在 2004 年 之前 的 学生",
            "de": "Student, dessen Enddatum nicht vor 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "gender of employee whose end date is after 2004",
            "zh": "结束 日期 在 2004 年 之后 的 员工 的 性别",
            "de": "Geschlecht des Mitarbeiters, dessen Enddatum nach 2004 liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who have the same start date as Alice",
            "zh": "和 爱丽丝 有 相同 开始 日期 的 员工",
            "de": "Angestellte, die dasselbe Anfangsdatum wie Alice haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find people with at least two relationship statuses",
            "zh": "找到 至少 有 两种 关系 状态 的 人",
            "de": "Finden Sie Personen mit mindestens zwei Beziehungsstatus"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employees who finish after 2004",
            "zh": "在 2004 年 之后 结束 的 员工 的 关系 状态",
            "de": "Beziehungsstatus von Mitarbeitern, die nach 2004 ausscheiden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friends with employee who quit their job till 2004",
            "zh": "到 2004 年 为止 离职 的 员工 的 朋友",
            "de": "Freunde von Angestellten, die bis 2004 ihren Job gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "people who are 180 cm tall",
            "zh": "180 公分 高 的 人们",
            "de": "Menschen, die 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who are the friends of employees with a start date before 2004",
            "zh": "谁 跟 2004 年 以前 开始 （ 工作 ） 的 员工 是 朋友 ？",
            "de": "Wer sind die Freunde der Mitarbeiter mit einem Startdatum vor 2004"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "who is 180 cm tall and single",
            "zh": "谁 身高 180 公分 而且 单身 ？",
            "de": "Wer ist 180 cm groß und single?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find students friends who started in 2004 or later",
            "zh": "找到 2004 年 及 以后 开始 （ 学习 ） 的 学生 的 朋友",
            "de": "Finde Freunde von Studenten, die 2004 oder später angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students whose end date is smaller than 2004 and 2010",
            "zh": "2004 年 或 2010 年前 结束 （ 学习 ） 的 学生",
            "de": "Studenten, deren Enddatum kleiner als 2004 und 2010 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student left after student Alice started",
            "zh": "哪些 学生 是 在 爱丽丝 开始 （ 学习 ） 之后 离开 的 ？",
            "de": "Welcher Student ging nachdem Student Alice angefangen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "people who are friends with Alice and currently online",
            "zh": "哪些 人 跟 爱丽丝 是 朋友 并且 现在 在线 的 ？",
            "de": "Leute die mit Alice befreundet und gerade online sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has the greatest number of job titles",
            "zh": "哪些 员工 有 最 多 的 工作 头衔 ？",
            "de": "Welcher Mitarbeiter hat die meisten Berufsbezeichnungen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which city are most people born in",
            "zh": "哪个 城市 出生 的 人 最 多",
            "de": "In welcher Stadt sind die meisten Menschen geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that started school when Alice did or after",
            "zh": "跟 爱丽丝 同时 或 更 晚 开始 上学 的 人",
            "de": "Leute, die in die Schule kamen, als Alice es tat oder danach"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )"
        },
        "question": {
            "en": "find someone born after Alice's graduation date",
            "zh": "找到 爱丽丝 毕业 后 出生 的 人",
            "de": "Finde jemanden der nach Alice´s Abschlussdatum geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of did not attend brown university",
            "zh": "没有 在 布朗 大学 上学 的 人 的 情感 状态 如何",
            "de": "Wie ist der Beziehungsstatus von Personen die nicht die brown university besucht haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who are Alice's single friends",
            "zh": "谁 是 爱丽丝 的 单身 朋友",
            "de": "Wer sind Alices alleinstehende Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "an employee who left the company before Alice began with it",
            "zh": "一个 在 爱丽丝 来 这个 公司 工作 之前 就 离开 的 员工",
            "de": "Welcher Angestellte verließ das Unternehmen bevor Alice begann?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "who started school when Alice started working",
            "zh": "谁 在 爱丽丝 开始 工作 时 开始 上学 了",
            "de": "Wer fing mit der Schule an, als Alice anfing zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find people who are friends with students whom are not part of brown university",
            "zh": "找出 不是 布朗 大学 学生 的 朋友 的 人",
            "de": "Finde Personen, die Freunde von Studenten sind, welche nicht Teil der Brown University sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )"
        },
        "question": {
            "en": "what was Alice's last day of going to brown university",
            "zh": "爱丽斯 最后 一天 去 布朗 大学 的 日子 是 哪天",
            "de": "Wann war Alices letzter Tag an der Brown University?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who are friends with employees that are not named McKinsey",
            "zh": "名字 不 叫 麦肯锡 的 员工 的 朋友",
            "de": "Personen, die mit Angestellten befreundet sich, welche nicht McKinsey heißen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "who has at least two relationship status",
            "zh": "谁 有 至少 两段 感情 状态",
            "de": "Wer hat mindestens zwei Beziehungsstatus?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find the city of birth for the employee who quit before 2004",
            "zh": "請 找出 在 2004 年前 辭職 同事 的 出生地",
            "de": "Finden Sie den Geburtsort des Mitarbeiters, der vor 2004 gekündigt hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who started school before Alice started her job",
            "zh": "在 爱丽丝 开始 她 的 工作 之前 开始 上学 的 学生 们",
            "de": "Schüler, die die Schule begonnen haben, bevor Alice ihren Job angefangen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees started the same day as Alice",
            "zh": "那位 同事 與 艾麗絲 同一天 上任",
            "de": "Welche Angestellten starteten am selben Tag wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who began school before Alice graduated",
            "zh": "在 爱丽丝 毕业 之前 开始 上学 的 学生 们",
            "de": "Schüler, die mit der Schule anfingen bevor Alice ihren Schulabschluss hatte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of employees who have a start date that is 2004 or later",
            "zh": "开始 日期 是 2004 年 或 之后 的 雇员 们 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus von Mitarbeitern mit einem Startdatum von 2004 oder später?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student that graduates at least before Alice starts school",
            "zh": "至少 在 爱丽丝 开始 上学 前 毕业 的 学生",
            "de": "Schüler, der seinen Abschluss mindestens vor dem Schuleintritt von Alice macht"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "find the friends of the people born in New York",
            "zh": "找出 在 纽约 出生 的 人们 的 朋友 们",
            "de": "Finde Freunde der Leute, die in New York geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of students who started no earlier than 2004",
            "zh": "不早 于 2004 年 开始 的 学生 们 的 出生地 是 什么 ？",
            "de": "Was ist der Geburtsort von Studenten, die nicht früher als 2004 anfingen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "friends of Alice who are 180 cm tall",
            "zh": "爱丽丝 的 身高 是 180 厘米 的 朋友 们",
            "de": "Freunde von Alice, die 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that stopped working when Alice started school or before",
            "zh": "在 爱丽丝 开始 上学 或 之前 就 停止 工作 的 人们",
            "de": "Welche Personen haben aufgehört zu arbeiten als Alice mit der Schule begann oder vorher?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "who has a height of 180 and is logged in",
            "zh": "谁 的 身高 是 180 并且 登录 了",
            "de": "Wer hat eine Größe von 180 und ist eingeloggt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find students friend with last day in 2004 or later",
            "zh": "找到 2004 年 或者 以后 的 毕业 的 学生 朋友",
            "de": "Finde Freunde von Schülern mit dem letzten Tag in 2004 oder später"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find friends of people who did not study computer science in school",
            "zh": "找到 在 学校 没有 学过 计算机科学 的 人 的 朋友",
            "de": "Finde Freunde von Personen, die kein Informatik in der Schule hatten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "what city was the single person born in",
            "zh": "单身 的 人 在 哪个 城市 出生",
            "de": "In welcher Stadt wurde die alleinstehende Person geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find all people with friends who finished school before 2004",
            "zh": "找到 所有 在 2004 年 之前 完成学业 的 朋友",
            "de": "Finde alle Leute mit Freunden, die die Schule vor 2004 beendet haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "find people who are the same gender as Alice's friends",
            "zh": "找到 跟 爱丽丝 的 朋友 一样 性别 的 人",
            "de": "Finde Leute mit dem gleichen Geschlecht wie Alice's Freunde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people who are friends with students who ended school after 2004",
            "zh": "在 2004 年 以后 毕业 的 学生 的 朋友",
            "de": "Menschen, die mit Schülern befreundet sind, die nach 2004 die Schule beendet haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "the relationship status of people born in 2004",
            "zh": "在 2004 年 出生 的 人 情感 状态",
            "de": "Beziehungsstatus von Leuten, die 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "who has less than two relationship status",
            "zh": "谁 有 小于 2 个 情感 状态",
            "de": "Wer hat weniger als zwei Beziehungsstatus"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is birthplace of employee with last day in 2004 or later",
            "zh": "在 2004 年 或者 以后 结束 的 员工 的 出生地",
            "de": "Was ist der Geburtsort von Angestellten mit letztem Tag im Jahr 2004 oder später?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.person.alice ( string birthdate ) ) )"
        },
        "question": {
            "en": "what is the birth date of Alice",
            "zh": "爱丽丝 的 出生日期 是 什么 时候",
            "de": "Was ist das Geburtsdatum von Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string ! = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "people who were not born in 2004",
            "zh": "那些 不是 2004 年 出生 的 人",
            "de": "Menschen, die nicht im Jahr 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student has a start date that is no less than Alice",
            "zh": "哪个 学生 的 开始 日期 是 在 爱丽丝 之后",
            "de": "Welcher Student hat das Anfangsdatum, das nicht früher als Alices ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )"
        },
        "question": {
            "en": "what day does Alice start",
            "zh": "爱丽丝 什么 时候 开始",
            "de": "An welchem Tag beginnt Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with fewest job titles",
            "zh": "找到 有 最少 工作 职称 的 员工 们",
            "de": "Finden Sie Mitarbeiter mit den wenigsten Berufsbezeichnungen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship statuses of students who began school after 2004",
            "zh": "在 2004 年 之后 开始 上学 的 学生 们 的 感情 状态",
            "de": "Beziehungsstatus von Schülern, die nach 2004 eingeschult wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find me all students who attended either brown university or UCLA",
            "zh": "给 我 找到 所有 要么 在 布朗 大学 要么 在 UCLA 上学 的 学生 们",
            "de": "Finde alle Studenten, die entweder an der Brown Universität oder an der UCLA waren"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )"
        },
        "question": {
            "en": "where is Alice born",
            "zh": "爱丽丝 出生 在 哪里",
            "de": "Wo wurde Alice geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string min ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "person who has the least friends",
            "zh": "拥有 最少 朋友 的 人",
            "de": "Person mit den wenigsten Freunden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "find all males who are 180 cm tall",
            "zh": "找到 所有 180 厘米 高 的 男性",
            "de": "finde alle Männer die 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of students who graduated before 2002",
            "zh": "2002 年 之前 毕业 的 学生 的 出生地 是 什么 ？",
            "de": "Was ist der Geburtsort von Studenten, die vor 2002 ihren Abschluss gemacht haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what gender has two or fewer people",
            "zh": "哪个 性别 有 两个 或 更 少 的 人",
            "de": "Welches Geschlecht hat zwei oder weniger Menschen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "who is a student whose end date is at least Alice's birthday",
            "zh": "哪个 学生 的 结束 日期 至少 是 爱丽丝 的 生日",
            "de": "Wer ist ein Student, dessen Enddatum mindestens Alices Geburtstag ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who started working on 2004 or 2010",
            "zh": "在 2004 年 或 2010 年 开始 工作 的 员工",
            "de": "Mitarbeiter, der 2004 oder 2010 mit der Arbeit begonnen hat."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "who is friends with either Alice or Bob",
            "zh": "谁 是 爱丽丝 或 鲍勃 的 朋友",
            "de": "Wer ist entweder mit Alice oder Bob befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "what person was born in 2004 and is logged in",
            "zh": "哪个 登录 了 的 人 是 在 2004 年 出生 的 ？",
            "de": "welche Person wurde 2004 geboren und ist eingeloggt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have an end date that is later than that of employee Alice",
            "zh": "哪个 学生 的 结束 日 是 晚于 员工 爱丽丝 的 ？",
            "de": "Welche Schüler haben ein späteres Enddatum als die Mitarbeiterin Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what city were more than two people born in",
            "zh": "哪个 城市 出生 的 人 超过 两人",
            "de": "In welcher Stadt wurden mehr als zwei Menschen geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students with an end date not of 2004",
            "zh": "找到 结束 日期 不是 2004 年 的 学生",
            "de": "Finde Schüler deren Enddatum nicht 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employee whose end date is not 2004",
            "zh": "结束 日期 不是 2004 年 的 员工 的 关系 状态",
            "de": "Beziehungsstatus von Angestellten dessen Enddatum nicht 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find cities where at least two people were born",
            "zh": "找到 至少 有 两个 人 出生 的 城市",
            "de": "Finden Sie Städte, in denen mindestens zwei Menschen geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who are not studying computer science",
            "zh": "非 计算机科学 专业 的 学生 。",
            "de": "Studenten, die nicht Informatik studieren"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has an end date that is the same as the start date of Alice",
            "zh": "哪个 员工 的 终止 日 （ 工作 ） 和 爱丽丝 的 开始 日 是 一样 的 ？",
            "de": "Welcher Mitarbeiter hat ein Enddatum, das dem Startdatum von Alice entspricht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me at least two persons with the same relationship status",
            "zh": "帮 我 找到 至少 两个 有 同样 关系 状态 的 人",
            "de": "Finden Sie mindestens zwei Personen mit dem gleichen Beziehungsstatus."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "name all students with two or fewer fields of study",
            "zh": "列出 所有 有 两个 或 以下 学习 领域 的 学生 。",
            "de": "Nenne alle Studenten mit zwei oder weniger Studienfächern"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find students friend who started after 2004",
            "zh": "找到 在 2004 年 后 开始 学习 的 学生 的 朋友",
            "de": "Finden Sie den Freund eines Studenten, der nach 2004 begonnen hat."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which gender is present in most number",
            "zh": "哪个 性别 人 数最多 ？",
            "de": "Welches Geschlecht ist am meisten vertreten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "people born in 2004 that are single",
            "zh": "在 2004 年 出生 而且 是 单身 的 人",
            "de": "Personen geboren in 2004, welche single sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of the employee who did not end in 2004",
            "zh": "在 2004 年 没有 结束 工作 的 员工 的 性别 是 什么",
            "de": "Wie ist das Geschlecht des Angestellten, der nicht in 2004 aufgehört hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students left by the end of 2004",
            "zh": "哪个 学生 在 2004 年末 离开 了 ？",
            "de": "Welche Studenten sind bis Ende 2004 gegangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students whose start date is no earlier than Alice's",
            "zh": "开始 日期 不早 于 爱丽丝 的 学生",
            "de": "Studenten, deren Anfangsdatum nicht vor dem von Alice liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friends of employees who started after 2004",
            "zh": "在 2004 年 之后 开始 的 员工 的 朋友",
            "de": "Freunde von Mitarbeitern, die nach 2004 angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find me the employee who quit before 2004",
            "zh": "给 我 找到 那个 在 2004 年 之前 辞职 的 员工",
            "de": "Finden Sie mir den Mitarbeiter, der vor 2004 gekündigt hat."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the most common relationship status",
            "zh": "最 普遍 的 关系 状态 是 什么",
            "de": "Was ist der häufigste Beziehungsstatus?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the birth city of fewer than two people",
            "zh": "找到 有 少于 两个 人 出生 的 城市",
            "de": "In welcher Stadt wurden weniger als zwei Personen geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find people who are friends with employees who have a start date of 2004 or later",
            "zh": "找到 和 开始 日期 在 2004 年 或者 之后 的 员工 是 朋友 的 人",
            "de": "Finde Leute die Freunde von Angestellten sind die ein Startdatum von 2004 oder später haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with the person who started school during or after 2004",
            "zh": "谁 和 这个 在 2004 年 或 之后 开始 学业 的 人 是 朋友 ？",
            "de": "Wer ist mit der Person befreundet, die während oder nach 2004 in die Schule kam?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees with less than two job titles",
            "zh": "有 少于 两个 工作 头衔 的 员工",
            "de": "Arbeitnehmer mit weniger als zwei Berufsbezeichnungen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students went to fewer than two universities",
            "zh": "哪些 学生 上 了 少于 两所 大学",
            "de": "Welche Studenten waren an weniger als zwei Universitäten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student that is enrolled in the most universities",
            "zh": "在 最 多 大学 就学 的 学生",
            "de": "Student, der an den meisten Universitäten eingeschrieben ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what are the birthplaces of two persons or less",
            "zh": "两个 人 或 更 少 的 人 的 出生地 是 什么",
            "de": "Was sind die Geburtsorte von zwei oder weniger Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )"
        },
        "question": {
            "en": "who was employer of Alice who finished in 2004",
            "zh": "谁 是 2004 年 完成 的 爱丽丝 的 雇主",
            "de": "Wer war der Arbeitgeber von Alice die 2004 fertig wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of people that stopped working before 2004",
            "zh": "在 2004 年 之前 停止 工作 的 人 的 性别 是 什么",
            "de": "Was ist das Geschlecht der Menschen, die vor 2004 aufgehört haben zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose start date is after start date of employee Alice",
            "zh": "在 员工 爱丽丝 开始 日 之后 开始 的 员工",
            "de": "Mitarbeiter, dessen Startdatum nach dem Startdatum von Mitarbeiter Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who has most number of friends",
            "zh": "谁 拥有 最多 的 朋友",
            "de": "Wer hat die meisten Freunde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "employee who is same sex who left more other employee started in 2004",
            "zh": "跟 2004 年 开始 的 员工 有 同样 性别 的 员工",
            "de": "Geschlecht, das das Geschlecht des Mitarbeiters ist, dessen Enddatum kleiner als 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "which of my friends have a single status",
            "zh": "我 的 哪个 朋友 是 单身 ？",
            "de": "Welche von meinen Freunden haben einen Singlestatus?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "where were people that started school before 2004 born",
            "zh": "2004 年前 开始 上学 的 人 在 哪里 出生 的 ？",
            "de": "Wo sind Menschen geboren, die vor 2004 eingeschult wurden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "find Alice's friends born in New York",
            "zh": "找到 在 纽约 出生 的 爱丽丝 的 朋友",
            "de": "suche Alice`s Freunde die in New York geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what are students genders with last days after 2004",
            "zh": "最后 一天 在 2004 年 以后 的 学生 的 性别",
            "de": "Was ist das Geschlecht von Schülern mit den letzten Tagen nach 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of employees who quit on or after 2004",
            "zh": "2004 年 或 之后 辞职 的 员工 的 性别 是 什么 ？",
            "de": "Wie lautet das Geschlecht der Angestellten, die in oder nach 2004 kündigten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "all 180 cm tall people who were born in New York",
            "zh": "所有 在 纽约 出生 的 身高 180 公分 的 人",
            "de": "Alle 180 cm großen Menschen, die in New York geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees whom have a start day that is later than the start date of student Alice",
            "zh": "找到 开始 日期 是 比 学生 爱丽丝 的 开始 日期 晚 的 雇员 们",
            "de": "Finden Sie Mitarbeiter, deren Starttag nach dem Startdatum der Schülerin Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose start date is not after 2004",
            "zh": "开始 日 不 晚于 2004 年 的 员工",
            "de": "Angestellter, dessen Startdatum nicht nach 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is the student whose end date was 2004 friends with",
            "zh": "谁 是 2004 年 结束 的 学生 的 朋友 ？",
            "de": "Mit wem ist der Schüler, dessen Enddatum 2004 war, befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees have start dates the same as Alice's last day",
            "zh": "哪些 雇员 在 爱丽丝 离职 的 同一天 入职",
            "de": "Welche Angestellten starteten am gleichen Tag an dem Alice aufhörte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "name of employee's friends who started before 2004",
            "zh": "列出 2004 年 以前 开始 （ 工作 ） 的 员工 的 朋友",
            "de": "Name der Freunde des Angestellten, der vor 2004 angefangen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students graduate the day of Alice's last day at work",
            "zh": "哪些 学生 在 爱丽丝 最后 的 工作日 那天 毕业 ？",
            "de": "Welche Schüler haben ihren Abschluss an demselben Tag gemacht, an dem Alice das letzte Mal zur Arbeit ging?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students starting at the same time as Alice",
            "zh": "和 爱丽丝 同时 开始 的 学生 们",
            "de": "Schüler, die zur gleichen Zeit wie Alice anfangen."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "working people with two or less job titles",
            "zh": "有 两个 或 更少 工作 职称 的 在职人员",
            "de": "Erwerbstätige mit zwei oder weniger Berufsbezeichnungen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is not after start date of student Alice",
            "zh": "开始 日期 不晚 于 学生 爱丽丝 的 开始 日期 的 学生",
            "de": "Student, dessen Startdatum nicht nach dem Startdatum der Studentin Alice liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friend of employee whose end date is at most 2004",
            "zh": "结束 日 最 多 是 2004 的 雇员 的 朋友",
            "de": "Freund des Angestellten, dessen Enddatum höchstens 2004 ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student with the most fields of study",
            "zh": "拥有 最 多 学习 领域 的 学生",
            "de": "ein Student mit den meisten Studienrichtungen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find the gender of employees with the job title that is not software engineer",
            "zh": "找到 非 软件 工程师 职位 的 员工 性别",
            "de": "Finde das Geschlecht von Angestellten deren Jobtitel nicht Softwareentwickler ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )"
        },
        "question": {
            "en": "who is the shortest person in my network",
            "zh": "谁 是 在 我 认识 的 人 当中 最矮 的",
            "de": "Wer ist die kleinste Person in meinem Netzwerk?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees whose last day is the same or later than Alice's",
            "zh": "寻找 跟 爱丽丝 同一天 或 之后 离职 的 员工",
            "de": "Finde Angestellte, deren letzter Tag der gleiche oder später als der von Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees with the soonest finish date",
            "zh": "最早 完成 的 员工",
            "de": "Welche Angestellten haben das baldigste Austrittsdatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string !type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what is the field of study of the 180 cm tall person",
            "zh": "什么 是 180 厘米 高 的 人 的 研究 领域",
            "de": "Wie lautet die Fachrichtung der 180 cm großen Person?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find relationship statuses for students with an end date that is no later than 2004",
            "zh": "找出 结束 日期 不晚 于 2004 年 的 学生 的 感情 状态",
            "de": "Finde den Beziehungsstatus für Studenten mit Enddatum nicht später als 2004"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me the employee who quit between 2004 and 2010",
            "zh": "给 我 找 在 2004 到 2010 离职 的 员工",
            "de": "Welche Angestellten haben zwischen 2004 und 2010 gekündigt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find all the people with at least two birthdays",
            "zh": "找到 所有 有 两个 以上 生日 的 人",
            "de": "Finde alle Leute mit mindestens zwei Geburtstagen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )"
        },
        "question": {
            "en": "find me a person born after Alice's first day of school",
            "zh": "给 我 找到 一个 在 爱丽丝 上学 第一天 之后 出生 的 人",
            "de": "Finde eine Person die nach Alices erstem Schultag geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the gender of people that finished school before 2004",
            "zh": "在 2004 年前 结束 学业 的 人们 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht der Menschen, die die Schule vor 2004 beendet haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friend of student whose end date is not less than 2004",
            "zh": "结束 日期 不晚 于 2004 年 的 学生 的 朋友",
            "de": "Freund des Studenten, dessen Enddatum nicht kleiner als 2004 ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee started after 2004",
            "zh": "哪位 员工 在 2004 年 后 开始 工作 的 ？",
            "de": "Welcher Mitarbeiter hat nach 2004 angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )"
        },
        "question": {
            "en": "how tall is Alice",
            "zh": "爱丽丝 有 多 高 ?",
            "de": "Wie groß ist Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "which of Alice's friends are currently online",
            "zh": "哪些 爱丽丝 的 朋友 现在 是 在线 的 ？",
            "de": "Welche Freunde von Alice sind momentan online"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me employees with less than two job titles",
            "zh": "帮 我 找到 有 两个 以下 工作 头衔 的 员工 。",
            "de": "Welche Angestellten haben nicht weniger als Zwei Berufsbezeichnungen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship statuses of students who ended school in or before 2004",
            "zh": "在 2004 年 及 以前 毕业 的 学生 的 婚姻 状态",
            "de": "Beziehungsstatus von Schülern, die die Schule in oder vor 2004 beendet haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have a start date later than the birthdate of Alice",
            "zh": "哪些 学生 在 爱丽丝 出生 后 开始 学业 的 ？",
            "de": "Welche Schüler haben ein späteres Startdatum als das Geburtsdatum von Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose end date is before end date of employee Alice",
            "zh": "在 爱丽丝 离开 之前 离开 的 学生",
            "de": "Student, dessen Enddatum vor dem Enddatum des Mitarbeiters Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who are friends with an employee that started no later than 2004",
            "zh": "与 一位 在 2004 年 之前 入职 员工 的 朋友",
            "de": "Personen, die mit einem Mitarbeiter befreundet sind, der spätestens 2004 begonnen hat."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is largest",
            "zh": "最迟 开始 的 学生",
            "de": "Welcher Student hat das späteste Start Datum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employee with the earliest start date",
            "zh": "找到 最早 开始 日期 的 员工",
            "de": "Finden Sie einen Mitarbeiter mit dem frühesten Startdatum"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students graduate after Alice's birthdate",
            "zh": "谁 是 在 爱丽丝 生日 之后 毕业 的 学生",
            "de": "Welche Studenten machen ihren Abschluss nach Alices Geburtstag"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student ending after Alice",
            "zh": "在 爱丽丝 之后 结束 的 一个 学生",
            "de": "ein Student der nach Alice aufgehört hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who quit before Alice joined",
            "zh": "在 Alice 加入 之前 退出 的 员工",
            "de": "Angestellte, die gekündigt haben, bevor Alice eingetreten ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "single person 180 cm tall",
            "zh": "180 公分 高 的 单身 人仕",
            "de": "Einzelne Person die 180 cm groß ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees starting before Alice",
            "zh": "寻找 在 爱丽丝 之前 开始 的 员工",
            "de": "Finde Angestellte die vor Alice anfangen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )"
        },
        "question": {
            "en": "what was Alice's job title in 2004",
            "zh": "2004 年 爱丽丝 的 职位 是 什么",
            "de": "Wie lautete Alices Berufsbezeichnung im Jahr 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is before end date of student Alice",
            "zh": "开始 日比 爱丽丝 的 结束 日要 早 的 学生",
            "de": "Schüler dessen Startdatum vor dem Enddatum der Schülerin Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with a start date that is equal to the end date of employee Alice",
            "zh": "找到 开始 日 跟 员工 爱丽丝 结束 日 是 同一天 的 员工",
            "de": "Finde Angestellte deren Startdatum dem Enddatum der Angestellten Alice entspricht"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )"
        },
        "question": {
            "en": "find someone shorter than Alice",
            "zh": "找到 一个 比 爱丽丝 矮 的 人",
            "de": "finde jemanden, der kleiner ist als Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of employees who left their jobs before 2004",
            "zh": "2004 年前 离职 的 员工 的 性别 是 什么",
            "de": "Was ist das Geschlecht der Arbeitnehmer, die ihre Arbeit vor 2004 verlassen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of students starting before 2004",
            "zh": "在 2004 年前 开始 （ 学业 ） 的 学生 的 性别",
            "de": "Geschlecht der vor 2004 beginnenden Studierenden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "persons born in 2004 or 2010",
            "zh": "在 2004 年 或 2010 年 出生 的 人",
            "de": "Personen, die 2004 oder 2010 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find all the people with two relationship statuses",
            "zh": "找出 所有 有 两个 婚姻关系 的 人",
            "de": "Finden Sie alle Personen mit zwei Beziehungsstatus"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student lists the most fields of study",
            "zh": "哪个 学生 列出 在 最 多 的 研究 领域",
            "de": "Welcher Student listet die meisten Studienfächer auf?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have the latest end date",
            "zh": "哪个 学生 的 结束 日 是 最晚 的 ？",
            "de": "Welche Studenten haben das späteste Abschlussdatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string !type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "which company employs people who are 180 cm tall",
            "zh": "哪个 公司 雇用 身高 一米 八 的 人",
            "de": "welches Unternehmen beschäftigt Menschen, die 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find birth cities of employees who have a job title that is not software engineer",
            "zh": "除了 软件 工程师 职位 以外 的 员工 的 出生 城市",
            "de": "Finde die Geburtsorte der Angestellten die eine andere Berufsbezeichnung haben als Softwareentwickler"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people that are friends with people that quit their jobs before 2004",
            "zh": "在 2004 年 之前 离职 的 人 的 朋友",
            "de": "Welche Personen haben Freunde die vor 2004 ihre Berufe kündigten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me all employees that have the same end date as Alice",
            "zh": "跟 爱丽丝 离职 日期 一样 的 员工",
            "de": "Finde alle Angestellten die dasselbe Enddatum wie Alice haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of employees that started before 2004",
            "zh": "2004 年 以前 入职 的 员工 的 情感 状态",
            "de": "Wie ist der Beziehungsstatus von Mitarbeitern, die vor 2004 begonnen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "all people born in New York",
            "zh": "所有 出生 在 纽约 的 人",
            "de": "Alle in New York geborenen Personen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people who are friends with the people who quit after 2004",
            "zh": "在 2004 年 后 离职 的 人 的 朋友",
            "de": "Personen, die mit den Personen befreundet sind, die nach 2004 kündigten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who started working in 2004 or 2010",
            "zh": "谁 2004 年 或者 2010 年入 职 的 人 有 谁",
            "de": "Wer fing im Jahr 2004 oder 2010 an zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "Alice's online friends",
            "zh": "爱丽丝 的 网友",
            "de": "Alice's online Freunde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of students not starting in 2004",
            "zh": "没有 在 2004 年 开始 的 学生 们 的 性别",
            "de": "Geschlecht der Studierenden, die nicht im Jahr 2004 begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student with less than two universities",
            "zh": "上 过 小于 2 所 大学 的 学生",
            "de": "ein Student mit weniger als zwei Universitäten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find relationship status of students whose last day was after 2004",
            "zh": "在 2004 年 之后 毕业 的 同学 的 情感 状态",
            "de": "finde den Beziehungsstatus von Studenten deren letzter Tag nach 2004 war"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.person.alice ( string gender ) ) )"
        },
        "question": {
            "en": "what is Alice's gender",
            "zh": "爱丽丝 的 性别 是 什么",
            "de": "Was ist Alices Geschlecht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )"
        },
        "question": {
            "en": "people who were born after Alice quit her job",
            "zh": "在 爱丽丝 辞职 后 出生 的 人",
            "de": "Personen, die zur Welt kamen, nachdem Alice ihren Job gekündigt hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who has friends who do not have computer science as a major",
            "zh": "谁 有 朋友 不是 学 计算机科学 的",
            "de": "Wer hat Freunde, die keine Informatik als Hauptfach haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )"
        },
        "question": {
            "en": "people who were born on or after Alice's first day of school",
            "zh": "在 爱丽丝 上学 第一天 或 之后 出生 的 人",
            "de": "Leute, die an oder nach Alices erstem Schultag geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "people who male and friends with Alice",
            "zh": "跟 爱丽丝 做 朋友 的 男士",
            "de": "Menschen, die männlich und mit Alice befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friend of employee whose start date is larger than 2004",
            "zh": "在 2004 年 之后 入职 的 雇员 的 朋友",
            "de": "Freund eines Mitarbeiters, dessen Startdatum größer als 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee was most recently hired",
            "zh": "哪个 员工 是 最近 被 雇用 的",
            "de": "welche Mitarbeiter wurden als letztes eingestellt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students whose end date is before Alice's",
            "zh": "结束 日期 在 爱丽丝 之前 的 学生",
            "de": "Studenten, deren Enddatum vor dem von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what person is friends with employee who ended earlier than 2004",
            "zh": "谁 和 在 2004 年 以前 结束 工作 的 员工 是 朋友",
            "de": "Welche Person ist mit einem Angestellten befreundet, der früher als 2004 ging?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what are the friends like for people who started working before 2004",
            "zh": "在 2004 年 之前 开始 工作 的 人 的 朋友 们 都 是 什么样 的",
            "de": "Wie sind die Freunde für Leute, die vor 2004 angefangen haben zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friend of student who is not student of brown university",
            "zh": "不 在 布朗 大学 上学 的 学生 的 朋友",
            "de": "Freunde von Studenten die nicht an der Brown Universität studieren"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "what are the birthplaces of Alice's friends",
            "zh": "爱丽丝 的 朋友 们 都 出生 在 哪里",
            "de": "Was sind die Geburtsorte von Alices Freunden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find students friends who started before 2004",
            "zh": "找到 在 2004 年 之前 开始 的 学生 朋友 们",
            "de": "finde Freunde von Studenten die vor 2004 begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of employees who started in 2004 or before",
            "zh": "在 2004 年 或者 之前 入职 的 员工 的 出生地 是 哪里",
            "de": "Was ist der Geburtsort von Mitarbeitern, die 2004 oder früher angefangen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students who have a start date that is either 2004 or 2010",
            "zh": "找到 开始 日期 为 2004 年 或 2010 年 的 学生",
            "de": "finde Studenten die entweder 2004 oder 2010 begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "people born after 2004",
            "zh": "在 2004 年 之后 出生 的 人",
            "de": "Menschen, die nach 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee started after Alice quit",
            "zh": "在 爱丽丝 离职 后入 职 的 员工 有 谁",
            "de": "welcher Angestellte hat angefangen nachdem Alice geküdigt hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student started after Alice quit her job",
            "zh": "哪些 学生 是 在 爱丽丝 离职 后 开始 的",
            "de": "welcher Schüler hat angefangen nachdem Alice ihren Job gekündigt hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )"
        },
        "question": {
            "en": "where was Alice born",
            "zh": "爱丽丝 是 在 哪里 出生 的",
            "de": "Wo ist Alice geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who are people who work anywhere but McKinsey friends with",
            "zh": "在 任一 地方 工作 且 不是 麦肯锡 朋友 的 人 是 谁",
            "de": "mit wem sind die Leute befreundet die nicht bei McKinsey gearbeitet haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )"
        },
        "question": {
            "en": "who did Alice work for as a software engineer",
            "zh": "爱丽丝 在 做 软件 工程师 的 时候 老板 是 谁",
            "de": "Für wen hat Alice als Software-Ingenieur gearbeitet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who have friends and did not quit their job in 2004",
            "zh": "没有 在 2004 年 辞职 并且 有 朋友 的 人们",
            "de": "Menschen, die Freunde haben und ihren Job im Jahr 2004 nicht gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "people that are friends of Alice",
            "zh": "跟 爱丽丝 做 朋友 的 人",
            "de": "Personen die mit Alice befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( call SW.getProperty en.person.alice ( string height ) ) ) )"
        },
        "question": {
            "en": "who has same height as Alice",
            "zh": "谁 跟 爱丽丝 一样 高",
            "de": "Wer hat die gleiche Größe wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "birthplace of less than two people",
            "zh": "少于 两个 人 出生 的 出生地",
            "de": "Geburtsort von weniger als zwei Personen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employee starting before 2004",
            "zh": "在 2004 年前 入职 的 员工 的 情感 状态",
            "de": "Beziehungsstatus von Angestellten die vor 2004 angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people who quit after Alice's birthday",
            "zh": "在 爱丽丝 生日 之后 辞职 的 人",
            "de": "Personen die gekündigt haben nach Alice's Geburtstag"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what city do two people share as a birthplace",
            "zh": "哪个 城市 是 这 两个 人 的 共同 出生地",
            "de": "Welche Stadt teilen sich zwei Menschen als Geburtsort?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student ended on Alice's start date",
            "zh": "哪个 学生 在 爱丽丝 开始 那天 结束",
            "de": "Welcher Student ging am ersten Tag von Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students who have an end date the same as employee Alice",
            "zh": "找出 结束 日期 和 雇员 爱丽丝 一样 的 学生 们",
            "de": "Finde Studenten, die das gleiche Enddatum haben wie die Angestellte Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with last days of either 2004 or 2010",
            "zh": "找到 结束 日期 在 2004 年 或者 2010 年 的 员工",
            "de": "Finde Angestellte mit den letzten Tagen in entweder 2004 oder 2010"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find the birthplace of people who are 180 cm tall",
            "zh": "找到 身高 一米 八 的 人 的 出生地点",
            "de": "Finden Sie den Geburtsort von Menschen, die 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "where were students born who started after 2004",
            "zh": "在 2004 年 之后 开始 的 学生 们 在 哪里 出生 ?",
            "de": "Wo wurden Studenten geboren, die nach 2004 begannen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people completed their study before Alice",
            "zh": "人们 在 爱丽丝 之前 完成 了 学业",
            "de": "Leute beendeten ihr Studium vor Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )"
        },
        "question": {
            "en": "who is taller than Alice",
            "zh": "谁 比 爱丽丝 高 ？",
            "de": "Wer ist größer als Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "friends of friends of all singles",
            "zh": "所有 单身 的 人 的 朋友 的 朋友",
            "de": "Freunde von Freunden aller Singles"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what are the relationship statuses of student who did not graduate in 2004",
            "zh": "没有 在 2004 年 毕业 的 学生 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus von Studierenden, die ihren Abschluss im Jahr 2004 nicht gemacht haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "people 180 cm tall",
            "zh": "身高 一米 八 的 人",
            "de": "Menschen 180 cm groß"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ) )"
        },
        "question": {
            "en": "what is the relationship status of a friend of male",
            "zh": "什么 是 一个 男性 的 朋友 的 关系 状况 ？",
            "de": "Was ist der Beziehungsstatus eines Freundes des Mannes?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "gender of all employees who started in 2004 or later",
            "zh": "所有 在 2004 年 以后 开始 的 员工 的 性别",
            "de": "Geschlecht aller Arbeitnehmer, die 2004 oder später angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friends of people who joined their studies before 2005",
            "zh": "在 2005 年 之前 加入 学习 的 人 的 朋友 们",
            "de": "Freunde von Personen, die ihr Studium vor 2005 angefangen haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find students with a start date no later than 2004 and their friends",
            "zh": "找到 开始 日期 不晚 于 2004 年 的 学生 和 他们 的 朋友",
            "de": "Finde Studenten, welche nicht später als 2004 angefangen haben, und ihre Freunde."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who shares start date with student Alice",
            "zh": "跟 爱丽丝 一起 入学 的 学生",
            "de": "Student, der das gleiche Anfangsdatum wie die Studentin Alice hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "people that have at least 2 genders",
            "zh": "至少 有 两种 性别 的 人",
            "de": "Personen mit mindestens 2 Geschlechtern"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "was the student who graduated before 2004 a male or a female",
            "zh": "那个 在 2004 年 之前 毕业 的 学生 是 一个 男生 还是 一个 女生",
            "de": "War der Student, der vor 2004 seinen Abschluss machte, männlich oder weiblich?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "find people who have the same gender as Alice and are 180 cm tall",
            "zh": "找到 和 爱丽丝 有 相同 性别 并且 身高 一米 八 的 人",
            "de": "finde Menschen, die das gleiche Geschlecht wie Alice haben und 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string !type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "field of study of people who are 180 cm tall",
            "zh": "180 厘米 高 的 人 的 研究 领域",
            "de": "Studienbereich von 180 cm großen Menschen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "people with only one birthplace",
            "zh": "只有 一个 出生地 的 人",
            "de": "Menschen mit nur einem Geburtsort"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees whom have the same end date as Alice's birthday",
            "zh": "找到 结束 日期 跟 爱丽丝 生日 是 同一天 的 员工",
            "de": "Finde Angestellte, deren Enddatum Alices Geburtstag entspricht."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find people with friends that went to school but not brown university",
            "zh": "找到 和 没有 去 布朗 大学 上学 的 人 是 朋友 的 人们",
            "de": "Finde Personen mit Freunden, die zur Schule gingen, aber nicht zur Brown University."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ) )"
        },
        "question": {
            "en": "find friends of people who are logged in",
            "zh": "找到 登录 了 的 人 的 朋友",
            "de": "Finde Freunde von Personen, die eingeloggt sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee started on the same day Alice quit her job",
            "zh": "哪个 员工 在 爱丽丝 辞职 的 同一天 开始 工作",
            "de": "Welcher Angestellte fing am gleichen Tag an, an dem Alice ihren Job kündigte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )"
        },
        "question": {
            "en": "Alice's graduation date in computer science",
            "zh": "爱丽丝 在 计算机科学 毕业 的 那天",
            "de": "Alice's Abschlussdatum in Informatik"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student has an end date after Alice's birthdate",
            "zh": "哪个 学生 的 结束 日期 是 在 爱丽丝 生日 之后 的",
            "de": "welcher Schüler hat ein Enddatum nach Alice's Geburtsdatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student quit on Alice's birthday",
            "zh": "哪个 学生 在 爱丽丝 生日 那天 辞职 了",
            "de": "welcher Schüler hat an Alice's Geburtstag aufgehört."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "find the gender of people born in 2004",
            "zh": "找到 2004 年 出生 的 人 的 性别",
            "de": "Finden Sie das Geschlecht der Menschen, die im Jahr 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "who is a person that is a male and whose height is 180 cm",
            "zh": "谁 是 男性 ， 身高 180 厘米",
            "de": "Welche männliche Person ist 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find the students that graduated before 2004",
            "zh": "找到 2004 年 之前 毕业 的 学生",
            "de": "Finden Sie die Studenten, die vor 2004 ihren Abschluss gemacht haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students whose last day was after employee Alice's",
            "zh": "找出 最后 一天 是 晚于 雇员 爱丽丝 最后 一天 的 学生 们",
            "de": "Finde Schüler deren letzter Tag nach dem der Angestellten Alice war"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is not friends with a student who's end date is not 2004",
            "zh": "谁 跟 结束 （ 学业 ） 时间 不是 在 2004 年 的 学生 不是 朋友 ？",
            "de": "Wer ist nicht mit einem Studenten befreundet, dessen Enddatum nicht 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what person is friends with the employee that quit before 2004",
            "zh": "谁 和 这个 在 2004 年 之前 辞职 的 员工 是 朋友 ？",
            "de": "Welche Person ist mit dem Mitarbeiter befreundet, der vor 2004 gekündigt hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who completed in or after 2004",
            "zh": "2004 年 或 之后 毕业 的 学生",
            "de": "Studenten, die in oder nach 2004 abgeschlossen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who stopped working the day Alice was born",
            "zh": "谁 在 爱丽丝 的 出生 日 那天 停止 了 工作 ？",
            "de": "Wer hörte an dem Tag auf zu arbeiten, als Alice geboren wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of student whose start date is not after 2004",
            "zh": "在 2004 年前 开始 （ 学业 ） 的 学生 的 性别",
            "de": "Geschlecht des Studenten, dessen Startdatum nicht nach 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose end date is start date of employee Alice",
            "zh": "结束 日期 为 员工 Alice 开始 日期 的 员工",
            "de": "Ein Angestellter, dessen Enddatum das Startdatum der Angestellten Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )"
        },
        "question": {
            "en": "Alice quit her job in 2004 when did she start it",
            "zh": "爱丽丝 在 2004 年 离职 ， 她 是 什么 时候 入职 的 ？",
            "de": "Alice kündigte ihren Job 2004, wann fing sie an?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "in which university does Alice study",
            "zh": "爱丽丝 在 哪 所 大学 学习",
            "de": "An welcher Universität studiert Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "who are Alice's friends' friends",
            "zh": "谁 是 爱丽丝 的 朋友 的 朋友",
            "de": "Wer sind die Freunde der Freunde von Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of students who are not brown university students",
            "zh": "非 brown 大学 学生 的 关系 状况 如何",
            "de": "Was ist der Beziehungsstatus von Studenten, die keine Studenten der Brown Universität sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started working on or before the day Alice as born",
            "zh": "在 爱丽丝 出生 的 那 一天 或 之前 开始 工作 的 员工",
            "de": "Mitarbeiter, die vor oder an dem Tag angefangen haben, an dem Alice geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have an end date earlier than 2004 or 2010",
            "zh": "哪些 学生 的 结束 日期 是 早于 2004 年 或者 2010 年",
            "de": "Welche Schüler haben ein früheres Enddatum als 2004 oder 2010?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find one person birthplaces",
            "zh": "找 一个 人 的 出生地",
            "de": "Find die Geburtsorte einer Person"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "people who have friends that were born in 2004",
            "zh": "有 朋友 在 2004 年 出生 的 人",
            "de": "Menschen, die Freunde haben, die im Jahr 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find friends of employees whose last day is before 2004",
            "zh": "找到 最后 一天 在 2004 年 之前 的 员工 的 朋友",
            "de": "Finde Freunde von Angestellten, deren letzter Tag vor 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "what is the relationship status of Alice or Bob",
            "zh": "Alice 或 Bob 的 关系 状态 是 什么",
            "de": "Wie ist der Beziehungsstatus von Alice oder Bob?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the gender of that person",
            "zh": "那个 人 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht dieser Person?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friends of people who joined their jobs before 2005",
            "zh": "在 2005 年 之前 加入 工作 的 人 的 朋友",
            "de": "Freunde von Leuten, die mit ihren Jobs vor 2005 anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "who is friends with a person whose height is 180 cm",
            "zh": "谁 是 一个 身高 180 厘米 的 人 的 朋友",
            "de": "Wer ist mit einer Person befreundet die 180 cm groß ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "people that are taller than 180 cm",
            "zh": "高于 180 厘米 的 人",
            "de": "Personen, die größer als 180 cm sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of people who quit their job after 2003",
            "zh": "2003 年 后 离职 的 人 的 情感 状态",
            "de": "Beziehungsstatus von Personen, die ihren Job nach 2003 gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employees who start before 2004",
            "zh": "2004 年前 开始 （ 工作 ） 的 员工 的 婚姻 状态",
            "de": "Wie ist der Beziehungsstatus von Angestellten die vor 2004 anfingen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "what city in New York is the persons birthplace",
            "zh": "纽约 哪个 城市 是 人口 出生地",
            "de": "Welche Stadt in New York ist der Geburtsort der Person?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee started no later than 2004 or 2010",
            "zh": "哪个 员工 的 开始 （ 工作 ） 日期 不晚 于 2004 年 或 不 晚于 2010 年",
            "de": "Welche Angestellten starteten nicht später als 2004 oder 2010?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) )"
        },
        "question": {
            "en": "what person was born on Alice's graduation date",
            "zh": "谁 是 在 爱丽丝 毕业 的 那天 出生 的",
            "de": "Welche Person wurde am Abschlusstag von Alice geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students are not majoring in computer science",
            "zh": "哪些 学生 不 主修 计算机科学 ？",
            "de": "Welche Studierenden studieren nicht Informatik?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students graduate no sooner than Alice's graduation day",
            "zh": "哪个 学生 毕业 于 爱丽丝 毕业典礼 那天",
            "de": "Welche Studenten haben ihren Abschluss nicht vor Alice's Abschlusstag gemacht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of people that started school in or after 2004",
            "zh": "那些 在 2004 或 以后 入学 的 人 的 情感 状态 如何",
            "de": "Wie ist der Beziehungsstatus der Personen die in oder nach 2004 die Schule anfingen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )"
        },
        "question": {
            "en": "people born on or after the day Alice stopped attending school",
            "zh": "在 爱丽丝 辍学 那天 或 以后 出生 的 人",
            "de": "Menschen, die an oder nach dem Tag geboren wurden, an dem Alice nicht mehr zur Schule ging"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "name the city where a student was born who is not studying computer science",
            "zh": "说出 非 计算机科学 专业 学生 出生 的 城市",
            "de": "Nenne die Stadt in der ein Student geboren wurde der nicht Informatik studiert hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student has no more than two fields of study",
            "zh": "什么 学生 没有 多于 两个 的 学习 领域 ？",
            "de": "Welcher Student belegte nicht mehr als Zwei Studienfächer?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is relationship status of employees with last day other than 2004",
            "zh": "最后 一天 不是 2004 年 的 雇员 们 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus der Angestellten deren letzter Tag nicht in 2004 war?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) )"
        },
        "question": {
            "en": "person who is 180 or 200cm tall",
            "zh": "身高 一米 八 或者 两米 的 人",
            "de": "Person, die 180 oder 200 cm groß ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what's the relationship status of the employee who does not work for McKinsey",
            "zh": "不 为 麦肯锡 工作 的 雇员 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus des Mitarbeiters, der nicht für McKinsey arbeitet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ) )"
        },
        "question": {
            "en": "people that have friends that are currently online",
            "zh": "有 朋友 目前 在线 的 人",
            "de": "Leute mit Freunden, die gerade online sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who joined after Alice left",
            "zh": "爱丽丝 离开 后 加入 的 学生",
            "de": "Student, der beigetreten ist, nachdem Alice gegangen ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of a student who does not study computer science",
            "zh": "不 学习 计算机科学 的 学生 的 性别",
            "de": "Geschlecht eines Studenten, der nicht Informatik studiert."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee has the same start date as Alice",
            "zh": "哪个 员工 是 跟 爱丽丝 在 同一天 开始 的 ？",
            "de": "Welcher Angestellte hat das gleiche Startdatum wie Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find student whose first day is before Alice's last day",
            "zh": "找到 在 爱丽丝 最后 一天 前 开始 的 学生",
            "de": "Finde einen Schüler, dessen erster Tag vor Alices letztem Tag liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "genders of people whom are single",
            "zh": "单身 人士 的 性别",
            "de": "Geschlechter von Menschen, die Single sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of at most two people",
            "zh": "哪个 城市 是 最 多 两人 的 出生地",
            "de": "welche Stadt ist der Geburtsort von höchstens zwei Menschen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students that will start before 2004",
            "zh": "将 于 2004 年 之前 开始 的 学生",
            "de": "Studenten, die vor 2004 beginnen werden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find student who attended the fewest universities",
            "zh": "找到 上 过 最少 间 大学 的 学生",
            "de": "Finde Studenten, die die wenigsten Universitäten besucht haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee starting before or when Alice ends",
            "zh": "在 爱丽丝 结束 的 时候 或 之前 开始 的 员工",
            "de": "Welcher Angestellte startete vor oder als Alice ging?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student had started working after Alice quitted",
            "zh": "在 爱丽丝 辞职 后 开始 工作 的 学生 是 哪个 ？",
            "de": "welcher Student hatte angefangen zu arbeiten, nachdem Alice aufgehört hatte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ) )"
        },
        "question": {
            "en": "find friends of males",
            "zh": "找到 男性 的 朋友",
            "de": "Finde Freunde von Männern"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "who are the friends of person who is 180 cm tall",
            "zh": "谁 是 180 厘米 高 的 人 的 朋友",
            "de": "Wer sind die Freunde der Person, die 180 cm groß ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who began working by the time Alice started working",
            "zh": "在 爱丽丝 开始 工作 的 时候 已经 开始 工作 了 的 人",
            "de": "Angestellte, die anfingen zu arbeiten, als Alice anfing zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is before birth date of Alice",
            "zh": "开始 日期 在 爱丽丝 出生日期 之前 的 学生",
            "de": "Student, dessen Anfangsdatum vor dem Geburtsdatum von Alice liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "genders of students not at brown",
            "zh": "非 布朗 大学 的 学生 们 的 性别",
            "de": "Geschlecht der Studenten, die nicht an der Brown University sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.company ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the company's number",
            "zh": "公司 的 电话号码 是 什么",
            "de": "Wie lautet die Nummer des Unternehmens?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is not after birth date of Alice",
            "zh": "开始 日期 不晚 于 爱丽丝 生日 的 学生",
            "de": "Student, dessen Startdatum nicht nach dem Geburtsdatum von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employees whose end date is not 2004",
            "zh": "结束 日期 不是 2004 年 的 员工 的 关系 状态",
            "de": "Beziehungsstatus von Mitarbeitern, deren Enddatum nicht 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find the people who are friends with students whose end date is farther than 2004",
            "zh": "找到 结束 日期 在 2004 年 以后 的 学生 们 的 朋友 们",
            "de": "Finde die Personen, die mit Studenten befreundet sind, deren Abschlussdatum später als 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ) )"
        },
        "question": {
            "en": "what is the gender of the person who is logged in",
            "zh": "登陆 的 人 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht der Person, die angemeldet ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what cities are the birthplace of students who are not from brown university",
            "zh": "没 来自 布朗 大学 的 那些 学生 的 出生地 的 城市 是 哪里 ？",
            "de": "In welchen Städten wurden Studenten geboren, die nicht an der Brown Universität sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students went to the smallest amount of universities",
            "zh": "哪些 学生 去 了 最 少数 目的 大学 ？",
            "de": "Welche Studenten waren an der kleinsten Anzahl an Universitäten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who started working up until Alice started working",
            "zh": "谁 工作 到 直到 爱丽丝 开始 工作 才 结束",
            "de": "Wer fing an zu arbeiten bis Alice anfing zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of students that started after 2004",
            "zh": "2004 年 以后 开始 的 学生 的 性别",
            "de": "Geschlecht der Studierenden, die nach 2004 begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student started earlier than Alice's birthdate",
            "zh": "什么 学生 比 爱丽丝 的 出生日期 早 开始",
            "de": "Welcher Student startete vor Alice's Geburtstag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees started after Alice's last day of work",
            "zh": "哪些 员工 是 在 爱丽丝 最后 一天 工作 之后 开始 的",
            "de": "Welche Mitarbeiter haben nach Alices letztem Arbeitstag angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students attending brown or UCLA",
            "zh": "找出 在 布朗 大学 或者 UCLA 上学 的 学生 们",
            "de": "Finde Studenten, die die Brown Universität oder UCLA besuchen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who finish the latest",
            "zh": "最 晚 完成 的 学生",
            "de": "Studenten, die als letztes fertig werden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "relationship status of two people",
            "zh": "两个 人 的 情感 状态",
            "de": "Beziehungsstatus von zwei Personen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "people born before 2010",
            "zh": "在 2010 年前 出生 的 人们",
            "de": "Personen, die vor 2010 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )"
        },
        "question": {
            "en": "which employee has the same birthplace as Alice",
            "zh": "哪个 员工 与 爱丽丝 有 相同 的 出生地",
            "de": "Welcher Angestellte hat den gleichen Geburtsort wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string min ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "who has the fewest number of friends",
            "zh": "谁 拥有 最少 的 朋友",
            "de": "Wer hat die geringste Anzahl an Freunden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "which people are not friends of Alice",
            "zh": "哪些 人 不是 爱丽丝 的 朋友",
            "de": "Welche Personen sind nicht mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friend of student whose end date is at most 2004",
            "zh": "结束 日期 最多 是 2004 年 的 学生 的 朋友",
            "de": "Freund eines Studenten, dessen Enddatum höchstens 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started their job before Alice",
            "zh": "在 爱丽丝 之前 开始 工作 的 员工",
            "de": "Angestellte, die ihre Arbeit vor Alice begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is before end date of employee Alice",
            "zh": "开始 日期 是 在 雇员 艾丽丝 结束 日起 之前 的 学生",
            "de": "Student, dessen Anfangsdatum vor dem Enddatum der Angestellten Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace city of a student whose end date was not in 2004",
            "zh": "结束 日期 不是 在 2004 年 的 学生 的 出生 城市 是 什么 ？",
            "de": "Was ist die Geburtsstadt eines Studenten, dessen Enddatum nicht im Jahr 2004 lag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees whose last day was in or before 2004",
            "zh": "最后 一天 在 2004 年 或 之前 的 员工",
            "de": "Mitarbeiter, deren letzter Tag in oder vor 2004 lag"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "whose end date is after 2004",
            "zh": "谁 的 结束 日 是 在 2004 之后 ？",
            "de": "Wessen Enddatum ist nach 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the gender of max two people",
            "zh": "最 多 两个 人 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht von maximal zwei Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "find birthplace cities of persons born in 2004",
            "zh": "找到 2004 年 出生 的 人 的 出生 城市",
            "de": "Finde die Geburtsorte von Personen, die 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find people who have friends that are 180 cm tall",
            "zh": "找到 有 180 厘米 高 的 朋友 的 人",
            "de": "finde Menschen, die Freunde haben, die 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "person that stopped working before Alice stopped working",
            "zh": "在 爱丽丝 停止 工作 之前 停止 工作 的 人",
            "de": "Person, die aufgehört hat zu arbeiten, bevor Alice aufgehört hat zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people who joined work before Alice",
            "zh": "在 爱丽丝 之前 参加 工作 的 人",
            "de": "Leute, die mit der Arbeit vor Alice anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose end date is same as that of student Alice",
            "zh": "结束 时间 和 学生 艾丽丝 的 结束 时间 相同 的 雇员 。",
            "de": "Mitarbeiter dessen Enddatum der gleiche ist wie der von Studentin Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "find a friend of Alice or Bob",
            "zh": "找到 一个 爱丽丝 或者 鲍勃 的 朋友",
            "de": "Finde einen Freund von Alice oder Bob"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of students finishing before 2004",
            "zh": "在 2004 年 之前 毕业 的 学生 的 关系 状态 。",
            "de": "Beziehungsstatus von Studierenden, die vor 2004 abgeschlossen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student has same end date as that of Alice",
            "zh": "哪个 学生 跟 爱丽丝 是 在 同一天 结束 （ 学业 ） 的 ？",
            "de": "Welcher Student hat das gleiche Enddatum wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "what single person is 180 cm tall",
            "zh": "哪个 单身 的 人 是 180 公分 高 的 ？",
            "de": "welche einzelne Person ist 180 cm groß"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees not with McKinsey",
            "zh": "找出 不 和 McKinsey 一起 的 雇员 。",
            "de": "finde Angestellte die nicht bei McKinsey sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )"
        },
        "question": {
            "en": "people who are shorter than Alice",
            "zh": "比 爱丽丝 矮 的 人 。",
            "de": "Leute, die kleiner als Alice sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees left their jobs either in or after 2004 or 2010",
            "zh": "哪些 员工 是 在 2004 年 或 以后 ， 或 2010 年 或 以后 离职 的 ？",
            "de": "Welche Mitarbeiter haben ihren Arbeitsplatz in oder nach 2004 oder 2010 verlassen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what person is friends with a student whose end date is not 2004",
            "zh": "谁 是 不 在 2004 年 结束 （ 学业 ） 的 学生 的 朋友 ？",
            "de": "Welche Person ist mit einem Studenten befreundet dessen Endtag nicht in 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of employees who started no earlier than 2004",
            "zh": "那些 开始 时间 不早 于 2004 年 的 雇员 的 关系 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus von Mitarbeitern, die frühestens 2004 begonnen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )"
        },
        "question": {
            "en": "who was born after Alice left",
            "zh": "谁 在 爱丽丝 离开 后 出生 ？",
            "de": "Wer wurde geboren nachdem Alice ging?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find me student whose end date is after student Alice's",
            "zh": "给 我 找到 结束 日 在 学生 阿丽丝 之后 的 那个 学生 吧 ？",
            "de": "Finde den Sudenten, dessen Enddatum nach dem der Studentin Alice liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who finish before 2010",
            "zh": "在 ２ ０ １ ０ 年 之前 毕业 的 学生 。",
            "de": "Studenten, die vor 2010 fertig sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "relationship status that is relationship status of one person",
            "zh": "关系 状态 ， 即 一个 人 的 关系 状态",
            "de": "Beziehungsstatus, der der Beziehungsstatus einer Person ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have a field of study that is not computer science",
            "zh": "哪些 学生 的 学习 领域 不是 电脑 科学 的 ？",
            "de": "Welche Studierenden haben ein Studienfach, das nicht Informatik ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that started school in 2004 or 2010",
            "zh": "那些 在 2004 年 或 2010 年 开始 上学 的 人",
            "de": "Menschen, die 2004 oder 2010 in die Schule gekommen sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people who joined the institution with Alice",
            "zh": "与 Alice 一起 加入 该 机构 的 人",
            "de": "Leute, die sich der Institution mit Alice angeschlossen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "student's birthplace who started on or after 2004",
            "zh": "在 ２ ０ ０ ４ 年 或 之后 开始 的 学生 的 出生地 。",
            "de": "Geburtsort der Studenten die 2004 oder später angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who started after Alice quit her job",
            "zh": "在 爱丽丝 辞职 后 开始 工作 的 学生 。",
            "de": "Studenten, die anfingen, nachdem Alice ihren Job gekündigt hatte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )"
        },
        "question": {
            "en": "what person is at least the same height as that of Alice",
            "zh": "哪个 人 至少 跟 爱丽丝 是 一样 高 的 ？",
            "de": "Welche Person ist mindestens so groß wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )"
        },
        "question": {
            "en": "who is 180 cm tall and goes to brown university",
            "zh": "谁 身高 180 公分 并且 是 在 布朗 大学 学习 的 ？",
            "de": "Wer ist 180 cm groß und geht zur brown university?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friend of student whose field of study is not computer science",
            "zh": "学习 领域 不是 计算机科学 的 学生 的 朋友",
            "de": "Freund eines Studenten, dessen Studienfach nicht Informatik ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have an end date that is later than that of student Alice",
            "zh": "什么 雇员 的 结束 日期 比 学生 爱丽丝 的 结束 日期 晚 ？",
            "de": "Welche Mitarbeiter haben ein späteres Enddatum als die Schülerin Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find student not attending brown university",
            "zh": "找出 没有 在 布朗 大学 上学 的 学生 。",
            "de": "finde Studenten die nicht an die Brown Universität gehen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who is friends with the person who quit before 2004",
            "zh": "谁 和 那个 在 2004 年 之前 辞职 的 人 是 朋友 ？",
            "de": "Wer ist mit der Person befreundet, die vor 2004 gekündigt hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students starting on or after Alice's birthday",
            "zh": "找到 在 爱丽丝 生日 那天 或 之后 开始 的 学生 。",
            "de": "Finde Studenten, die am oder nach Alices Geburtstag anfangen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that stopped working in or after 2004 or in or after 2010",
            "zh": "在 2004 年 或者 之后 或者 2010 年 或者 之后 停止 工作 的 人",
            "de": "Menschen, die ihre Arbeit in oder nach 2004 oder in oder nach 2010 eingestellt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students that have the largest number of field studies",
            "zh": "找到 有 最 多 研究 领域 的 学生",
            "de": "Suche nach Studenten mit der größten Anzahl von Feldstudien"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "how many people have the same employer as Alice",
            "zh": "有 多少 人 和 爱丽丝 有 同样 的 雇主",
            "de": "Wie viele Leute haben den gleichen Arbeitgeber wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the employee's relationship status who started after 2004",
            "zh": "在 2004 年 之后 开始 上班 的 员工 的 关系 状态 是 什么",
            "de": "Was ist der Beziehungsstatus des Angestellten, der nach 2004 anfing?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is gender of employees who started before 2004",
            "zh": "在 2004 年 之前 开始 上班 的 员工 的 性别 是 什么",
            "de": "Was ist das Geschlecht der Arbeitnehmer, die vor 2004 angefangen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee started in 2004",
            "zh": "哪个 雇员 在 2004 年 开始 的",
            "de": "welcher Mitarbeiter hat im Jahr 2004 angefangen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )"
        },
        "question": {
            "en": "what university does Alice study computer science at",
            "zh": "爱丽丝 在 哪 所 大学 学习 计算机科学",
            "de": "An welcher Universität studiert Alice Informatik?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose end date is start date of student Alice",
            "zh": "结束 日期 是 学生 爱丽丝 的 开始 日期 的 员工",
            "de": "Mitarbeiter, dessen Enddatum das Startdatum der Schülerin Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who does not graduate by 2004 or 2010",
            "zh": "没有 在 2004 年前 或 2010 年前 毕业 的 学生",
            "de": "Student, der bis 2004 oder 2010 keinen Abschluss hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find all the students that started after Alice was hired",
            "zh": "找到 所有 在 爱丽丝 被 雇佣 之后 开始 的 学生",
            "de": "Finde alle Schüler, die nach Alice's Einstellung angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "what gender is not claimed by Alice",
            "zh": "爱丽丝 自称 不 属于 何种 性别",
            "de": "Welches Geschlecht ist nicht das von Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose start date is before birth date of Alice",
            "zh": "在 爱丽丝 生日 前 开始 的 雇员",
            "de": "Mitarbeiter, dessen Startdatum vor dem Geburtsdatum von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees who have the greatest amount of job titles",
            "zh": "找到 有 最 多 工作 头衔 的 雇员",
            "de": "Finden Sie Mitarbeiter mit den meisten Berufsbezeichnungen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friend of employee whose end date is not after 2004",
            "zh": "在 2004 年前 结束 的 雇员 的 朋友",
            "de": "Freund des Angestellten, dessen Enddatum nicht nach 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose end date that is around Alice's start date",
            "zh": "在 爱丽丝 开始 日期 前后 结束 的 雇员",
            "de": "Mitarbeiter, dessen Enddatum um das Startdatum von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "whose birthdate is 2004 that is friends with Alice",
            "zh": "和 爱丽丝 是 朋友 的 人 谁 的 生日 在 2004 年",
            "de": "Wessen Geburtstag ist in 2004 und mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friend of employee whose employer is not McKinsey",
            "zh": "雇主 不是 麦肯锡 的 雇员 的 朋友",
            "de": "Freund eines Angestellten, dessen Arbeitgeber nicht McKinsey ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "what male has a relationship status of single",
            "zh": "哪个 男人 的 感情 状态 是 单身 ？",
            "de": "Welcher Mann hat den Beziehungsstatus Single?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what gender has more than two people",
            "zh": "哪个 性别 有 多于 两个 人",
            "de": "Welches Geschlecht haben mehr als zwei Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "find Alice's friend who is 180 cm tall",
            "zh": "找到 爱丽丝 身高 一米 八 的 朋友",
            "de": "Finde Alices Freund der 180 cm groß ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "find the gender of Alice's friends",
            "zh": "找出 艾丽丝 的 朋友 们 的 性别",
            "de": "Finde das Geschlecht von Alices Freunden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose start date is after birth date of Alice",
            "zh": "开始 日期 在 爱丽丝 生日 之后 的 员工",
            "de": "Mitarbeiter, dessen Startdatum nach dem Geburtsdatum von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string !type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find the universities of people with a height of 180 cm",
            "zh": "找到 180 厘米 高 的 人 的 大学",
            "de": "Finde die Universitäten von Leuten mit einer Größe von 180 cm"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "single people who are 180 cm tall",
            "zh": "180 厘米 高 的 单身 人士",
            "de": "Welche Single Person ist 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "single person born in New York",
            "zh": "在 纽约 出生 的 单身 人士",
            "de": "Welche Single Person ist in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )"
        },
        "question": {
            "en": "which of McKinsey employees is 180 cm tall",
            "zh": "麦肯锡 员工 中 哪一位 身高 180 厘米",
            "de": "Welcher Angestellte von McKinsey ist 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "employee's city of birth who was born at or before 2004",
            "zh": "在 2004 年 或 之前 出生 的 员工 的 出生 城市",
            "de": "Geburtsstadt des Angestellten, der 2004 oder früher geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "what person is friends with Alice",
            "zh": "谁 是 爱丽丝 的 朋友",
            "de": "Welche Person ist mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have an end date that is equal to or greater than the end date of employee Alice",
            "zh": "在 爱丽丝 员工 离职 或者 之后 离职 的 学生",
            "de": "Welche Studenten haben ein Abschlussdatum entsprechend oder später als das Abschlussdatum von der Angestellten Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string !type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find me typical fields of study for people who are 180 cm tall",
            "zh": "给 我 找出 身高 180 厘米 的 人 的 普遍 学习 领域",
            "de": "finde mir typische studienfelder für menschen die 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )"
        },
        "question": {
            "en": "people who are born in New York or Beijing",
            "zh": "在 纽约 或 北京 出生 的 人",
            "de": "Menschen, die in New York oder Peking geboren sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students are leaving prior to the date Alice starts",
            "zh": "哪些 学生 在 Alice 开始 之前 离开",
            "de": "Welche Studenten gehen bevor Alice anfängt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that go to or went to the same university as Alice",
            "zh": "跟 爱丽丝 在 同一个 大学 学习 或 学习 过 的 人",
            "de": "Personen, die zur gleichen Universität wie Alice gehen oder gegangen sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "who was born in New York and is 180 cm tall",
            "zh": "谁 是 在 纽约 出生 而且 身高 是 180 厘米 ？",
            "de": "Wer ist in New York geboren und 180cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have a start date that is after the start date of employee Alice",
            "zh": "哪些 学生 在 员工 爱丽丝 开始 之后 开始 的 ？",
            "de": "Welche Schüler haben ein Startdatum, das nach dem Startdatum von Mitarbeiter Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "list the birthplaces of people who quit their jobs before 2004",
            "zh": "列出 在 2004 年 之前 离职 的 人 的 出生地",
            "de": "Liste die Geburtsorte von Personen, die vor 2004 ihren Job gekündigt haben, auf"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started on or after Alice's birthday",
            "zh": "在 爱丽丝 生日 时 或者 之后 入职 的 员工",
            "de": "Mitarbeiter, die an oder nach Alices Geburtstag angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "city that a single person was born in",
            "zh": "一个 单身 的 人 出生 的 城市",
            "de": "Stadt, in der eine einzige Person geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees whose last day was after Alice started school",
            "zh": "在 爱丽丝 入学 后 离职 的 员工",
            "de": "Mitarbeiter, deren letzter Tag nach dem Schulanfang von Alice war."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who has been here longer than Alice",
            "zh": "在 这 比 爱丽丝 时间 长 的 员工",
            "de": "Angestellter, der länger hier ist als Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ) )"
        },
        "question": {
            "en": "who is friends with a person who gender is male",
            "zh": "谁 和 一个 男性 的 人 是 朋友",
            "de": "Wer ist mit einer Person befreundet, deren Geschlecht männlich ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who left when Alice started as a student",
            "zh": "在 爱丽丝 入学 时 离开 的 学生",
            "de": "Studenten, die gegangen sind, als Alice als Studentin angefangen hat."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me an employee whose end date is equal to or earlier than the birthdate of student Alice",
            "zh": "在 爱丽丝 同学 生日 时 或者 之前 离职 的 员工",
            "de": "Finde einen Angestellten dessen Enddatum gleich oder früher ist als das Geburtsdatum der Schülerin Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )"
        },
        "question": {
            "en": "who has two relationship status",
            "zh": "谁 有 两段 感情 状态",
            "de": "Wer hat zwei Beziehungsstatus"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who started on the end date of Alice",
            "zh": "在 爱丽丝 离职 时入 职 的 员工",
            "de": "Mitarbeiter, der am Enddatum von Alice begann"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "find people who have a relationship status of single who are also friends with Alice",
            "zh": "找到 那些 单身 且 和 爱丽丝 有 朋友 关系 的 人",
            "de": "Finde Menschen mit dem Beziehungsstatus Single, die auch mit Alice befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people who quit their job on the same day or after Alice got hired",
            "zh": "在 爱丽丝 被 雇用 的 同一天 或 之后 辞职 的 人",
            "de": "Menschen, die am selben Tag oder nach der Einstellung von Alice ihren Job gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "cities where Alice was not born",
            "zh": "不是 爱丽丝 出生 的 城市",
            "de": "Städte, in denen Alice nicht geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees that have a start date that is earlier than the birthdate of Alice",
            "zh": "找到 在 爱丽丝 出生 之前 入职 的 人",
            "de": "Finden Sie Mitarbeiter, deren Startdatum vor dem Geburtsdatum von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string university ) ) )"
        },
        "question": {
            "en": "find out if Alice attended brown university",
            "zh": "找出 爱丽丝 是否 上 过 布朗 大学",
            "de": "Finde heraus, ob Alice die Brown University besucht hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who left before Alice was born",
            "zh": "在 爱丽丝 出生 前 离开 的 员工",
            "de": "Angestellter, der ging bevor Alice geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find me the relationship status of the person that does not work for McKinsey",
            "zh": "给 我 找出 不是 为 McKinsey 工作 的 人 的 感情 状态",
            "de": "Finden Sie den Beziehungsstatus der Person, die nicht für McKinsey arbeitet"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of students that don't go to brown",
            "zh": "不去 布朗 的 学生 的 出生地 是 什么",
            "de": "was ist der Geburtsort der Schüler, die nicht zur Brown gehen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of employees whose last day was no earlier than 2004",
            "zh": "最后 一天 不早 于 2004 年 的 职员 的 性别 是 什么",
            "de": "Was ist das Geschlecht der Arbeitnehmer, deren letzter Tag nicht früher als 2004 war"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "who was born in two or more places",
            "zh": "谁 出生 在 两个 或 更 多 的 地方",
            "de": "wer wurde in zwei oder mehr Orten geboren"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people that are friends with someone that stopped working in or after 2004",
            "zh": "与 2004 年 后 停止 工作 的 某个 人 的 是 朋友 的 人",
            "de": "Menschen, die mit jemandem befreundet sind, der in oder nach 2004 aufgehört hat zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what people are friends with students whose end date is before 2004",
            "zh": "什么 人 跟 （ 学习 ） 结束 日 是 2004 年 以前 的 学生 是 朋友 的 ？",
            "de": "Welche Personen sind mit Studenten befreundet deren Endtermin vor 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "the gender of an employee starting before or during 2004",
            "zh": "2004 年 或 以前 开始 （ 工作 ） 的 员工 的 性别",
            "de": "das Geschlecht eines Arbeitnehmers, der vor oder während des Jahres 2004 begann."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find people who are 180 cm tall and quit in 2004",
            "zh": "找到 2004 年 离职 的 并且 身高 在 180 公分 的 人 。",
            "de": "Welche Person ist 180 cm groß und kündigte in 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees who have a job title that is neither software engineer or program manager",
            "zh": "找到 工作 头衔 既 不是 软件 工程师 也 不是 项目 主管 的 员工",
            "de": "Finden Sie Mitarbeiter mit einer Berufsbezeichnung, die weder Softwareentwickler noch Programmmanager ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees last day was before the day Alice started school",
            "zh": "哪些 雇员 的 最后 一天 是 在 阿丽丝 开始 学校 的 那 一天 之前 ？",
            "de": "Welche Angestellten hatten ihren letzten Tag bevor Alice's Schule startete?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )"
        },
        "question": {
            "en": "find when students named Alice started attending brown university",
            "zh": "查出 名叫 爱丽丝 的 学生 是 什么 时候 在 布朗 大学 上学 的 ？",
            "de": "Finde wann Studenten namens Alice angefangen haben zur Brown University zu gehen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who have the same job title as Alice",
            "zh": "跟 爱丽丝 有 一样 工作 头衔 的 员工",
            "de": "Mitarbeiter, die die gleiche Berufsbezeichnung wie Alice haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of an employee who didn't start in 2004",
            "zh": "一个 没有 在 2004 年 开始 上班 的 员工 的 关系 状态 是 什么",
            "de": "Wie ist der Beziehungsstatus eines Mitarbeiters, der nicht im Jahr 2004 begonnen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students attended the fewest universities",
            "zh": "哪个 学生 上 过 最少 的 大学 ？",
            "de": "Welche Studenten besuchten die wenigsten Universitäten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who joined before 2004",
            "zh": "2004 年 之前 加入 的 员工",
            "de": "Mitarbeiter, die vor 2004 beigetreten sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )"
        },
        "question": {
            "en": "people who were born before Alice quit her job",
            "zh": "在 爱丽丝 辞职 前 出生 的 人",
            "de": "Leute, die geboren wurden, bevor Alice ihren Job kündigte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who is 180 cm tall and has the same birth date as Alice",
            "zh": "谁 是 一米 八高且 和 阿丽丝 的 生日 一样 ？",
            "de": "Wer ist 180 cm groß und teilt den gleichen Geburtstag wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started working before the day Alice was born",
            "zh": "在 爱丽丝 出生 之前 就 开始 工作 的 员工",
            "de": "Welche Mitarbeiter haben die Arbeit aufgenommen, bevor Alice auf die Welt gekommen ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "gender of employees whose end date is later than 2004",
            "zh": "离职 日期 在 2004 年 之后 的 员工 的 性别",
            "de": "Geschlecht der Arbeitnehmer, deren Enddatum nach 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students with a start date that is later than that of employee Alice",
            "zh": "找到 开始 日期 晚于 员工 爱丽丝 的 那些 学生",
            "de": "Finde Schüler mit einem Startdatum das später ist als das der Angestellten Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find friends of Alice with a birthdate of 2004",
            "zh": "找出 出生日期 在 2004 年 的 艾丽丝 的 朋友 们",
            "de": "Welche Freunde von Alice wurden 2004 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has an end date no later than the end date of Alice",
            "zh": "哪个 员工 的 结束 日期 不晚 于 爱丽丝 的 结束 日期",
            "de": "Welcher Mitarbeiter hat ein Enddatum nicht später als das Enddatum von Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people that have a friend that works for someone other than McKinsey",
            "zh": "人 的 朋友 在 除了 麦肯锡 的 公司 工作",
            "de": "Leute die einen Freund haben der für jemand anderen als McKinsey arbeitet"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friend of employee whose end date is before 2004",
            "zh": "结束 日期 是 在 2004 年 之前 的 雇员 的 朋友",
            "de": "Freund eines Mitarbeiters, dessen Enddatum vor 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friends of people who completed their studies before 2005",
            "zh": "2005 年 之前 完成学业 的 人 的 朋友",
            "de": "Freunde von Menschen, die ihr Studium vor 2005 abgeschlossen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "city where at least two people were born",
            "zh": "至少 有 两个 人 出生 的 城市",
            "de": "Stadt, in der mindestens zwei Menschen geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "birth city of employees whose end date is not 2004",
            "zh": "结束 日期 不是 2004 年 的 雇员 们 的 出生 城市",
            "de": "Geburtsstadt von Angestellten deren Enddatum nicht 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees started work before Alice's birthday",
            "zh": "哪些 员工 在 爱丽丝 的 生日 前 开始 工作",
            "de": "Welche Angestellten fingen vor Alices Geburtstag an zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with students whose end date is 2004 or later",
            "zh": "谁 是 结束 日期 为 2004 年 或 之后 的 学生 的 朋友",
            "de": "Wer ist mit Studenten befreundet, deren Enddatum 2004 oder später ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of students who left in or after 2004",
            "zh": "2004 年 或 之后 离开 的 学生 的 关系 状况",
            "de": "Wie ist der Beziehungsstatus von Studenten welche in oder nach 2004 gingen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "which people are friends with students who graduate no later than 2004",
            "zh": "哪些 人 和 不 晚于 2004 年 毕业 的 学生 们 是 朋友 ？",
            "de": "Welche Personen sind mit Studenten befreundet, die ihren Abschluss spätestens 2004 gemacht haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that stopped school when Alice stopped working",
            "zh": "在 爱丽丝 停止 工作 时 停止 上学 的 人",
            "de": "Leute die mit der Schule aufgehört haben als Alice mit arbeiten aufgehört hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of students who started no later than 2004",
            "zh": "不晚 于 2004 年 开始 的 学生 的 出生地点 是 什么",
            "de": "was ist der Geburtsort von Studenten, die spätestens 2004 begannen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee quit before Alice quit her job",
            "zh": "哪个 员工 在 爱丽丝 辞职 前 辞职",
            "de": "Welche Mitarbeiterin hat gekündigt, bevor Alice ihren Job gekündigt hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that started working when Alice stopped working or before",
            "zh": "在 爱丽丝 停止 工作 时 或者 在 她 停止 之前 开始 工作 的 人",
            "de": "Menschen, die anfingen zu arbeiten, als Alice aufhörte zu arbeiten oder früher"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have an end date that is no later than that of student Alice",
            "zh": "哪些 雇员 的 结束 日期 不晚 于 学生 爱丽丝 的 结束 日期 ？",
            "de": "Welche Angestellten haben ein Enddatum, das nicht später als das der Studentin Alice ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "which one of Alice's friends was born in New York",
            "zh": "爱丽丝 的 哪一位 朋友 出生 在 纽约",
            "de": "Welcher von Alice's Freunden wurde in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find me an employee's city of birth excluding any software engineers",
            "zh": "帮 我 找 一个 非 软件 工程师 员工 的 出生 城市",
            "de": "Finde die Geburtsstädte der Mitarbeiter, die keine Softwareentwickler sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "people who birthdates are after 2004",
            "zh": "在 2004 年 之后 出生 的 人",
            "de": "Personen, deren Geburtsdatum nach 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that started school after Alice",
            "zh": "比 爱丽丝 上学 晚 的 人",
            "de": "Leute, die nach Alice in die Schule kamen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find a person whom is friends with students whose field of study is not computer science",
            "zh": "找 一个 学生 的 朋友 ， 且 该 学生 的 学习 领域 不是 计算机科学",
            "de": "finde eine Person, die mit Studenten befreundet ist, deren Studienfach nicht Informatik ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )"
        },
        "question": {
            "en": "when did Alice start her job",
            "zh": "爱丽丝 什么 时候 开始 的 她 的 工作 ？",
            "de": "Wann hat Alice ihren Job angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is students gender with last day other than 2004",
            "zh": "最后 一天 在 2004 年 的 学生 的 性别 是 什么",
            "de": "Was ist das Geschlecht der Studenten, die ihren letzen Tag nicht in 2004 haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with someone who enrolled in school during or before 2004",
            "zh": "谁 是 在 2004 年 或 之前 入学 的 人 的 朋友",
            "de": "Wer ist mit jemandem befreundet, der sich während oder vor 2004 in der Schule eingeschrieben hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find friends of students graduating after 2004",
            "zh": "找出 2004 年 后 毕业 的 学生 的 朋友",
            "de": "Finde Freunde von Studenten, die nach 2004 abgeschlossen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string < ) ( number 2 ) ) )"
        },
        "question": {
            "en": "person that was only born in one place",
            "zh": "只有 一处 出生地 的 人",
            "de": "Person, die nur an einem Ort geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "people born in or before 2004",
            "zh": "在 2004 年 或 之前 出生 的 人",
            "de": "Personen, die in oder vor 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "what online person is single",
            "zh": "哪位 在线 上 的 人 是 单身",
            "de": "Welche der Personen, die online sind, ist Single?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what is the most end date of student Alice",
            "zh": "学生 爱丽丝 最终 结束 日期 是 什么 时候",
            "de": "Was ist das häufigste Enddatum von Schülerin Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what person is friends with a student who does not study computer science",
            "zh": "谁 和 不学 计算机科学 的 学生 是 朋友",
            "de": "Welche Person ist mit einem Studenten befreundet, der keine Informatik studiert?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "find people who are friends with either Alice or Bob",
            "zh": "找出 跟 爱丽丝 或 鲍勃 是 朋友 的 人",
            "de": "finde Leute, die entweder mit Alice oder Bob befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "what city was Alice's friend born in",
            "zh": "爱丽丝 的 朋友 出生 在 哪个 城市",
            "de": "In welcher Stadt wurde Alices Freund geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have the fewest fields of study",
            "zh": "哪个 学生 有 最少 的 学习 领域 ？",
            "de": "Welche Studenten haben die wenigsten Studienfächer?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of a student who had a start date in 2004 or later",
            "zh": "开始 日期 在 2004 年 或者 之后 的 一个 学生 的 关系 状态 时 什么",
            "de": "Welchen Beziehungsstatus haben Studenten, deren Eintrittsdatum 2004 oder später ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of people that stopped working before 2004",
            "zh": "2004 年 之前 停止 工作 的 人 的 关系 状况 如何 ？",
            "de": "Wie ist der Beziehungsstatus von Menschen, die vor 2004 aufgehört haben zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what gender is the student that starts before 2004",
            "zh": "在 2004 年 之前 开始 的 学生 的 性别 是 什么 ？",
            "de": "Welches Geschlecht hat der Student, der vor 2004 beginnt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "people who were born in New York and are male",
            "zh": "出生 在 纽约 并且 是 男性 的 人",
            "de": "Menschen, die in New York geboren wurden und männlich sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose start date is end date of employee Alice",
            "zh": "爱丽丝 员工 的 结束 日期 是 哪些 学生 的 开始 日期",
            "de": "Student, dessen Startdatum das Enddatum des Mitarbeiters Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ) )"
        },
        "question": {
            "en": "people with male friends",
            "zh": "有 男性 朋友 的 人",
            "de": "Menschen mit männlichen Freunden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who began working in or after 2004 or 2010",
            "zh": "在 2004 年 或 2010 年 或 之后 开始 工作 的 员工 们",
            "de": "Welche Angestellte begannen ihre Arbeit in oder nach 2004 oder 2010?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "which people share a friend with Bob or Alice",
            "zh": "哪些 人 是 跟 鲍勃 或 爱丽丝 有 共同 朋友 的 ？",
            "de": "Welche Personen teilen sich einen Freund mit Alice oder Bob?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "people who have more than two friends",
            "zh": "有 两个 以上 朋友 的 人",
            "de": "Menschen, die mehr als zwei Freunde haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "find friends that are friends with Alice",
            "zh": "找到 与 爱丽丝 成为 朋友 的 朋友",
            "de": "Finde Freunde, die mit Alice befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find people with two or more relationship statuses",
            "zh": "寻找 有 2 段 或 以上 关系 的 人",
            "de": "Finden Sie Personen mit zwei oder mehr Beziehungsstatus"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "an employer with the least employees",
            "zh": "雇员 最少 的 雇主",
            "de": "ein Arbeitgeber mit den wenigsten Arbeitnehmern"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )"
        },
        "question": {
            "en": "who is younger than or same as alice",
            "zh": "谁 比 阿里 克 年轻 或者 同岁",
            "de": "Wer ist jünger oder gleich alt wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "friends of Alice in similar relationships",
            "zh": "有 类似 的 婚姻 状态 的 爱丽丝 的 朋友",
            "de": "Freunde von Alice in ähnlichen Beziehungen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birthplace of students who started before 2004",
            "zh": "2004 年 之前 开始 上学 的 学生 的 出生地点",
            "de": "Geburtsort von Studenten die vor 2004 anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find cities that more than two people were born in",
            "zh": "找到 超过 两个 人 出生 的 城市",
            "de": "Finden Sie Städte, in denen mehr als zwei Menschen geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people who quit their job after 2003",
            "zh": "2003 年 后 离职 的 人",
            "de": "Menschen, die ihren Job nach 2003 gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of students whose end date is before 2004",
            "zh": "结束 日 在 2004 年 以前 的 学生 的 性别",
            "de": "Geschlecht der Studierenden, deren Enddatum vor 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "name a man who is friends with Alice",
            "zh": "说出 一个 爱丽丝 的 男性 朋友",
            "de": "Nenne einen Mann der mit Alice befreundet ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who has most number of job titles",
            "zh": "有 最 多 职位 头衔 的 员工",
            "de": "Mitarbeiter, der die meisten Berufsbezeichnungen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birth city of student whose start date is not after 2004",
            "zh": "不 在 2004 年 以后 开始 的 学生 的 出生 城市",
            "de": "Geburtsort des Studenten, dessen Startdatum nicht nach 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )"
        },
        "question": {
            "en": "find people who are greater in height than Alice",
            "zh": "找到 身高 比 爱丽丝 高 的 人",
            "de": "finde Menschen, die größer sind als Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of the working people that do not work for McKinsey",
            "zh": "没有 为麦 肯基 工作 的 上班族 情感 状态 是 什么",
            "de": "Wie ist der Beziehungsstatus von arbeitenden Personen die nicht für McKinsey arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )"
        },
        "question": {
            "en": "what is Alice's start date as software engineer",
            "zh": "爱丽丝 作为 软件 工程师 的 开始 日 是 哪天 ？",
            "de": "Wann ist Alice's Starttag als Softwareentwickler?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students last day was the same as Alice's",
            "zh": "哪些 学生 的 最后 一天 和 爱丽丝 的 最后 一天 是 同一天 ？",
            "de": "Welcher Student hatte den gleichen letzten Tag wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee has a start date that is no earlier than the end date of Alice",
            "zh": "哪个 员工 的 入职 日期 没有 比 爱丽丝 的 离职 日期 早",
            "de": "Welcher Mitarbeiter hat ein Startdatum, das nicht vor dem Enddatum von Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find relationship status of employees not with McKinsey",
            "zh": "非麦 肯基 员工 的 情感 状态",
            "de": "Finden Sie den Beziehungsstatus von Mitarbeitern, die nicht zu McKinsey gehören"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who start when Alice leaves",
            "zh": "爱丽丝 离开 时 加入 的 员工",
            "de": "Mitarbeiter, die anfangen, wenn Alice geht"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "people that have at least two friends",
            "zh": "至少 有 两个 朋友 的 人",
            "de": "Menschen, die mindestens zwei Freunde haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "what persons relationship status is single and was born in New York",
            "zh": "什么 人 是 在 纽约 出生 并且 感情 状况 是 单身 ？",
            "de": "Welche Personen haben den Beziehungsstand Single und wurden in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee has a start date of at least 2004",
            "zh": "哪个 员工 的 开始 日 是 在 2004 年 以后 的 ？",
            "de": "Welcher Angestellte hat ein Eintrittsdatum von mindestens 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )"
        },
        "question": {
            "en": "people who were born on or after Alice's last day of school",
            "zh": "在 爱丽丝 上学 最后 一天 或者 之后 出生 的 人们",
            "de": "Menschen, die am oder nach Alice 'letztem Schultag geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "where was the 180 cm tall person born",
            "zh": "那个 180 厘米 高 的 人 是 在 哪里 出生 的",
            "de": "Wo wurde die 180 cm große Person geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "when did Alice who started working in 2004 finish working",
            "zh": "在 2004 年 开始 工作 的 爱丽丝 是 在 什么 时候 结束 工作 的 ？",
            "de": "Wann hat Alice, die 2004 angefangen hat zu arbeiten, aufgehört zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students started after Alice's first day of school",
            "zh": "哪个 学生 是 在 爱丽丝 第一天 上学 后 开始 （ 学习 ） 的 ？",
            "de": "Welche Schüler starteten nach Alices erstem Tag der Schule?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "find all of Alice's friends that were born in New York",
            "zh": "找出 所有 在 纽约 出生 的 爱丽丝 的 朋友 们",
            "de": "Finde alle Freunde von Alice, die in New York geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who start after Alice's birthday",
            "zh": "在 爱丽丝 生日 后 开始 （ 学习 ） 的 学生 。",
            "de": "Studenten, die nach Alice Geburtstag anfangen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "person who worked with highest number of employees",
            "zh": "跟 最 多 员工 共事 过 的 人",
            "de": "Person die mit den meisten Angestellten gearbeitet hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "Alice's friends with a height of 180 cm",
            "zh": "爱丽丝 的 朋友 ， 身高 180 厘米",
            "de": "Alices Freunde mit einer Größe von 180 cm"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "what logged in person was born in New York",
            "zh": "哪个 已 登录 的 人 是 在 纽约 出生 的",
            "de": "Welche eingelogtge Person wurde in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me the employee who started around the time Alice departed",
            "zh": "帮 我 找到 在 爱丽丝 离开 前后 开始 工作 的 员工 。",
            "de": "Finde den Angestellten, der ungefähr zu der Zeit angefangen hat, als Alice ging"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )"
        },
        "question": {
            "en": "what was Alice's first day of work",
            "zh": "爱丽丝 的 第一天 工作 是 什么",
            "de": "wann war Alice's erster Arbeitstag"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students started no later than Alice's first day of work",
            "zh": "哪些 学生 在 不 晚于 阿丽丝 的 工作 的 第一天 开始 的 ？",
            "de": "Welche Schüler starteten nicht später als Alices erster Tag der Arbeit?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "people who are friends with Alice and single",
            "zh": "和 艾莉丝 是 朋友 而且 是 单身 的 人们",
            "de": "Leute, die mit Alice befreundet und Single sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )"
        },
        "question": {
            "en": "what is the relationship status of Alice or Bob",
            "zh": "爱丽丝 或者 鲍勃 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus von Alice oder Bob?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee did not start in 2004",
            "zh": "哪个 员工 不是 在 2004 年入 职 的",
            "de": "welcher Mitarbeiter hat nicht in 2004 angefangen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who are friends with the employee starting by 2004",
            "zh": "在 2004 前 的 雇员 的 朋友",
            "de": "Personen, die mit dem Angestellten befreundet sind, der bis 2004 anfängt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the birth city of the student who didn't end in 2004",
            "zh": "没有 在 2004 年 结束 的 学生 的 出生地 是 什么 ？",
            "de": "Was ist der Geburtsort des Studenten, der nicht 2004 fertig wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that stopped school when Alice stopped working or before",
            "zh": "爱丽丝 停止 工作 或 之前 停止 上学 的 人",
            "de": "Leute die mit der Schule aufgehört haben als Alice aufgehört hat zu arbeiten oder früher"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "people who have more than two relationship statuses",
            "zh": "有 超过 2 个 情感 关系 的 人",
            "de": "Personen mit mehr als zwei Beziehungsstatus"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "a friend of someone born in New York",
            "zh": "在 纽约 出生 的 人 的 朋友",
            "de": "ein Freund von jemandem, der in New York geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "an employee that ends before Alice begins",
            "zh": "一個 在 艾利斯 開始 前 結束 的 員工",
            "de": "Ein Angstellter, der aufhört, bevor Alice beginnt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "friends of Alice currently logged in",
            "zh": "Alice 的 朋友 目前 正在 登录",
            "de": "Freunde von Alice die gerade eingeloggt sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )"
        },
        "question": {
            "en": "people born in the same place as Alice",
            "zh": "与 爱丽丝 出生 在 同一个 地方 的 人",
            "de": "Menschen, die am selben Ort wie Alice geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the gender of the student that graduated before 2004",
            "zh": "在 2004 年前 毕业 的 那个 学生 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht des Studenten, der vor 2004 seinen Abschluss gemacht hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "what people have more than two birthplaces",
            "zh": "什么 人有 多于 两个 的 出生地 ？",
            "de": "Welche Personen haben mehr als zwei Geburtsorte?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "what gender is Alice not",
            "zh": "艾丽丝 不是 哪个 性别 ？",
            "de": "Welches Geschlecht hat Alice nicht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student has the fewest majors",
            "zh": "什麼 學生 有 最少 的 主科",
            "de": "welcher Student hat die wenigsten Hauptfächer"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose end date is birth date of Alice",
            "zh": "结束 日 是 艾丽丝 生日 的 员工",
            "de": "Mitarbeiter, dessen Enddatum das Geburtsdatum von Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that stopped working before 2004 or before 2010",
            "zh": "在 2004 或者 2010 年前 停止 工作 的 人",
            "de": "Personen, die vor 2004 oder vor 2010 aufgehört haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people who are friends with the student leaving by 2004",
            "zh": "和 在 2004 年 要 离开 的 学生 们 是 朋友 的 人们",
            "de": "Personen, die mit dem Studenten befreundet sind, der bis 2004 geht"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who are friends of people who weren't working until at least 2004",
            "zh": "谁 和 到 2004 年 都 不 工作 的 人 是 朋友",
            "de": "Wer ist mit Personen befreundet die nicht vor 2004 gearbeitet haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birthplace of a student not attending brown university",
            "zh": "一个 不上 布朗 大学 的 学生 的 出生地",
            "de": "Geburtsort von Studenten die nicht die Brown Universität besuchen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that stopped going to school when Alice started working or before",
            "zh": "在 爱丽丝 开始 工作 是 或者 之前 就 停止 上学 的 人",
            "de": "Welche Person hörte auf zur Schule zu gehen als oder vor Alice anfing zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "where were the people that stopped school in or after 2004 born",
            "zh": "在 2004 年 或者 之后 停止 上学 的 人 都 在 哪里 出生",
            "de": "Wo sind die Menschen geboren, die 2004 oder später mit der Schule aufgehört haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "a worker who started after student Alice",
            "zh": "一个 在 学生 爱丽丝 之后 开始 工作 的 工人",
            "de": "Ein Arbeiter, der nach der Studentin Alice anfing"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "what person who started in 2004 is 180 cm tall",
            "zh": "谁 在 2004 年 开始 并且 身高 一米 八",
            "de": "Welche Person, die im Jahr 2004 angefangen hat, ist 180 cm groß"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who enrolled in or before 2004",
            "zh": "在 2004 年 或 之前 注册 的 学生",
            "de": "Studierende, die sich in oder vor 2004 eingeschrieben haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "gender of employees not working for McKinsey",
            "zh": "不 为 麦肯锡 工作 的 员工 的 性别",
            "de": "Was ist das Geschlecht der Angestellten die nicht für McKinsey arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people that are friends with someone that stopped working in or before 2004",
            "zh": "和 在 2004 年 或者 之前 停止 工作 的 人 是 朋友 的 人",
            "de": "Menschen, die mit jemandem befreundet sind, der in oder vor 2004 aufgehört hat zu arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that finished school on or after the day Alice started working",
            "zh": "在 爱丽丝 开始 工作 时 或者 之后 完成学业 的 人",
            "de": "Leute, die die Schule an oder nach dem Tag beendet haben, an dem Alice angefangen hat zu arbeiten."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students started after 2004 or 2010",
            "zh": "哪些 学生 是 在 2004 年 或 2010 年 以后 开始 （ 学习 ） 的 ？",
            "de": "Welche Schüler haben nach 2004 oder 2010 angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what person has at least two friends",
            "zh": "哪个 人有 两个 以上 的 朋友 ？",
            "de": "Welche Person hat mindestens zwei Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "males that are currently online",
            "zh": "目前 在线 的 男性",
            "de": "Männer, die gerade online sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that started school after 2004",
            "zh": "2004 年 之后 开始 上学 的 人",
            "de": "Menschen, die nach 2004 eingeschult wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "genders of students finishing before 2004",
            "zh": "在 2004 年前 结束 （ 学业 ） 的 学生 的 性别",
            "de": "Das Geschlecht von Studenten, die vor 2004 fertig sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what students have an end date before 2004 and who are their friends",
            "zh": "有 哪些 学生 是 在 2004 年前 结束 （ 学业 ） 的 ？ 他们 的 朋友 是 谁 ？",
            "de": "Welche Studenten haben ein Enddatum vor 2004 und wer sind ihre Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started before Alice was born",
            "zh": "在 爱丽丝 出生 前 开始 （ 工作 ） 的 员工",
            "de": "Mitarbeiter die vor Alices Geburt angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what gender of employees started after 2004",
            "zh": "2004 年 后 开始 （ 工作 ） 的 员工 的 性别 是 什么 ？",
            "de": "Welches Geschlecht haben die Angestellten die nach 2004 starteten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "gender of student who started after 2004",
            "zh": "2004 年 后 开始 （ 学习 ） 的 学生 的 性别",
            "de": "Geschlecht des Schülers, der nach 2004 angefangen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )"
        },
        "question": {
            "en": "which people at brown university are 180 cm in height",
            "zh": "布朗 大学 的 哪些 人 是 身高 180 公分 的 ？",
            "de": "welche Leute an der Brown University sind 180 cm groß"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birthplace of students whose end date is after 2004",
            "zh": "在 2004 年 以后 结业 学生 的 出生地",
            "de": "Geburtsort von Studenten, deren Enddatum nach 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that started school in or after 2004 or in or after 2010",
            "zh": "在 2004 年 或 之后 ， 或者 在 2010 年 或 之后 入学 的 人 。",
            "de": "Leute die in oder nach 2004 oder 2010 mit der Schule begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with last day after Alice's",
            "zh": "找出 最后 一天 在 爱丽丝 之后 的 雇员 。",
            "de": "Finde Angestellte, die ihren letzten Tag nach Alice haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees joining before 2004",
            "zh": "在 2004 年 以前 加入 的 员工",
            "de": "Mitarbeiter, die vor 2004 eingestellt wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "find someone born during or before 2010",
            "zh": "找到 在 2010 年 或 之前 出生 的 人",
            "de": "Finde jemanden, der in oder vor 2010 geboren ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "people in a mutually exclusive relationship",
            "zh": "在 互相 亲密关系 中 的 人",
            "de": "Personen in einer monogamen Beziehung (Personen in einer gegenseitig ausschließenden Beziehung ... is not something that makes sense in German)"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees last day was after 2004",
            "zh": "最后 一天 在 2004 年 之后 的 雇员 。",
            "de": "Wessen Angestellten letzter Tag war nach 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )"
        },
        "question": {
            "en": "people who are taller than 180 cm or 200 cm",
            "zh": "高于 180 厘米 或 200 厘米 的 人",
            "de": "Personen, die größer als 180 cm oder 200 cm sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of two people",
            "zh": "哪个 城市 是 两个 人 的 出生 所在地",
            "de": "welche Stadt ist der Geburtsort von zwei Menschen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who began working by 2004",
            "zh": "在 2004 年 之前 开始 工作 的 员工",
            "de": "Angestellte, die bis 2004 zu arbeiten begannen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "which people are friends with employees whose last day was no sooner than 2004",
            "zh": "哪些 人 是 2004 年前 离职 的 员工 的 朋友 ？",
            "de": "Welche Personen sind Freunde von Angestellten, deren letzter Tag nicht vor 2004 war?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what are student's relationship status who started in 2004 or later",
            "zh": "在 2004 年 或 之后 入学 的 学生 的 感情 状态 是 什么",
            "de": "Wie lautet der Beziehungsstatus von Studenten, die 2004 oder später anfingen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "name a friend of Alice",
            "zh": "说出 爱丽丝 的 一个 朋友",
            "de": "Nenne einen Freund von Alice."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "an employee who started on or after Alice's birthday",
            "zh": "一个 在 爱丽丝 生日 或 以后 开始 （ 工作 ） 的 员工",
            "de": "ein Angestellter, der an oder nach Alices Geburtstag anfing"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "friends of people born in 2004",
            "zh": "2004 年 出生 的 人 的 朋友 们",
            "de": "Freunde von Menschen, die 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employee joining after 2004",
            "zh": "2004 年 之后 入职 的 雇员 的 感情 状态",
            "de": "Beziehungsstatus eines Angestellten, der nach 2004 eintrat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me a list of employees who are employed by McKinsey or google",
            "zh": "为 我 找到 为 麦肯锡 或者 谷歌 工作 的 人 的 一份 名单",
            "de": "Finde eine Liste von Angestellten, die bei McKinsey oder Google angestellt sind, für mich."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )"
        },
        "question": {
            "en": "what is the field of study of Alice who finished in 2004",
            "zh": "2004 年 毕业 的 爱丽丝 学习 的 是 哪个 领域 ？",
            "de": "Wie lautet der Studienbereich von Alice, die in 2004 aufhoerte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "person that has the smallest number of employees",
            "zh": "有 最少 雇员 的 人",
            "de": "Person, die die geringste Anzahl von Mitarbeitern hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students finishing before 2010",
            "zh": "在 2010 年前 结业 的 学生 们",
            "de": "Welche Studenten beendeten vor 2010?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friends of students finishing before 2004",
            "zh": "在 2004 年 之前 完成 的 学生 的 朋友",
            "de": "Freunde von Studenten, die vor 2004 ihren Abschluss gemacht haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who has minimum number of universities",
            "zh": "去过 大学 数量 最少 的 学生",
            "de": "Student, der die kleinste Anzahl an Universitäten hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "person who completed the education latest",
            "zh": "最 晚 完成学业 的 人",
            "de": "Person, die die Ausbildung als letzter abschloss"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "an employee that starts during or before 2004",
            "zh": "一个 在 2004 年 或者 之前 开始 的 员工",
            "de": "ein Mitarbeiter, der während oder vor 2004 beginnt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees are not employed by McKinsey",
            "zh": "哪些 雇员 不是 被 McKinsey 所 雇佣 的 ？",
            "de": "Welche Angestellten sind nicht bei McKinsey beschäftigt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "what person is friends with the person who was born in New York",
            "zh": "什么 人 是 在 纽约 出生 的 那个 人 的 朋友 ？",
            "de": "Welche Person ist mit der in New York geborenen Person befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )"
        },
        "question": {
            "en": "who employs Alice as a software engineer",
            "zh": "谁 聘用 了 艾丽斯 为 软件 工程师",
            "de": "Wer beschäftigt Alice als einen Softwareentwickler?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "people with the same relationship status as Alice and are also 180 cm tall",
            "zh": "和 爱丽丝 有 相同 感情 状况 并且 身高 是 180 厘米 的 人们",
            "de": "Leute mit dem selben Beziehungsstatus wie Alice und die auch 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who are software engineers or program managers",
            "zh": "作为 软件 工程师 或 项目经理 的 员工",
            "de": "Angestellte die Softwareentwickler oder Programmmanager sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string !type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what is the job title of those who are 180 cm tall",
            "zh": "身高 一米 八 的 人 的 工作 头衔 是 什么",
            "de": "Was ist die Berufsbezeichung der Personen, die 180cm gross sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of no more than two people",
            "zh": "什么 城市 是 不 超过 两个 人 的 出生地",
            "de": "Welche Stadt ist der Geburtsort von nicht mehr als zwei Leuten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) )"
        },
        "question": {
            "en": "who was born on the day Alice finished school",
            "zh": "谁 在 爱丽丝 完成学业 的 那天 出生",
            "de": "Wer ist an dem Tag geboren als Alice die Schule beendet hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what relationships status represents the fewest people",
            "zh": "哪 一个 感情 状态 是 代表 了 最少 的 人 ？",
            "de": "Welcher Beziehungsstatus repräsentiert die wenigsten Leute?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students finishing after 2004",
            "zh": "找到 在 2004 年 之后 完成学业 的 学生",
            "de": "Finde Studenten die nach 2004 abschließen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.university.brown en.university.ucla ) )"
        },
        "question": {
            "en": "find people who went to brown university or UCLA",
            "zh": "找到 去 布朗 大学 或 加州大学洛杉矶分校 的 人",
            "de": "Finde Menschen die zur Brown University oder UCLA gegangen sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "people who are shorter than 180 cm",
            "zh": "身高 没有 一米 八 的 人",
            "de": "Menschen die kleiner sind als 180cm"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "connections of friends who started dating before 2004",
            "zh": "在 2004 年 之前 开始 约会 的 朋友 的 联系",
            "de": "Verbindungen von Freunden, die vor 2004 mit dem Dating begonnen haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees are working jobs other than software engineer",
            "zh": "哪些 员工 不是 软件 工程师",
            "de": "Welche Angestellten ueben einen anderen Beruf als Software Engineer aus?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "people with two genders or less",
            "zh": "有 两种 或者 更少 的 性别 的 人",
            "de": "Personen mit zwei oder weniger Geschlechtern"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationships status of employees whose last day was before 2004",
            "zh": "在 2004 年前 离开 的 雇员 的 感情 状态 是 什么",
            "de": "Wie ist der Beziehungsstatus von Mitarbeitern, deren letzter Tag vor 2004 lag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student started earlier than Alice's end date",
            "zh": "哪些 学生 在 爱丽丝 结束 日前 之前 开始 上学",
            "de": "Welcher Student fing vor Alices Enddatum an?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees starting on Alice's last day",
            "zh": "找出 在 艾丽丝 最后 一天 开始 上班 的 员工",
            "de": "Mitarbeiter finden, die am letzten Tag von Alice beginnen."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees last day was after Alice's first day",
            "zh": "哪位 雇员 的 最后 一天 （ 工作 ） 是 在 爱丽丝 的 第一天 （ 工作 ） 之后 的 ？",
            "de": "Welche Mitarbeiter hatten ihren letzten Tag nach Alices erstem Tag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string ! = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "who is not born on 2004",
            "zh": "谁 不是 生于 2004 年",
            "de": "Welche Personen sind nicht in 2004 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find all employees who quit in 2004 and 2010",
            "zh": "查找 2004 年 和 2010 年 退出 的 所有 员工",
            "de": "Finden Sie alle Mitarbeiter, die 2004 und 2010 gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "where were the people that stopped working in or before 2004 born",
            "zh": "那些 在 2004 年 或 之前 停止 工作 的 人 在 哪里 出生",
            "de": "Wo wurden die Personen geboren, die in 2004 oder davor aufgehört haben, zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "find people whose birthplace is New York",
            "zh": "找到 出生地 是 纽约 的 人",
            "de": "Finden Sie Menschen, deren Geburtsort New York ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string <= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "people that have two or fewer birthplaces listed",
            "zh": "出生地点 是 两个 或者 更少 的 人",
            "de": "Personen, bei denen zwei oder weniger Geburtsorte aufgeführt sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "people born in or after 2004",
            "zh": "2004 年 或 之后 出生 的 人",
            "de": "Personen, die in oder nach 2004 geboren sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "what online person is 180 cm tall",
            "zh": "哪 一个 在线 人物 是 一米 八高 ？",
            "de": "Welche der Personen, die online sind, ist 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "person who is not a friend of Alice",
            "zh": "不是 爱丽丝 的 朋友 的 人",
            "de": "Person die nicht mit Alice befreundet ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "what people are friends with Alice and have a birthplace of New York",
            "zh": "谁 和 爱丽丝 是 朋友 并且 出生 在 纽约",
            "de": "Welche Personen sind mit Alice befreundet und in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of students starting after or in 2004",
            "zh": "在 2004 年 或者 之后 开始 上学 的 学生 的 关系 状态",
            "de": "Beziehungsstatus von Studierenden, die nach oder im Jahr 2004 beginnen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of people that stopped working in or after 2004",
            "zh": "在 2004 年 或 之后 停止 工作 的 人 的 性别 是 什么",
            "de": "Welches Geschlecht haben die Personen die in oder nach 2004 aufhörten zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) )"
        },
        "question": {
            "en": "who is Alice's employer",
            "zh": "谁 是 爱丽丝 的 雇主",
            "de": "Wer ist Alice's Arbeitgeber?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "any male who is single",
            "zh": "任何 单身 的 男性",
            "de": "Jeder Mann, der Single ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who is the boss of Alice",
            "zh": "谁 是 爱丽丝 的 老板",
            "de": "Wer ist der Chef von Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "city with birthplace of two person",
            "zh": "有 两个 人 出生地 在 那里 的 城市 。",
            "de": "Stadt mit dem Geburtsort von zwei Personen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find friends of employees who did not start in 2004",
            "zh": "找到 没有 在 2004 年 开始 的 员工 的 朋友",
            "de": "suche Freunde von Angestellten welche nicht in 2004 angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is relationship status of students who did not start in 2004",
            "zh": "没有 在 2004 年 开始 上学 的 学生 的 关系 状态 是 什么",
            "de": "Was ist der Beziehungsstatus von Studierenden, die nicht im Jahr 2004 begonnen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "gender which is same as at least two persons",
            "zh": "和 至少 两个 人 相同 的 性别",
            "de": "Geschelcht, welches dem von mindestens zwei Personen entspricht"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which city has minimum number of people born in",
            "zh": "哪个 城市 的 出生人数 最少",
            "de": "Welche Stadt hat die geringste Anzahl an Personen, die dort geboren wurden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.relationship_status.single en.relationship_status.married ) )"
        },
        "question": {
            "en": "either single or married",
            "zh": "单身 或者 已婚",
            "de": "entweder alleinstehend oder verheiratet"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "who has more than two relationship status",
            "zh": "谁 有 两个 以上 的 关系 状态",
            "de": "Wer hat mehr als zwei Beziehungsstatusse?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )"
        },
        "question": {
            "en": "find people employed by McKinsey who are 180 cm tall",
            "zh": "找到 被 麦肯锡 雇用 身高 一米 八 的 人",
            "de": "Finde Personen, die bei McKinsey angestellt sind, welche 180cm gross sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students starting before 2004",
            "zh": "找到 2004 年 之前 开始 的 学生",
            "de": "Finde Studenten die vor 2004 begonnen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people completed study before Alice started study",
            "zh": "在 爱丽丝 开始 学习 之前 完成学业 的 人",
            "de": "Leute die das Studium abgeschlossen haben bevor Alice mit dem Studium gestartet ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who is friends with the employee that quit in 2004",
            "zh": "谁 和 在 2004 年 辞职 的 员工 是 朋友",
            "de": "Wer ist mit den Angestellten befreundet der in 2004 gekündigt hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ) )"
        },
        "question": {
            "en": "what is the birthplace of people currently online",
            "zh": "现在 在线 的 人 的 出生地 是 什么",
            "de": "Was ist der Geburtsort von Leuten die aktuell online sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )"
        },
        "question": {
            "en": "find people born the same day or later than Alice",
            "zh": "找到 和 爱丽丝 同一天 或者 迟 于 爱丽丝 出生 的 人",
            "de": "Finde Leute die am gleichen Tag oder später als Alice geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee started no greater than Alice's end date",
            "zh": "什么 员工 在 不 晚于 爱丽丝 结束 日期 前 开始 的 ？",
            "de": "Welcher Mitarbeiter hat nicht später als am Enddatum von Alice angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "where was Alice born",
            "zh": "爱丽丝 出生 在 哪里",
            "de": "Wo wurde Alice geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of employees who did not start in 2004",
            "zh": "没有 在 2004 年 开始 的 员工 们 的 感情 状态 是 什么 ？",
            "de": "Wie lautet der Beziehungsstatus der Mitarbeiter, die nicht in 2004 begonnen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )"
        },
        "question": {
            "en": "who is born on same date that of Alice",
            "zh": "谁 跟 爱丽丝 是 在 同一天 出生 的 ？",
            "de": "Wer wurde am selben Tag wie Alice geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )"
        },
        "question": {
            "en": "what is Alice's height",
            "zh": "爱丽丝 有 多 高",
            "de": "Wie groß ist Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what are genders of employees whose last day was after 2004",
            "zh": "最后 一天 在 2004 的 员工 ， 有 哪些 性别",
            "de": "Was sind die Geschlechter von Angestellten deren letzter Tag nach 2004 war?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of two individuals",
            "zh": "这 两个 人 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus zweier Individuen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )"
        },
        "question": {
            "en": "people who were not born in New York",
            "zh": "不是 在 纽约 出生 的 人",
            "de": "Leute die nicht in New York geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me a list of employees whose start date was in 2004 or 2010",
            "zh": "帮 我 找 一份 在 2004 或 2010 开始 工作 的 员工 清单",
            "de": "Finde eine Liste von Angestellten deren Startdatum in 2004 oder 2010 war"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of an employee who quit after 2004",
            "zh": "什么 城市 是 2004 年 之后 辞职 的 员工 的 出生地",
            "de": "Welche Stadt ist der Geburtsort eines Mitarbeiters, der nach 2004 gekündigt hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what gender are those two people",
            "zh": "这 两个 人 的 性别 是 什么 ？",
            "de": "Welches Geschlecht haben diese beiden Menschen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "person with two or more birthplaces",
            "zh": "有 两个 或者 以上 出生地 的 人",
            "de": "Person mit zwei oder mehr Geburtsorten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student not studying fewer than two fields of study",
            "zh": "学习 不少 于 两个 领域 的 学生",
            "de": "Student, der nicht weniger als zwei Studienfächer studiert"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have the greatest amount of job titles",
            "zh": "哪些 雇员 有 最 多 的 工作 职称 ？",
            "de": "Welche Angestellten haben die meisten Berufsbezeichnungen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find all people who were born in 2004",
            "zh": "找到 所有 出 生于 2004 年 的 人",
            "de": "finden Sie alle Personen, die 2004 geboren wurden."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student that started between 2001 and 2010",
            "zh": "在 2001 到 2010 年 之间 开始 的 学生",
            "de": "Ein Student, der zwischen 2001 und 2010 angefangen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "cities where Alice's friends were born",
            "zh": "爱丽丝 的 朋友 出生 的 城市",
            "de": "Städte, in denen Alice's Freunde geboren wurden."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string max ) ( string birthplace ) ) )"
        },
        "question": {
            "en": "people born in the most cities",
            "zh": "出生 在 大多数 城市 的 人",
            "de": "Menschen, die in den meisten Städten geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find the people who joined studies before Alice joined work",
            "zh": "找出 在 爱丽丝 加入 工作 前 加入 学习 的 人",
            "de": "finde die Leute die mit dem Studium anfingen bevor Alice zu arbeiten anfing"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "a friend of a student that isn't in computer science",
            "zh": "不是 计算机科学 的 学生 的 朋友",
            "de": "ein Freund eines Studenten, der nicht in der Informatik ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "what people have a relationship status of single whom are also friends with Alice",
            "zh": "关系 状态 为 单身 并且 是 爱丽丝 朋友 的 人员 。",
            "de": "welche Leute haben einen Beziehungsstatus von Single, die auch mit Alice befreundet sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) )"
        },
        "question": {
            "en": "when did Alice quit",
            "zh": "爱丽丝 什么 时候 退出",
            "de": "Wann kündigte Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "what person has a relationship status of not single",
            "zh": "什么 人 的 感情 状态 是非 单身 ？",
            "de": "welche Person hat einen Beziehungsstatus von nicht alleinstehend"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "a friend of a student that ends before 2004",
            "zh": "在 ２ ０ ０ ４ 年 毕业 的 学生 的 一个 朋友 。",
            "de": "Ein Freundes von einen Student der vor 2004 endet"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friend of employee whose start date is at least 2004",
            "zh": "开始 日期 是 至少 2004 年 的 员工 的 朋友",
            "de": "Freund des Mitarbeiters, dessen Startdatum mindestens 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "a 180 cm tall person with same relationship status as Alice",
            "zh": "和 爱丽丝 感情 状态 一样 的 身高 是 180 厘米 的 一个 人",
            "de": "eine 180 cm große Person mit dem gleichen Beziehungsstatus wie Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "who is the person who has logged in",
            "zh": "谁 是 已 登录 的 人",
            "de": "Wer ist die Person, die sich angemeldet hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students from brown university or UCLA",
            "zh": "来自 布朗 大学 或 加州大学洛杉矶分校 的 学生 。",
            "de": "Studenten der brown university oder UCLA"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who did not join in 2004",
            "zh": "不是 在 ２ ０ ０ ４ 年 入校 的 学生 。",
            "de": "Student, der 2004 nicht beigetreten ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who is friends with the employee who did not start in 2004",
            "zh": "谁 是 2004 年 没有 入职 的 员工 的 朋友",
            "de": "Wer ist befreundet mit dem Arbeiter der nicht in 2004 angefangen hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )"
        },
        "question": {
            "en": "who did Alice start to work for in 2004",
            "zh": "2004 年 爱丽丝 开始 为 谁 工作",
            "de": "Fuer wen fing Alice in 2004 an zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find someone who has at most two friends",
            "zh": "找 一个 最多 有 两个 朋友 的 人",
            "de": "Finde jemanden der höchstens Zwei Freunde hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee worked before 2004",
            "zh": "哪位 员工 在 2004 年 之前 工作 过",
            "de": "Welcher Mitarbeiter hat vor 2004 gearbeitet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee quit on or before the student Alice",
            "zh": "哪个 员工 跟 爱丽丝 一起 或 在 她 之前 就 辞职 了",
            "de": "Welcher Angestellte kündigte während oder nach der Studentin Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that started working after Alice started school",
            "zh": "爱丽丝 上学 后 开始 工作 的 人",
            "de": "Welche Leute begannen mit der Arbeit nachdem Alice mit der Schule anfing?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who started earliest",
            "zh": "最早 开始 的 学生",
            "de": "Welcher Student startete am frühsten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students with an end date that is no greater than Alice",
            "zh": "找到 结束 日期 不 超过 爱丽丝 的 学生",
            "de": "Welche Studenten haben einen Endtermin, der nicht spater ist als der von Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )"
        },
        "question": {
            "en": "people who were born before Alice graduated school",
            "zh": "在 爱丽丝 毕业 之前 出生 的 人",
            "de": "Welche Personen wurden vor Alice's Schulabschluss geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find all students who graduated between 2004 and 2010",
            "zh": "找到 所有 2004 年 至 2010 年 之间 毕业 的 学生",
            "de": "Welche Studenten haben ihren Abschluss zwischen 2004 und 2010 gemacht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string !type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what is the field of study of those who are 180 cm tall",
            "zh": "那些 180 厘米 高 的 人 的 研究 领域 是 什么",
            "de": "Was ist die Studienrichtung derer, die 1,8m groß sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) ( call SW.getProperty en.person.alice ( string gender ) ) ) )"
        },
        "question": {
            "en": "find someone with the same gender as Alice",
            "zh": "找 一个 与 爱丽丝 性别 相同 的 人",
            "de": "Wer hat das gleiche Geschlecht wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of two or less people",
            "zh": "两个 或 两个 以下 的 人 的 关系 状况 是 什么",
            "de": "Was ist der Beziehungsstatus von zwei oder weniger Leuten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students starting before or contemporaneous to when Alice finishes",
            "zh": "在 爱丽丝 完成 时 或者 之前 开始 的 学生",
            "de": "Welche Studenten starteten vor oder gleichzeitig als Alice ihrs beendete?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "find me all people who were born in New York",
            "zh": "找到 所有 生于 纽约 的 人",
            "de": "Welche Personen wurden in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students graduate after Alice's last day at work",
            "zh": "哪些 学生 在 Alice 工作 的 最后 那天 之后 毕业",
            "de": "Welche Studenten machen ihren Abschluss nach Alices letztem Tag auf Arbeit?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "a friend of someone with a start date of at least 2004",
            "zh": "开始 日期 至少 为 2004 的 某人 的 朋友",
            "de": "Ein Freund von jemanden mit einen Anfangsdatum von mindestens 2004"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friends of people who became students in 2004 or earlier",
            "zh": "2004 年 或 更 早 成为 学生 的 人 的 朋友",
            "de": "Freunde von Menschen, die 2004 oder früher Studenten wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string !type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what is the employer of a person that is 180 cm tall",
            "zh": "一个 身高 是 180 厘米 的 人 的 雇主 是 什么 ？",
            "de": "Was ist der Arbeitgeber von einer Person die 180 cm groß ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find me employees whose end date is the same as Alice's birthdate",
            "zh": "找到 结束 日期 和 爱丽丝 生日 是 同一天 的 员工",
            "de": "Das Enddatum welcher Angestellten stimmt mit dem Geburtsdatum von Alice ueberein?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that started school in or before 2004",
            "zh": "在 2004 年 或 之前 开始 上学 的 人",
            "de": "Welche Personen haben in oder vor 2004 mit der Schule begonnen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee who resigned recently",
            "zh": "最近 辞职 的 员工",
            "de": "Mitarbeiter, der kürzlich ausgetreten ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "fine me employees starting before Alice's birthday",
            "zh": "請 找出 艾麗絲 生日 前 就 職的員工",
            "de": "Welche Angestellten begannen vor Alices Geburtstag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find students of same gender who quit the job before 2004",
            "zh": "找到 和 在 2004 年 以前 辞职 的 人 有 相同 性别 的 学生",
            "de": "Welche Studenten haben das gleiche Geschlecht, die vor 2004 gekuendigt haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "who is friends with someone who doesn't work for McKinsey",
            "zh": "谁 是 不 为 麦肯锡 工作 的 人 的 朋友",
            "de": "Wer ist mit jemandem befreundet, der nicht für McKinsey arbeitet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people who are friends with those who joined studies in or after 2004",
            "zh": "在 2004 年 或 之後參 與 學習 的 學生 的 朋友",
            "de": "Welche Personen haben Freunde die in oder nach 2004 anfingen zu studieren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )"
        },
        "question": {
            "en": "who is younger than Alice",
            "zh": "谁 比 爱丽丝 年轻",
            "de": "Wer ist jünger als Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee started on the same date as Alice",
            "zh": "那些 员工 和 爱丽丝 同一天 开始 工作",
            "de": "Welcher Mitarbeiter hat am selben Tag wie Alice angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )"
        },
        "question": {
            "en": "people born on or before the day Alice started her job",
            "zh": "爱丽丝 开始 工作 的 那天 或 之前 出生 的 人",
            "de": "Welche Personsn sind an dem Tag oder frueher geboren als Alice mit ihrer Arbeit anfing?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find the employee that has less than two job titles",
            "zh": "找到 有 少于 两个 工作 头衔 的 员工",
            "de": "Welche Angestellten haben weniger als Zwei Berufsbezeichnungen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )"
        },
        "question": {
            "en": "persons whose height is 180 cm or higher",
            "zh": "那些 身高 180 厘米 或 更 高 的 人",
            "de": "Welche Personen haben eine Größe von 180 cm oder größer?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of working people that are not software engineers",
            "zh": "不是 软件 工程师 的 员工 的 关系 状态 是 什么",
            "de": "Wie ist der Beziehungsstatus von Arbeitnehmern, die keine Software-Ingenieure sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "whom are people with a relationship status of single friends with",
            "zh": "谁 是 与 单身 朋友 有 关系 的 人",
            "de": "mit wem sind die Leute befreundet deren Beziehungsstatus single ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees who have a start date that is no greater than that of employee Alice",
            "zh": "找到 比 爱丽丝 的 入职 日期 之前 入职 的 员工",
            "de": "Welche Angestellten haben ein Startdatum das nicht spaeter ist als das der Angestellten Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the gender of students who started no earlier than 2004",
            "zh": "开始 日期 不早 于 2004 年 的 学生 的 性别 是 什么",
            "de": "Was ist das Geschlecht von Studenten, die nicht früher als 2004 begonnen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who quit before Alice was hired",
            "zh": "在 爱丽丝 入 职前 被 开除 的 学生",
            "de": "Welche/r Student/in hat aufgehört, bevor Alice eingestellt wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "an employee starting before or when Alice was born",
            "zh": "在 爱丽丝 出生 之前 或 之 时 开始 的 员工",
            "de": "Welcher Angestellte began vor oder als Alice geboren wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "a 180 cm person born in New York",
            "zh": "180 厘米 高 在 纽约 出生 的 人",
            "de": "Welche Person ist 180 cm groß und wurde in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find people with a height of 180 cm and a state date of 2004",
            "zh": "找到 一个 高 180cm 并且 州 日期 是 2004 年 的 人",
            "de": "finde Leute mit einer Größe von 180 cm und einem Startdatum von 2004"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students not starting in 2004",
            "zh": "不是 2004 年 开始 的 学生",
            "de": "Welche Studenten haben nicht in 2004 angefangen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find me all people with relationship status of two people",
            "zh": "帮 我 找到 所有 关系 状态 是 两个 人 的 人",
            "de": "Für welche Personen gilt ein Beziehungsstatus von \"zwei Menschen\"?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what person has more than two friends",
            "zh": "哪个 人有 超过 两个 朋友",
            "de": "Welche Person hat mehr als zwei Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )"
        },
        "question": {
            "en": "what day did Alice stop school in 2004",
            "zh": "爱丽丝 在 2004 年 哪天 停止 上学 的",
            "de": "an welchem Tag beendete Alice in 2004 die Schule"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find students with a start date earlier than 2004 and their friends",
            "zh": "找到 开始 日期 在 2004 年 以前 的 学生 和 他们 的 朋友 们",
            "de": "finde Studenten und Freunde mit einem Startdatum vor 2004"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees for two employers maximum",
            "zh": "有 最 多 两个 雇主 的 员工 们",
            "de": "Welche Angestellten arbeiten fuer maximal zwei Arbeitgeber?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees not working for McKinsey",
            "zh": "不 为 麦肯锡 工作 的 员工",
            "de": "Angestellte, die nicht für McKinsey arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people with friends that finished school in or before 2004",
            "zh": "和 在 2004 年 或者 之前 完成 学习 的 人 是 朋友 的 人",
            "de": "Personen mit Freunden die die Schule vor oder in 2004 beendet haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "who is not friends with Alice",
            "zh": "谁 不是 爱丽丝 的 朋友",
            "de": "Wer ist nicht mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "what is the gender of the person born in New York",
            "zh": "出生 在 纽约 的 人 的 性别 是 什么",
            "de": "Was ist das Geschlecht der Person, die in New York geboren wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what is the gender of students sho started before 2004",
            "zh": "在 2004 年 之前 开始 的 学生 的 性别 是 什么",
            "de": "Was ist das Geschlecht der Schüler, die vor 2004 angefangen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people that are friends with someone that started school in or before 2004",
            "zh": "和 在 2004 年 或者 之前 开始 上学 的 人 是 朋友 的 人",
            "de": "Welche Personen sind mit jemandem befreundet, der in oder vor 2004 mit der Schule anfing?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people who quit their job before Alice started school",
            "zh": "在 Alice 开始 上学 前 辞职 的 人",
            "de": "Welche Leute haben gekuendigt bevor Alice mit der Schule anfing?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find someone taller than 180 cm",
            "zh": "找 一个 高于 180 厘米 的 人",
            "de": "Wer ist groesser als 180cm?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )"
        },
        "question": {
            "en": "who was born before Alice",
            "zh": "谁 在 爱丽丝 之前 出生",
            "de": "Wer wurde vor Alice geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of an employee with an end date no earlier than 2004",
            "zh": "结束 日期 不早 于 2004 年 的 员工 的 性别 是 什么",
            "de": "Was ist das Geschlecht von einem Angestellten mit einem Enddatum von nicht früher als 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what are genders of employees who started after 2004",
            "zh": "2004 年 以后 入职 的 员工 是 什么 性别",
            "de": "Was sind die Geschlechter der Arbeitnehmer, die nach 2004 angefangen haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) )"
        },
        "question": {
            "en": "people born on the day Alice started school",
            "zh": "Alice 入学 那天 出生 的 人",
            "de": "Welche Personen wurden an dem Tag begonnen als Alice mit der Schule begann?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started working in or after 2004",
            "zh": "在 2004 年 或 之后 开始 工作 的 员工",
            "de": "Welche Mitarbeiter fingen in oder nach 2004 an zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "which people are friends with students who graduate after 2004",
            "zh": "哪些 人 是 2004 年 以后 毕业 的 学生 的 朋友",
            "de": "Welche Leute sind mit Studenten befreundet, die nach 2004 ihren Abschluss machen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which student has attended less than two universities",
            "zh": "哪个 学生 就读 过 不到 两所 大学",
            "de": "Welcher Student hat weniger als zwei Universitäten besucht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is the person that is friends with the student and graduated in 2004",
            "zh": "谁 是 和 那个 学生 是 朋友 且 在 2004 毕业 的 那个 人 ？",
            "de": "Wer ist die Person, die mit dem Studenten befreundet ist und 2004 seinen Abschluss gemacht hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee quit working before Alice graduated from school",
            "zh": "哪位 员工 在 爱丽丝 从 学校 毕业 之前 就 离职 了 ？",
            "de": "welcher Angestellte kündigte bevor Alice die Schule abgeschlossen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "what is not Alice's gender",
            "zh": "哪个 不是 爱丽丝 的 性别",
            "de": "Was ist nicht Alices Geschlecht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "what is the relationship status of Alice's friends",
            "zh": "爱丽丝 的 朋友 的 关系 状态 是 什么",
            "de": "Was ist der Beziehungsstatus von Alices Freunden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student ending after Alice",
            "zh": "在 爱丽丝 之后 结束 的 学生",
            "de": "Welcher Student endete nach Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "people who have friends that go to a school other than brown",
            "zh": "有 朋友 在 除了 布朗 大学 外 的 学校 学习 的 人",
            "de": "Welche Personen haben Freunde, die eine andere Schule als Brown besuchen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with the person who started going to school after 2004",
            "zh": "谁 是 2004 年 以后 开始 上学 的 人 的 朋友",
            "de": "wer ist mit der Person befreundet die nach 2004 angefangen hat zur Schule zu gehen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students started after 2004",
            "zh": "哪个 学生 是 在 2004 年 后 开始 （ 上学 ） 的 ？",
            "de": "Welche Studenten starteten nach 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )"
        },
        "question": {
            "en": "what is Alice's job title while working for McKinsey",
            "zh": "爱丽丝 在 麦肯锡 的 工作 头衔 是 什么",
            "de": "Was ist Alices Berufstitle, während sie für McKinsey arbeitet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "people that are friends with someone born in New York",
            "zh": "和 生 在 纽约 的 人 是 朋友 的 人",
            "de": "Welche Personen sind mit Personen befreundet die in New York geboren sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with last day same or later than Alice's",
            "zh": "找到 那些 最后 一天 和 爱丽丝 一样 或 较晚 的 员工",
            "de": "Welche Angestellten haben ihren letzten Tag am selben Tag wie Alice oder spaeter?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student with the highest number of subjects",
            "zh": "有 最 多 学科 的 学生",
            "de": "Welcher Student hat die hoechste Anzahl an Studienfaechern?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of the employees who stopped working for us before 2004",
            "zh": "在 2004 年 之前 停止 为 我们 工作 的 员工 的 出生地 是 哪个 城市",
            "de": "Welche Stadt ist der Geburtsort der Mitarbeiter, die vor 2004 aufgehört haben, für uns zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "find me a person who is not 180cm tall",
            "zh": "帮 我 找到 一个 身高 不是 一米 八 的 人",
            "de": "Welche Person ist nicht 180 cm groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people who quit job with and after Alice",
            "zh": "和 爱丽丝 一起 以及 在 爱丽丝 之后 辞掉 工作 的 那些 人",
            "de": "Leute die den Job mit und nach Alice gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "a friend of a student starting after 2004",
            "zh": "2004 年 以后 开始 的 一名 学生 的 朋友",
            "de": "ein Freund eines Studenten, der nach 2004 anfängt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "which people are 180 cm tall and the same height as Alice",
            "zh": "哪些 人 是 身高 一米 八 并且 和 爱丽丝 一样 高",
            "de": "Welche Personen sind 180 cm groß und genauso groß wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people who quit job in 2004 and 2010",
            "zh": "在 2004 年 和 2010 年 离职 的 人",
            "de": "Menschen, die 2004 und 2010 ihren Job gekündigt haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees who have a start date that is the same as employee Alice or greater",
            "zh": "找到 开始 日 跟 员工 爱丽丝 的 开始 日 是 一样 或 更 晚 的 人",
            "de": "Finde Mitarbeiter mit dem selben or einem spaeteren Anfangsdatum wie das der Angestellten Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with the student who ended after 2004",
            "zh": "谁 是 2004 年 以后 结束 的 学生 的 朋友 ？",
            "de": "Wer ist mit dem Studenten befreundet, der nach 2004 geendet hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find the students that studied either computer science or history",
            "zh": "找到 学习 电脑 科学 或者 历史 的 学生",
            "de": "Finden Sie die Studenten, die entweder Informatik oder Geschichte studiert haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who began school the same day Alice started working",
            "zh": "在 爱丽丝 开始 工作 的 同一天 开始 上学 的 学生",
            "de": "Schüler die die Schule am gleichen Tag begonnen haben an dem Alice mit arbeiten begonnen hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students starting after Alice",
            "zh": "找到 在 爱丽丝 之后 开始 的 学生",
            "de": "Finde Studenten, die nach Alice anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "Alice's friends who born in New York",
            "zh": "爱丽丝 出生 在 纽约 的 朋友",
            "de": "Freunde von Alice die in New York geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "people who have the same birthplace as Alice and are 180 cm tall",
            "zh": "与 爱丽丝 有 相同 出生地 并且 身高 180 厘米 的 人",
            "de": "Menschen, die den gleichen Geburtsort wie Alice haben und 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ) ) )"
        },
        "question": {
            "en": "height of a person",
            "zh": "一个 人 的 身高",
            "de": "Größe einer Person"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birthplaces of students starting after 2004",
            "zh": "在 2004 年 后 开始 的 学生 的 出生地",
            "de": "Geburtsorte von Studenten die nach 2004 anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with the non computer science major",
            "zh": "谁 是非 计算机科学 专业 的 朋友",
            "de": "Wer ist mit jemanden befreundet der nicht Informatik als Hauptfach hat?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who started on or before Alice's end date",
            "zh": "在 Alice 结束 日期 或 之前 开始 的 学生",
            "de": "Studenten, die auf oder vor Alices Enddatum anfingen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of employees who start date was 2004 or before",
            "zh": "那些 2004 或者 之前 开始 工作 的 雇员 的 关系 情况 是 什么",
            "de": "Wie ist der Beziehungsstatus von Mitarbeitern, deren Startdatum 2004 oder früher war?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what's the relationships status of the employee that doesn't work at McKinsey",
            "zh": "那些 不为 McKinsey 工作 的 雇员 关系 是 什么",
            "de": "Was ist der Beziehungsstatus des Angestellten, der nicht bei McKinsey arbeitet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what city is the birthplace of students before 2004",
            "zh": "在 2004 年 之前 的 学生 们 的 出生 城市 是 什么 ？",
            "de": "Welche Stadt ist der Geburtsort von Studenten vor 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friends of people worked in companies other than McKinsey",
            "zh": "在 除了 麦肯锡 之外 的 公司 工作 的 人 的 朋友",
            "de": "Freunde von Leuten, die in anderen Firmen als McKinsey arbeiteten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find birthplace of student with last day other than 2004",
            "zh": "找到 最后 一天 不 在 2004 年 的 学生 的 出生地",
            "de": "Finden Sie den Geburtsort eines Schülers mit einem anderen letzten Tag als 2004"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which person has the most number of friends",
            "zh": "哪个 人 拥有 最多 的 朋友",
            "de": "Welche Person hat die meisten Freunde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students started after Alice left",
            "zh": "爱丽丝 离开 后 学生 们 开始 了 什么",
            "de": "Welche Studenten haben angefangen nachdem Alice gegangen ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friend of employee whose start date after 2004",
            "zh": "开始 日期 是 在 2004 年 之后 的 雇员 的 朋友",
            "de": "Freund eines Angestellten dessen Anfangsdatum nach 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )"
        },
        "question": {
            "en": "people who were born before Alice started her job",
            "zh": "在 爱丽丝 开始 工作 之前 出生 的 人",
            "de": "Personen, die geboren wurden bevor Alice mit ihrem Job anfing"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee quit their job last",
            "zh": "哪个 员工 最 晚 离职 ？",
            "de": "Welcher Angestellter hat seinen Job als letztes gekündigt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with students whose start date is at most 2004",
            "zh": "谁 是 开始 日 最晚 在 2004 年 的 学生 的 朋友 ？",
            "de": "Wer ist mit Studenten befreundet, deren Startdatum höchstens 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what's the relationship status of the student that is leaving her job after 2004",
            "zh": "在 2004 年 后 离开 她 的 工作 的 学生 的 情感 状况 是 什么 ？",
            "de": "Was ist der Beziehungsstatus des Studenten, der nach 2004 seinen Job verlaesst?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friends of students not starting in 2004",
            "zh": "不是 2004 年 入学 的 学生 的 朋友",
            "de": "Freunde von Studenten die nicht in 2004 anfangen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string !type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what university does the 180 cm tall person go to",
            "zh": "那个 身高 １ 米 ８ ０ 的 人 去 哪 所 大学 ？",
            "de": "Auf welche Universität geht die 180 cm große Person?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what gender are employees who have a start date of 2004 or greater",
            "zh": "于 2004 年 及 以后 入职 的 员工 的 性别",
            "de": "Welches Geschlecht haben Angestellte deren Startdatum 2004 oder später ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "find me all people born after 2004",
            "zh": "给 我 找 找 所有 在 2004 后 出生 的 人",
            "de": "Welche Personen wurden alle nach 2004 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "whose relationship status is single",
            "zh": "谁 的 现状 是 单身",
            "de": "Wessen Beziehungsstatus ist Single"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employee with last day before Alice's start date",
            "zh": "找出 离职 的 最后 一天 在 爱丽丝 开始 日期 之前 的 雇员 。",
            "de": "Welcher Mitarbeiter hat den letzten Tag vor Alices Anfangsdatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string !type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find fields of study for those 180 cm tall",
            "zh": "找到 那些 身高 180 公分 的 人 的 学习 领域",
            "de": "Welche Studienfächer sind für 180 cm große?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the birthdays of employees who left before 2004",
            "zh": "在 ２ ０ ０ ４ 年 之前 离职 的 雇员 的 生日 是 多少 ？",
            "de": "Was sind die Geburtstage von Mitarbeitern, die vor 2004 gegangen sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friend of employee whose start date not after 2004",
            "zh": "入职 不 晚于 2004 年 的 员工 的 朋友",
            "de": "Freund des Mitarbeiters, dessen Eintrittstermin nicht nach 2004 liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "find the friends of single status people",
            "zh": "找 找 单身 的 人",
            "de": "finde die Freunde von Personen mit dem Beziehungsstatus Single"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who finish with Alice",
            "zh": "跟 爱丽丝 一起 结束 的 员工",
            "de": "Mitarbeiter, die zusammen mit Alice aufhören"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that stopped working when Alice did or after",
            "zh": "和 艾莉丝 同时 或 之后 停止 工作 的 人们",
            "de": "Leute, die zusammen mit Alice aufgehört haben oder später"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who started before Alice quit her job",
            "zh": "在 爱丽丝 辞去 工作 之前 开始 的 学生",
            "de": "Studenten, die angefangen haben, bevor Alice gekündigt hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what person is a friend of a student that started after 2004",
            "zh": "什么 人 是 2004 年 以后 开始 的 学生 的 朋友",
            "de": "Welche Person is mit jemandem befreundet, der nach 2004 begann?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )"
        },
        "question": {
            "en": "who is the shortest person",
            "zh": "谁 是 最矮 的 人",
            "de": "Wer ist die kleinste Person"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students who attend Alice's university",
            "zh": "找出 在 爱丽丝 的 大学 上学 的 学生",
            "de": "Finde Studenten, die Alice's Universität besuchen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students whose end date is on or before Alice's birthdate",
            "zh": "结束 日期 是 在 爱丽丝 生日 或 之前 的 学生 们",
            "de": "Studenten deren Enddatum an oder vor Alice`s Geburtstag ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who started in either 2004 or 2010",
            "zh": "在 2004 年 或者 2010 年入 职 的 员工",
            "de": "Mitarbeiter, die 2004 oder 2010 angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "people who are single and 180 cm tall",
            "zh": "单身 ， 180 厘米 高 的 人",
            "de": "Personen, die single und 180cm gross sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "who was born after 2004",
            "zh": "谁 是 在 2004 之后 出生 的",
            "de": "Wer wurde nach 2004 geboren"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find the gender of employees with a start date not equal to 2004",
            "zh": "找到 不是 在 2004 年 开始 （ 工作 ） 的 员工 们 的 性别",
            "de": "Finde das Geschlecht der Angestellten deren Startdatum nicht 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "in which city were not more than two people born",
            "zh": "哪个 城市 是 没有 两个 以上 的 人 出生 的 ？",
            "de": "In welcher Stadt wurden nicht mehr als zwei Menschen geboren"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )"
        },
        "question": {
            "en": "who is taller than Alice",
            "zh": "谁 比 爱丽丝 高 ？",
            "de": "Wer ist größer als Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "what people are friends with Alice and also have a relationship status of single",
            "zh": "哪 一些 艾丽丝 的 朋友 同时 也 是 感情 状况 单身 的 人 ？",
            "de": "Welche Leute sind single und mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "find mutual friends of Alice",
            "zh": "找到 爱丽丝 的 共同 朋友",
            "de": "Finde gemeinsame Freunde von Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )"
        },
        "question": {
            "en": "find people who have more than two relationship statuses",
            "zh": "找出 有 多于 两种 感情 状态 的 人们",
            "de": "Finde Leute, die mehr als zwei Beziehungsstati haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "people that are at most 180 cm tall",
            "zh": "最高 180 公分 的 人",
            "de": "Menschen, die höchstens 180 cm groß sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of the employee whose start date is in 2004",
            "zh": "开始 日期 是 2004 年 的 员工 的 性别 是 什么",
            "de": "Was ist das Geschlecht des Mitarbeiters, dessen Startdatum im Jahr 2004 liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the birth city of two people",
            "zh": "找到 两个 人 的 出生 城市",
            "de": "Finde die Geburtsstadt zweier Menschen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employee whose start date is larger than 2004",
            "zh": "在 2004 年 之后 入职 的 人 的 感情 状态",
            "de": "Was ist der Beziehungsstatus des Mitarbeiters, dessen Startdatum nach 2004 liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "what people share the birthdate of Alice and have a height of 180 cm",
            "zh": "什么 人 和 阿丽丝 的 生日 一样 且 有 一个一米 八 的 高度 ？",
            "de": "Welche Leute haben das gleiche Geburtsdatum wie Alice und sind 1,8m groß?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what person is the same gender as the 180 cm tall person",
            "zh": "什么 人 和 那个 一米 八高 的 人 是 一样 的 性别 ？",
            "de": "Welche Person ist das gleiche Geschlecht wie die 180 cm große Person?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who started after 2004 or 2010",
            "zh": "在 2004 年 或 2010 年 之后 开始 的 学生",
            "de": "Studenten, die nach 2004 oder 2010 angefangen haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with a start date that is later than 2004",
            "zh": "找到 开始 日 在 2004 年 后 的 员工",
            "de": "Finde Angestellte deren Startdatum nach 2004 ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "what cities were people born in 2004 born in",
            "zh": "在 2004 年 出生 的 人 是 在 哪个 城市 出生 的 ？",
            "de": "In welche Städte sind Menschen in 2004 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friend of employee whose end date is not 2004",
            "zh": "结束 日期 不是 2004 年 的 员工 的 朋友",
            "de": "Freund eines Mitarbeiters, dessen Enddatum nicht 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "what male is friends with Alice",
            "zh": "哪位 男性 跟 爱丽丝 是 朋友 ？",
            "de": "Welcher Mann ist mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "relationship status of employees who finish before 2004",
            "zh": "在 2004 年前 完工 的 员工 的 感情 状态",
            "de": "Beziehungsstatus von Mitarbeitern, die vor 2004 aufgehört haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find students friends not attending brown university",
            "zh": "找到 没有 在 布朗 大学 上学 的 学生 的 朋友",
            "de": "Finde Freunde von Studenten, die nicht zur Brown University gehen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students started no later than 2004",
            "zh": "哪些 学生 在 2004 年 或者 以前 开始 上学 ？",
            "de": "Welche Studenten fingen nicht spaeter als 2004 an?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "a student with the most recent end date",
            "zh": "有 最近 结束 日期 的 一个 学生",
            "de": "ein Student mit dem letzten Enddatum"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find the people joined work after Alice's birth",
            "zh": "找出 在 爱丽丝 出生 后 加入 工作 的 人们",
            "de": "Finden Sie die Personen, die nach Alice' Geburt ihre Arbeit begonnen haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find an employee whom has a start date later than the end date of student Alice",
            "zh": "找到 一个 开始 日期 晚于 学生 爱丽丝 结束 日期 的 员工",
            "de": "Suche ein Mitarbeiter wessen Anfangs Termin nach dem Ende Termin von Alice ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )"
        },
        "question": {
            "en": "friends of friends of people born in New York",
            "zh": "纽约 出生 的 人 的 朋友 的 朋友",
            "de": "Freunde von Freunden von in New York geborenen Menschen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the relationship status of no more than two people",
            "zh": "找出 不 多于 两个 人 的 感情 状态",
            "de": "Finden Sie den Beziehungsstatus von nicht mehr als zwei Personen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "which women are 180 cm tall",
            "zh": "哪个 女人 身高 180 厘米",
            "de": "welche Frauen sind 180 cm groß"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "Alice's 6 foot tall friend",
            "zh": "爱丽丝 身高 为 6 英尺 的 朋友",
            "de": "Alices 6 Fuß großer Freund"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people that stopped working when Alice was born or after",
            "zh": "在 爱丽丝 出生 之后 停止 工作 的 人",
            "de": "Leute, die aufhörten zu arbeiten, als Alice geboren wurde oder danach"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees had their last day no later than Alice's graduation",
            "zh": "在 爱丽丝 毕业 之前 结束 工作 的 人",
            "de": "Welche Mitarbeiter hatten ihren letzten Tag nicht später als Alice Abschluss"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what gender are the working people that are not software engineers",
            "zh": "非 软件 工程师 的 员工 的 性别",
            "de": "Welches Geschlecht haben die Werktätigen, die keine Software-Ingenieure sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what people are friend with students who have a start date later than 2004",
            "zh": "什么 人 是 开始 日 在 2004 年 以后 的 学生 的 朋友 ？",
            "de": "Welche Leute sind mit Studenten befreundet, die ein Startdatum nach 2004 haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "which student that does not study computer science was born in this city",
            "zh": "哪 一个 不 学习 电脑 科学 的 学生 是 出生 在 这座 城市 的 ？",
            "de": "Welcher Student der nicht Informatik studiert, wurde in dieser Stadt geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people who have joined before Alice quits her job",
            "zh": "在 爱丽丝 离职 前 加入 的 人",
            "de": "Leute die angefangen haben bevor Alice ihre Arbeit gekündigt hat"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ) ) )"
        },
        "question": {
            "en": "what is the total height of a person",
            "zh": "一个 人 的 总 身高 是 多少 ？",
            "de": "Wie groß ist eine Person insgesamt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what students have a start date that is no later than student Alice's end date",
            "zh": "开始 日期 不晚 于 学生 艾丽丝 的 结束 日期 的 学生 是 哪些 ？",
            "de": "Welche Studenten haben ein Startdatum das nicht nach dem Enddatum der Studentin Alice liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people working with McKinsey or google",
            "zh": "在 麦肯锡 或谷歌 工作 的 人",
            "de": "Leute, die mit McKinsey oder Google arbeiten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what gender is the employee who is not a software engineer",
            "zh": "那个 不是 软件 工程师 的 雇员 的 性别 是 什么 ？",
            "de": "Welches Geschlecht hat der Angestellte, der kein Software Entwickler ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "people who joined their work with or after Alice",
            "zh": "和 艾丽丝 一起 或者 之后 加入 他们 工作 的 人们",
            "de": "Welche Personen haben ihre Stelle mit oder nach Alice angetreten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "what student started school before 2004 or 2010",
            "zh": "哪些 是 在 2004 年 或者 2010 年前 开始 学习 的 学生 ？",
            "de": "Welcher Student hat vor 2004 oder 2010 mit der Schule begonnen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees who have a start date that is either less than 2004 or 2010",
            "zh": "找到 开始 日 在 2004 年前 或 2010 年前 的 员工",
            "de": "Finde Angestellte, die ein früheres Startdatum haben als 2004 oder 2010"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who has the most jobs",
            "zh": "谁 拥有 最多 的 工作",
            "de": "Wer hat die meisten Jobs"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "an employee with the least job titles",
            "zh": "职称 最少 的 员工",
            "de": "ein Angestellter mit den wenigsten Berufsbezeichnungen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birthplace of a student ending before or in 2004",
            "zh": "一个 在 2004 年 或者 之前 结束 的 学生 的 出生地点",
            "de": "Geburtsort eines Studenten, der vor oder im Jahr 2004 endete"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people who are friends of employees with a 2004 end date",
            "zh": "有 朋友 是 在 2004 年 结束 工作 的 员工 的 人",
            "de": "Personen, die Freunde von Mitarbeitern mit einem Enddatum von 2004 sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who is enrolled on the day of Alice's birthday",
            "zh": "在 爱丽丝 生日 那天 注册 的 学生",
            "de": "Welcher Student wurde an Alice's Geburtstag eingeschrieben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students graduate in 2004 or 2010",
            "zh": "哪位 学生 是 在 2004 或 2010 毕业 的",
            "de": "Welche Studenten machen in 2004 oder 2010 ihren Abschluss?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friend of student whose end date is before 2004",
            "zh": "在 2004 年前 毕业 的 学生 们 的 朋友",
            "de": "Freund eines Studenten, dessen Enddatum vor 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employee starting earlier than Alice's last day",
            "zh": "找 一位 工人 就职 的 时间 在 阿 丽斯 离职 之前",
            "de": "Finde einen Angestellten, der vor Alices letztem Tag eingestellt wurde."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthplace ) ( string = ) en.city.new_york ) )"
        },
        "question": {
            "en": "any male born in New York",
            "zh": "任何 出生 在 纽约 的 男性",
            "de": "Welche Männer wurde in New York geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )"
        },
        "question": {
            "en": "what people is Alice not friends with",
            "zh": "谁 不 和 爱丽丝 是 朋友",
            "de": "Mit welchen Personen ist Alice nicht befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find people 180 cm tall born in 2004",
            "zh": "找出 身高 1 米 80 在 2004 年 出生 的 人 。",
            "de": "Welche Person ist 180 cm groß und in 2004 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which people have the same gender as fewer than two people",
            "zh": "和 少于 两个 人 性别 一样 性别 的 人们 是 哪些 ？",
            "de": "Welche Personen haben dasselbe Geschlecht wie weniger als zwei Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "which people born in 2004 are 180 cm tall",
            "zh": "哪些 在 2004 年 出生 的 人 的 身高 是 180 厘米 ？",
            "de": "Welche Personen, die 2004 geboren wurden, sind 180cm gross?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is a person whose start date was after 2004 friends with",
            "zh": "开始 日期 是 在 2004 年 之后 的 一个 人 和 谁 是 朋友 ？",
            "de": "Mit wem ist eine Person deren Startdatum nach 2004 war, befreundet"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the least common birthplace",
            "zh": "找到 最 不 常见 的 出生地",
            "de": "Finde den am wenigsten üblichen Geburtsort"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of employee with title other than software engineer",
            "zh": "职称 不是 软件 工程师 的 雇员 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht vom Angestellten mit einem anderen Titel als Sofwareentwickler?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students whose graduation year is at least 2004 or 2010",
            "zh": "毕业 时间 至少 是 2004 年 或者 2010 年 的 学生",
            "de": "Studenten, die den Schulabschluss mindestens in 2004 oder 2010 gemacht haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status for two people",
            "zh": "两个 人 的 感情 状态 是 什么 ？",
            "de": "Wie ist der Beziehungsstatus für zwei Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "find students whose fields are computer science or history",
            "zh": "找出 专业 是 计算机科学 或 历史 的 学生 。",
            "de": "Finde Studenten, deren Fachgebiet entweder Informatik oder Geschichte ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "who is 180 cm tall and friends with Alice",
            "zh": "谁 有 180 厘米 高 并且 是 爱丽丝 的 朋友",
            "de": "Wer ist 180 cm groß und befreundet mit Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees starting contemporaneous to Alice",
            "zh": "和 爱丽丝 同时 开始 工作 的 员工",
            "de": "Angestellte die gleichzeitig mit Alice starten"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is friends with the student who began school later than 2004",
            "zh": "在 2004 年 以后 上学 的 学生 有 哪些 朋友 ？",
            "de": "Wer ist mit dem Schüler befreundet, der später als 2004 in die Schule kam?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee started after student Alice left",
            "zh": "哪些 员工 在 爱丽丝 离职 之后 开始 工作 的 ？",
            "de": "Welcher Angestellter hat angefangen, nachdem die Studentin Alice gegangen ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "find the friends of students that did not graduate in 2004",
            "zh": "找到 2004 年 没有 毕业 的 学生 的 朋友",
            "de": "Finde die Freunde von Studenten die nicht in 2004 abgeschlossen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose end date is not before 2004",
            "zh": "2004 年 或者 以后 退出 的 员工",
            "de": "Arbeitnehmer, dessen Enddatum nicht vor 2004 liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string !type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "who is the employer of the person who is 180 cm tall",
            "zh": "那个 身高 180 厘米 的 人 的 雇主 是 谁 ？",
            "de": "Wer ist der Arbeitgeber der Person, die 180 cm groß ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee has the earliest end date",
            "zh": "哪个 员工 最早 离职 ？",
            "de": "Welcher Angestellte hat den frühsten Endtermin?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )"
        },
        "question": {
            "en": "men that are friends with Alice",
            "zh": "与 爱丽丝 成为 朋友 的 男人",
            "de": "Männer, die mit Alice befreundet sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "find Alice's friend that was born in 2004",
            "zh": "找到 2004 年 出生 的 爱丽丝 的 朋友",
            "de": "Finde Alices Freund der in 2004 geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )"
        },
        "question": {
            "en": "name a person in at least two relationships",
            "zh": "说出 一个 在 至少 两个 恋爱 关系 中 的 人",
            "de": "Nenne eine Person die in mindestens zwei Beziehungen ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "where were the people that started school in or after 2004 born",
            "zh": "在 2004 年 或者 之后 开始 学习 的 人们 是 在 哪里 出生 的 ？",
            "de": "Wo sind die Menschen geboren, die 2004 oder später eingeschult wurden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "birth place of students whose start date is smaller than 2004 and 2010",
            "zh": "2004 年 或 2010 年前 开始 的 学生 的 出生地 在 哪 ？",
            "de": "Wo ist der Geburtsort von Studenten deren Starttermin vor 2004 und 2010 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "where is the birthplace of the student not going to brown university",
            "zh": "没有 在 布朗 大学 上学 的 学生 的 出生地 在 哪里 ？",
            "de": "Wo ist der Geburtsort des Studenten, der nicht zur Brown University geht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "what is the gender of Alice's friends",
            "zh": "爱丽丝 的 朋友 是 什么 性别",
            "de": "Was ist das Geschlecht von Alices Freunden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "people who are friends of Alice's friends",
            "zh": "爱丽丝 朋友 的 朋友",
            "de": "Wer sind die Freunde von Alices Freunden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the birth city of employees with an end date that is not 2004",
            "zh": "结束 日 不 在 2004 年 的 员工 的 出生 城市 在 哪 ？",
            "de": "Wie lautet die Geburtsstadt von Angestellten mit einem Enddatum, welches nicht 2004 ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "of all the people who are 180 cm tall which of them share birthdays",
            "zh": "所有 那些 一米 八高 的 人 中 ， 他们 里 的 哪些 有 同样 的 生日 ？",
            "de": "Welche der Personen, die 180 cm groß sind, haben an einem gleichen Tag Geburtstag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what is the gender of a 180 cm person",
            "zh": "一位 身高 是 180 厘米 的 人 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht einer 180 cm großen Person?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "what people are friends with Alice and have a birthdate of 2004",
            "zh": "爱丽丝 的 朋友 中 出生日期 在 2004 年 的 是 哪些 ？",
            "de": "Welche Personen sind Freunde von Alice und sind in 2004 geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "is the person whose 180 cm tall a male female or other",
            "zh": "身高 180 公分 的 那个 人 是 男性 还是 女性 还是 其他 ？",
            "de": "Ist die Person, die 180 cm groß ist, männlich, weiblich oder divers?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee ended later than Alice's birthdate",
            "zh": "哪个 雇员 是 在 阿丽丝 的 生日 后 结束 的 ？",
            "de": "Welcher Angestellte hörte später auf als an Alices Geburtsdatum?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "someone 180 cm tall who stopped in 2004",
            "zh": "在 2004 年 停止 的 身高 是 180 厘米 的 某人",
            "de": "jemand, der 180 cm groß ist und 2004 aufhörte"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students started no later than Alice did",
            "zh": "不晚 于 爱丽丝 开始 的 学生 们 是 哪些 ？",
            "de": "Welche Studenten fingen nicht später an als Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose start date is not after birth date of Alice",
            "zh": "开始 日期 不晚 于 爱丽丝 出生日期 的 雇员",
            "de": "Mitarbeiter, dessen Anfangsdatum nicht nach dem Geburtsdatum von Alice liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )"
        },
        "question": {
            "en": "what university did Alice stop attending in 2004",
            "zh": "爱丽丝 在 2004 年 退出 了 什么 大学 ？",
            "de": "Welche Universität hat Alice in 2004 aufgehört zu besuchen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "what gender has less than two people",
            "zh": "哪个 性别 有 少于 两人 ？",
            "de": "Welches Geschlecht haben weniger als zwei Leute?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student who finishes earlier than Alice enrolment",
            "zh": "哪个 学生 结束 得 比 阿丽丝 注册 还 早 ？",
            "de": "Student, der vor Alice' Immatrikulation abschließt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "who has friends born in 2004",
            "zh": "谁 有 出生 在 2004 的 朋友 ？",
            "de": "Wer hat Freunde, die 2004 geboren wurden?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "people who are currently in a relationship",
            "zh": "目前 处于 恋爱 关系 中 的 人",
            "de": "Personen, die derzeit in einer Beziehung sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students graduate no later than 2004",
            "zh": "哪些 学生 毕业 不晚 过 2004 ？",
            "de": "Welche Studenten schließen nicht nach 2004 ab?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.field.computer_science en.field.history ) )"
        },
        "question": {
            "en": "people who study computer science or history",
            "zh": "学习 计算机科学 或 历史 的 人",
            "de": "Personen, die Informatik oder Geschichte studieren."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee was terminated when Alice was born",
            "zh": "哪个 雇员 是 在 阿丽丝 出生 时 被 解雇 的 ？",
            "de": "Wecher Angestellter wurde gekündigt, als Alice geboren wurde?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "a friend of Alice friend",
            "zh": "爱丽丝 朋友 的 朋友",
            "de": "Ein Freund von Alices Freund"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( call SW.getProperty en.person.alice ( string height ) ) ) )"
        },
        "question": {
            "en": "what person has the same height as Alice",
            "zh": "什么 人 和 爱丽丝 有 同样 的 高度",
            "de": "Welche Person hat die gleiche Körpergröße wie Alice?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "find the gender of fewer than two people",
            "zh": "找到 少于 两个 人 的 性别",
            "de": "Was ist das Geschlecht von einer Menge an Personen, deren Anzahl weniger als zwei ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )"
        },
        "question": {
            "en": "in what city was Alice's friend born",
            "zh": "爱丽丝 的 朋友 出生 在 哪个 城市",
            "de": "In welcher Stadt wurde Alices Freund/Freundin geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employee started after or during when Alice started school",
            "zh": "哪个 雇员 在 阿丽丝 开始 学校 之后 或 其间 开始 的 ？",
            "de": "Welche/r Angestellte/Angestellter trat während oder nach Alices Schulbeginn ein?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people that are friends with someone that started working in or after 2004",
            "zh": "与 2004 年 或 之后 开始 工作 的 人 成为 朋友 的 人",
            "de": "Welche Personen sind befreundet mit jemandem, der/die in 2004 oder danach anfingen zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "friends of employees who start before or in 2004",
            "zh": "在 2004 年 或者 以前 入职 的 员工 的 朋友",
            "de": "Freunde von Mitarbeitern, die vor oder in 2004 anfangen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "which people are friends with employees whose last day of work was no earlier than 2004",
            "zh": "哪些 人 是 和 他们 的 最后 一天 工作 不早 于 2004 的 雇员 是 朋友 ？",
            "de": "Welche Personen sind mit Mitarbeitern befreundet, deren letzter Arbeitstag nicht vor 2004 lag?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "a friend of an employee who did not quit in 2004",
            "zh": "没有 在 2004 年 辞职 的 一位 雇员 的 一位 朋友",
            "de": "Welche Personen sind mit Angestellten befreundet, die in 2004 nicht kuendigten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )"
        },
        "question": {
            "en": "find someone born during or after 2004",
            "zh": "找出 在 2004 年 中 或者 之后 出生 的 某人",
            "de": "Finde jemanden, der in oder nach 2004 geboren ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "people that are friends with the new employees that starts after 2004",
            "zh": "和 在 2004 年 之后 开始 的 新 雇员 是 朋友 的 人们",
            "de": "Personen die mit neuen Mitarbeitern befreundet sind, die nach 2004 anfangen."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee with one employer",
            "zh": "有 一个 雇主 的 雇员",
            "de": "Angestellter mit einem Arbeitgeber"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )"
        },
        "question": {
            "en": "what people have a height of 180 and are friends with Alice",
            "zh": "哪些 人 的 身高 是 180 厘米 并且 是 艾丽丝 的 朋友 ？",
            "de": "Welche Personen haben eine Körpergröße von 180 und sind mit Alice befreundet?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "what gender are those who are 180 cm tall",
            "zh": "那些 一米 八高 的 是 什么 性别 ？",
            "de": "Welches Geschlecht haben diejenigen, die 180 cm groß sind?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "friends of people studied in universities other than brown university",
            "zh": "在 布朗 大学 以外 的 学校 学习 过 的 人们 的 朋友 们",
            "de": "Freunde von Leuten die in anderen Universitäten als der Brown Universität studiert haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )"
        },
        "question": {
            "en": "find all people who are friends with Alice and are 180 cm tall",
            "zh": "找出 所有 身高 是 180 厘米 的 艾丽丝 的 朋友",
            "de": "Finde alle Personen die mit Alice befreundet sind und 180 cm groß sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )"
        },
        "question": {
            "en": "find all people that are single and online",
            "zh": "找出 所有 单身 并且 在线 的 人们",
            "de": "Finde alle Personen die single und online sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "a worker who started before Alice left",
            "zh": "在 艾丽丝 离开 前 开始 的 一个 员工",
            "de": "ein Arbeiter, der anfing, bevor Alice ging"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people who studied subjects other than computer science",
            "zh": "研究 计算机科学 以外 的 科目 的 人",
            "de": "Personen, die andere Fächer als Informatik studiert haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ) )"
        },
        "question": {
            "en": "which gender do no more than 2 people identify as",
            "zh": "哪个 性别 不 超过 2 人 被 认定 为",
            "de": "Als welches Geschlecht identifizieren sich nicht mehr als 2 Personen?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "who is the student whose end date was at least 2004 friends with",
            "zh": "谁 是 那个 结束 日 至少 是 2004 的 学生 做 朋友 来 的 ？",
            "de": "Mit wem ist der Student befreundet, dessen Enddatum mindestens 2004 was?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )"
        },
        "question": {
            "en": "find people who are 180 cm tall and single",
            "zh": "找到 身高 一米 八 并且 单身 的 人",
            "de": "finde Menschen, die 180 cm groß und alleinstehend sind"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "student whose university of is same as that of student Alice",
            "zh": "跟 爱丽丝 在 同一 间 大学 的 学生",
            "de": "Student, dessen Universitaet die selbe ist wie die, der Studentin Alice"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the relationship status of employees whose last day was after 2004",
            "zh": "在 2004 年 以后 的 员工 的 关系 现状 是 怎样",
            "de": "Wie ist der Beziehungsstatus der Mitarbeiter, deren letzter Tag nach 2004 war?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "city of birth for people employed since 2004",
            "zh": "自 2004 年 就 受 雇用 的 人 的 出生 城市",
            "de": "Geburtsort der seit 2004 beschäftigten Personen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which students are software engineers or program managers",
            "zh": "哪些 学生 是 软件 工程师 或 项目经理",
            "de": "Welche Schüler sind Softwareentwickler oder Programmmanager?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) )"
        },
        "question": {
            "en": "who is employer of Alice",
            "zh": "谁 是 爱丽丝 的 雇主",
            "de": "der Arbeitgeber von Alice ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )"
        },
        "question": {
            "en": "find the birthplaces of people born in 2004",
            "zh": "找到 2004 年 出生 的 人 的 出生地",
            "de": "Finden Sie die Geburtsorte von Menschen, die im Jahr 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "people who started in 2004 and are 180 cm tall",
            "zh": "哪些 人 是 在 2004 开始 且 180 厘米 高 的",
            "de": "Menschen, die 2004 angefangen haben und 180 cm groß sind."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees who finished before Alice started",
            "zh": "在 Alice 开始 之前 完成 的 员工",
            "de": "Angestellte die aufgehört haben bevor Alice startete"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "what employees have an end date no later than 2004",
            "zh": "那些 雇员 有 一个 结束 日 不 晚于 2004 ？",
            "de": "Welche Angestellten haben ein Enddatum von nicht spaeter als 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )"
        },
        "question": {
            "en": "what is the gender of a person who is single",
            "zh": "那个 单身 人 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht einer Person, die Single ist"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employees finishing when or after Alice starts",
            "zh": "在 阿丽丝 开始 或 之后 完成 的 那些 雇员 吗 ？",
            "de": "Angestellte, die aufhören, sobald oder nachdem Alice anfängt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employees with two employers or less",
            "zh": "找到 两个 或 更少 雇主 的 雇员",
            "de": "Welche Angestellten haben zwei oder weniger Arbeitgeber?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of working people that did not stop in 2004",
            "zh": "没 在 2004 停止 的 那些 工作人员 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht der Erwerbstätigen, die 2004 nicht aufgehört haben?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee ended in 2004 or 2010",
            "zh": "哪位 员工 在 2004 年 或 2010 年 结束",
            "de": "Welcher Mitarbeiter hat 2004 oder 2010 aufgehört?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employee quit school before Alice started",
            "zh": "哪个 员工 在 爱丽丝 开始 之前 退学",
            "de": "Welcher Angestellte brach die Schule ab, bevor Alice anfing?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find a person who is 180 cm or taller",
            "zh": "找 一个 180 厘米 或 更 高 的 人",
            "de": "Finde eine Person die 180 cm oder größer ist."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "find employee who works with Alice",
            "zh": "找到 和 爱丽丝 一起 工作 的 人",
            "de": "Finde einen Angestellten, der mit Alice zusammenarbeitet."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people who joined their studies before 2011",
            "zh": "在 2011 年前 加入 研究 的 人",
            "de": "Personen die ihr Studium vor 2011 angefangen haben."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose start date is after start date of student Alice",
            "zh": "开始 日期 在 学生 爱丽丝 之后 的 员工",
            "de": "Angestellter, dessen Anfangsdatum nach dem Anfangsdatum der Studentin Alice liegt."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "relationship status of students who started no earlier than 2004",
            "zh": "不早 于 2004 年 开始 的 学生 们 的 感情 状态",
            "de": "Wie ist der Beziehungsstatus der Studenten die nicht vor 2004 starteten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "friend of Alice with birthdate in 2004",
            "zh": "生日 在 2004 年 的 爱丽丝 的 朋友",
            "de": "Welche Freunde von Alice haben ihren Geburtstag in 2004?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students graduated after 2004 or 2010",
            "zh": "哪些 学生 是 在 2004 年 后 或 2010 年 后 毕业 的 ？",
            "de": "Welche Studenten haben nach 2004 oder 2010 ihren Abschluss gemacht?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "what is the gender of the employee who is not employed by McKinsey",
            "zh": "没有 被 麦肯锡 雇用 的 员工 的 性别 是 什么 ？",
            "de": "Was ist das Geschlecht des Mitarbeiters, der nicht bei McKinsey angestellt ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )"
        },
        "question": {
            "en": "people who have a birthday on the same day Alice started her job",
            "zh": "生日 和 爱丽丝 开始 工作 的 日期 是 同一天 的 人",
            "de": "Leute, die am selben Tag Geburtstag haben, an dem Alice ihren Job angefangen hat."
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "which employees work for McKinsey or google",
            "zh": "哪些 员工 为 麦肯锡 或谷歌 工作",
            "de": "Welche Mitarbeiter arbeiten für McKinsey oder Google"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string !type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )"
        },
        "question": {
            "en": "what are genders of students whose last day is before 2004",
            "zh": "最后 一天 是 早于 2004 年 的 学生 们 的 性别 是 什么 ？",
            "de": "was sind die Geschlechter der Studenten, deren letzter Tag vor 2004 liegt?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "which students went to no more two universities",
            "zh": "哪些 学生 去 了 不 超过 两个 大学 ？",
            "de": "Welche Studenten haben nicht mehr als zwei Universitäten besucht"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.concat en.person.alice en.person.bob ) )"
        },
        "question": {
            "en": "find Alice or Bob",
            "zh": "找到 爱丽丝 或 鲍勃",
            "de": "Finde Alice oder Bob"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "people that stopped school before 2004",
            "zh": "在 2004 前 停学 的 人",
            "de": "Personen, die vor 2004 mit der Schule aufgehoert haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "who do the most people work for",
            "zh": "大多数 人 是 为 谁 工作 呀 ？",
            "de": "Für wen arbeiten die meisten Leute?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "whose end date is 2004 and is 180 cm tall",
            "zh": "哪个 人 的 结束 日 是 2004 且 是 一米 八 身高 ？",
            "de": "Wessen Enddatum ist 2004, der 180cm gross ist?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string !type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "job titles of people who are 180 cm tall",
            "zh": "180 厘米 高 的 人 的 职称",
            "de": "Berufsbezeichnungen von Personen mit einer Körpergröße von 180 cm"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )"
        },
        "question": {
            "en": "students who started before or on Alice's birthdate",
            "zh": "在 爱丽丝 的 出生日期 或 之前 开始 的 学生",
            "de": "Studenten, die vor oder an Alices Geburtstag angefangen haben"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string !type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )"
        },
        "question": {
            "en": "find relationship status of employees starting in 2004 or earlier",
            "zh": "查找 从 2004 年 或 更 早 开始 的 员工 关系 状态",
            "de": "Finde den Beziehungsstatus der Mitarbeiter, die in 2004 oder frueher beginnen"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )"
        },
        "question": {
            "en": "who was born on start date of Alice",
            "zh": "谁 是 在 爱丽丝 开始 的 日期 出生 的",
            "de": "Wer wurde am Startdatum von Alice geboren?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )"
        },
        "question": {
            "en": "who did Alice start working for in 2004",
            "zh": "爱丽丝 在 2004 开始 为 谁 工作 呀 ？",
            "de": "Für wen hat Alice in 2004 angefangen zu arbeiten?"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "an employee starting when Alice was born",
            "zh": "在 爱丽丝 出生 的 时候 开始 的 员工",
            "de": "Ein Mitarbeiter der anfaengt als Alice geboren wurde"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string logged_in ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )"
        },
        "question": {
            "en": "online people who were born in 2004",
            "zh": "2004 年 出生 的 在线 人士",
            "de": "Leute online die in 2004 geboren wurden"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )"
        },
        "question": {
            "en": "employee whose end date after end date of student Alice",
            "zh": "结束 日 是 在 学生 爱丽丝 结束 日 之后 的 员工",
            "de": "Mitarbeiter, dessen Enddatum nach dem Enddatum der Studentin Alice liegt"
        }
    },
    {
        "domain": "socialnetwork",
        "mr": {
            "lambda": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string !type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string !type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )"
        },
        "question": {
            "en": "find the birthplace of all people 180 cm tall",
            "zh": "找到 所有 身高 180 公分 的 人 的 出生地",
            "de": "Wo ist der Geburtsort aller 180 cm großen Personen?"
        }
    }
]